
09_Lec_3_Assignment_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002a78  00002aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ab4  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001db8  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000af24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000badf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d6 14 	call	0x29ac	; 0x29ac <main>
      7a:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e6       	ldi	r26, 0x67	; 103
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e6       	ldi	r24, 0x67	; 103
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_initPin+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	9b 83       	std	Y+3, r25	; 0x03
     b44:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	b1 f0       	breq	.+44     	; 0xb7e <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b52:	ea 81       	ldd	r30, Y+2	; 0x02
     b54:	fb 81       	ldd	r31, Y+3	; 0x03
     b56:	22 81       	ldd	r18, Z+2	; 0x02
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	62 2f       	mov	r22, r18
     b5e:	0e 94 c8 05 	call	0xb90	; 0xb90 <GPIO_changePinDir>
     b62:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 23       	and	r24, r24
     b68:	61 f4       	brne	.+24     	; 0xb82 <GPIO_initPin+0x4c>
			ret =
     b6a:	ea 81       	ldd	r30, Y+2	; 0x02
     b6c:	fb 81       	ldd	r31, Y+3	; 0x03
     b6e:	23 81       	ldd	r18, Z+3	; 0x03
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	9b 81       	ldd	r25, Y+3	; 0x03
     b74:	62 2f       	mov	r22, r18
     b76:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <GPIO_changePinDir+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <GPIO_changePinDir+0x8>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <GPIO_changePinDir+0xa>
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	09 f4       	brne	.+2      	; 0xbb2 <GPIO_changePinDir+0x22>
     bb0:	68 c0       	rjmp	.+208    	; 0xc82 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3e 83       	std	Y+6, r19	; 0x06
     bba:	2d 83       	std	Y+5, r18	; 0x05
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <GPIO_changePinDir+0x40>
     bc4:	2d 81       	ldd	r18, Y+5	; 0x05
     bc6:	3e 81       	ldd	r19, Y+6	; 0x06
     bc8:	21 30       	cpi	r18, 0x01	; 1
     bca:	31 05       	cpc	r19, r1
     bcc:	71 f1       	breq	.+92     	; 0xc2a <GPIO_changePinDir+0x9a>
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     bd0:	ea 81       	ldd	r30, Y+2	; 0x02
     bd2:	fb 81       	ldd	r31, Y+3	; 0x03
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	fc 01       	movw	r30, r24
     be0:	e1 59       	subi	r30, 0x91	; 145
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	a0 81       	ld	r26, Z
     be6:	b1 81       	ldd	r27, Z+1	; 0x01
     be8:	ea 81       	ldd	r30, Y+2	; 0x02
     bea:	fb 81       	ldd	r31, Y+3	; 0x03
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	fc 01       	movw	r30, r24
     bf8:	e1 59       	subi	r30, 0x91	; 145
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	ea 81       	ldd	r30, Y+2	; 0x02
     c08:	fb 81       	ldd	r31, Y+3	; 0x03
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <GPIO_changePinDir+0x8c>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <GPIO_changePinDir+0x88>
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c26:	19 82       	std	Y+1, r1	; 0x01
     c28:	2e c0       	rjmp	.+92     	; 0xc86 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c2a:	ea 81       	ldd	r30, Y+2	; 0x02
     c2c:	fb 81       	ldd	r31, Y+3	; 0x03
     c2e:	80 81       	ld	r24, Z
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	fc 01       	movw	r30, r24
     c3a:	e1 59       	subi	r30, 0x91	; 145
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	a0 81       	ld	r26, Z
     c40:	b1 81       	ldd	r27, Z+1	; 0x01
     c42:	ea 81       	ldd	r30, Y+2	; 0x02
     c44:	fb 81       	ldd	r31, Y+3	; 0x03
     c46:	80 81       	ld	r24, Z
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	fc 01       	movw	r30, r24
     c52:	e1 59       	subi	r30, 0x91	; 145
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	01 90       	ld	r0, Z+
     c58:	f0 81       	ld	r31, Z
     c5a:	e0 2d       	mov	r30, r0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <GPIO_changePinDir+0xe6>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <GPIO_changePinDir+0xe2>
     c7a:	84 2b       	or	r24, r20
     c7c:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c7e:	19 82       	std	Y+1, r1	; 0x01
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
}
     c88:	26 96       	adiw	r28, 0x06	; 6
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <GPIO_writePinLogic+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <GPIO_writePinLogic+0x8>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_writePinLogic+0xa>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <GPIO_writePinLogic+0x22>
     cba:	68 c0       	rjmp	.+208    	; 0xd8c <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	3e 83       	std	Y+6, r19	; 0x06
     cc4:	2d 83       	std	Y+5, r18	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	31 f0       	breq	.+12     	; 0xcda <GPIO_writePinLogic+0x40>
     cce:	2d 81       	ldd	r18, Y+5	; 0x05
     cd0:	3e 81       	ldd	r19, Y+6	; 0x06
     cd2:	21 30       	cpi	r18, 0x01	; 1
     cd4:	31 05       	cpc	r19, r1
     cd6:	71 f1       	breq	.+92     	; 0xd34 <GPIO_writePinLogic+0x9a>
     cd8:	5b c0       	rjmp	.+182    	; 0xd90 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cda:	ea 81       	ldd	r30, Y+2	; 0x02
     cdc:	fb 81       	ldd	r31, Y+3	; 0x03
     cde:	80 81       	ld	r24, Z
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	fc 01       	movw	r30, r24
     cea:	e9 58       	subi	r30, 0x89	; 137
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	a0 81       	ld	r26, Z
     cf0:	b1 81       	ldd	r27, Z+1	; 0x01
     cf2:	ea 81       	ldd	r30, Y+2	; 0x02
     cf4:	fb 81       	ldd	r31, Y+3	; 0x03
     cf6:	80 81       	ld	r24, Z
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	fc 01       	movw	r30, r24
     d02:	e9 58       	subi	r30, 0x89	; 137
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	01 90       	ld	r0, Z+
     d08:	f0 81       	ld	r31, Z
     d0a:	e0 2d       	mov	r30, r0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	81 81       	ldd	r24, Z+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <GPIO_writePinLogic+0x8c>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <GPIO_writePinLogic+0x88>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d30:	19 82       	std	Y+1, r1	; 0x01
     d32:	2e c0       	rjmp	.+92     	; 0xd90 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d34:	ea 81       	ldd	r30, Y+2	; 0x02
     d36:	fb 81       	ldd	r31, Y+3	; 0x03
     d38:	80 81       	ld	r24, Z
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	fc 01       	movw	r30, r24
     d44:	e9 58       	subi	r30, 0x89	; 137
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	a0 81       	ld	r26, Z
     d4a:	b1 81       	ldd	r27, Z+1	; 0x01
     d4c:	ea 81       	ldd	r30, Y+2	; 0x02
     d4e:	fb 81       	ldd	r31, Y+3	; 0x03
     d50:	80 81       	ld	r24, Z
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	fc 01       	movw	r30, r24
     d5c:	e9 58       	subi	r30, 0x89	; 137
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	01 90       	ld	r0, Z+
     d62:	f0 81       	ld	r31, Z
     d64:	e0 2d       	mov	r30, r0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	81 81       	ldd	r24, Z+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <GPIO_writePinLogic+0xe6>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <GPIO_writePinLogic+0xe2>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
}
     d92:	26 96       	adiw	r28, 0x06	; 6
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <GPIO_readPinLogic+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <GPIO_readPinLogic+0x8>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	7d 83       	std	Y+5, r23	; 0x05
     db8:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	11 f1       	breq	.+68     	; 0xe0a <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	80 81       	ld	r24, Z
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	fc 01       	movw	r30, r24
     dd6:	e1 58       	subi	r30, 0x81	; 129
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	01 90       	ld	r0, Z+
     ddc:	f0 81       	ld	r31, Z
     dde:	e0 2d       	mov	r30, r0
     de0:	80 81       	ld	r24, Z
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	ea 81       	ldd	r30, Y+2	; 0x02
     de8:	fb 81       	ldd	r31, Y+3	; 0x03
     dea:	81 81       	ldd	r24, Z+1	; 0x01
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_readPinLogic+0x54>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_readPinLogic+0x50>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	ec 81       	ldd	r30, Y+4	; 0x04
     e02:	fd 81       	ldd	r31, Y+5	; 0x05
     e04:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <GPIO_togglePinLogic+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	61 f1       	breq	.+88     	; 0xe94 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e3c:	ea 81       	ldd	r30, Y+2	; 0x02
     e3e:	fb 81       	ldd	r31, Y+3	; 0x03
     e40:	80 81       	ld	r24, Z
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	fc 01       	movw	r30, r24
     e4c:	e9 58       	subi	r30, 0x89	; 137
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	a0 81       	ld	r26, Z
     e52:	b1 81       	ldd	r27, Z+1	; 0x01
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	80 81       	ld	r24, Z
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	fc 01       	movw	r30, r24
     e64:	e9 58       	subi	r30, 0x89	; 137
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	01 90       	ld	r0, Z+
     e6a:	f0 81       	ld	r31, Z
     e6c:	e0 2d       	mov	r30, r0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	ea 81       	ldd	r30, Y+2	; 0x02
     e74:	fb 81       	ldd	r31, Y+3	; 0x03
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <GPIO_togglePinLogic+0x68>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <GPIO_togglePinLogic+0x64>
     e8c:	84 27       	eor	r24, r20
     e8e:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	28 97       	sbiw	r28, 0x08	; 8
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	8a 83       	std	Y+2, r24	; 0x02
     ebc:	6b 83       	std	Y+3, r22	; 0x03
     ebe:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	38 87       	std	Y+8, r19	; 0x08
     ecc:	2f 83       	std	Y+7, r18	; 0x07
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
     ed0:	98 85       	ldd	r25, Y+8	; 0x08
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	31 f0       	breq	.+12     	; 0xee2 <GPIO_initPort+0x3c>
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	21 30       	cpi	r18, 0x01	; 1
     edc:	31 05       	cpc	r19, r1
     ede:	79 f0       	breq	.+30     	; 0xefe <GPIO_initPort+0x58>
     ee0:	1c c0       	rjmp	.+56     	; 0xf1a <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	fc 01       	movw	r30, r24
     eee:	e1 59       	subi	r30, 0x91	; 145
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	01 90       	ld	r0, Z+
     ef4:	f0 81       	ld	r31, Z
     ef6:	e0 2d       	mov	r30, r0
     ef8:	10 82       	st	Z, r1
		ret = GPIO_OK;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	fc 01       	movw	r30, r24
     f0a:	e1 59       	subi	r30, 0x91	; 145
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	01 90       	ld	r0, Z+
     f10:	f0 81       	ld	r31, Z
     f12:	e0 2d       	mov	r30, r0
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f18:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3e 83       	std	Y+6, r19	; 0x06
     f22:	2d 83       	std	Y+5, r18	; 0x05
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	31 f0       	breq	.+12     	; 0xf38 <GPIO_initPort+0x92>
     f2c:	2d 81       	ldd	r18, Y+5	; 0x05
     f2e:	3e 81       	ldd	r19, Y+6	; 0x06
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	79 f0       	breq	.+30     	; 0xf54 <GPIO_initPort+0xae>
     f36:	1c c0       	rjmp	.+56     	; 0xf70 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	fc 01       	movw	r30, r24
     f44:	e9 58       	subi	r30, 0x89	; 137
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	01 90       	ld	r0, Z+
     f4a:	f0 81       	ld	r31, Z
     f4c:	e0 2d       	mov	r30, r0
     f4e:	10 82       	st	Z, r1
		ret = GPIO_OK;
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	fc 01       	movw	r30, r24
     f60:	e9 58       	subi	r30, 0x89	; 137
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	01 90       	ld	r0, Z+
     f66:	f0 81       	ld	r31, Z
     f68:	e0 2d       	mov	r30, r0
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f6e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
}
     f72:	28 96       	adiw	r28, 0x08	; 8
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <GPIO_changePortDir+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <GPIO_changePortDir+0x8>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3d 83       	std	Y+5, r19	; 0x05
     fa2:	2c 83       	std	Y+4, r18	; 0x04
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	31 f0       	breq	.+12     	; 0xfb8 <GPIO_changePortDir+0x34>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <GPIO_changePortDir+0x50>
     fb6:	1c c0       	rjmp	.+56     	; 0xff0 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	fc 01       	movw	r30, r24
     fc4:	e1 59       	subi	r30, 0x91	; 145
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	01 90       	ld	r0, Z+
     fca:	f0 81       	ld	r31, Z
     fcc:	e0 2d       	mov	r30, r0
     fce:	10 82       	st	Z, r1
		ret = GPIO_OK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	fc 01       	movw	r30, r24
     fe0:	e1 59       	subi	r30, 0x91	; 145
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	01 90       	ld	r0, Z+
     fe6:	f0 81       	ld	r31, Z
     fe8:	e0 2d       	mov	r30, r0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
		ret = GPIO_OK;
     fee:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_writePortLogic+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_writePortLogic+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	31 f0       	breq	.+12     	; 0x1036 <GPIO_writePortLogic+0x34>
    102a:	2c 81       	ldd	r18, Y+4	; 0x04
    102c:	3d 81       	ldd	r19, Y+5	; 0x05
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	79 f0       	breq	.+30     	; 0x1052 <GPIO_writePortLogic+0x50>
    1034:	1c c0       	rjmp	.+56     	; 0x106e <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	fc 01       	movw	r30, r24
    1042:	e9 58       	subi	r30, 0x89	; 137
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	01 90       	ld	r0, Z+
    1048:	f0 81       	ld	r31, Z
    104a:	e0 2d       	mov	r30, r0
    104c:	10 82       	st	Z, r1
		ret = GPIO_OK;
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	0e c0       	rjmp	.+28     	; 0x106e <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	e9 58       	subi	r30, 0x89	; 137
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	01 90       	ld	r0, Z+
    1064:	f0 81       	ld	r31, Z
    1066:	e0 2d       	mov	r30, r0
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	80 83       	st	Z, r24
		ret = GPIO_OK;
    106c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_readPortLogic+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_readPortLogic+0x8>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	7c 83       	std	Y+4, r23	; 0x04
    1090:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e1 58       	subi	r30, 0x81	; 129
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	01 90       	ld	r0, Z+
    10a8:	f0 81       	ld	r31, Z
    10aa:	e0 2d       	mov	r30, r0
    10ac:	80 81       	ld	r24, Z
    10ae:	eb 81       	ldd	r30, Y+3	; 0x03
    10b0:	fc 81       	ldd	r31, Y+4	; 0x04
    10b2:	80 83       	st	Z, r24
	ret = GPIO_OK;
    10b4:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <GPIO_togglePortLogic+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	fc 01       	movw	r30, r24
    10e2:	e1 59       	subi	r30, 0x91	; 145
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	a0 81       	ld	r26, Z
    10e8:	b1 81       	ldd	r27, Z+1	; 0x01
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	fc 01       	movw	r30, r24
    10f6:	e1 59       	subi	r30, 0x91	; 145
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	20 81       	ld	r18, Z
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	fc 01       	movw	r30, r24
    110e:	e1 59       	subi	r30, 0x91	; 145
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	01 90       	ld	r0, Z+
    1114:	f0 81       	ld	r31, Z
    1116:	e0 2d       	mov	r30, r0
    1118:	80 81       	ld	r24, Z
    111a:	82 27       	eor	r24, r18
    111c:	8c 93       	st	X, r24
	ret = GPIO_OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <GPIO_set4msbValue+0x6>
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	fc 01       	movw	r30, r24
    114c:	e9 58       	subi	r30, 0x89	; 137
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	a0 81       	ld	r26, Z
    1152:	b1 81       	ldd	r27, Z+1	; 0x01
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	fc 01       	movw	r30, r24
    1160:	e9 58       	subi	r30, 0x89	; 137
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	01 90       	ld	r0, Z+
    1166:	f0 81       	ld	r31, Z
    1168:	e0 2d       	mov	r30, r0
    116a:	80 81       	ld	r24, Z
    116c:	8f 70       	andi	r24, 0x0F	; 15
    116e:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	fc 01       	movw	r30, r24
    117c:	e9 58       	subi	r30, 0x89	; 137
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	a0 81       	ld	r26, Z
    1182:	b1 81       	ldd	r27, Z+1	; 0x01
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	fc 01       	movw	r30, r24
    1190:	e9 58       	subi	r30, 0x89	; 137
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	01 90       	ld	r0, Z+
    1196:	f0 81       	ld	r31, Z
    1198:	e0 2d       	mov	r30, r0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	82 95       	swap	r24
    11a6:	92 95       	swap	r25
    11a8:	90 7f       	andi	r25, 0xF0	; 240
    11aa:	98 27       	eor	r25, r24
    11ac:	80 7f       	andi	r24, 0xF0	; 240
    11ae:	98 27       	eor	r25, r24
    11b0:	82 2b       	or	r24, r18
    11b2:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	27 97       	sbiw	r28, 0x07	; 7
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	4b 83       	std	Y+3, r20	; 0x03
    11dc:	5c 83       	std	Y+4, r21	; 0x04
    11de:	6d 83       	std	Y+5, r22	; 0x05
    11e0:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	fc 01       	movw	r30, r24
    11f2:	e9 58       	subi	r30, 0x89	; 137
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	01 90       	ld	r0, Z+
    11f8:	f0 81       	ld	r31, Z
    11fa:	e0 2d       	mov	r30, r0
    11fc:	80 81       	ld	r24, Z
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	fc 01       	movw	r30, r24
    120a:	e9 58       	subi	r30, 0x89	; 137
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	01 90       	ld	r0, Z+
    1210:	f0 81       	ld	r31, Z
    1212:	e0 2d       	mov	r30, r0
    1214:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	fc 01       	movw	r30, r24
    1222:	e9 58       	subi	r30, 0x89	; 137
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	a0 81       	ld	r26, Z
    1228:	b1 81       	ldd	r27, Z+1	; 0x01
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	fc 01       	movw	r30, r24
    1236:	e9 58       	subi	r30, 0x89	; 137
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	01 90       	ld	r0, Z+
    123c:	f0 81       	ld	r31, Z
    123e:	e0 2d       	mov	r30, r0
    1240:	90 81       	ld	r25, Z
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	89 2b       	or	r24, r25
    1246:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    1248:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	27 96       	adiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	c8 54       	subi	r28, 0x48	; 72
    1268:	d0 40       	sbci	r29, 0x00	; 0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	fe 01       	movw	r30, r28
    1276:	e9 5b       	subi	r30, 0xB9	; 185
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8a af       	std	Y+58, r24	; 0x3a
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 af       	std	Y+57, r24	; 0x39

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    1286:	fe 01       	movw	r30, r28
    1288:	e9 5b       	subi	r30, 0xB9	; 185
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	09 f4       	brne	.+2      	; 0x1296 <HLCD_init+0x38>
    1294:	88 c2       	rjmp	.+1296   	; 0x17a6 <HLCD_init+0x548>
	{

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    1296:	fe 01       	movw	r30, r28
    1298:	e9 5b       	subi	r30, 0xB9	; 185
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <HLCD_init+0x4c>
    12a8:	80 c2       	rjmp	.+1280   	; 0x17aa <HLCD_init+0x54c>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    12aa:	fe 01       	movw	r30, r28
    12ac:	e9 5b       	subi	r30, 0xB9	; 185
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	01 90       	ld	r0, Z+
    12b2:	f0 81       	ld	r31, Z
    12b4:	e0 2d       	mov	r30, r0
    12b6:	80 81       	ld	r24, Z
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	09 f0       	breq	.+2      	; 0x12be <HLCD_init+0x60>
    12bc:	71 c2       	rjmp	.+1250   	; 0x17a0 <HLCD_init+0x542>
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rsPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    12be:	fe 01       	movw	r30, r28
    12c0:	e9 5b       	subi	r30, 0xB9	; 185
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	fe 01       	movw	r30, r28
    12ce:	e9 5b       	subi	r30, 0xB9	; 185
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	01 90       	ld	r0, Z+
    12d4:	f0 81       	ld	r31, Z
    12d6:	e0 2d       	mov	r30, r0
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
    12da:	9b af       	std	Y+59, r25	; 0x3b
    12dc:	8c af       	std	Y+60, r24	; 0x3c
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8d af       	std	Y+61, r24	; 0x3d
    12e2:	1e ae       	std	Y+62, r1	; 0x3e
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rwPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    12e4:	fe 01       	movw	r30, r28
    12e6:	e9 5b       	subi	r30, 0xB9	; 185
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	01 90       	ld	r0, Z+
    12ec:	f0 81       	ld	r31, Z
    12ee:	e0 2d       	mov	r30, r0
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 5b       	subi	r30, 0xB9	; 185
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	01 90       	ld	r0, Z+
    12fa:	f0 81       	ld	r31, Z
    12fc:	e0 2d       	mov	r30, r0
    12fe:	94 81       	ldd	r25, Z+4	; 0x04
    1300:	fe 01       	movw	r30, r28
    1302:	ff 96       	adiw	r30, 0x3f	; 63
    1304:	80 83       	st	Z, r24
    1306:	fe 01       	movw	r30, r28
    1308:	ff 96       	adiw	r30, 0x3f	; 63
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	fe 01       	movw	r30, r28
    130e:	ff 96       	adiw	r30, 0x3f	; 63
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	82 83       	std	Z+2, r24	; 0x02
    1314:	fe 01       	movw	r30, r28
    1316:	ff 96       	adiw	r30, 0x3f	; 63
    1318:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->enPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    131a:	fe 01       	movw	r30, r28
    131c:	e9 5b       	subi	r30, 0xB9	; 185
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	01 90       	ld	r0, Z+
    1322:	f0 81       	ld	r31, Z
    1324:	e0 2d       	mov	r30, r0
    1326:	81 81       	ldd	r24, Z+1	; 0x01
    1328:	fe 01       	movw	r30, r28
    132a:	e9 5b       	subi	r30, 0xB9	; 185
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	95 81       	ldd	r25, Z+5	; 0x05
    1336:	fe 01       	movw	r30, r28
    1338:	ed 5b       	subi	r30, 0xBD	; 189
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 83       	st	Z, r24
    133e:	fe 01       	movw	r30, r28
    1340:	ed 5b       	subi	r30, 0xBD	; 189
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	fe 01       	movw	r30, r28
    1348:	ed 5b       	subi	r30, 0xBD	; 189
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	fe 01       	movw	r30, r28
    1352:	ed 5b       	subi	r30, 0xBD	; 189
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	13 82       	std	Z+3, r1	; 0x03


			gpioRet = GPIO_initPin(&rsPin);
    1358:	ce 01       	movw	r24, r28
    135a:	cb 96       	adiw	r24, 0x3b	; 59
    135c:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1360:	89 af       	std	Y+57, r24	; 0x39

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    1362:	89 ad       	ldd	r24, Y+57	; 0x39
    1364:	88 23       	and	r24, r24
    1366:	31 f4       	brne	.+12     	; 0x1374 <HLCD_init+0x116>
    1368:	ce 01       	movw	r24, r28
    136a:	cf 96       	adiw	r24, 0x3f	; 63
    136c:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1370:	89 af       	std	Y+57, r24	; 0x39
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <HLCD_init+0x11a>
			else lcdRet = HLCD_NOK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8a af       	std	Y+58, r24	; 0x3a

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    1378:	89 ad       	ldd	r24, Y+57	; 0x39
    137a:	88 23       	and	r24, r24
    137c:	39 f4       	brne	.+14     	; 0x138c <HLCD_init+0x12e>
    137e:	ce 01       	movw	r24, r28
    1380:	8d 5b       	subi	r24, 0xBD	; 189
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1388:	89 af       	std	Y+57, r24	; 0x39
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <HLCD_init+0x132>
			else lcdRet = HLCD_NOK;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8a af       	std	Y+58, r24	; 0x3a

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    1390:	89 ad       	ldd	r24, Y+57	; 0x39
    1392:	88 23       	and	r24, r24
    1394:	69 f4       	brne	.+26     	; 0x13b0 <HLCD_init+0x152>
    1396:	fe 01       	movw	r30, r28
    1398:	e9 5b       	subi	r30, 0xB9	; 185
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	01 90       	ld	r0, Z+
    139e:	f0 81       	ld	r31, Z
    13a0:	e0 2d       	mov	r30, r0
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_initPort>
    13ac:	89 af       	std	Y+57, r24	; 0x39
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <HLCD_init+0x156>
			else lcdRet = HLCD_NOK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	8a af       	std	Y+58, r24	; 0x3a
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e8       	ldi	r26, 0x80	; 128
    13ba:	bf e3       	ldi	r27, 0x3F	; 63
    13bc:	8d ab       	std	Y+53, r24	; 0x35
    13be:	9e ab       	std	Y+54, r25	; 0x36
    13c0:	af ab       	std	Y+55, r26	; 0x37
    13c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	6d a9       	ldd	r22, Y+53	; 0x35
    13c6:	7e a9       	ldd	r23, Y+54	; 0x36
    13c8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ca:	98 ad       	ldd	r25, Y+56	; 0x38
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	89 ab       	std	Y+49, r24	; 0x31
    13de:	9a ab       	std	Y+50, r25	; 0x32
    13e0:	ab ab       	std	Y+51, r26	; 0x33
    13e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e4:	69 a9       	ldd	r22, Y+49	; 0x31
    13e6:	7a a9       	ldd	r23, Y+50	; 0x32
    13e8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ea:	9c a9       	ldd	r25, Y+52	; 0x34
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	2c f4       	brge	.+10     	; 0x1406 <HLCD_init+0x1a8>
		__ticks = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	98 ab       	std	Y+48, r25	; 0x30
    1402:	8f a7       	std	Y+47, r24	; 0x2f
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <HLCD_init+0x226>
	else if (__tmp > 65535)
    1406:	69 a9       	ldd	r22, Y+49	; 0x31
    1408:	7a a9       	ldd	r23, Y+50	; 0x32
    140a:	8b a9       	ldd	r24, Y+51	; 0x33
    140c:	9c a9       	ldd	r25, Y+52	; 0x34
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <HLCD_init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141e:	6d a9       	ldd	r22, Y+53	; 0x35
    1420:	7e a9       	ldd	r23, Y+54	; 0x36
    1422:	8f a9       	ldd	r24, Y+55	; 0x37
    1424:	98 ad       	ldd	r25, Y+56	; 0x38
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	98 ab       	std	Y+48, r25	; 0x30
    1444:	8f a7       	std	Y+47, r24	; 0x2f
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <HLCD_init+0x208>
    1448:	88 ec       	ldi	r24, 0xC8	; 200
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9e a7       	std	Y+46, r25	; 0x2e
    144e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1450:	8d a5       	ldd	r24, Y+45	; 0x2d
    1452:	9e a5       	ldd	r25, Y+46	; 0x2e
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <HLCD_init+0x1f6>
    1458:	9e a7       	std	Y+46, r25	; 0x2e
    145a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	8f a5       	ldd	r24, Y+47	; 0x2f
    145e:	98 a9       	ldd	r25, Y+48	; 0x30
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	98 ab       	std	Y+48, r25	; 0x30
    1464:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	8f a5       	ldd	r24, Y+47	; 0x2f
    1468:	98 a9       	ldd	r25, Y+48	; 0x30
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f7       	brne	.-38     	; 0x1448 <HLCD_init+0x1ea>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <HLCD_init+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1470:	69 a9       	ldd	r22, Y+49	; 0x31
    1472:	7a a9       	ldd	r23, Y+50	; 0x32
    1474:	8b a9       	ldd	r24, Y+51	; 0x33
    1476:	9c a9       	ldd	r25, Y+52	; 0x34
    1478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	98 ab       	std	Y+48, r25	; 0x30
    1482:	8f a7       	std	Y+47, r24	; 0x2f
    1484:	8f a5       	ldd	r24, Y+47	; 0x2f
    1486:	98 a9       	ldd	r25, Y+48	; 0x30
    1488:	9c a7       	std	Y+44, r25	; 0x2c
    148a:	8b a7       	std	Y+43, r24	; 0x2b
    148c:	8b a5       	ldd	r24, Y+43	; 0x2b
    148e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <HLCD_init+0x232>
    1494:	9c a7       	std	Y+44, r25	; 0x2c
    1496:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    1498:	89 ad       	ldd	r24, Y+57	; 0x39
    149a:	88 23       	and	r24, r24
    149c:	51 f4       	brne	.+20     	; 0x14b2 <HLCD_init+0x254>
    149e:	fe 01       	movw	r30, r28
    14a0:	e9 5b       	subi	r30, 0xB9	; 185
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	68 e3       	ldi	r22, 0x38	; 56
    14aa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    14ae:	8a af       	std	Y+58, r24	; 0x3a
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <HLCD_init+0x258>
			else lcdRet = HLCD_NOK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	8a af       	std	Y+58, r24	; 0x3a
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e8       	ldi	r26, 0x80	; 128
    14bc:	bf e3       	ldi	r27, 0x3F	; 63
    14be:	8f a3       	std	Y+39, r24	; 0x27
    14c0:	98 a7       	std	Y+40, r25	; 0x28
    14c2:	a9 a7       	std	Y+41, r26	; 0x29
    14c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	6f a1       	ldd	r22, Y+39	; 0x27
    14c8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ca:	89 a5       	ldd	r24, Y+41	; 0x29
    14cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a ef       	ldi	r20, 0xFA	; 250
    14d4:	54 e4       	ldi	r21, 0x44	; 68
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8b a3       	std	Y+35, r24	; 0x23
    14e0:	9c a3       	std	Y+36, r25	; 0x24
    14e2:	ad a3       	std	Y+37, r26	; 0x25
    14e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e6:	6b a1       	ldd	r22, Y+35	; 0x23
    14e8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ea:	8d a1       	ldd	r24, Y+37	; 0x25
    14ec:	9e a1       	ldd	r25, Y+38	; 0x26
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <HLCD_init+0x2aa>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9a a3       	std	Y+34, r25	; 0x22
    1504:	89 a3       	std	Y+33, r24	; 0x21
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <HLCD_init+0x328>
	else if (__tmp > 65535)
    1508:	6b a1       	ldd	r22, Y+35	; 0x23
    150a:	7c a1       	ldd	r23, Y+36	; 0x24
    150c:	8d a1       	ldd	r24, Y+37	; 0x25
    150e:	9e a1       	ldd	r25, Y+38	; 0x26
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <HLCD_init+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	6f a1       	ldd	r22, Y+39	; 0x27
    1522:	78 a5       	ldd	r23, Y+40	; 0x28
    1524:	89 a5       	ldd	r24, Y+41	; 0x29
    1526:	9a a5       	ldd	r25, Y+42	; 0x2a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <HLCD_init+0x30a>
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	98 a3       	std	Y+32, r25	; 0x20
    1550:	8f 8f       	std	Y+31, r24	; 0x1f
    1552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1554:	98 a1       	ldd	r25, Y+32	; 0x20
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <HLCD_init+0x2f8>
    155a:	98 a3       	std	Y+32, r25	; 0x20
    155c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	89 a1       	ldd	r24, Y+33	; 0x21
    1560:	9a a1       	ldd	r25, Y+34	; 0x22
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9a a3       	std	Y+34, r25	; 0x22
    1566:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	9a a1       	ldd	r25, Y+34	; 0x22
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <HLCD_init+0x2ec>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <HLCD_init+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9a a3       	std	Y+34, r25	; 0x22
    1584:	89 a3       	std	Y+33, r24	; 0x21
    1586:	89 a1       	ldd	r24, Y+33	; 0x21
    1588:	9a a1       	ldd	r25, Y+34	; 0x22
    158a:	9e 8f       	std	Y+30, r25	; 0x1e
    158c:	8d 8f       	std	Y+29, r24	; 0x1d
    158e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <HLCD_init+0x334>
    1596:	9e 8f       	std	Y+30, r25	; 0x1e
    1598:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_OFF);
    159a:	8a ad       	ldd	r24, Y+58	; 0x3a
    159c:	88 23       	and	r24, r24
    159e:	51 f4       	brne	.+20     	; 0x15b4 <HLCD_init+0x356>
    15a0:	fe 01       	movw	r30, r28
    15a2:	e9 5b       	subi	r30, 0xB9	; 185
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	6c e0       	ldi	r22, 0x0C	; 12
    15ac:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    15b0:	8a af       	std	Y+58, r24	; 0x3a
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <HLCD_init+0x35a>
			else lcdRet = HLCD_NOK;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	8a af       	std	Y+58, r24	; 0x3a
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e8       	ldi	r26, 0x80	; 128
    15be:	bf e3       	ldi	r27, 0x3F	; 63
    15c0:	89 8f       	std	Y+25, r24	; 0x19
    15c2:	9a 8f       	std	Y+26, r25	; 0x1a
    15c4:	ab 8f       	std	Y+27, r26	; 0x1b
    15c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a ef       	ldi	r20, 0xFA	; 250
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8d 8b       	std	Y+21, r24	; 0x15
    15e2:	9e 8b       	std	Y+22, r25	; 0x16
    15e4:	af 8b       	std	Y+23, r26	; 0x17
    15e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ea:	7e 89       	ldd	r23, Y+22	; 0x16
    15ec:	8f 89       	ldd	r24, Y+23	; 0x17
    15ee:	98 8d       	ldd	r25, Y+24	; 0x18
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <HLCD_init+0x3ac>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c 8b       	std	Y+20, r25	; 0x14
    1606:	8b 8b       	std	Y+19, r24	; 0x13
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <HLCD_init+0x42a>
	else if (__tmp > 65535)
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f5       	brge	.+82     	; 0x1674 <HLCD_init+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	0f c0       	rjmp	.+30     	; 0x166a <HLCD_init+0x40c>
    164c:	88 ec       	ldi	r24, 0xC8	; 200
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9a 8b       	std	Y+18, r25	; 0x12
    1652:	89 8b       	std	Y+17, r24	; 0x11
    1654:	89 89       	ldd	r24, Y+17	; 0x11
    1656:	9a 89       	ldd	r25, Y+18	; 0x12
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <HLCD_init+0x3fa>
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	8b 89       	ldd	r24, Y+19	; 0x13
    166c:	9c 89       	ldd	r25, Y+20	; 0x14
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	69 f7       	brne	.-38     	; 0x164c <HLCD_init+0x3ee>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <HLCD_init+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1674:	6d 89       	ldd	r22, Y+21	; 0x15
    1676:	7e 89       	ldd	r23, Y+22	; 0x16
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	8b 89       	ldd	r24, Y+19	; 0x13
    168a:	9c 89       	ldd	r25, Y+20	; 0x14
    168c:	98 8b       	std	Y+16, r25	; 0x10
    168e:	8f 87       	std	Y+15, r24	; 0x0f
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	98 89       	ldd	r25, Y+16	; 0x10
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <HLCD_init+0x436>
    1698:	98 8b       	std	Y+16, r25	; 0x10
    169a:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    169c:	8a ad       	ldd	r24, Y+58	; 0x3a
    169e:	88 23       	and	r24, r24
    16a0:	51 f4       	brne	.+20     	; 0x16b6 <HLCD_init+0x458>
    16a2:	fe 01       	movw	r30, r28
    16a4:	e9 5b       	subi	r30, 0xB9	; 185
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    16b2:	8a af       	std	Y+58, r24	; 0x3a
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <HLCD_init+0x45c>
			else lcdRet = HLCD_NOK;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8a af       	std	Y+58, r24	; 0x3a
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	8b 87       	std	Y+11, r24	; 0x0b
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	ad 87       	std	Y+13, r26	; 0x0d
    16c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	98 87       	std	Y+8, r25	; 0x08
    16e6:	a9 87       	std	Y+9, r26	; 0x09
    16e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <HLCD_init+0x4ae>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	3f c0       	rjmp	.+126    	; 0x178a <HLCD_init+0x52c>
	else if (__tmp > 65535)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <HLCD_init+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	0f c0       	rjmp	.+30     	; 0x176c <HLCD_init+0x50e>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <HLCD_init+0x4fc>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <HLCD_init+0x4f0>
    1774:	1a c0       	rjmp	.+52     	; 0x17aa <HLCD_init+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <HLCD_init+0x538>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <HLCD_init+0x54c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	8a af       	std	Y+58, r24	; 0x3a
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <HLCD_init+0x54c>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	8a af       	std	Y+58, r24	; 0x3a
	}

	return lcdRet;
    17aa:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    17ac:	c8 5b       	subi	r28, 0xB8	; 184
    17ae:	df 4f       	sbci	r29, 0xFF	; 255
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	c9 54       	subi	r28, 0x49	; 73
    17ca:	d0 40       	sbci	r29, 0x00	; 0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	fe 01       	movw	r30, r28
    17d8:	e9 5b       	subi	r30, 0xB9	; 185
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5b       	subi	r30, 0xB7	; 183
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	8a af       	std	Y+58, r24	; 0x3a
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 af       	std	Y+57, r24	; 0x39

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    17f0:	fe 01       	movw	r30, r28
    17f2:	e9 5b       	subi	r30, 0xB9	; 185
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	09 f4       	brne	.+2      	; 0x1800 <HLCD_sendCmd+0x40>
    17fe:	74 c2       	rjmp	.+1256   	; 0x1ce8 <HLCD_sendCmd+0x528>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    1800:	fe 01       	movw	r30, r28
    1802:	e9 5b       	subi	r30, 0xB9	; 185
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	01 90       	ld	r0, Z+
    1808:	f0 81       	ld	r31, Z
    180a:	e0 2d       	mov	r30, r0
    180c:	80 81       	ld	r24, Z
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <HLCD_sendCmd+0x54>
    1812:	6c c2       	rjmp	.+1240   	; 0x1cec <HLCD_sendCmd+0x52c>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    1814:	fe 01       	movw	r30, r28
    1816:	e9 5b       	subi	r30, 0xB9	; 185
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	01 90       	ld	r0, Z+
    181c:	f0 81       	ld	r31, Z
    181e:	e0 2d       	mov	r30, r0
    1820:	80 81       	ld	r24, Z
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	09 f0       	breq	.+2      	; 0x1828 <HLCD_sendCmd+0x68>
    1826:	5d c2       	rjmp	.+1210   	; 0x1ce2 <HLCD_sendCmd+0x522>
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rsPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1828:	fe 01       	movw	r30, r28
    182a:	e9 5b       	subi	r30, 0xB9	; 185
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	fe 01       	movw	r30, r28
    1838:	e9 5b       	subi	r30, 0xB9	; 185
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	01 90       	ld	r0, Z+
    183e:	f0 81       	ld	r31, Z
    1840:	e0 2d       	mov	r30, r0
    1842:	83 81       	ldd	r24, Z+3	; 0x03
    1844:	9b af       	std	Y+59, r25	; 0x3b
    1846:	8c af       	std	Y+60, r24	; 0x3c
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	8d af       	std	Y+61, r24	; 0x3d
    184c:	1e ae       	std	Y+62, r1	; 0x3e
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rwPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    184e:	fe 01       	movw	r30, r28
    1850:	e9 5b       	subi	r30, 0xB9	; 185
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	01 90       	ld	r0, Z+
    1856:	f0 81       	ld	r31, Z
    1858:	e0 2d       	mov	r30, r0
    185a:	81 81       	ldd	r24, Z+1	; 0x01
    185c:	fe 01       	movw	r30, r28
    185e:	e9 5b       	subi	r30, 0xB9	; 185
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	01 90       	ld	r0, Z+
    1864:	f0 81       	ld	r31, Z
    1866:	e0 2d       	mov	r30, r0
    1868:	94 81       	ldd	r25, Z+4	; 0x04
    186a:	fe 01       	movw	r30, r28
    186c:	ff 96       	adiw	r30, 0x3f	; 63
    186e:	80 83       	st	Z, r24
    1870:	fe 01       	movw	r30, r28
    1872:	ff 96       	adiw	r30, 0x3f	; 63
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	fe 01       	movw	r30, r28
    1878:	ff 96       	adiw	r30, 0x3f	; 63
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	82 83       	std	Z+2, r24	; 0x02
    187e:	fe 01       	movw	r30, r28
    1880:	ff 96       	adiw	r30, 0x3f	; 63
    1882:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->enPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1884:	fe 01       	movw	r30, r28
    1886:	e9 5b       	subi	r30, 0xB9	; 185
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	01 90       	ld	r0, Z+
    188c:	f0 81       	ld	r31, Z
    188e:	e0 2d       	mov	r30, r0
    1890:	81 81       	ldd	r24, Z+1	; 0x01
    1892:	fe 01       	movw	r30, r28
    1894:	e9 5b       	subi	r30, 0xB9	; 185
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	01 90       	ld	r0, Z+
    189a:	f0 81       	ld	r31, Z
    189c:	e0 2d       	mov	r30, r0
    189e:	95 81       	ldd	r25, Z+5	; 0x05
    18a0:	fe 01       	movw	r30, r28
    18a2:	ed 5b       	subi	r30, 0xBD	; 189
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 83       	st	Z, r24
    18a8:	fe 01       	movw	r30, r28
    18aa:	ed 5b       	subi	r30, 0xBD	; 189
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 5b       	subi	r30, 0xBD	; 189
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	82 83       	std	Z+2, r24	; 0x02
    18ba:	fe 01       	movw	r30, r28
    18bc:	ed 5b       	subi	r30, 0xBD	; 189
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	13 82       	std	Z+3, r1	; 0x03

			gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    18c2:	ce 01       	movw	r24, r28
    18c4:	cb 96       	adiw	r24, 0x3b	; 59
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    18cc:	89 af       	std	Y+57, r24	; 0x39
			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    18ce:	89 ad       	ldd	r24, Y+57	; 0x39
    18d0:	88 23       	and	r24, r24
    18d2:	39 f4       	brne	.+14     	; 0x18e2 <HLCD_sendCmd+0x122>
    18d4:	ce 01       	movw	r24, r28
    18d6:	cf 96       	adiw	r24, 0x3f	; 63
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    18de:	89 af       	std	Y+57, r24	; 0x39
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <HLCD_sendCmd+0x126>
			else lcdRet = HLCD_NOK;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	8a af       	std	Y+58, r24	; 0x3a
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e8       	ldi	r26, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	8d ab       	std	Y+53, r24	; 0x35
    18f0:	9e ab       	std	Y+54, r25	; 0x36
    18f2:	af ab       	std	Y+55, r26	; 0x37
    18f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6d a9       	ldd	r22, Y+53	; 0x35
    18f8:	7e a9       	ldd	r23, Y+54	; 0x36
    18fa:	8f a9       	ldd	r24, Y+55	; 0x37
    18fc:	98 ad       	ldd	r25, Y+56	; 0x38
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	89 ab       	std	Y+49, r24	; 0x31
    1910:	9a ab       	std	Y+50, r25	; 0x32
    1912:	ab ab       	std	Y+51, r26	; 0x33
    1914:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1916:	69 a9       	ldd	r22, Y+49	; 0x31
    1918:	7a a9       	ldd	r23, Y+50	; 0x32
    191a:	8b a9       	ldd	r24, Y+51	; 0x33
    191c:	9c a9       	ldd	r25, Y+52	; 0x34
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <HLCD_sendCmd+0x178>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	98 ab       	std	Y+48, r25	; 0x30
    1934:	8f a7       	std	Y+47, r24	; 0x2f
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <HLCD_sendCmd+0x1f6>
	else if (__tmp > 65535)
    1938:	69 a9       	ldd	r22, Y+49	; 0x31
    193a:	7a a9       	ldd	r23, Y+50	; 0x32
    193c:	8b a9       	ldd	r24, Y+51	; 0x33
    193e:	9c a9       	ldd	r25, Y+52	; 0x34
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <HLCD_sendCmd+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6d a9       	ldd	r22, Y+53	; 0x35
    1952:	7e a9       	ldd	r23, Y+54	; 0x36
    1954:	8f a9       	ldd	r24, Y+55	; 0x37
    1956:	98 ad       	ldd	r25, Y+56	; 0x38
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	98 ab       	std	Y+48, r25	; 0x30
    1976:	8f a7       	std	Y+47, r24	; 0x2f
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <HLCD_sendCmd+0x1d8>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e a7       	std	Y+46, r25	; 0x2e
    1980:	8d a7       	std	Y+45, r24	; 0x2d
    1982:	8d a5       	ldd	r24, Y+45	; 0x2d
    1984:	9e a5       	ldd	r25, Y+46	; 0x2e
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <HLCD_sendCmd+0x1c6>
    198a:	9e a7       	std	Y+46, r25	; 0x2e
    198c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1990:	98 a9       	ldd	r25, Y+48	; 0x30
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	98 ab       	std	Y+48, r25	; 0x30
    1996:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8f a5       	ldd	r24, Y+47	; 0x2f
    199a:	98 a9       	ldd	r25, Y+48	; 0x30
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <HLCD_sendCmd+0x1ba>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <HLCD_sendCmd+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	69 a9       	ldd	r22, Y+49	; 0x31
    19a4:	7a a9       	ldd	r23, Y+50	; 0x32
    19a6:	8b a9       	ldd	r24, Y+51	; 0x33
    19a8:	9c a9       	ldd	r25, Y+52	; 0x34
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	98 ab       	std	Y+48, r25	; 0x30
    19b4:	8f a7       	std	Y+47, r24	; 0x2f
    19b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ba:	9c a7       	std	Y+44, r25	; 0x2c
    19bc:	8b a7       	std	Y+43, r24	; 0x2b
    19be:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <HLCD_sendCmd+0x202>
    19c6:	9c a7       	std	Y+44, r25	; 0x2c
    19c8:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    19ca:	89 ad       	ldd	r24, Y+57	; 0x39
    19cc:	88 23       	and	r24, r24
    19ce:	41 f4       	brne	.+16     	; 0x19e0 <HLCD_sendCmd+0x220>
    19d0:	ce 01       	movw	r24, r28
    19d2:	8d 5b       	subi	r24, 0xBD	; 189
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    19dc:	89 af       	std	Y+57, r24	; 0x39
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <HLCD_sendCmd+0x224>
			else lcdRet = HLCD_NOK;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	8a af       	std	Y+58, r24	; 0x3a
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e8       	ldi	r26, 0x80	; 128
    19ea:	bf e3       	ldi	r27, 0x3F	; 63
    19ec:	8f a3       	std	Y+39, r24	; 0x27
    19ee:	98 a7       	std	Y+40, r25	; 0x28
    19f0:	a9 a7       	std	Y+41, r26	; 0x29
    19f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6f a1       	ldd	r22, Y+39	; 0x27
    19f6:	78 a5       	ldd	r23, Y+40	; 0x28
    19f8:	89 a5       	ldd	r24, Y+41	; 0x29
    19fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8b a3       	std	Y+35, r24	; 0x23
    1a0e:	9c a3       	std	Y+36, r25	; 0x24
    1a10:	ad a3       	std	Y+37, r26	; 0x25
    1a12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <HLCD_sendCmd+0x276>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9a a3       	std	Y+34, r25	; 0x22
    1a32:	89 a3       	std	Y+33, r24	; 0x21
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <HLCD_sendCmd+0x2f4>
	else if (__tmp > 65535)
    1a36:	6b a1       	ldd	r22, Y+35	; 0x23
    1a38:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <HLCD_sendCmd+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a50:	78 a5       	ldd	r23, Y+40	; 0x28
    1a52:	89 a5       	ldd	r24, Y+41	; 0x29
    1a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <HLCD_sendCmd+0x2d6>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	98 a3       	std	Y+32, r25	; 0x20
    1a7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a82:	98 a1       	ldd	r25, Y+32	; 0x20
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <HLCD_sendCmd+0x2c4>
    1a88:	98 a3       	std	Y+32, r25	; 0x20
    1a8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9a a3       	std	Y+34, r25	; 0x22
    1a94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	89 a1       	ldd	r24, Y+33	; 0x21
    1a98:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <HLCD_sendCmd+0x2b8>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <HLCD_sendCmd+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9a a3       	std	Y+34, r25	; 0x22
    1ab2:	89 a3       	std	Y+33, r24	; 0x21
    1ab4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aba:	8d 8f       	std	Y+29, r24	; 0x1d
    1abc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1abe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <HLCD_sendCmd+0x300>
    1ac4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac6:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e9 5b       	subi	r30, 0xB9	; 185
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	01 90       	ld	r0, Z+
    1ad0:	f0 81       	ld	r31, Z
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	92 81       	ldd	r25, Z+2	; 0x02
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e7 5b       	subi	r30, 0xB7	; 183
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	89 2f       	mov	r24, r25
    1ae8:	ba 01       	movw	r22, r20
    1aea:	a9 01       	movw	r20, r18
    1aec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_SetPortValue>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	89 8f       	std	Y+25, r24	; 0x19
    1afa:	9a 8f       	std	Y+26, r25	; 0x1a
    1afc:	ab 8f       	std	Y+27, r26	; 0x1b
    1afe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	69 8d       	ldd	r22, Y+25	; 0x19
    1b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a ef       	ldi	r20, 0xFA	; 250
    1b0e:	54 e4       	ldi	r21, 0x44	; 68
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8d 8b       	std	Y+21, r24	; 0x15
    1b1a:	9e 8b       	std	Y+22, r25	; 0x16
    1b1c:	af 8b       	std	Y+23, r26	; 0x17
    1b1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <HLCD_sendCmd+0x382>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <HLCD_sendCmd+0x400>
	else if (__tmp > 65535)
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <HLCD_sendCmd+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <HLCD_sendCmd+0x3e2>
    1b84:	88 ec       	ldi	r24, 0xC8	; 200
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
    1b8c:	89 89       	ldd	r24, Y+17	; 0x11
    1b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <HLCD_sendCmd+0x3d0>
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <HLCD_sendCmd+0x3c4>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <HLCD_sendCmd+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
    1bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bca:	98 89       	ldd	r25, Y+16	; 0x10
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <HLCD_sendCmd+0x40c>
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    1bd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd6:	88 23       	and	r24, r24
    1bd8:	41 f4       	brne	.+16     	; 0x1bea <HLCD_sendCmd+0x42a>
    1bda:	ce 01       	movw	r24, r28
    1bdc:	8d 5b       	subi	r24, 0xBD	; 189
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1be6:	89 af       	std	Y+57, r24	; 0x39
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <HLCD_sendCmd+0x42e>
			else lcdRet = HLCD_NOK;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	8a af       	std	Y+58, r24	; 0x3a
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	98 87       	std	Y+8, r25	; 0x08
    1c1a:	a9 87       	std	Y+9, r26	; 0x09
    1c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <HLCD_sendCmd+0x480>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <HLCD_sendCmd+0x4fe>
	else if (__tmp > 65535)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <HLCD_sendCmd+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <HLCD_sendCmd+0x4e0>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <HLCD_sendCmd+0x4ce>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <HLCD_sendCmd+0x4c2>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <HLCD_sendCmd+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <HLCD_sendCmd+0x50a>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    1cd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd4:	88 23       	and	r24, r24
    1cd6:	11 f4       	brne	.+4      	; 0x1cdc <HLCD_sendCmd+0x51c>
    1cd8:	1a ae       	std	Y+58, r1	; 0x3a
    1cda:	08 c0       	rjmp	.+16     	; 0x1cec <HLCD_sendCmd+0x52c>
			else lcdRet = HLCD_NOK;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	8a af       	std	Y+58, r24	; 0x3a
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <HLCD_sendCmd+0x52c>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	8a af       	std	Y+58, r24	; 0x3a
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <HLCD_sendCmd+0x52c>
		}
	}
	else
	{
		lcdRet = HLCD_NOK;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	8a af       	std	Y+58, r24	; 0x3a
	}

	return lcdRet;
    1cec:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    1cee:	c7 5b       	subi	r28, 0xB7	; 183
    1cf0:	df 4f       	sbci	r29, 0xFF	; 255
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	c9 54       	subi	r28, 0x49	; 73
    1d0c:	d0 40       	sbci	r29, 0x00	; 0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 5b       	subi	r30, 0xB9	; 185
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	fe 01       	movw	r30, r28
    1d24:	e7 5b       	subi	r30, 0xB7	; 183
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	8a af       	std	Y+58, r24	; 0x3a
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	89 af       	std	Y+57, r24	; 0x39

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    1d32:	fe 01       	movw	r30, r28
    1d34:	e9 5b       	subi	r30, 0xB9	; 185
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <HLCD_displayChar+0x40>
    1d40:	74 c2       	rjmp	.+1256   	; 0x222a <HLCD_displayChar+0x528>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    1d42:	fe 01       	movw	r30, r28
    1d44:	e9 5b       	subi	r30, 0xB9	; 185
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	01 90       	ld	r0, Z+
    1d4a:	f0 81       	ld	r31, Z
    1d4c:	e0 2d       	mov	r30, r0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 23       	and	r24, r24
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <HLCD_displayChar+0x54>
    1d54:	6c c2       	rjmp	.+1240   	; 0x222e <HLCD_displayChar+0x52c>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e9 5b       	subi	r30, 0xB9	; 185
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	01 90       	ld	r0, Z+
    1d5e:	f0 81       	ld	r31, Z
    1d60:	e0 2d       	mov	r30, r0
    1d62:	80 81       	ld	r24, Z
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <HLCD_displayChar+0x68>
    1d68:	5d c2       	rjmp	.+1210   	; 0x2224 <HLCD_displayChar+0x522>
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rsPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e9 5b       	subi	r30, 0xB9	; 185
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	01 90       	ld	r0, Z+
    1d72:	f0 81       	ld	r31, Z
    1d74:	e0 2d       	mov	r30, r0
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e9 5b       	subi	r30, 0xB9	; 185
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	01 90       	ld	r0, Z+
    1d80:	f0 81       	ld	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	83 81       	ldd	r24, Z+3	; 0x03
    1d86:	9b af       	std	Y+59, r25	; 0x3b
    1d88:	8c af       	std	Y+60, r24	; 0x3c
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	8d af       	std	Y+61, r24	; 0x3d
    1d8e:	1e ae       	std	Y+62, r1	; 0x3e
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->rwPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1d90:	fe 01       	movw	r30, r28
    1d92:	e9 5b       	subi	r30, 0xB9	; 185
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	01 90       	ld	r0, Z+
    1d98:	f0 81       	ld	r31, Z
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e9 5b       	subi	r30, 0xB9	; 185
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	01 90       	ld	r0, Z+
    1da6:	f0 81       	ld	r31, Z
    1da8:	e0 2d       	mov	r30, r0
    1daa:	94 81       	ldd	r25, Z+4	; 0x04
    1dac:	fe 01       	movw	r30, r28
    1dae:	ff 96       	adiw	r30, 0x3f	; 63
    1db0:	80 83       	st	Z, r24
    1db2:	fe 01       	movw	r30, r28
    1db4:	ff 96       	adiw	r30, 0x3f	; 63
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	fe 01       	movw	r30, r28
    1dba:	ff 96       	adiw	r30, 0x3f	; 63
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ff 96       	adiw	r30, 0x3f	; 63
    1dc4:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->controlPort,
					.pinNumber = ST_ptrLcdCfgInstance->enPin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e9 5b       	subi	r30, 0xB9	; 185
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	01 90       	ld	r0, Z+
    1dce:	f0 81       	ld	r31, Z
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	81 81       	ldd	r24, Z+1	; 0x01
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e9 5b       	subi	r30, 0xB9	; 185
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	01 90       	ld	r0, Z+
    1ddc:	f0 81       	ld	r31, Z
    1dde:	e0 2d       	mov	r30, r0
    1de0:	95 81       	ldd	r25, Z+5	; 0x05
    1de2:	fe 01       	movw	r30, r28
    1de4:	ed 5b       	subi	r30, 0xBD	; 189
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 83       	st	Z, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	ed 5b       	subi	r30, 0xBD	; 189
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 5b       	subi	r30, 0xBD	; 189
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	82 83       	std	Z+2, r24	; 0x02
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ed 5b       	subi	r30, 0xBD	; 189
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	13 82       	std	Z+3, r1	; 0x03

			gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    1e04:	ce 01       	movw	r24, r28
    1e06:	cb 96       	adiw	r24, 0x3b	; 59
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1e0e:	89 af       	std	Y+57, r24	; 0x39
			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    1e10:	89 ad       	ldd	r24, Y+57	; 0x39
    1e12:	88 23       	and	r24, r24
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <HLCD_displayChar+0x122>
    1e16:	ce 01       	movw	r24, r28
    1e18:	cf 96       	adiw	r24, 0x3f	; 63
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1e20:	89 af       	std	Y+57, r24	; 0x39
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <HLCD_displayChar+0x126>
			else lcdRet = HLCD_NOK;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	8a af       	std	Y+58, r24	; 0x3a
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	8d ab       	std	Y+53, r24	; 0x35
    1e32:	9e ab       	std	Y+54, r25	; 0x36
    1e34:	af ab       	std	Y+55, r26	; 0x37
    1e36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6d a9       	ldd	r22, Y+53	; 0x35
    1e3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	89 ab       	std	Y+49, r24	; 0x31
    1e52:	9a ab       	std	Y+50, r25	; 0x32
    1e54:	ab ab       	std	Y+51, r26	; 0x33
    1e56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e58:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <HLCD_displayChar+0x178>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <HLCD_displayChar+0x1f6>
	else if (__tmp > 65535)
    1e7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e80:	9c a9       	ldd	r25, Y+52	; 0x34
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <HLCD_displayChar+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6d a9       	ldd	r22, Y+53	; 0x35
    1e94:	7e a9       	ldd	r23, Y+54	; 0x36
    1e96:	8f a9       	ldd	r24, Y+55	; 0x37
    1e98:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <HLCD_displayChar+0x1d8>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9e a7       	std	Y+46, r25	; 0x2e
    1ec2:	8d a7       	std	Y+45, r24	; 0x2d
    1ec4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ec6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <HLCD_displayChar+0x1c6>
    1ecc:	9e a7       	std	Y+46, r25	; 0x2e
    1ece:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <HLCD_displayChar+0x1ba>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <HLCD_displayChar+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9c a9       	ldd	r25, Y+52	; 0x34
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	98 ab       	std	Y+48, r25	; 0x30
    1ef6:	8f a7       	std	Y+47, r24	; 0x2f
    1ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efa:	98 a9       	ldd	r25, Y+48	; 0x30
    1efc:	9c a7       	std	Y+44, r25	; 0x2c
    1efe:	8b a7       	std	Y+43, r24	; 0x2b
    1f00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <HLCD_displayChar+0x202>
    1f08:	9c a7       	std	Y+44, r25	; 0x2c
    1f0a:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    1f0c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f0e:	88 23       	and	r24, r24
    1f10:	41 f4       	brne	.+16     	; 0x1f22 <HLCD_displayChar+0x220>
    1f12:	ce 01       	movw	r24, r28
    1f14:	8d 5b       	subi	r24, 0xBD	; 189
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1f1e:	89 af       	std	Y+57, r24	; 0x39
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <HLCD_displayChar+0x224>
			else lcdRet = HLCD_NOK;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	8a af       	std	Y+58, r24	; 0x3a
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 e8       	ldi	r26, 0x80	; 128
    1f2c:	bf e3       	ldi	r27, 0x3F	; 63
    1f2e:	8f a3       	std	Y+39, r24	; 0x27
    1f30:	98 a7       	std	Y+40, r25	; 0x28
    1f32:	a9 a7       	std	Y+41, r26	; 0x29
    1f34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6f a1       	ldd	r22, Y+39	; 0x27
    1f38:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8b a3       	std	Y+35, r24	; 0x23
    1f50:	9c a3       	std	Y+36, r25	; 0x24
    1f52:	ad a3       	std	Y+37, r26	; 0x25
    1f54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f56:	6b a1       	ldd	r22, Y+35	; 0x23
    1f58:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <HLCD_displayChar+0x276>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9a a3       	std	Y+34, r25	; 0x22
    1f74:	89 a3       	std	Y+33, r24	; 0x21
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <HLCD_displayChar+0x2f4>
	else if (__tmp > 65535)
    1f78:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <HLCD_displayChar+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6f a1       	ldd	r22, Y+39	; 0x27
    1f92:	78 a5       	ldd	r23, Y+40	; 0x28
    1f94:	89 a5       	ldd	r24, Y+41	; 0x29
    1f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9a a3       	std	Y+34, r25	; 0x22
    1fb6:	89 a3       	std	Y+33, r24	; 0x21
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <HLCD_displayChar+0x2d6>
    1fba:	88 ec       	ldi	r24, 0xC8	; 200
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	98 a3       	std	Y+32, r25	; 0x20
    1fc0:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc4:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <HLCD_displayChar+0x2c4>
    1fca:	98 a3       	std	Y+32, r25	; 0x20
    1fcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9a a3       	std	Y+34, r25	; 0x22
    1fd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fda:	9a a1       	ldd	r25, Y+34	; 0x22
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <HLCD_displayChar+0x2b8>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <HLCD_displayChar+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <HLCD_displayChar+0x300>
    2006:	9e 8f       	std	Y+30, r25	; 0x1e
    2008:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    200a:	fe 01       	movw	r30, r28
    200c:	e9 5b       	subi	r30, 0xB9	; 185
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	01 90       	ld	r0, Z+
    2012:	f0 81       	ld	r31, Z
    2014:	e0 2d       	mov	r30, r0
    2016:	92 81       	ldd	r25, Z+2	; 0x02
    2018:	fe 01       	movw	r30, r28
    201a:	e7 5b       	subi	r30, 0xB7	; 183
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	89 2f       	mov	r24, r25
    202a:	ba 01       	movw	r22, r20
    202c:	a9 01       	movw	r20, r18
    202e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_SetPortValue>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a0 e8       	ldi	r26, 0x80	; 128
    2038:	bf e3       	ldi	r27, 0x3F	; 63
    203a:	89 8f       	std	Y+25, r24	; 0x19
    203c:	9a 8f       	std	Y+26, r25	; 0x1a
    203e:	ab 8f       	std	Y+27, r26	; 0x1b
    2040:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	69 8d       	ldd	r22, Y+25	; 0x19
    2044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a ef       	ldi	r20, 0xFA	; 250
    2050:	54 e4       	ldi	r21, 0x44	; 68
    2052:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8d 8b       	std	Y+21, r24	; 0x15
    205c:	9e 8b       	std	Y+22, r25	; 0x16
    205e:	af 8b       	std	Y+23, r26	; 0x17
    2060:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2062:	6d 89       	ldd	r22, Y+21	; 0x15
    2064:	7e 89       	ldd	r23, Y+22	; 0x16
    2066:	8f 89       	ldd	r24, Y+23	; 0x17
    2068:	98 8d       	ldd	r25, Y+24	; 0x18
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <HLCD_displayChar+0x382>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	3f c0       	rjmp	.+126    	; 0x2102 <HLCD_displayChar+0x400>
	else if (__tmp > 65535)
    2084:	6d 89       	ldd	r22, Y+21	; 0x15
    2086:	7e 89       	ldd	r23, Y+22	; 0x16
    2088:	8f 89       	ldd	r24, Y+23	; 0x17
    208a:	98 8d       	ldd	r25, Y+24	; 0x18
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	4c f5       	brge	.+82     	; 0x20ee <HLCD_displayChar+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	69 8d       	ldd	r22, Y+25	; 0x19
    209e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <HLCD_displayChar+0x3e2>
    20c6:	88 ec       	ldi	r24, 0xC8	; 200
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9a 8b       	std	Y+18, r25	; 0x12
    20cc:	89 8b       	std	Y+17, r24	; 0x11
    20ce:	89 89       	ldd	r24, Y+17	; 0x11
    20d0:	9a 89       	ldd	r25, Y+18	; 0x12
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <HLCD_displayChar+0x3d0>
    20d6:	9a 8b       	std	Y+18, r25	; 0x12
    20d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20da:	8b 89       	ldd	r24, Y+19	; 0x13
    20dc:	9c 89       	ldd	r25, Y+20	; 0x14
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <HLCD_displayChar+0x3c4>
    20ec:	14 c0       	rjmp	.+40     	; 0x2116 <HLCD_displayChar+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9c 8b       	std	Y+20, r25	; 0x14
    2100:	8b 8b       	std	Y+19, r24	; 0x13
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	98 8b       	std	Y+16, r25	; 0x10
    2108:	8f 87       	std	Y+15, r24	; 0x0f
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	98 89       	ldd	r25, Y+16	; 0x10
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <HLCD_displayChar+0x40c>
    2112:	98 8b       	std	Y+16, r25	; 0x10
    2114:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    2116:	89 ad       	ldd	r24, Y+57	; 0x39
    2118:	88 23       	and	r24, r24
    211a:	41 f4       	brne	.+16     	; 0x212c <HLCD_displayChar+0x42a>
    211c:	ce 01       	movw	r24, r28
    211e:	8d 5b       	subi	r24, 0xBD	; 189
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    2128:	89 af       	std	Y+57, r24	; 0x39
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <HLCD_displayChar+0x42e>
			else lcdRet = HLCD_NOK;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	8a af       	std	Y+58, r24	; 0x3a
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e8       	ldi	r26, 0x80	; 128
    2136:	bf e3       	ldi	r27, 0x3F	; 63
    2138:	8b 87       	std	Y+11, r24	; 0x0b
    213a:	9c 87       	std	Y+12, r25	; 0x0c
    213c:	ad 87       	std	Y+13, r26	; 0x0d
    213e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a ef       	ldi	r20, 0xFA	; 250
    214e:	54 e4       	ldi	r21, 0x44	; 68
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8f 83       	std	Y+7, r24	; 0x07
    215a:	98 87       	std	Y+8, r25	; 0x08
    215c:	a9 87       	std	Y+9, r26	; 0x09
    215e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <HLCD_displayChar+0x480>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	3f c0       	rjmp	.+126    	; 0x2200 <HLCD_displayChar+0x4fe>
	else if (__tmp > 65535)
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	4c f5       	brge	.+82     	; 0x21ec <HLCD_displayChar+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219a:	6b 85       	ldd	r22, Y+11	; 0x0b
    219c:	7c 85       	ldd	r23, Y+12	; 0x0c
    219e:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <HLCD_displayChar+0x4e0>
    21c4:	88 ec       	ldi	r24, 0xC8	; 200
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <HLCD_displayChar+0x4ce>
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <HLCD_displayChar+0x4c2>
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <HLCD_displayChar+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <HLCD_displayChar+0x50a>
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    2214:	89 ad       	ldd	r24, Y+57	; 0x39
    2216:	88 23       	and	r24, r24
    2218:	11 f4       	brne	.+4      	; 0x221e <HLCD_displayChar+0x51c>
    221a:	1a ae       	std	Y+58, r1	; 0x3a
    221c:	08 c0       	rjmp	.+16     	; 0x222e <HLCD_displayChar+0x52c>
			else lcdRet = HLCD_NOK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	8a af       	std	Y+58, r24	; 0x3a
    2222:	05 c0       	rjmp	.+10     	; 0x222e <HLCD_displayChar+0x52c>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	8a af       	std	Y+58, r24	; 0x3a
    2228:	02 c0       	rjmp	.+4      	; 0x222e <HLCD_displayChar+0x52c>
		}
	}
	else
	{
		lcdRet = HLCD_NOK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a af       	std	Y+58, r24	; 0x3a
	}

	return lcdRet;
    222e:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    2230:	c7 5b       	subi	r28, 0xB7	; 183
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <HLCD_displayString+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <HLCD_displayString+0x8>
    224c:	00 d0       	rcall	.+0      	; 0x224e <HLCD_displayString+0xa>
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	7e 83       	std	Y+6, r23	; 0x06
    2258:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f1       	breq	.+90     	; 0x22c0 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    2266:	eb 81       	ldd	r30, Y+3	; 0x03
    2268:	fc 81       	ldd	r31, Y+4	; 0x04
    226a:	80 81       	ld	r24, Z
    226c:	88 23       	and	r24, r24
    226e:	51 f1       	breq	.+84     	; 0x22c4 <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2270:	eb 81       	ldd	r30, Y+3	; 0x03
    2272:	fc 81       	ldd	r31, Y+4	; 0x04
    2274:	80 81       	ld	r24, Z
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	01 f5       	brne	.+64     	; 0x22ba <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    227a:	19 82       	std	Y+1, r1	; 0x01
    227c:	12 c0       	rjmp	.+36     	; 0x22a2 <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	20 81       	ld	r18, Z
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	62 2f       	mov	r22, r18
    2296:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <HLCD_displayChar>
    229a:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	fc 01       	movw	r30, r24
    22ae:	e2 0f       	add	r30, r18
    22b0:	f3 1f       	adc	r31, r19
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	19 f7       	brne	.-58     	; 0x227e <HLCD_displayString+0x3a>
    22b8:	05 c0       	rjmp	.+10     	; 0x22c4 <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	8a 83       	std	Y+2, r24	; 0x02
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22c6:	26 96       	adiw	r28, 0x06	; 6
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	64 97       	sbiw	r28, 0x14	; 20
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	98 8b       	std	Y+16, r25	; 0x10
    22f2:	8f 87       	std	Y+15, r24	; 0x0f
    22f4:	49 8b       	std	Y+17, r20	; 0x11
    22f6:	5a 8b       	std	Y+18, r21	; 0x12
    22f8:	6b 8b       	std	Y+19, r22	; 0x13
    22fa:	7c 8b       	std	Y+20, r23	; 0x14
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	8b 83       	std	Y+3, r24	; 0x03

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	98 89       	ldd	r25, Y+16	; 0x10
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	09 f4       	brne	.+2      	; 0x230a <HLCD_displayNumber+0x32>
    2308:	8b c0       	rjmp	.+278    	; 0x2420 <HLCD_displayNumber+0x148>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    230a:	ef 85       	ldd	r30, Y+15	; 0x0f
    230c:	f8 89       	ldd	r31, Y+16	; 0x10
    230e:	80 81       	ld	r24, Z
    2310:	88 23       	and	r24, r24
    2312:	09 f4       	brne	.+2      	; 0x2316 <HLCD_displayNumber+0x3e>
    2314:	87 c0       	rjmp	.+270    	; 0x2424 <HLCD_displayNumber+0x14c>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2316:	ef 85       	ldd	r30, Y+15	; 0x0f
    2318:	f8 89       	ldd	r31, Y+16	; 0x10
    231a:	80 81       	ld	r24, Z
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	09 f0       	breq	.+2      	; 0x2322 <HLCD_displayNumber+0x4a>
    2320:	7c c0       	rjmp	.+248    	; 0x241a <HLCD_displayNumber+0x142>
		{
			uint8_t numberCounter = 0;
    2322:	1a 82       	std	Y+2, r1	; 0x02
			uint8_t digitsCounter = 0;
    2324:	19 82       	std	Y+1, r1	; 0x01
			uint8_t bufferForNumbers[11];

			if(Copy_u8Number == 0)
    2326:	89 89       	ldd	r24, Y+17	; 0x11
    2328:	9a 89       	ldd	r25, Y+18	; 0x12
    232a:	ab 89       	ldd	r26, Y+19	; 0x13
    232c:	bc 89       	ldd	r27, Y+20	; 0x14
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	a1 05       	cpc	r26, r1
    2332:	b1 05       	cpc	r27, r1
    2334:	09 f0       	breq	.+2      	; 0x2338 <HLCD_displayNumber+0x60>
    2336:	44 c0       	rjmp	.+136    	; 0x23c0 <HLCD_displayNumber+0xe8>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,'0');
    2338:	8f 85       	ldd	r24, Y+15	; 0x0f
    233a:	98 89       	ldd	r25, Y+16	; 0x10
    233c:	60 e3       	ldi	r22, 0x30	; 48
    233e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <HLCD_displayChar>
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	6f c0       	rjmp	.+222    	; 0x2424 <HLCD_displayNumber+0x14c>
			}
			else
			{
				while(Copy_u8Number)
				{
					if(digitsCounter == 0)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	88 23       	and	r24, r24
    234a:	69 f4       	brne	.+26     	; 0x2366 <HLCD_displayNumber+0x8e>
					{
						bufferForNumbers[digitsCounter] = STR_NULL;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	ce 01       	movw	r24, r28
    2354:	04 96       	adiw	r24, 0x04	; 4
    2356:	fc 01       	movw	r30, r24
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	10 82       	st	Z, r1
						digitsCounter++;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	2d c0       	rjmp	.+90     	; 0x23c0 <HLCD_displayNumber+0xe8>
					}
					else
					{
						bufferForNumbers[digitsCounter] = Copy_u8Number%10;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	08 2f       	mov	r16, r24
    236a:	10 e0       	ldi	r17, 0x00	; 0
    236c:	89 89       	ldd	r24, Y+17	; 0x11
    236e:	9a 89       	ldd	r25, Y+18	; 0x12
    2370:	ab 89       	ldd	r26, Y+19	; 0x13
    2372:	bc 89       	ldd	r27, Y+20	; 0x14
    2374:	2a e0       	ldi	r18, 0x0A	; 10
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__udivmodsi4>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	28 2f       	mov	r18, r24
    238a:	ce 01       	movw	r24, r28
    238c:	04 96       	adiw	r24, 0x04	; 4
    238e:	fc 01       	movw	r30, r24
    2390:	e0 0f       	add	r30, r16
    2392:	f1 1f       	adc	r31, r17
    2394:	20 83       	st	Z, r18
						Copy_u8Number /=10;
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	ab 89       	ldd	r26, Y+19	; 0x13
    239c:	bc 89       	ldd	r27, Y+20	; 0x14
    239e:	2a e0       	ldi	r18, 0x0A	; 10
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__udivmodsi4>
    23ae:	da 01       	movw	r26, r20
    23b0:	c9 01       	movw	r24, r18
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	ab 8b       	std	Y+19, r26	; 0x13
    23b8:	bc 8b       	std	Y+20, r27	; 0x14
						digitsCounter++;
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	89 83       	std	Y+1, r24	; 0x01
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,'0');
			}
			else
			{
				while(Copy_u8Number)
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	ab 89       	ldd	r26, Y+19	; 0x13
    23c6:	bc 89       	ldd	r27, Y+20	; 0x14
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	a1 05       	cpc	r26, r1
    23cc:	b1 05       	cpc	r27, r1
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <HLCD_displayNumber+0xfa>
    23d0:	ba cf       	rjmp	.-140    	; 0x2346 <HLCD_displayNumber+0x6e>
						Copy_u8Number /=10;
						digitsCounter++;
					}
				}

				numberCounter = (digitsCounter-1);
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	81 50       	subi	r24, 0x01	; 1
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <HLCD_displayNumber+0x12a>
				for(; bufferForNumbers[numberCounter] != STR_NULL ; numberCounter--)
				{
					lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,((bufferForNumbers[numberCounter])+48));
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	ce 01       	movw	r24, r28
    23e2:	04 96       	adiw	r24, 0x04	; 4
    23e4:	fc 01       	movw	r30, r24
    23e6:	e2 0f       	add	r30, r18
    23e8:	f3 1f       	adc	r31, r19
    23ea:	80 81       	ld	r24, Z
    23ec:	28 2f       	mov	r18, r24
    23ee:	20 5d       	subi	r18, 0xD0	; 208
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	62 2f       	mov	r22, r18
    23f6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <HLCD_displayChar>
    23fa:	8b 83       	std	Y+3, r24	; 0x03
						digitsCounter++;
					}
				}

				numberCounter = (digitsCounter-1);
				for(; bufferForNumbers[numberCounter] != STR_NULL ; numberCounter--)
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	81 50       	subi	r24, 0x01	; 1
    2400:	8a 83       	std	Y+2, r24	; 0x02
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	ce 01       	movw	r24, r28
    240a:	04 96       	adiw	r24, 0x04	; 4
    240c:	fc 01       	movw	r30, r24
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	80 81       	ld	r24, Z
    2414:	88 23       	and	r24, r24
    2416:	09 f7       	brne	.-62     	; 0x23da <HLCD_displayNumber+0x102>
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <HLCD_displayNumber+0x14c>
				}
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <HLCD_displayNumber+0x14c>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	8b 83       	std	Y+3, r24	; 0x03
	}
	return lcdRet;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2426:	64 96       	adiw	r28, 0x14	; 20
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	08 95       	ret

0000243c <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <HLCD_changeCursorPosation+0x6>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <HLCD_changeCursorPosation+0x8>
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	6c 83       	std	Y+4, r22	; 0x04
    2450:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	91 f1       	breq	.+100    	; 0x24c2 <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    245e:	ea 81       	ldd	r30, Y+2	; 0x02
    2460:	fb 81       	ldd	r31, Y+3	; 0x03
    2462:	80 81       	ld	r24, Z
    2464:	88 23       	and	r24, r24
    2466:	79 f1       	breq	.+94     	; 0x24c6 <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2468:	ea 81       	ldd	r30, Y+2	; 0x02
    246a:	fb 81       	ldd	r31, Y+3	; 0x03
    246c:	80 81       	ld	r24, Z
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	29 f5       	brne	.+74     	; 0x24bc <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	88 23       	and	r24, r24
    2476:	71 f4       	brne	.+28     	; 0x2494 <HLCD_changeCursorPosation+0x58>
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	80 31       	cpi	r24, 0x10	; 16
    247c:	58 f4       	brcc	.+22     	; 0x2494 <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	8f 70       	andi	r24, 0x0F	; 15
    2482:	80 68       	ori	r24, 0x80	; 128
    2484:	28 2f       	mov	r18, r24
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	9b 81       	ldd	r25, Y+3	; 0x03
    248a:	62 2f       	mov	r22, r18
    248c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	19 c0       	rjmp	.+50     	; 0x24c6 <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	81 30       	cpi	r24, 0x01	; 1
    2498:	71 f4       	brne	.+28     	; 0x24b6 <HLCD_changeCursorPosation+0x7a>
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	80 31       	cpi	r24, 0x10	; 16
    249e:	58 f4       	brcc	.+22     	; 0x24b6 <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	8f 70       	andi	r24, 0x0F	; 15
    24a4:	80 6c       	ori	r24, 0xC0	; 192
    24a6:	28 2f       	mov	r18, r24
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	9b 81       	ldd	r25, Y+3	; 0x03
    24ac:	62 2f       	mov	r22, r18
    24ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	08 c0       	rjmp	.+16     	; 0x24c6 <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    24b6:	84 e0       	ldi	r24, 0x04	; 4
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	05 c0       	rjmp	.+10     	; 0x24c6 <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <HLCD_shiftDisplay+0x6>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <HLCD_shiftDisplay+0x8>
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <HLCD_shiftDisplay+0xa>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	6d 83       	std	Y+5, r22	; 0x05
    24ec:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	31 f1       	breq	.+76     	; 0x2546 <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    24fa:	8e 81       	ldd	r24, Y+6	; 0x06
    24fc:	8c 31       	cpi	r24, 0x1C	; 28
    24fe:	19 f0       	breq	.+6      	; 0x2506 <HLCD_shiftDisplay+0x2e>
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	88 31       	cpi	r24, 0x18	; 24
    2504:	e9 f4       	brne	.+58     	; 0x2540 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    2506:	eb 81       	ldd	r30, Y+3	; 0x03
    2508:	fc 81       	ldd	r31, Y+4	; 0x04
    250a:	80 81       	ld	r24, Z
    250c:	88 23       	and	r24, r24
    250e:	e9 f0       	breq	.+58     	; 0x254a <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2510:	eb 81       	ldd	r30, Y+3	; 0x03
    2512:	fc 81       	ldd	r31, Y+4	; 0x04
    2514:	80 81       	ld	r24, Z
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	81 f4       	brne	.+32     	; 0x253a <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    251a:	19 82       	std	Y+1, r1	; 0x01
    251c:	09 c0       	rjmp	.+18     	; 0x2530 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	6e 81       	ldd	r22, Y+6	; 0x06
    2524:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    2528:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	99 81       	ldd	r25, Y+1	; 0x01
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	98 17       	cp	r25, r24
    2536:	98 f3       	brcs	.-26     	; 0x251e <HLCD_shiftDisplay+0x46>
    2538:	08 c0       	rjmp	.+16     	; 0x254a <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8a 83       	std	Y+2, r24	; 0x02
    253e:	05 c0       	rjmp	.+10     	; 0x254a <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    2540:	84 e0       	ldi	r24, 0x04	; 4
    2542:	8a 83       	std	Y+2, r24	; 0x02
    2544:	02 c0       	rjmp	.+4      	; 0x254a <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    254c:	26 96       	adiw	r28, 0x06	; 6
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	27 97       	sbiw	r28, 0x07	; 7
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	7e 83       	std	Y+6, r23	; 0x06
    2578:	6d 83       	std	Y+5, r22	; 0x05
    257a:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	09 f4       	brne	.+2      	; 0x258a <HLCD_createNewCustomChar+0x2c>
    2588:	4f c0       	rjmp	.+158    	; 0x2628 <HLCD_createNewCustomChar+0xca>
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	09 f4       	brne	.+2      	; 0x2594 <HLCD_createNewCustomChar+0x36>
    2592:	4a c0       	rjmp	.+148    	; 0x2628 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    2594:	8f 81       	ldd	r24, Y+7	; 0x07
    2596:	88 30       	cpi	r24, 0x08	; 8
    2598:	08 f0       	brcs	.+2      	; 0x259c <HLCD_createNewCustomChar+0x3e>
    259a:	43 c0       	rjmp	.+134    	; 0x2622 <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    259c:	eb 81       	ldd	r30, Y+3	; 0x03
    259e:	fc 81       	ldd	r31, Y+4	; 0x04
    25a0:	80 81       	ld	r24, Z
    25a2:	88 23       	and	r24, r24
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <HLCD_createNewCustomChar+0x4a>
    25a6:	42 c0       	rjmp	.+132    	; 0x262c <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    25a8:	eb 81       	ldd	r30, Y+3	; 0x03
    25aa:	fc 81       	ldd	r31, Y+4	; 0x04
    25ac:	80 81       	ld	r24, Z
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	a9 f5       	brne	.+106    	; 0x261c <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    25b2:	8f 81       	ldd	r24, Y+7	; 0x07
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	80 64       	ori	r24, 0x40	; 64
    25c6:	28 2f       	mov	r18, r24
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	62 2f       	mov	r22, r18
    25ce:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    25d2:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	88 23       	and	r24, r24
    25d8:	d1 f4       	brne	.+52     	; 0x260e <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    25da:	19 82       	std	Y+1, r1	; 0x01
    25dc:	15 c0       	rjmp	.+42     	; 0x2608 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	fc 01       	movw	r30, r24
    25ea:	e2 0f       	add	r30, r18
    25ec:	f3 1f       	adc	r31, r19
    25ee:	20 81       	ld	r18, Z
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	62 2f       	mov	r22, r18
    25f6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <HLCD_displayChar>
    25fa:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	88 23       	and	r24, r24
    2600:	31 f4       	brne	.+12     	; 0x260e <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	88 30       	cpi	r24, 0x08	; 8
    260c:	40 f3       	brcs	.-48     	; 0x25de <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	60 e8       	ldi	r22, 0x80	; 128
    2614:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    2618:	8a 83       	std	Y+2, r24	; 0x02
    261a:	08 c0       	rjmp	.+16     	; 0x262c <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	8a 83       	std	Y+2, r24	; 0x02
    2620:	05 c0       	rjmp	.+10     	; 0x262c <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	8a 83       	std	Y+2, r24	; 0x02
    2626:	02 c0       	rjmp	.+4      	; 0x262c <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    2628:	82 e0       	ldi	r24, 0x02	; 2
    262a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    262e:	27 96       	adiw	r28, 0x07	; 7
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <HLCD_Clr>:



EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <HLCD_Clr+0x6>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9b 83       	std	Y+3, r25	; 0x03
    264e:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	61 e0       	ldi	r22, 0x01	; 1
    265a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HLCD_sendCmd>
    265e:	89 83       	std	Y+1, r24	; 0x01

	return lcdRet;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <appInit>:
};



void appInit(void)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&lcd0);
    2676:	87 e8       	ldi	r24, 0x87	; 135
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 2f 09 	call	0x125e	; 0x125e <HLCD_init>
}
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <appMain>:

void appMain(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	aa 97       	sbiw	r28, 0x2a	; 42
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		HLCD_changeCursorPosation(&lcd0,0,0);
    2698:	87 e8       	ldi	r24, 0x87	; 135
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 1e 12 	call	0x243c	; 0x243c <HLCD_changeCursorPosation>
		HLCD_displayString(&lcd0,(uint8_t *)"sherif");
    26a4:	87 e8       	ldi	r24, 0x87	; 135
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	20 e6       	ldi	r18, 0x60	; 96
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	b9 01       	movw	r22, r18
    26ae:	0e 94 22 11 	call	0x2244	; 0x2244 <HLCD_displayString>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	aa ef       	ldi	r26, 0xFA	; 250
    26b8:	b3 e4       	ldi	r27, 0x43	; 67
    26ba:	8f a3       	std	Y+39, r24	; 0x27
    26bc:	98 a7       	std	Y+40, r25	; 0x28
    26be:	a9 a7       	std	Y+41, r26	; 0x29
    26c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <appMain+0x80>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <appMain+0xfe>
	else if (__tmp > 65535)
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <appMain+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6f a1       	ldd	r22, Y+39	; 0x27
    271e:	78 a5       	ldd	r23, Y+40	; 0x28
    2720:	89 a5       	ldd	r24, Y+41	; 0x29
    2722:	9a a5       	ldd	r25, Y+42	; 0x2a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <appMain+0xe0>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
    274e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2750:	98 a1       	ldd	r25, Y+32	; 0x20
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <appMain+0xce>
    2756:	98 a3       	std	Y+32, r25	; 0x20
    2758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	89 a1       	ldd	r24, Y+33	; 0x21
    275c:	9a a1       	ldd	r25, Y+34	; 0x22
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9a a3       	std	Y+34, r25	; 0x22
    2762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <appMain+0xc2>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <appMain+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
    278a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <appMain+0x10a>
    2792:	9e 8f       	std	Y+30, r25	; 0x1e
    2794:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		HLCD_Clr(&lcd0);
    2796:	87 e8       	ldi	r24, 0x87	; 135
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 20 13 	call	0x2640	; 0x2640 <HLCD_Clr>
		HLCD_changeCursorPosation(&lcd0,1,6);
    279e:	87 e8       	ldi	r24, 0x87	; 135
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	46 e0       	ldi	r20, 0x06	; 6
    27a6:	0e 94 1e 12 	call	0x243c	; 0x243c <HLCD_changeCursorPosation>
		HLCD_displayString(&lcd0,(uint8_t *)"sherif");
    27aa:	87 e8       	ldi	r24, 0x87	; 135
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	20 e6       	ldi	r18, 0x60	; 96
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	b9 01       	movw	r22, r18
    27b4:	0e 94 22 11 	call	0x2244	; 0x2244 <HLCD_displayString>
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	aa ef       	ldi	r26, 0xFA	; 250
    27be:	b3 e4       	ldi	r27, 0x43	; 67
    27c0:	89 8f       	std	Y+25, r24	; 0x19
    27c2:	9a 8f       	std	Y+26, r25	; 0x1a
    27c4:	ab 8f       	std	Y+27, r26	; 0x1b
    27c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a ef       	ldi	r20, 0xFA	; 250
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8d 8b       	std	Y+21, r24	; 0x15
    27e2:	9e 8b       	std	Y+22, r25	; 0x16
    27e4:	af 8b       	std	Y+23, r26	; 0x17
    27e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ea:	7e 89       	ldd	r23, Y+22	; 0x16
    27ec:	8f 89       	ldd	r24, Y+23	; 0x17
    27ee:	98 8d       	ldd	r25, Y+24	; 0x18
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <appMain+0x186>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 8b       	std	Y+20, r25	; 0x14
    2806:	8b 8b       	std	Y+19, r24	; 0x13
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <appMain+0x204>
	else if (__tmp > 65535)
    280a:	6d 89       	ldd	r22, Y+21	; 0x15
    280c:	7e 89       	ldd	r23, Y+22	; 0x16
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <appMain+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	69 8d       	ldd	r22, Y+25	; 0x19
    2824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9c 8b       	std	Y+20, r25	; 0x14
    2848:	8b 8b       	std	Y+19, r24	; 0x13
    284a:	0f c0       	rjmp	.+30     	; 0x286a <appMain+0x1e6>
    284c:	88 ec       	ldi	r24, 0xC8	; 200
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9a 8b       	std	Y+18, r25	; 0x12
    2852:	89 8b       	std	Y+17, r24	; 0x11
    2854:	89 89       	ldd	r24, Y+17	; 0x11
    2856:	9a 89       	ldd	r25, Y+18	; 0x12
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <appMain+0x1d4>
    285c:	9a 8b       	std	Y+18, r25	; 0x12
    285e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8b 89       	ldd	r24, Y+19	; 0x13
    2862:	9c 89       	ldd	r25, Y+20	; 0x14
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9c 8b       	std	Y+20, r25	; 0x14
    2868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8b 89       	ldd	r24, Y+19	; 0x13
    286c:	9c 89       	ldd	r25, Y+20	; 0x14
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <appMain+0x1c8>
    2872:	14 c0       	rjmp	.+40     	; 0x289c <appMain+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	6d 89       	ldd	r22, Y+21	; 0x15
    2876:	7e 89       	ldd	r23, Y+22	; 0x16
    2878:	8f 89       	ldd	r24, Y+23	; 0x17
    287a:	98 8d       	ldd	r25, Y+24	; 0x18
    287c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9c 8b       	std	Y+20, r25	; 0x14
    2886:	8b 8b       	std	Y+19, r24	; 0x13
    2888:	8b 89       	ldd	r24, Y+19	; 0x13
    288a:	9c 89       	ldd	r25, Y+20	; 0x14
    288c:	98 8b       	std	Y+16, r25	; 0x10
    288e:	8f 87       	std	Y+15, r24	; 0x0f
    2890:	8f 85       	ldd	r24, Y+15	; 0x0f
    2892:	98 89       	ldd	r25, Y+16	; 0x10
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <appMain+0x210>
    2898:	98 8b       	std	Y+16, r25	; 0x10
    289a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		HLCD_Clr(&lcd0);
    289c:	87 e8       	ldi	r24, 0x87	; 135
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 20 13 	call	0x2640	; 0x2640 <HLCD_Clr>
		HLCD_changeCursorPosation(&lcd0,0,10);
    28a4:	87 e8       	ldi	r24, 0x87	; 135
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	4a e0       	ldi	r20, 0x0A	; 10
    28ac:	0e 94 1e 12 	call	0x243c	; 0x243c <HLCD_changeCursorPosation>
		HLCD_displayString(&lcd0,(uint8_t *)"sherif");
    28b0:	87 e8       	ldi	r24, 0x87	; 135
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	20 e6       	ldi	r18, 0x60	; 96
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	b9 01       	movw	r22, r18
    28ba:	0e 94 22 11 	call	0x2244	; 0x2244 <HLCD_displayString>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	aa ef       	ldi	r26, 0xFA	; 250
    28c4:	b3 e4       	ldi	r27, 0x43	; 67
    28c6:	8b 87       	std	Y+11, r24	; 0x0b
    28c8:	9c 87       	std	Y+12, r25	; 0x0c
    28ca:	ad 87       	std	Y+13, r26	; 0x0d
    28cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8f 83       	std	Y+7, r24	; 0x07
    28e8:	98 87       	std	Y+8, r25	; 0x08
    28ea:	a9 87       	std	Y+9, r26	; 0x09
    28ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <appMain+0x28c>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	3f c0       	rjmp	.+126    	; 0x298e <appMain+0x30a>
	else if (__tmp > 65535)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <appMain+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6b 85       	ldd	r22, Y+11	; 0x0b
    292a:	7c 85       	ldd	r23, Y+12	; 0x0c
    292c:	8d 85       	ldd	r24, Y+13	; 0x0d
    292e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <appMain+0x2ec>
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <appMain+0x2da>
    2962:	9c 83       	std	Y+4, r25	; 0x04
    2964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <appMain+0x2ce>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <appMain+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <appMain+0x316>
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		HLCD_Clr(&lcd0);
    29a2:	87 e8       	ldi	r24, 0x87	; 135
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 20 13 	call	0x2640	; 0x2640 <HLCD_Clr>
    29aa:	76 ce       	rjmp	.-788    	; 0x2698 <appMain+0x14>

000029ac <main>:

#include "APPLICATION/app.h"


void main(void)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	appInit();
    29b4:	0e 94 37 13 	call	0x266e	; 0x266e <appInit>
	appMain();
    29b8:	0e 94 42 13 	call	0x2684	; 0x2684 <appMain>
}
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <__udivmodsi4>:
    29c2:	a1 e2       	ldi	r26, 0x21	; 33
    29c4:	1a 2e       	mov	r1, r26
    29c6:	aa 1b       	sub	r26, r26
    29c8:	bb 1b       	sub	r27, r27
    29ca:	fd 01       	movw	r30, r26
    29cc:	0d c0       	rjmp	.+26     	; 0x29e8 <__udivmodsi4_ep>

000029ce <__udivmodsi4_loop>:
    29ce:	aa 1f       	adc	r26, r26
    29d0:	bb 1f       	adc	r27, r27
    29d2:	ee 1f       	adc	r30, r30
    29d4:	ff 1f       	adc	r31, r31
    29d6:	a2 17       	cp	r26, r18
    29d8:	b3 07       	cpc	r27, r19
    29da:	e4 07       	cpc	r30, r20
    29dc:	f5 07       	cpc	r31, r21
    29de:	20 f0       	brcs	.+8      	; 0x29e8 <__udivmodsi4_ep>
    29e0:	a2 1b       	sub	r26, r18
    29e2:	b3 0b       	sbc	r27, r19
    29e4:	e4 0b       	sbc	r30, r20
    29e6:	f5 0b       	sbc	r31, r21

000029e8 <__udivmodsi4_ep>:
    29e8:	66 1f       	adc	r22, r22
    29ea:	77 1f       	adc	r23, r23
    29ec:	88 1f       	adc	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	1a 94       	dec	r1
    29f2:	69 f7       	brne	.-38     	; 0x29ce <__udivmodsi4_loop>
    29f4:	60 95       	com	r22
    29f6:	70 95       	com	r23
    29f8:	80 95       	com	r24
    29fa:	90 95       	com	r25
    29fc:	9b 01       	movw	r18, r22
    29fe:	ac 01       	movw	r20, r24
    2a00:	bd 01       	movw	r22, r26
    2a02:	cf 01       	movw	r24, r30
    2a04:	08 95       	ret

00002a06 <__prologue_saves__>:
    2a06:	2f 92       	push	r2
    2a08:	3f 92       	push	r3
    2a0a:	4f 92       	push	r4
    2a0c:	5f 92       	push	r5
    2a0e:	6f 92       	push	r6
    2a10:	7f 92       	push	r7
    2a12:	8f 92       	push	r8
    2a14:	9f 92       	push	r9
    2a16:	af 92       	push	r10
    2a18:	bf 92       	push	r11
    2a1a:	cf 92       	push	r12
    2a1c:	df 92       	push	r13
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	ca 1b       	sub	r28, r26
    2a30:	db 0b       	sbc	r29, r27
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	09 94       	ijmp

00002a3e <__epilogue_restores__>:
    2a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a40:	39 88       	ldd	r3, Y+17	; 0x11
    2a42:	48 88       	ldd	r4, Y+16	; 0x10
    2a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a50:	b9 84       	ldd	r11, Y+9	; 0x09
    2a52:	c8 84       	ldd	r12, Y+8	; 0x08
    2a54:	df 80       	ldd	r13, Y+7	; 0x07
    2a56:	ee 80       	ldd	r14, Y+6	; 0x06
    2a58:	fd 80       	ldd	r15, Y+5	; 0x05
    2a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a60:	b9 81       	ldd	r27, Y+1	; 0x01
    2a62:	ce 0f       	add	r28, r30
    2a64:	d1 1d       	adc	r29, r1
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	ed 01       	movw	r28, r26
    2a72:	08 95       	ret

00002a74 <_exit>:
    2a74:	f8 94       	cli

00002a76 <__stop_program>:
    2a76:	ff cf       	rjmp	.-2      	; 0x2a76 <__stop_program>
