
STM32F401xC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001140  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012dc  080012dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080012ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080012ec  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002105  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000801  00000000  00000000  000221c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000229c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018c  00000000  00000000  00022be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000047f  00000000  00000000  00022d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000181a  00000000  00000000  000231f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005f95  00000000  00000000  00024a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000090c  00000000  00000000  0002a9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0002b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080012c0 	.word	0x080012c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080012c0 	.word	0x080012c0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <MDMA_uddtClearFlag>:
	}
	return ret;
}

EN_MDMA_systemState_t MDMA_uddtClearFlag(EN_MDMA_streamIdOptions_t copy_uddtStreamId )
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	MDMA2_PERIPHERAL->MDMA_LIFCR|=(1U<<0)|(1U<<2)|(1U<<3)|(1U<<4)|(1U<<5);
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MDMA_uddtClearFlag+0x24>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <MDMA_uddtClearFlag+0x24>)
 8000b24:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000b28:	6093      	str	r3, [r2, #8]
}
 8000b2a:	bf00      	nop
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40026400 	.word	0x40026400

08000b3c <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if(PTR_NULL != MDMA2_CallBackHandler)
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <DMA2_Stream0_IRQHandler+0x1c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <DMA2_Stream0_IRQHandler+0x12>
	{
		MDMA2_CallBackHandler();
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <DMA2_Stream0_IRQHandler+0x1c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4798      	blx	r3
	}
	else
	{
		/* Do Nothing */
	}
	MDMA_uddtClearFlag(MDMA_STREAM_ZERO);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff ffe0 	bl	8000b14 <MDMA_uddtClearFlag>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000028 	.word	0x20000028

08000b5c <EXTI0_IRQHandler>:
	return ret;
}


void EXTI0_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	if(PTR_NULL != arrOfPtrOfExtiCallBack[0])
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <EXTI0_IRQHandler+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <EXTI0_IRQHandler+0x1e>
	{
		arrOfPtrOfExtiCallBack[0]();
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <EXTI0_IRQHandler+0x24>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4798      	blx	r3
		SET_BIT(MEXTI_PERIPHERAL->MEXTI_PR,0);
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <EXTI0_IRQHandler+0x28>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <EXTI0_IRQHandler+0x28>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6153      	str	r3, [r2, #20]
	else
	{
		/* Do Nothing */
	}

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <MGPIO_setPinMode>:

#include "../../../Inc/MCAL/gpio/gpio_interface.h"


EN_MGPIO_systemState_t MGPIO_setPinMode (EN_MGPIO_portOptions_t copy_uddtPortName ,EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinModeOptions_t copy_uddtPinMode)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	460b      	mov	r3, r1
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	4613      	mov	r3, r2
 8000b98:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d873      	bhi.n	8000c8c <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d870      	bhi.n	8000c8c <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinMode >= MGPIO_MODE_OUTPUT && copy_uddtPinMode <= MGPIO_MODE_ANALOG))
 8000baa:	797b      	ldrb	r3, [r7, #5]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d06d      	beq.n	8000c8c <MGPIO_setPinMode+0x104>
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d86a      	bhi.n	8000c8c <MGPIO_setPinMode+0x104>
	{
		switch(copy_uddtPortName)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d863      	bhi.n	8000c84 <MGPIO_setPinMode+0xfc>
 8000bbc:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <MGPIO_setPinMode+0x3c>)
 8000bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc2:	bf00      	nop
 8000bc4:	08000bdd 	.word	0x08000bdd
 8000bc8:	08000bf9 	.word	0x08000bf9
 8000bcc:	08000c15 	.word	0x08000c15
 8000bd0:	08000c31 	.word	0x08000c31
 8000bd4:	08000c4d 	.word	0x08000c4d
 8000bd8:	08000c69 	.word	0x08000c69
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <MGPIO_setPinMode+0x118>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	7979      	ldrb	r1, [r7, #5]
 8000be2:	79ba      	ldrb	r2, [r7, #6]
 8000be4:	0052      	lsls	r2, r2, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <MGPIO_setPinMode+0x118>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
				break;
 8000bf6:	e048      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <MGPIO_setPinMode+0x11c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	7979      	ldrb	r1, [r7, #5]
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <MGPIO_setPinMode+0x11c>)
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
				break;
 8000c12:	e03a      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <MGPIO_setPinMode+0x120>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	7979      	ldrb	r1, [r7, #5]
 8000c1a:	79ba      	ldrb	r2, [r7, #6]
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <MGPIO_setPinMode+0x120>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
				break;
 8000c2e:	e02c      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MGPIO_setPinMode+0x124>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	7979      	ldrb	r1, [r7, #5]
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <MGPIO_setPinMode+0x124>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
				break;
 8000c4a:	e01e      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MGPIO_setPinMode+0x128>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	7979      	ldrb	r1, [r7, #5]
 8000c52:	79ba      	ldrb	r2, [r7, #6]
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <MGPIO_setPinMode+0x128>)
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
				break;
 8000c66:	e010      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MGPIO_setPinMode+0x12c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	7979      	ldrb	r1, [r7, #5]
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	4611      	mov	r1, r2
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <MGPIO_setPinMode+0x12c>)
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
				break;
 8000c82:	e002      	b.n	8000c8a <MGPIO_setPinMode+0x102>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 8000c84:	2302      	movs	r3, #2
 8000c86:	73fb      	strb	r3, [r7, #15]
				break;
 8000c88:	bf00      	nop
		switch(copy_uddtPortName)
 8000c8a:	e001      	b.n	8000c90 <MGPIO_setPinMode+0x108>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021c00 	.word	0x40021c00

08000cb8 <MGPIO_SetAltFun>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_SetAltFun (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_altfnOptions_t Copy_uddtAltFun)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]
	if (copy_uddtPinNum <= 7U )
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d82d      	bhi.n	8000d2c <MGPIO_SetAltFun+0x74>
	{
		switch (copy_uddtPortName)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d01e      	beq.n	8000d14 <MGPIO_SetAltFun+0x5c>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dc59      	bgt.n	8000d8e <MGPIO_SetAltFun+0xd6>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <MGPIO_SetAltFun+0x2c>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00c      	beq.n	8000cfc <MGPIO_SetAltFun+0x44>
 8000ce2:	e054      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <MGPIO_SetAltFun+0xe4>)
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	7979      	ldrb	r1, [r7, #5]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <MGPIO_SetAltFun+0xe4>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6213      	str	r3, [r2, #32]
 8000cfa:	e048      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MGPIO_SetAltFun+0xe8>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	7979      	ldrb	r1, [r7, #5]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <MGPIO_SetAltFun+0xe8>)
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	6213      	str	r3, [r2, #32]
 8000d12:	e03c      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MGPIO_SetAltFun+0xec>)
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	7979      	ldrb	r1, [r7, #5]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <MGPIO_SetAltFun+0xec>)
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	e030      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>
		}
	}

	else  if (copy_uddtPinNum <= 15U )
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d82d      	bhi.n	8000d8e <MGPIO_SetAltFun+0xd6>
	{
		switch (copy_uddtPortName)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d01e      	beq.n	8000d76 <MGPIO_SetAltFun+0xbe>
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	dc28      	bgt.n	8000d8e <MGPIO_SetAltFun+0xd6>
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <MGPIO_SetAltFun+0x8e>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d00c      	beq.n	8000d5e <MGPIO_SetAltFun+0xa6>
 8000d44:	e023      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MGPIO_SetAltFun+0xe4>)
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	7979      	ldrb	r1, [r7, #5]
 8000d4c:	79ba      	ldrb	r2, [r7, #6]
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <MGPIO_SetAltFun+0xe4>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6253      	str	r3, [r2, #36]	; 0x24
 8000d5c:	e017      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MGPIO_SetAltFun+0xe8>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	7979      	ldrb	r1, [r7, #5]
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <MGPIO_SetAltFun+0xe8>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6253      	str	r3, [r2, #36]	; 0x24
 8000d74:	e00b      	b.n	8000d8e <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MGPIO_SetAltFun+0xec>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	7979      	ldrb	r1, [r7, #5]
 8000d7c:	79ba      	ldrb	r2, [r7, #6]
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	4611      	mov	r1, r2
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <MGPIO_SetAltFun+0xec>)
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6253      	str	r3, [r2, #36]	; 0x24
 8000d8c:	bf00      	nop
	else
	{
		// report error
	}

}
 8000d8e:	bf00      	nop
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800

08000da8 <MRCC_Init>:

#include "../../../Inc/MCAL/rcc/rcc_interface.h"


EN_MRCC_systemState_t MRCC_Init(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
	EN_MRCC_systemState_t ret = MRCC_NOK;
 8000dae:	2301      	movs	r3, #1
 8000db0:	71fb      	strb	r3, [r7, #7]

		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFFFFFC ) | (sysClkSelect << SW0_BIT));
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MRCC_Init+0x48>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <MRCC_Init+0x48>)
 8000db8:	f023 0303 	bic.w	r3, r3, #3
 8000dbc:	6093      	str	r3, [r2, #8]

		if(sysClkSelect == MRCC_SYS_CLK_HSI )
		{
			SET_BIT(MRCC_PERIPHERAL->RCC_CR_REG , HSION_BIT );
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MRCC_Init+0x48>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <MRCC_Init+0x48>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6013      	str	r3, [r2, #0]
			ret = MRCC_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]
		}
		else
		{
			ret = MRCC_INVALID_PARAMTER;
		}
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MRCC_Init+0x48>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <MRCC_Init+0x48>)
						|(ahbPrescaler << HPRE0_BIT)
						|(apbLowSpeedPrescaler << PPRE10_BIT)
						|(apbHighSpeedPrescaler << PPRE20_BIT));
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8000de0:	6093      	str	r3, [r2, #8]
	return ret;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40023800 	.word	0x40023800

08000df4 <MRCC_enablePeripheral>:


EN_MRCC_systemState_t MRCC_enablePeripheral(EN_MRCC_busOptions_t busSelection,EN_MRCC_peripheralOptions_t PeripheralNumber)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	EN_MRCC_systemState_t ret = MRCC_NOK;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
	if((busSelection >=0 && busSelection <=4 ) && (PeripheralNumber >=0 && PeripheralNumber <= 31))
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d848      	bhi.n	8000ea0 <MRCC_enablePeripheral+0xac>
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	2b1f      	cmp	r3, #31
 8000e12:	d845      	bhi.n	8000ea0 <MRCC_enablePeripheral+0xac>
	{
		switch(busSelection)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d83e      	bhi.n	8000e98 <MRCC_enablePeripheral+0xa4>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <MRCC_enablePeripheral+0x2c>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e4b 	.word	0x08000e4b
 8000e28:	08000e65 	.word	0x08000e65
 8000e2c:	08000e7f 	.word	0x08000e7f
		{
			case MRCC_AHP1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB1ENR_REG , PeripheralNumber);
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
				ret = MRCC_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
				break;
 8000e48:	e029      	b.n	8000e9e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_AHP2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB2ENR_REG , PeripheralNumber);
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	79ba      	ldrb	r2, [r7, #6]
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	4611      	mov	r1, r2
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6353      	str	r3, [r2, #52]	; 0x34
				ret = MRCC_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
				break;
 8000e62:	e01c      	b.n	8000e9e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB1ENR_REG , PeripheralNumber);
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	4611      	mov	r1, r2
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
				ret = MRCC_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
				break;
 8000e7c:	e00f      	b.n	8000e9e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB2ENR_REG , PeripheralNumber);
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <MRCC_enablePeripheral+0xc0>)
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
				ret = MRCC_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
				break;
 8000e96:	e002      	b.n	8000e9e <MRCC_enablePeripheral+0xaa>
			}
			default :
			{
				ret = MRCC_INVALID_PARAMTER;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	73fb      	strb	r3, [r7, #15]
		switch(busSelection)
 8000e9c:	e002      	b.n	8000ea4 <MRCC_enablePeripheral+0xb0>
 8000e9e:	e001      	b.n	8000ea4 <MRCC_enablePeripheral+0xb0>
			}
		}
	}
	else
	{
		ret = MRCC_INVALID_PARAMTER;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <SysTick_Handler>:
	return ret;
}


void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	if(PTR_NULL != pfForStkCallBack)
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <SysTick_Handler+0x6c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02a      	beq.n	8000f1c <SysTick_Handler+0x64>
	{
		uint8_t u8TempForFlagReading = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
		if(g_u8intervalMode == MSTK_IntervalSingle)
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <SysTick_Handler+0x70>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <SysTick_Handler+0x48>
		{
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <SysTick_Handler+0x74>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <SysTick_Handler+0x6c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4798      	blx	r3
			CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <SysTick_Handler+0x74>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <SysTick_Handler+0x74>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]
			MSTK_PERIPHERAL->MSTK_STK_LOAD = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <SysTick_Handler+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
			MSTK_PERIPHERAL->MSTK_STK_VAL = 0;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <SysTick_Handler+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
	}
	else
	{
		/* Do Nothing */
	}
}
 8000efe:	e00d      	b.n	8000f1c <SysTick_Handler+0x64>
		else if(g_u8intervalMode == MSTK_IntervalPeriodic)
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <SysTick_Handler+0x70>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d109      	bne.n	8000f1c <SysTick_Handler+0x64>
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <SysTick_Handler+0x74>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <SysTick_Handler+0x6c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4798      	blx	r3
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000084 	.word	0x20000084
 8000f28:	20000088 	.word	0x20000088
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <MUSART_uddtInit>:

#include "../../../Inc/MCAL/usart/usart_interface.h"


EN_MUSART_systeamState_t MUSART_uddtInit(ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77fb      	strb	r3, [r7, #31]
	MGPIO_setPinMode(MGPIO_PORTB,MGPIO_PIN6, MGPIO_MODE_ALTF);
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	2106      	movs	r1, #6
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fe21 	bl	8000b88 <MGPIO_setPinMode>
	MGPIO_setPinMode(MGPIO_PORTB,MGPIO_PIN7, MGPIO_MODE_ALTF);
 8000f46:	2202      	movs	r2, #2
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff fe1c 	bl	8000b88 <MGPIO_setPinMode>
	MGPIO_SetAltFun(MGPIO_PORTB,MGPIO_PIN6,MGPIO_ALTFN_7);
 8000f50:	2207      	movs	r2, #7
 8000f52:	2106      	movs	r1, #6
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff feaf 	bl	8000cb8 <MGPIO_SetAltFun>
	MGPIO_SetAltFun(MGPIO_PORTB,MGPIO_PIN7,MGPIO_ALTFN_7);
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff feaa 	bl	8000cb8 <MGPIO_SetAltFun>
	if(PTR_NULL != PS_uddtUartCfg)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80a9 	beq.w	80010be <MUSART_uddtInit+0x18e>
	{
		//float64_t loc_f64UsartDiv = 0;
		//float32_t loc_f32UsartFrac = 0;
		float64_t loc_f64UsartDiv = (float64_t)MUSART_PERIPHERAL_CLK / (8*(2-PS_uddtUartCfg->copy_uddtSamplingModeOption) * PS_uddtUartCfg->copy_uddtBuadRateOption);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	f1c3 0302 	rsb	r3, r3, #2
 8000f74:	461a      	mov	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa6b 	bl	800045c <__aeabi_ui2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	a154      	add	r1, pc, #336	; (adr r1, 80010dc <MUSART_uddtInit+0x1ac>)
 8000f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f90:	f7ff fc08 	bl	80007a4 <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	e9c7 2302 	strd	r2, r3, [r7, #8]
		float64_t loc_f32UsartFrac = loc_f64UsartDiv - (int)loc_f64UsartDiv;
 8000f9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa0:	f7ff fd70 	bl	8000a84 <__aeabi_d2iz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa68 	bl	800047c <__aeabi_i2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb4:	f7ff f914 	bl	80001e0 <__aeabi_dsub>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]

		if(loc_f32UsartFrac > 0)
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fcc:	f7ff fd50 	bl	8000a70 <__aeabi_dcmpgt>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d03c      	beq.n	8001050 <MUSART_uddtInit+0x120>
		{
			loc_f32UsartFrac *=16;
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <MUSART_uddtInit+0x1a0>)
 8000fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fe0:	f7ff fab6 	bl	8000550 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
			loc_f32UsartFrac = (loc_f32UsartFrac - (int)loc_f32UsartFrac)>=0.5 ? (int)loc_f32UsartFrac+1 : (int)loc_f32UsartFrac;
 8000fec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ff0:	f7ff fd48 	bl	8000a84 <__aeabi_d2iz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa40 	bl	800047c <__aeabi_i2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001004:	f7ff f8ec 	bl	80001e0 <__aeabi_dsub>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <MUSART_uddtInit+0x1a4>)
 8001016:	f7ff fd21 	bl	8000a5c <__aeabi_dcmpge>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <MUSART_uddtInit+0x108>
 8001020:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001024:	f7ff fd2e 	bl	8000a84 <__aeabi_d2iz>
 8001028:	4603      	mov	r3, r0
 800102a:	3301      	adds	r3, #1
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa25 	bl	800047c <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e009      	b.n	800104c <MUSART_uddtInit+0x11c>
 8001038:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800103c:	f7ff fd22 	bl	8000a84 <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa1a 	bl	800047c <__aeabi_i2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}

		switch(PS_uddtUartCfg->copy_uddtUartNumber)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d134      	bne.n	80010c2 <MUSART_uddtInit+0x192>
		{
			case MUSART_NUMBER_ONE:
			{

				MUART1_PERIPHERAL->MUSART_BRR = loc_f32UsartFrac;
 8001058:	4c1f      	ldr	r4, [pc, #124]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 800105a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800105e:	f7ff fd39 	bl	8000ad4 <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	60a3      	str	r3, [r4, #8]
				MUART1_PERIPHERAL->MUSART_BRR |= ((int)loc_f64UsartDiv << MUSART_DIV_MANTISSA0_BIT);
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 8001068:	689c      	ldr	r4, [r3, #8]
 800106a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800106e:	f7ff fd09 	bl	8000a84 <__aeabi_d2iz>
 8001072:	4603      	mov	r3, r0
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 8001078:	4323      	orrs	r3, r4
 800107a:	6093      	str	r3, [r2, #8]


				MUART1_PERIPHERAL->MUSART_CR2 = ((MUART1_PERIPHERAL->MUSART_CR2 & 0b0000000000000000)
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 800107e:	691b      	ldr	r3, [r3, #16]
												|(PS_uddtUartCfg->copy_uddtStopBitSelection  << MUSART_STOP0_BIT));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	031a      	lsls	r2, r3, #12
				MUART1_PERIPHERAL->MUSART_CR2 = ((MUART1_PERIPHERAL->MUSART_CR2 & 0b0000000000000000)
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 8001088:	611a      	str	r2, [r3, #16]

				MUART1_PERIPHERAL->MUSART_CR3 = 0b0000000000000000;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]

				MUART1_PERIPHERAL->MUSART_CR1 = ((MUART1_PERIPHERAL->MUSART_CR1 & 0b0000000000000000)
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MUSART_uddtInit+0x1a8>)
 8001092:	68db      	ldr	r3, [r3, #12]
						| (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_OVER8_BIT)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	03db      	lsls	r3, r3, #15
 800109a:	461a      	mov	r2, r3
						| (PS_uddtUartCfg->copy_uddtDataSizeOption  << MUSART_M_BIT)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	031b      	lsls	r3, r3, #12
 80010a2:	4313      	orrs	r3, r2
						| (PS_uddtUartCfg->copy_uddtParityControl   << MUSART_PCE_BIT)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	7a52      	ldrb	r2, [r2, #9]
 80010a8:	0292      	lsls	r2, r2, #10
 80010aa:	4313      	orrs	r3, r2
						| (PS_uddtUartCfg->copy_uddtParitySelection << MUSART_PS_BIT)
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7a92      	ldrb	r2, [r2, #10]
 80010b0:	0252      	lsls	r2, r2, #9
 80010b2:	4313      	orrs	r3, r2
				MUART1_PERIPHERAL->MUSART_CR1 = ((MUART1_PERIPHERAL->MUSART_CR1 & 0b0000000000000000)
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <MUSART_uddtInit+0x1a8>)
						| (MUASRT_ENABLE << MUSART_UE_BIT));
 80010b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
				MUART1_PERIPHERAL->MUSART_CR1 = ((MUART1_PERIPHERAL->MUSART_CR1 & 0b0000000000000000)
 80010ba:	60d3      	str	r3, [r2, #12]



				break;
 80010bc:	e001      	b.n	80010c2 <MUSART_uddtInit+0x192>
			}
		}
	}
	else
	{
		ret = MUSART_PTR_NULL;
 80010be:	2303      	movs	r3, #3
 80010c0:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3724      	adds	r7, #36	; 0x24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	f3af 8000 	nop.w
 80010d0:	40300000 	.word	0x40300000
 80010d4:	3fe00000 	.word	0x3fe00000
 80010d8:	40011000 	.word	0x40011000
 80010dc:	00000000 	.word	0x00000000
 80010e0:	416e8480 	.word	0x416e8480

080010e4 <MUSART_uddtEnable>:

EN_MUSART_systeamState_t MUSART_uddtEnable(EN_MUSART_uartNumber_t copy_uddtUartNumber , EN_MUSART_uartEnableOption_t copy_uddtUartEnableOption)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71bb      	strb	r3, [r7, #6]

	switch(copy_uddtUartNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <MUSART_uddtEnable+0x2e>
	{
		case MUSART_NUMBER_ONE :
		{

			MUART1_PERIPHERAL->MUSART_CR1 = ((MUART1_PERIPHERAL->MUSART_CR1 & 0xFF3) | (copy_uddtUartEnableOption << MUSART_RE_BIT));
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MUSART_uddtEnable+0x3c>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	f640 73f3 	movw	r3, #4083	; 0xff3
 8001102:	4013      	ands	r3, r2
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4611      	mov	r1, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <MUSART_uddtEnable+0x3c>)
 800110c:	430b      	orrs	r3, r1
 800110e:	60d3      	str	r3, [r2, #12]
			break;
 8001110:	bf00      	nop
		}
	}

}
 8001112:	bf00      	nop
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40011000 	.word	0x40011000

08001124 <MUSART_uddtSendBlocking>:
{

}

EN_MUSART_systeamState_t MUSART_uddtSendBlocking(uint8_t *copy_u8DataToSend)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	while(GET_BIT(MUART1_PERIPHERAL->MUSART_SR , MUSART_TXE_BIT) == 0);
 800112c:	bf00      	nop
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <MUSART_uddtSendBlocking+0xa>
	CLR_BIT(MUART1_PERIPHERAL->MUSART_SR , MUSART_TXE_BIT);
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 8001140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001144:	6013      	str	r3, [r2, #0]
	MUART1_PERIPHERAL->MUSART_DR = (vuint32_t)copy_u8DataToSend;
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6053      	str	r3, [r2, #4]
	while(GET_BIT(MUART1_PERIPHERAL->MUSART_SR , MUSART_TC_BIT) == 0);
 800114c:	bf00      	nop
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f9      	beq.n	800114e <MUSART_uddtSendBlocking+0x2a>
	CLR_BIT(MUART1_PERIPHERAL->MUSART_SR , MUSART_TC_BIT);
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <MUSART_uddtSendBlocking+0x50>)
 8001160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001164:	6013      	str	r3, [r2, #0]

}
 8001166:	bf00      	nop
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40011000 	.word	0x40011000

08001178 <MUSART_uddtReceiveBlocking>:

EN_MUSART_systeamState_t MUSART_uddtReceiveBlocking(uint8_t *copy_u8DataToReceive)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	while(GET_BIT(MUART1_PERIPHERAL->MUSART_SR , MUSART_RXNE_BIT) == 0);
 8001184:	bf00      	nop
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MUSART_uddtReceiveBlocking+0x38>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <MUSART_uddtReceiveBlocking+0xe>
	*copy_u8DataToReceive = MUART1_PERIPHERAL->MUSART_DR;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MUSART_uddtReceiveBlocking+0x38>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	701a      	strb	r2, [r3, #0]
	ret = MUSART_OK;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
	return ret;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40011000 	.word	0x40011000

080011b4 <main>:
		.copy_uddtParitySelection = MUSART_EVEN_PARITY
};


void main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	MRCC_Init();
 80011ba:	f7ff fdf5 	bl	8000da8 <MRCC_Init>
	MRCC_enablePeripheral(MRCC_AHP1_BUS,MRCC_GPIOB_PERIPHERAL);
 80011be:	2101      	movs	r1, #1
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fe17 	bl	8000df4 <MRCC_enablePeripheral>
	MRCC_enablePeripheral(MRCC_APB2_BUS , MRCC_USART1_PERIPHERAL);
 80011c6:	2104      	movs	r1, #4
 80011c8:	2003      	movs	r0, #3
 80011ca:	f7ff fe13 	bl	8000df4 <MRCC_enablePeripheral>
	MUSART_uddtInit(&uart);
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <main+0x6c>)
 80011d0:	f7ff feae 	bl	8000f30 <MUSART_uddtInit>
	MUSART_uddtEnable(MUSART_NUMBER_ONE , MUSART_ENABLE_BOTH);
 80011d4:	2103      	movs	r1, #3
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff ff84 	bl	80010e4 <MUSART_uddtEnable>
	uint8_t data = '#';
 80011dc:	2323      	movs	r3, #35	; 0x23
 80011de:	71fb      	strb	r3, [r7, #7]
	MUSART_uddtSendBlocking((uint8_t *)'s');
 80011e0:	2073      	movs	r0, #115	; 0x73
 80011e2:	f7ff ff9f 	bl	8001124 <MUSART_uddtSendBlocking>
	MUSART_uddtSendBlocking((uint8_t *)'h');
 80011e6:	2068      	movs	r0, #104	; 0x68
 80011e8:	f7ff ff9c 	bl	8001124 <MUSART_uddtSendBlocking>
	MUSART_uddtSendBlocking((uint8_t *)'e');
 80011ec:	2065      	movs	r0, #101	; 0x65
 80011ee:	f7ff ff99 	bl	8001124 <MUSART_uddtSendBlocking>
	MUSART_uddtSendBlocking((uint8_t *)'r');
 80011f2:	2072      	movs	r0, #114	; 0x72
 80011f4:	f7ff ff96 	bl	8001124 <MUSART_uddtSendBlocking>
	MUSART_uddtSendBlocking((uint8_t *)'i');
 80011f8:	2069      	movs	r0, #105	; 0x69
 80011fa:	f7ff ff93 	bl	8001124 <MUSART_uddtSendBlocking>
	MUSART_uddtSendBlocking((uint8_t *)'f');
 80011fe:	2066      	movs	r0, #102	; 0x66
 8001200:	f7ff ff90 	bl	8001124 <MUSART_uddtSendBlocking>
	while(1)
	{
		MUSART_uddtReceiveBlocking(&data);
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffb6 	bl	8001178 <MUSART_uddtReceiveBlocking>
		if(data != '#')
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b23      	cmp	r3, #35	; 0x23
 8001210:	d0f8      	beq.n	8001204 <main+0x50>
		{
			MUSART_uddtSendBlocking(&data);
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff85 	bl	8001124 <MUSART_uddtSendBlocking>
			data = '#';
 800121a:	2323      	movs	r3, #35	; 0x23
 800121c:	71fb      	strb	r3, [r7, #7]
		MUSART_uddtReceiveBlocking(&data);
 800121e:	e7f1      	b.n	8001204 <main+0x50>
 8001220:	20000000 	.word	0x20000000

08001224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f000 f811 	bl	8001278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff ffad 	bl	80011b4 <main>

0800125a <LoopForever>:

LoopForever:
  b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001268:	080012e0 	.word	0x080012e0
  ldr r2, =_sbss
 800126c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001270:	2000008c 	.word	0x2000008c

08001274 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <__libc_init_array>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	4d0d      	ldr	r5, [pc, #52]	; (80012b0 <__libc_init_array+0x38>)
 800127c:	4c0d      	ldr	r4, [pc, #52]	; (80012b4 <__libc_init_array+0x3c>)
 800127e:	1b64      	subs	r4, r4, r5
 8001280:	10a4      	asrs	r4, r4, #2
 8001282:	2600      	movs	r6, #0
 8001284:	42a6      	cmp	r6, r4
 8001286:	d109      	bne.n	800129c <__libc_init_array+0x24>
 8001288:	4d0b      	ldr	r5, [pc, #44]	; (80012b8 <__libc_init_array+0x40>)
 800128a:	4c0c      	ldr	r4, [pc, #48]	; (80012bc <__libc_init_array+0x44>)
 800128c:	f000 f818 	bl	80012c0 <_init>
 8001290:	1b64      	subs	r4, r4, r5
 8001292:	10a4      	asrs	r4, r4, #2
 8001294:	2600      	movs	r6, #0
 8001296:	42a6      	cmp	r6, r4
 8001298:	d105      	bne.n	80012a6 <__libc_init_array+0x2e>
 800129a:	bd70      	pop	{r4, r5, r6, pc}
 800129c:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a0:	4798      	blx	r3
 80012a2:	3601      	adds	r6, #1
 80012a4:	e7ee      	b.n	8001284 <__libc_init_array+0xc>
 80012a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012aa:	4798      	blx	r3
 80012ac:	3601      	adds	r6, #1
 80012ae:	e7f2      	b.n	8001296 <__libc_init_array+0x1e>
 80012b0:	080012d8 	.word	0x080012d8
 80012b4:	080012d8 	.word	0x080012d8
 80012b8:	080012d8 	.word	0x080012d8
 80012bc:	080012dc 	.word	0x080012dc

080012c0 <_init>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	bf00      	nop
 80012c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c6:	bc08      	pop	{r3}
 80012c8:	469e      	mov	lr, r3
 80012ca:	4770      	bx	lr

080012cc <_fini>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	bf00      	nop
 80012d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d2:	bc08      	pop	{r3}
 80012d4:	469e      	mov	lr, r3
 80012d6:	4770      	bx	lr
