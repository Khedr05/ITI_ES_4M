
15_KP_Interfacing_With_SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00001852  000018e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800138  00800138  000019be  2**0
                  ALLOC
  3 .stab         00002d78  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024e2  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 0c 	call	0x1838	; 0x1838 <main>
      8a:	0c 94 27 0c 	jmp	0x184e	; 0x184e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_initPin>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_initPin+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	9b 83       	std	Y+3, r25	; 0x03
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	89 83       	std	Y+1, r24	; 0x01
      a6:	8a 81       	ldd	r24, Y+2	; 0x02
      a8:	9b 81       	ldd	r25, Y+3	; 0x03
      aa:	00 97       	sbiw	r24, 0x00	; 0
      ac:	b1 f0       	breq	.+44     	; 0xda <GPIO_initPin+0x48>
      ae:	ea 81       	ldd	r30, Y+2	; 0x02
      b0:	fb 81       	ldd	r31, Y+3	; 0x03
      b2:	22 81       	ldd	r18, Z+2	; 0x02
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	9b 81       	ldd	r25, Y+3	; 0x03
      b8:	62 2f       	mov	r22, r18
      ba:	0e 94 76 00 	call	0xec	; 0xec <GPIO_changePinDir>
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	88 23       	and	r24, r24
      c4:	61 f4       	brne	.+24     	; 0xde <GPIO_initPin+0x4c>
      c6:	ea 81       	ldd	r30, Y+2	; 0x02
      c8:	fb 81       	ldd	r31, Y+3	; 0x03
      ca:	23 81       	ldd	r18, Z+3	; 0x03
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	9b 81       	ldd	r25, Y+3	; 0x03
      d0:	62 2f       	mov	r22, r18
      d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_initPin+0x4c>
      da:	82 e0       	ldi	r24, 0x02	; 2
      dc:	89 83       	std	Y+1, r24	; 0x01
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	cf 91       	pop	r28
      e8:	df 91       	pop	r29
      ea:	08 95       	ret

000000ec <GPIO_changePinDir>:
  }
  return ret;
}

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                        EN_GPIO_pinDir_t copyNewPinDir) {
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	00 d0       	rcall	.+0      	; 0xf2 <GPIO_changePinDir+0x6>
      f2:	00 d0       	rcall	.+0      	; 0xf4 <GPIO_changePinDir+0x8>
      f4:	00 d0       	rcall	.+0      	; 0xf6 <GPIO_changePinDir+0xa>
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	9b 83       	std	Y+3, r25	; 0x03
      fc:	8a 83       	std	Y+2, r24	; 0x02
      fe:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	9b 81       	ldd	r25, Y+3	; 0x03
     108:	00 97       	sbiw	r24, 0x00	; 0
     10a:	09 f4       	brne	.+2      	; 0x10e <GPIO_changePinDir+0x22>
     10c:	68 c0       	rjmp	.+208    	; 0x1de <GPIO_changePinDir+0xf2>
    switch (copyNewPinDir) {
     10e:	8c 81       	ldd	r24, Y+4	; 0x04
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	3e 83       	std	Y+6, r19	; 0x06
     116:	2d 83       	std	Y+5, r18	; 0x05
     118:	8d 81       	ldd	r24, Y+5	; 0x05
     11a:	9e 81       	ldd	r25, Y+6	; 0x06
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	31 f0       	breq	.+12     	; 0x12c <GPIO_changePinDir+0x40>
     120:	2d 81       	ldd	r18, Y+5	; 0x05
     122:	3e 81       	ldd	r19, Y+6	; 0x06
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	31 05       	cpc	r19, r1
     128:	71 f1       	breq	.+92     	; 0x186 <GPIO_changePinDir+0x9a>
     12a:	5b c0       	rjmp	.+182    	; 0x1e2 <GPIO_changePinDir+0xf6>
    case GPIO_INPUT: {
      CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     12c:	ea 81       	ldd	r30, Y+2	; 0x02
     12e:	fb 81       	ldd	r31, Y+3	; 0x03
     130:	80 81       	ld	r24, Z
     132:	88 2f       	mov	r24, r24
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	fc 01       	movw	r30, r24
     13c:	e0 5a       	subi	r30, 0xA0	; 160
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	a0 81       	ld	r26, Z
     142:	b1 81       	ldd	r27, Z+1	; 0x01
     144:	ea 81       	ldd	r30, Y+2	; 0x02
     146:	fb 81       	ldd	r31, Y+3	; 0x03
     148:	80 81       	ld	r24, Z
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	fc 01       	movw	r30, r24
     154:	e0 5a       	subi	r30, 0xA0	; 160
     156:	ff 4f       	sbci	r31, 0xFF	; 255
     158:	01 90       	ld	r0, Z+
     15a:	f0 81       	ld	r31, Z
     15c:	e0 2d       	mov	r30, r0
     15e:	80 81       	ld	r24, Z
     160:	48 2f       	mov	r20, r24
     162:	ea 81       	ldd	r30, Y+2	; 0x02
     164:	fb 81       	ldd	r31, Y+3	; 0x03
     166:	81 81       	ldd	r24, Z+1	; 0x01
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	02 2e       	mov	r0, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <GPIO_changePinDir+0x8c>
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	0a 94       	dec	r0
     17a:	e2 f7       	brpl	.-8      	; 0x174 <GPIO_changePinDir+0x88>
     17c:	80 95       	com	r24
     17e:	84 23       	and	r24, r20
     180:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     182:	19 82       	std	Y+1, r1	; 0x01
     184:	2e c0       	rjmp	.+92     	; 0x1e2 <GPIO_changePinDir+0xf6>
      break;
    }
    case GPIO_OUTPUT: {
      SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     186:	ea 81       	ldd	r30, Y+2	; 0x02
     188:	fb 81       	ldd	r31, Y+3	; 0x03
     18a:	80 81       	ld	r24, Z
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	fc 01       	movw	r30, r24
     196:	e0 5a       	subi	r30, 0xA0	; 160
     198:	ff 4f       	sbci	r31, 0xFF	; 255
     19a:	a0 81       	ld	r26, Z
     19c:	b1 81       	ldd	r27, Z+1	; 0x01
     19e:	ea 81       	ldd	r30, Y+2	; 0x02
     1a0:	fb 81       	ldd	r31, Y+3	; 0x03
     1a2:	80 81       	ld	r24, Z
     1a4:	88 2f       	mov	r24, r24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	88 0f       	add	r24, r24
     1aa:	99 1f       	adc	r25, r25
     1ac:	fc 01       	movw	r30, r24
     1ae:	e0 5a       	subi	r30, 0xA0	; 160
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	01 90       	ld	r0, Z+
     1b4:	f0 81       	ld	r31, Z
     1b6:	e0 2d       	mov	r30, r0
     1b8:	80 81       	ld	r24, Z
     1ba:	48 2f       	mov	r20, r24
     1bc:	ea 81       	ldd	r30, Y+2	; 0x02
     1be:	fb 81       	ldd	r31, Y+3	; 0x03
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 2e       	mov	r0, r18
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GPIO_changePinDir+0xe6>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GPIO_changePinDir+0xe2>
     1d6:	84 2b       	or	r24, r20
     1d8:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     1da:	19 82       	std	Y+1, r1	; 0x01
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_changePinDir+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e4:	26 96       	adiw	r28, 0x06	; 6
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                         EN_GPIO_pinLogic_t copyNewPinLogic) {
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <GPIO_writePinLogic+0x6>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <GPIO_writePinLogic+0x8>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <GPIO_writePinLogic+0xa>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	9b 83       	std	Y+3, r25	; 0x03
     206:	8a 83       	std	Y+2, r24	; 0x02
     208:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	9b 81       	ldd	r25, Y+3	; 0x03
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	09 f4       	brne	.+2      	; 0x218 <GPIO_writePinLogic+0x22>
     216:	68 c0       	rjmp	.+208    	; 0x2e8 <GPIO_writePinLogic+0xf2>
    switch (copyNewPinLogic) {
     218:	8c 81       	ldd	r24, Y+4	; 0x04
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	3e 83       	std	Y+6, r19	; 0x06
     220:	2d 83       	std	Y+5, r18	; 0x05
     222:	8d 81       	ldd	r24, Y+5	; 0x05
     224:	9e 81       	ldd	r25, Y+6	; 0x06
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	31 f0       	breq	.+12     	; 0x236 <GPIO_writePinLogic+0x40>
     22a:	2d 81       	ldd	r18, Y+5	; 0x05
     22c:	3e 81       	ldd	r19, Y+6	; 0x06
     22e:	21 30       	cpi	r18, 0x01	; 1
     230:	31 05       	cpc	r19, r1
     232:	71 f1       	breq	.+92     	; 0x290 <GPIO_writePinLogic+0x9a>
     234:	5b c0       	rjmp	.+182    	; 0x2ec <GPIO_writePinLogic+0xf6>
    case GPIO_LOW: {
      CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     236:	ea 81       	ldd	r30, Y+2	; 0x02
     238:	fb 81       	ldd	r31, Y+3	; 0x03
     23a:	80 81       	ld	r24, Z
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	fc 01       	movw	r30, r24
     246:	e8 59       	subi	r30, 0x98	; 152
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	a0 81       	ld	r26, Z
     24c:	b1 81       	ldd	r27, Z+1	; 0x01
     24e:	ea 81       	ldd	r30, Y+2	; 0x02
     250:	fb 81       	ldd	r31, Y+3	; 0x03
     252:	80 81       	ld	r24, Z
     254:	88 2f       	mov	r24, r24
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	fc 01       	movw	r30, r24
     25e:	e8 59       	subi	r30, 0x98	; 152
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	01 90       	ld	r0, Z+
     264:	f0 81       	ld	r31, Z
     266:	e0 2d       	mov	r30, r0
     268:	80 81       	ld	r24, Z
     26a:	48 2f       	mov	r20, r24
     26c:	ea 81       	ldd	r30, Y+2	; 0x02
     26e:	fb 81       	ldd	r31, Y+3	; 0x03
     270:	81 81       	ldd	r24, Z+1	; 0x01
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <GPIO_writePinLogic+0x8c>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <GPIO_writePinLogic+0x88>
     286:	80 95       	com	r24
     288:	84 23       	and	r24, r20
     28a:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     28c:	19 82       	std	Y+1, r1	; 0x01
     28e:	2e c0       	rjmp	.+92     	; 0x2ec <GPIO_writePinLogic+0xf6>
      break;
    }
    case GPIO_HIGH: {
      SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     290:	ea 81       	ldd	r30, Y+2	; 0x02
     292:	fb 81       	ldd	r31, Y+3	; 0x03
     294:	80 81       	ld	r24, Z
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	fc 01       	movw	r30, r24
     2a0:	e8 59       	subi	r30, 0x98	; 152
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	a0 81       	ld	r26, Z
     2a6:	b1 81       	ldd	r27, Z+1	; 0x01
     2a8:	ea 81       	ldd	r30, Y+2	; 0x02
     2aa:	fb 81       	ldd	r31, Y+3	; 0x03
     2ac:	80 81       	ld	r24, Z
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	fc 01       	movw	r30, r24
     2b8:	e8 59       	subi	r30, 0x98	; 152
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	01 90       	ld	r0, Z+
     2be:	f0 81       	ld	r31, Z
     2c0:	e0 2d       	mov	r30, r0
     2c2:	80 81       	ld	r24, Z
     2c4:	48 2f       	mov	r20, r24
     2c6:	ea 81       	ldd	r30, Y+2	; 0x02
     2c8:	fb 81       	ldd	r31, Y+3	; 0x03
     2ca:	81 81       	ldd	r24, Z+1	; 0x01
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 2e       	mov	r0, r18
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_writePinLogic+0xe6>
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_writePinLogic+0xe2>
     2e0:	84 2b       	or	r24, r20
     2e2:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     2e4:	19 82       	std	Y+1, r1	; 0x01
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GPIO_writePinLogic+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ee:	26 96       	adiw	r28, 0x06	; 6
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	08 95       	ret

00000300 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                  EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     300:	df 93       	push	r29
     302:	cf 93       	push	r28
     304:	00 d0       	rcall	.+0      	; 0x306 <GPIO_readPinLogic+0x6>
     306:	00 d0       	rcall	.+0      	; 0x308 <GPIO_readPinLogic+0x8>
     308:	0f 92       	push	r0
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	9b 83       	std	Y+3, r25	; 0x03
     310:	8a 83       	std	Y+2, r24	; 0x02
     312:	7d 83       	std	Y+5, r23	; 0x05
     314:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	00 97       	sbiw	r24, 0x00	; 0
     320:	11 f1       	breq	.+68     	; 0x366 <GPIO_readPinLogic+0x66>
    *retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     322:	ea 81       	ldd	r30, Y+2	; 0x02
     324:	fb 81       	ldd	r31, Y+3	; 0x03
     326:	80 81       	ld	r24, Z
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	fc 01       	movw	r30, r24
     332:	e0 59       	subi	r30, 0x90	; 144
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	01 90       	ld	r0, Z+
     338:	f0 81       	ld	r31, Z
     33a:	e0 2d       	mov	r30, r0
     33c:	80 81       	ld	r24, Z
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	ea 81       	ldd	r30, Y+2	; 0x02
     344:	fb 81       	ldd	r31, Y+3	; 0x03
     346:	81 81       	ldd	r24, Z+1	; 0x01
     348:	88 2f       	mov	r24, r24
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	a9 01       	movw	r20, r18
     34e:	02 c0       	rjmp	.+4      	; 0x354 <GPIO_readPinLogic+0x54>
     350:	55 95       	asr	r21
     352:	47 95       	ror	r20
     354:	8a 95       	dec	r24
     356:	e2 f7       	brpl	.-8      	; 0x350 <GPIO_readPinLogic+0x50>
     358:	ca 01       	movw	r24, r20
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	ec 81       	ldd	r30, Y+4	; 0x04
     35e:	fd 81       	ldd	r31, Y+5	; 0x05
     360:	80 83       	st	Z, r24
                                  ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     362:	19 82       	std	Y+1, r1	; 0x01
     364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_readPinLogic+0x6a>
  } else {
    ret = GPIO_NULL_PTR;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	08 95       	ret

0000037c <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     37c:	df 93       	push	r29
     37e:	cf 93       	push	r28
     380:	00 d0       	rcall	.+0      	; 0x382 <GPIO_togglePinLogic+0x6>
     382:	0f 92       	push	r0
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	9b 83       	std	Y+3, r25	; 0x03
     38a:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	9b 81       	ldd	r25, Y+3	; 0x03
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	61 f1       	breq	.+88     	; 0x3f0 <GPIO_togglePinLogic+0x74>
    TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     398:	ea 81       	ldd	r30, Y+2	; 0x02
     39a:	fb 81       	ldd	r31, Y+3	; 0x03
     39c:	80 81       	ld	r24, Z
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	fc 01       	movw	r30, r24
     3a8:	e8 59       	subi	r30, 0x98	; 152
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	a0 81       	ld	r26, Z
     3ae:	b1 81       	ldd	r27, Z+1	; 0x01
     3b0:	ea 81       	ldd	r30, Y+2	; 0x02
     3b2:	fb 81       	ldd	r31, Y+3	; 0x03
     3b4:	80 81       	ld	r24, Z
     3b6:	88 2f       	mov	r24, r24
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	e8 59       	subi	r30, 0x98	; 152
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	01 90       	ld	r0, Z+
     3c6:	f0 81       	ld	r31, Z
     3c8:	e0 2d       	mov	r30, r0
     3ca:	80 81       	ld	r24, Z
     3cc:	48 2f       	mov	r20, r24
     3ce:	ea 81       	ldd	r30, Y+2	; 0x02
     3d0:	fb 81       	ldd	r31, Y+3	; 0x03
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	02 2e       	mov	r0, r18
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_togglePinLogic+0x68>
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	0a 94       	dec	r0
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_togglePinLogic+0x64>
     3e8:	84 27       	eor	r24, r20
     3ea:	8c 93       	st	X, r24
            ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     3ec:	19 82       	std	Y+1, r1	; 0x01
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GPIO_togglePinLogic+0x78>
  } else {
    ret = GPIO_NULL_PTR;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	89 83       	std	Y+1, r24	; 0x01
  }

  return ret;
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	cf 91       	pop	r28
     3fe:	df 91       	pop	r29
     400:	08 95       	ret

00000402 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
                                    EN_GPIO_pinDir_t copyPortDir,
                                    EN_GPIO_pinLogic_t copyPortLogic) {
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	28 97       	sbiw	r28, 0x08	; 8
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	6b 83       	std	Y+3, r22	; 0x03
     41a:	4c 83       	std	Y+4, r20	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	89 83       	std	Y+1, r24	; 0x01

  switch (copyPortDir) {
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	38 87       	std	Y+8, r19	; 0x08
     428:	2f 83       	std	Y+7, r18	; 0x07
     42a:	8f 81       	ldd	r24, Y+7	; 0x07
     42c:	98 85       	ldd	r25, Y+8	; 0x08
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	31 f0       	breq	.+12     	; 0x43e <GPIO_initPort+0x3c>
     432:	2f 81       	ldd	r18, Y+7	; 0x07
     434:	38 85       	ldd	r19, Y+8	; 0x08
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	31 05       	cpc	r19, r1
     43a:	79 f0       	breq	.+30     	; 0x45a <GPIO_initPort+0x58>
     43c:	1c c0       	rjmp	.+56     	; 0x476 <GPIO_initPort+0x74>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	fc 01       	movw	r30, r24
     44a:	e0 5a       	subi	r30, 0xA0	; 160
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	01 90       	ld	r0, Z+
     450:	f0 81       	ld	r31, Z
     452:	e0 2d       	mov	r30, r0
     454:	10 82       	st	Z, r1
    ret = GPIO_OK;
     456:	19 82       	std	Y+1, r1	; 0x01
     458:	0e c0       	rjmp	.+28     	; 0x476 <GPIO_initPort+0x74>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	fc 01       	movw	r30, r24
     466:	e0 5a       	subi	r30, 0xA0	; 160
     468:	ff 4f       	sbci	r31, 0xFF	; 255
     46a:	01 90       	ld	r0, Z+
     46c:	f0 81       	ld	r31, Z
     46e:	e0 2d       	mov	r30, r0
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	80 83       	st	Z, r24
    ret = GPIO_OK;
     474:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  switch (copyPortLogic) {
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	28 2f       	mov	r18, r24
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	3e 83       	std	Y+6, r19	; 0x06
     47e:	2d 83       	std	Y+5, r18	; 0x05
     480:	8d 81       	ldd	r24, Y+5	; 0x05
     482:	9e 81       	ldd	r25, Y+6	; 0x06
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	31 f0       	breq	.+12     	; 0x494 <GPIO_initPort+0x92>
     488:	2d 81       	ldd	r18, Y+5	; 0x05
     48a:	3e 81       	ldd	r19, Y+6	; 0x06
     48c:	21 30       	cpi	r18, 0x01	; 1
     48e:	31 05       	cpc	r19, r1
     490:	79 f0       	breq	.+30     	; 0x4b0 <GPIO_initPort+0xae>
     492:	1c c0       	rjmp	.+56     	; 0x4cc <GPIO_initPort+0xca>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	fc 01       	movw	r30, r24
     4a0:	e8 59       	subi	r30, 0x98	; 152
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	01 90       	ld	r0, Z+
     4a6:	f0 81       	ld	r31, Z
     4a8:	e0 2d       	mov	r30, r0
     4aa:	10 82       	st	Z, r1
    ret = GPIO_OK;
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	0e c0       	rjmp	.+28     	; 0x4cc <GPIO_initPort+0xca>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	88 2f       	mov	r24, r24
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	fc 01       	movw	r30, r24
     4bc:	e8 59       	subi	r30, 0x98	; 152
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	01 90       	ld	r0, Z+
     4c2:	f0 81       	ld	r31, Z
     4c4:	e0 2d       	mov	r30, r0
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	80 83       	st	Z, r24
    ret = GPIO_OK;
     4ca:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ce:	28 96       	adiw	r28, 0x08	; 8
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
                                         EN_GPIO_pinDir_t copyNewPortDir) {
     4e0:	df 93       	push	r29
     4e2:	cf 93       	push	r28
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <GPIO_changePortDir+0x6>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <GPIO_changePortDir+0x8>
     4e8:	0f 92       	push	r0
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	89 83       	std	Y+1, r24	; 0x01

  switch (copyNewPortDir) {
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	3d 83       	std	Y+5, r19	; 0x05
     4fe:	2c 83       	std	Y+4, r18	; 0x04
     500:	8c 81       	ldd	r24, Y+4	; 0x04
     502:	9d 81       	ldd	r25, Y+5	; 0x05
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	31 f0       	breq	.+12     	; 0x514 <GPIO_changePortDir+0x34>
     508:	2c 81       	ldd	r18, Y+4	; 0x04
     50a:	3d 81       	ldd	r19, Y+5	; 0x05
     50c:	21 30       	cpi	r18, 0x01	; 1
     50e:	31 05       	cpc	r19, r1
     510:	79 f0       	breq	.+30     	; 0x530 <GPIO_changePortDir+0x50>
     512:	1c c0       	rjmp	.+56     	; 0x54c <GPIO_changePortDir+0x6c>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	fc 01       	movw	r30, r24
     520:	e0 5a       	subi	r30, 0xA0	; 160
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	01 90       	ld	r0, Z+
     526:	f0 81       	ld	r31, Z
     528:	e0 2d       	mov	r30, r0
     52a:	10 82       	st	Z, r1
    ret = GPIO_OK;
     52c:	19 82       	std	Y+1, r1	; 0x01
     52e:	0e c0       	rjmp	.+28     	; 0x54c <GPIO_changePortDir+0x6c>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	88 2f       	mov	r24, r24
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	fc 01       	movw	r30, r24
     53c:	e0 5a       	subi	r30, 0xA0	; 160
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	01 90       	ld	r0, Z+
     542:	f0 81       	ld	r31, Z
     544:	e0 2d       	mov	r30, r0
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	80 83       	st	Z, r24
    ret = GPIO_OK;
     54a:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
                                          EN_GPIO_pinLogic_t copyNewPortLogic) {
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <GPIO_writePortLogic+0x6>
     564:	00 d0       	rcall	.+0      	; 0x566 <GPIO_writePortLogic+0x8>
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	8a 83       	std	Y+2, r24	; 0x02
     56e:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	89 83       	std	Y+1, r24	; 0x01
  switch (copyNewPortLogic) {
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	28 2f       	mov	r18, r24
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	3d 83       	std	Y+5, r19	; 0x05
     57c:	2c 83       	std	Y+4, r18	; 0x04
     57e:	8c 81       	ldd	r24, Y+4	; 0x04
     580:	9d 81       	ldd	r25, Y+5	; 0x05
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	31 f0       	breq	.+12     	; 0x592 <GPIO_writePortLogic+0x34>
     586:	2c 81       	ldd	r18, Y+4	; 0x04
     588:	3d 81       	ldd	r19, Y+5	; 0x05
     58a:	21 30       	cpi	r18, 0x01	; 1
     58c:	31 05       	cpc	r19, r1
     58e:	79 f0       	breq	.+30     	; 0x5ae <GPIO_writePortLogic+0x50>
     590:	1c c0       	rjmp	.+56     	; 0x5ca <GPIO_writePortLogic+0x6c>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	fc 01       	movw	r30, r24
     59e:	e8 59       	subi	r30, 0x98	; 152
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	01 90       	ld	r0, Z+
     5a4:	f0 81       	ld	r31, Z
     5a6:	e0 2d       	mov	r30, r0
     5a8:	10 82       	st	Z, r1
    ret = GPIO_OK;
     5aa:	19 82       	std	Y+1, r1	; 0x01
     5ac:	0e c0       	rjmp	.+28     	; 0x5ca <GPIO_writePortLogic+0x6c>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	88 2f       	mov	r24, r24
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	fc 01       	movw	r30, r24
     5ba:	e8 59       	subi	r30, 0x98	; 152
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	01 90       	ld	r0, Z+
     5c0:	f0 81       	ld	r31, Z
     5c2:	e0 2d       	mov	r30, r0
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	80 83       	st	Z, r24
    ret = GPIO_OK;
     5c8:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
}
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
                   EN_GPIO_pinLogic_t *retCurrentPortLogic) {
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <GPIO_readPortLogic+0x6>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <GPIO_readPortLogic+0x8>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	8a 83       	std	Y+2, r24	; 0x02
     5ea:	7c 83       	std	Y+4, r23	; 0x04
     5ec:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	89 83       	std	Y+1, r24	; 0x01

  *retCurrentPortLogic = *pin_registers[copyPortName];
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	fc 01       	movw	r30, r24
     5fe:	e0 59       	subi	r30, 0x90	; 144
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	01 90       	ld	r0, Z+
     604:	f0 81       	ld	r31, Z
     606:	e0 2d       	mov	r30, r0
     608:	80 81       	ld	r24, Z
     60a:	eb 81       	ldd	r30, Y+3	; 0x03
     60c:	fc 81       	ldd	r31, Y+4	; 0x04
     60e:	80 83       	st	Z, r24
  ret = GPIO_OK;
     610:	19 82       	std	Y+1, r1	; 0x01
  return ret;
     612:	89 81       	ldd	r24, Y+1	; 0x01
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <GPIO_togglePortLogic+0x6>
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	89 83       	std	Y+1, r24	; 0x01
  *ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	88 2f       	mov	r24, r24
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	fc 01       	movw	r30, r24
     63e:	e0 5a       	subi	r30, 0xA0	; 160
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	a0 81       	ld	r26, Z
     644:	b1 81       	ldd	r27, Z+1	; 0x01
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	88 2f       	mov	r24, r24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	fc 01       	movw	r30, r24
     652:	e0 5a       	subi	r30, 0xA0	; 160
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	01 90       	ld	r0, Z+
     658:	f0 81       	ld	r31, Z
     65a:	e0 2d       	mov	r30, r0
     65c:	20 81       	ld	r18, Z
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	fc 01       	movw	r30, r24
     66a:	e0 5a       	subi	r30, 0xA0	; 160
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	01 90       	ld	r0, Z+
     670:	f0 81       	ld	r31, Z
     672:	e0 2d       	mov	r30, r0
     674:	80 81       	ld	r24, Z
     676:	82 27       	eor	r24, r18
     678:	8c 93       	st	X, r24
  ret = GPIO_OK;
     67a:	19 82       	std	Y+1, r1	; 0x01
  return ret;
     67c:	89 81       	ldd	r24, Y+1	; 0x01
}
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	08 95       	ret

00000688 <SSD_int>:
    {GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW}};

EN_SSD_systemState_t SSD_int(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	c4 54       	subi	r28, 0x44	; 68
     692:	d0 40       	sbci	r29, 0x00	; 0
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	fe 01       	movw	r30, r28
     6a0:	ed 5b       	subi	r30, 0xBD	; 189
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	80 83       	st	Z, r24
  EN_SSD_systemState_t ssdRet = SSD_NOK;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
     6b0:	fe 01       	movw	r30, r28
     6b2:	ed 5b       	subi	r30, 0xBD	; 189
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <SSD_int+0x38>
     6be:	d2 c1       	rjmp	.+932    	; 0xa64 <__stack+0x205>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
     6c0:	fe 01       	movw	r30, r28
     6c2:	ed 5b       	subi	r30, 0xBD	; 189
     6c4:	ff 4f       	sbci	r31, 0xFF	; 255
     6c6:	01 90       	ld	r0, Z+
     6c8:	f0 81       	ld	r31, Z
     6ca:	e0 2d       	mov	r30, r0
     6cc:	80 81       	ld	r24, Z
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <SSD_int+0x4c>
     6d2:	df c0       	rjmp	.+446    	; 0x892 <__stack+0x33>

      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
     6d4:	fe 01       	movw	r30, r28
     6d6:	ed 5b       	subi	r30, 0xBD	; 189
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	01 90       	ld	r0, Z+
     6dc:	f0 81       	ld	r31, Z
     6de:	e0 2d       	mov	r30, r0
     6e0:	97 85       	ldd	r25, Z+15	; 0x0f
     6e2:	fe 01       	movw	r30, r28
     6e4:	ed 5b       	subi	r30, 0xBD	; 189
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	01 90       	ld	r0, Z+
     6ea:	f0 81       	ld	r31, Z
     6ec:	e0 2d       	mov	r30, r0
     6ee:	80 89       	ldd	r24, Z+16	; 0x10
     6f0:	9b 83       	std	Y+3, r25	; 0x03
     6f2:	8c 83       	std	Y+4, r24	; 0x04
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	8d 83       	std	Y+5, r24	; 0x05
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
     6fc:	fe 01       	movw	r30, r28
     6fe:	ed 5b       	subi	r30, 0xBD	; 189
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	01 90       	ld	r0, Z+
     704:	f0 81       	ld	r31, Z
     706:	e0 2d       	mov	r30, r0
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	fe 01       	movw	r30, r28
     70c:	ed 5b       	subi	r30, 0xBD	; 189
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	01 90       	ld	r0, Z+
     712:	f0 81       	ld	r31, Z
     714:	e0 2d       	mov	r30, r0
     716:	82 81       	ldd	r24, Z+2	; 0x02
     718:	9f 83       	std	Y+7, r25	; 0x07
     71a:	88 87       	std	Y+8, r24	; 0x08
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	89 87       	std	Y+9, r24	; 0x09
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
     724:	fe 01       	movw	r30, r28
     726:	ed 5b       	subi	r30, 0xBD	; 189
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	01 90       	ld	r0, Z+
     72c:	f0 81       	ld	r31, Z
     72e:	e0 2d       	mov	r30, r0
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	fe 01       	movw	r30, r28
     734:	ed 5b       	subi	r30, 0xBD	; 189
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	01 90       	ld	r0, Z+
     73a:	f0 81       	ld	r31, Z
     73c:	e0 2d       	mov	r30, r0
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	9b 87       	std	Y+11, r25	; 0x0b
     742:	8c 87       	std	Y+12, r24	; 0x0c
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	8d 87       	std	Y+13, r24	; 0x0d
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
     74c:	fe 01       	movw	r30, r28
     74e:	ed 5b       	subi	r30, 0xBD	; 189
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	01 90       	ld	r0, Z+
     754:	f0 81       	ld	r31, Z
     756:	e0 2d       	mov	r30, r0
     758:	95 81       	ldd	r25, Z+5	; 0x05
     75a:	fe 01       	movw	r30, r28
     75c:	ed 5b       	subi	r30, 0xBD	; 189
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	01 90       	ld	r0, Z+
     762:	f0 81       	ld	r31, Z
     764:	e0 2d       	mov	r30, r0
     766:	86 81       	ldd	r24, Z+6	; 0x06
     768:	9f 87       	std	Y+15, r25	; 0x0f
     76a:	88 8b       	std	Y+16, r24	; 0x10
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	89 8b       	std	Y+17, r24	; 0x11
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
     774:	fe 01       	movw	r30, r28
     776:	ed 5b       	subi	r30, 0xBD	; 189
     778:	ff 4f       	sbci	r31, 0xFF	; 255
     77a:	01 90       	ld	r0, Z+
     77c:	f0 81       	ld	r31, Z
     77e:	e0 2d       	mov	r30, r0
     780:	97 81       	ldd	r25, Z+7	; 0x07
     782:	fe 01       	movw	r30, r28
     784:	ed 5b       	subi	r30, 0xBD	; 189
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	01 90       	ld	r0, Z+
     78a:	f0 81       	ld	r31, Z
     78c:	e0 2d       	mov	r30, r0
     78e:	80 85       	ldd	r24, Z+8	; 0x08
     790:	9b 8b       	std	Y+19, r25	; 0x13
     792:	8c 8b       	std	Y+20, r24	; 0x14
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	8d 8b       	std	Y+21, r24	; 0x15
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
     79c:	fe 01       	movw	r30, r28
     79e:	ed 5b       	subi	r30, 0xBD	; 189
     7a0:	ff 4f       	sbci	r31, 0xFF	; 255
     7a2:	01 90       	ld	r0, Z+
     7a4:	f0 81       	ld	r31, Z
     7a6:	e0 2d       	mov	r30, r0
     7a8:	91 85       	ldd	r25, Z+9	; 0x09
     7aa:	fe 01       	movw	r30, r28
     7ac:	ed 5b       	subi	r30, 0xBD	; 189
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255
     7b0:	01 90       	ld	r0, Z+
     7b2:	f0 81       	ld	r31, Z
     7b4:	e0 2d       	mov	r30, r0
     7b6:	82 85       	ldd	r24, Z+10	; 0x0a
     7b8:	9f 8b       	std	Y+23, r25	; 0x17
     7ba:	88 8f       	std	Y+24, r24	; 0x18
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 8f       	std	Y+25, r24	; 0x19
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
     7c4:	fe 01       	movw	r30, r28
     7c6:	ed 5b       	subi	r30, 0xBD	; 189
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	01 90       	ld	r0, Z+
     7cc:	f0 81       	ld	r31, Z
     7ce:	e0 2d       	mov	r30, r0
     7d0:	93 85       	ldd	r25, Z+11	; 0x0b
     7d2:	fe 01       	movw	r30, r28
     7d4:	ed 5b       	subi	r30, 0xBD	; 189
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	01 90       	ld	r0, Z+
     7da:	f0 81       	ld	r31, Z
     7dc:	e0 2d       	mov	r30, r0
     7de:	84 85       	ldd	r24, Z+12	; 0x0c
     7e0:	9b 8f       	std	Y+27, r25	; 0x1b
     7e2:	8c 8f       	std	Y+28, r24	; 0x1c
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	8d 8f       	std	Y+29, r24	; 0x1d
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	8e 8f       	std	Y+30, r24	; 0x1e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
     7ec:	fe 01       	movw	r30, r28
     7ee:	ed 5b       	subi	r30, 0xBD	; 189
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	01 90       	ld	r0, Z+
     7f4:	f0 81       	ld	r31, Z
     7f6:	e0 2d       	mov	r30, r0
     7f8:	95 85       	ldd	r25, Z+13	; 0x0d
     7fa:	fe 01       	movw	r30, r28
     7fc:	ed 5b       	subi	r30, 0xBD	; 189
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	01 90       	ld	r0, Z+
     802:	f0 81       	ld	r31, Z
     804:	e0 2d       	mov	r30, r0
     806:	86 85       	ldd	r24, Z+14	; 0x0e
     808:	9f 8f       	std	Y+31, r25	; 0x1f
     80a:	88 a3       	std	Y+32, r24	; 0x20
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	89 a3       	std	Y+33, r24	; 0x21
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	8a a3       	std	Y+34, r24	; 0x22

      gpioRet = GPIO_initPin(&pinCom);
     814:	ce 01       	movw	r24, r28
     816:	03 96       	adiw	r24, 0x03	; 3
     818:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     81c:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	88 23       	and	r24, r24
     822:	29 f4       	brne	.+10     	; 0x82e <SSD_int+0x1a6>
        gpioRet = GPIO_initPin(&pinA);
     824:	ce 01       	movw	r24, r28
     826:	07 96       	adiw	r24, 0x07	; 7
     828:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     82c:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	88 23       	and	r24, r24
     832:	21 f4       	brne	.+8      	; 0x83c <SSD_int+0x1b4>
        GPIO_initPin(&pinB);
     834:	ce 01       	movw	r24, r28
     836:	0b 96       	adiw	r24, 0x0b	; 11
     838:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 23       	and	r24, r24
     840:	21 f4       	brne	.+8      	; 0x84a <SSD_int+0x1c2>
        GPIO_initPin(&pinC);
     842:	ce 01       	movw	r24, r28
     844:	0f 96       	adiw	r24, 0x0f	; 15
     846:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 23       	and	r24, r24
     84e:	21 f4       	brne	.+8      	; 0x858 <SSD_int+0x1d0>
        GPIO_initPin(&pinD);
     850:	ce 01       	movw	r24, r28
     852:	43 96       	adiw	r24, 0x13	; 19
     854:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 23       	and	r24, r24
     85c:	21 f4       	brne	.+8      	; 0x866 <__stack+0x7>
        GPIO_initPin(&pinE);
     85e:	ce 01       	movw	r24, r28
     860:	47 96       	adiw	r24, 0x17	; 23
     862:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	88 23       	and	r24, r24
     86a:	21 f4       	brne	.+8      	; 0x874 <__stack+0x15>
        GPIO_initPin(&pinF);
     86c:	ce 01       	movw	r24, r28
     86e:	4b 96       	adiw	r24, 0x1b	; 27
     870:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	88 23       	and	r24, r24
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
        GPIO_initPin(&pinG);
     87a:	ce 01       	movw	r24, r28
     87c:	4f 96       	adiw	r24, 0x1f	; 31
     87e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	88 23       	and	r24, r24
     886:	11 f4       	brne	.+4      	; 0x88c <__stack+0x2d>
        ssdRet = SSD_OK;
     888:	1a 82       	std	Y+2, r1	; 0x02
     88a:	ee c0       	rjmp	.+476    	; 0xa68 <__stack+0x209>
      } else {
        ssdRet = SSD_NOK;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	8a 83       	std	Y+2, r24	; 0x02
     890:	eb c0       	rjmp	.+470    	; 0xa68 <__stack+0x209>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
     892:	fe 01       	movw	r30, r28
     894:	ed 5b       	subi	r30, 0xBD	; 189
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	01 90       	ld	r0, Z+
     89a:	f0 81       	ld	r31, Z
     89c:	e0 2d       	mov	r30, r0
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	e1 c0       	rjmp	.+450    	; 0xa68 <__stack+0x209>
      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
     8a6:	fe 01       	movw	r30, r28
     8a8:	ed 5b       	subi	r30, 0xBD	; 189
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	01 90       	ld	r0, Z+
     8ae:	f0 81       	ld	r31, Z
     8b0:	e0 2d       	mov	r30, r0
     8b2:	97 85       	ldd	r25, Z+15	; 0x0f
     8b4:	fe 01       	movw	r30, r28
     8b6:	ed 5b       	subi	r30, 0xBD	; 189
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	01 90       	ld	r0, Z+
     8bc:	f0 81       	ld	r31, Z
     8be:	e0 2d       	mov	r30, r0
     8c0:	80 89       	ldd	r24, Z+16	; 0x10
     8c2:	9b a3       	std	Y+35, r25	; 0x23
     8c4:	8c a3       	std	Y+36, r24	; 0x24
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	8d a3       	std	Y+37, r24	; 0x25
     8ca:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
     8cc:	fe 01       	movw	r30, r28
     8ce:	ed 5b       	subi	r30, 0xBD	; 189
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	01 90       	ld	r0, Z+
     8d4:	f0 81       	ld	r31, Z
     8d6:	e0 2d       	mov	r30, r0
     8d8:	91 81       	ldd	r25, Z+1	; 0x01
     8da:	fe 01       	movw	r30, r28
     8dc:	ed 5b       	subi	r30, 0xBD	; 189
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	01 90       	ld	r0, Z+
     8e2:	f0 81       	ld	r31, Z
     8e4:	e0 2d       	mov	r30, r0
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	9f a3       	std	Y+39, r25	; 0x27
     8ea:	88 a7       	std	Y+40, r24	; 0x28
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	89 a7       	std	Y+41, r24	; 0x29
     8f0:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
     8f2:	fe 01       	movw	r30, r28
     8f4:	ed 5b       	subi	r30, 0xBD	; 189
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
     8fe:	93 81       	ldd	r25, Z+3	; 0x03
     900:	fe 01       	movw	r30, r28
     902:	ed 5b       	subi	r30, 0xBD	; 189
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	01 90       	ld	r0, Z+
     908:	f0 81       	ld	r31, Z
     90a:	e0 2d       	mov	r30, r0
     90c:	84 81       	ldd	r24, Z+4	; 0x04
     90e:	9b a7       	std	Y+43, r25	; 0x2b
     910:	8c a7       	std	Y+44, r24	; 0x2c
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	8d a7       	std	Y+45, r24	; 0x2d
     916:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
     918:	fe 01       	movw	r30, r28
     91a:	ed 5b       	subi	r30, 0xBD	; 189
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	01 90       	ld	r0, Z+
     920:	f0 81       	ld	r31, Z
     922:	e0 2d       	mov	r30, r0
     924:	95 81       	ldd	r25, Z+5	; 0x05
     926:	fe 01       	movw	r30, r28
     928:	ed 5b       	subi	r30, 0xBD	; 189
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	01 90       	ld	r0, Z+
     92e:	f0 81       	ld	r31, Z
     930:	e0 2d       	mov	r30, r0
     932:	86 81       	ldd	r24, Z+6	; 0x06
     934:	9f a7       	std	Y+47, r25	; 0x2f
     936:	88 ab       	std	Y+48, r24	; 0x30
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	89 ab       	std	Y+49, r24	; 0x31
     93c:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
     93e:	fe 01       	movw	r30, r28
     940:	ed 5b       	subi	r30, 0xBD	; 189
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	01 90       	ld	r0, Z+
     946:	f0 81       	ld	r31, Z
     948:	e0 2d       	mov	r30, r0
     94a:	97 81       	ldd	r25, Z+7	; 0x07
     94c:	fe 01       	movw	r30, r28
     94e:	ed 5b       	subi	r30, 0xBD	; 189
     950:	ff 4f       	sbci	r31, 0xFF	; 255
     952:	01 90       	ld	r0, Z+
     954:	f0 81       	ld	r31, Z
     956:	e0 2d       	mov	r30, r0
     958:	80 85       	ldd	r24, Z+8	; 0x08
     95a:	9b ab       	std	Y+51, r25	; 0x33
     95c:	8c ab       	std	Y+52, r24	; 0x34
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	8d ab       	std	Y+53, r24	; 0x35
     962:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
     964:	fe 01       	movw	r30, r28
     966:	ed 5b       	subi	r30, 0xBD	; 189
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	01 90       	ld	r0, Z+
     96c:	f0 81       	ld	r31, Z
     96e:	e0 2d       	mov	r30, r0
     970:	91 85       	ldd	r25, Z+9	; 0x09
     972:	fe 01       	movw	r30, r28
     974:	ed 5b       	subi	r30, 0xBD	; 189
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	01 90       	ld	r0, Z+
     97a:	f0 81       	ld	r31, Z
     97c:	e0 2d       	mov	r30, r0
     97e:	82 85       	ldd	r24, Z+10	; 0x0a
     980:	9f ab       	std	Y+55, r25	; 0x37
     982:	88 af       	std	Y+56, r24	; 0x38
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	89 af       	std	Y+57, r24	; 0x39
     988:	1a ae       	std	Y+58, r1	; 0x3a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
     98a:	fe 01       	movw	r30, r28
     98c:	ed 5b       	subi	r30, 0xBD	; 189
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	01 90       	ld	r0, Z+
     992:	f0 81       	ld	r31, Z
     994:	e0 2d       	mov	r30, r0
     996:	93 85       	ldd	r25, Z+11	; 0x0b
     998:	fe 01       	movw	r30, r28
     99a:	ed 5b       	subi	r30, 0xBD	; 189
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	01 90       	ld	r0, Z+
     9a0:	f0 81       	ld	r31, Z
     9a2:	e0 2d       	mov	r30, r0
     9a4:	84 85       	ldd	r24, Z+12	; 0x0c
     9a6:	9b af       	std	Y+59, r25	; 0x3b
     9a8:	8c af       	std	Y+60, r24	; 0x3c
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	8d af       	std	Y+61, r24	; 0x3d
     9ae:	1e ae       	std	Y+62, r1	; 0x3e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
     9b0:	fe 01       	movw	r30, r28
     9b2:	ed 5b       	subi	r30, 0xBD	; 189
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	01 90       	ld	r0, Z+
     9b8:	f0 81       	ld	r31, Z
     9ba:	e0 2d       	mov	r30, r0
     9bc:	85 85       	ldd	r24, Z+13	; 0x0d
     9be:	fe 01       	movw	r30, r28
     9c0:	ed 5b       	subi	r30, 0xBD	; 189
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	01 90       	ld	r0, Z+
     9c6:	f0 81       	ld	r31, Z
     9c8:	e0 2d       	mov	r30, r0
     9ca:	96 85       	ldd	r25, Z+14	; 0x0e
     9cc:	fe 01       	movw	r30, r28
     9ce:	ff 96       	adiw	r30, 0x3f	; 63
     9d0:	80 83       	st	Z, r24
     9d2:	fe 01       	movw	r30, r28
     9d4:	ff 96       	adiw	r30, 0x3f	; 63
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	fe 01       	movw	r30, r28
     9da:	ff 96       	adiw	r30, 0x3f	; 63
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	82 83       	std	Z+2, r24	; 0x02
     9e0:	fe 01       	movw	r30, r28
     9e2:	ff 96       	adiw	r30, 0x3f	; 63
     9e4:	13 82       	std	Z+3, r1	; 0x03

      gpioRet = GPIO_initPin(&pinCom);
     9e6:	ce 01       	movw	r24, r28
     9e8:	83 96       	adiw	r24, 0x23	; 35
     9ea:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     9ee:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	88 23       	and	r24, r24
     9f4:	29 f4       	brne	.+10     	; 0xa00 <__stack+0x1a1>
        gpioRet = GPIO_initPin(&pinA);
     9f6:	ce 01       	movw	r24, r28
     9f8:	87 96       	adiw	r24, 0x27	; 39
     9fa:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     9fe:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	88 23       	and	r24, r24
     a04:	21 f4       	brne	.+8      	; 0xa0e <__stack+0x1af>
        GPIO_initPin(&pinB);
     a06:	ce 01       	movw	r24, r28
     a08:	8b 96       	adiw	r24, 0x2b	; 43
     a0a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 23       	and	r24, r24
     a12:	21 f4       	brne	.+8      	; 0xa1c <__stack+0x1bd>
        GPIO_initPin(&pinC);
     a14:	ce 01       	movw	r24, r28
     a16:	8f 96       	adiw	r24, 0x2f	; 47
     a18:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	88 23       	and	r24, r24
     a20:	21 f4       	brne	.+8      	; 0xa2a <__stack+0x1cb>
        GPIO_initPin(&pinD);
     a22:	ce 01       	movw	r24, r28
     a24:	c3 96       	adiw	r24, 0x33	; 51
     a26:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	88 23       	and	r24, r24
     a2e:	21 f4       	brne	.+8      	; 0xa38 <__stack+0x1d9>
        GPIO_initPin(&pinE);
     a30:	ce 01       	movw	r24, r28
     a32:	c7 96       	adiw	r24, 0x37	; 55
     a34:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	88 23       	and	r24, r24
     a3c:	21 f4       	brne	.+8      	; 0xa46 <__stack+0x1e7>
        GPIO_initPin(&pinF);
     a3e:	ce 01       	movw	r24, r28
     a40:	cb 96       	adiw	r24, 0x3b	; 59
     a42:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	88 23       	and	r24, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <__stack+0x1f5>
        GPIO_initPin(&pinG);
     a4c:	ce 01       	movw	r24, r28
     a4e:	cf 96       	adiw	r24, 0x3f	; 63
     a50:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 23       	and	r24, r24
     a58:	11 f4       	brne	.+4      	; 0xa5e <__stack+0x1ff>
        ssdRet = SSD_OK;
     a5a:	1a 82       	std	Y+2, r1	; 0x02
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <__stack+0x209>
      } else {
        ssdRet = SSD_NOK;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	8a 83       	std	Y+2, r24	; 0x02
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x209>
      }
    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
}
     a6a:	cc 5b       	subi	r28, 0xBC	; 188
     a6c:	df 4f       	sbci	r29, 0xFF	; 255
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <SSD_setNumberOnSsd>:

EN_SSD_systemState_t
SSD_setNumberOnSsd(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce,
                   EN_SSD_numbers_t valueOfNumber) {
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	ed 97       	sbiw	r28, 0x3d	; 61
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	9c af       	std	Y+60, r25	; 0x3c
     a94:	8b af       	std	Y+59, r24	; 0x3b
     a96:	6d af       	std	Y+61, r22	; 0x3d
  EN_SSD_systemState_t ssdRet = SSD_NOK;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
     aa0:	8b ad       	ldd	r24, Y+59	; 0x3b
     aa2:	9c ad       	ldd	r25, Y+60	; 0x3c
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	09 f4       	brne	.+2      	; 0xaaa <SSD_setNumberOnSsd+0x2c>
     aa8:	15 c2       	rjmp	.+1066   	; 0xed4 <SSD_setNumberOnSsd+0x456>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
     aaa:	eb ad       	ldd	r30, Y+59	; 0x3b
     aac:	fc ad       	ldd	r31, Y+60	; 0x3c
     aae:	80 81       	ld	r24, Z
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	09 f0       	breq	.+2      	; 0xab6 <SSD_setNumberOnSsd+0x38>
     ab4:	08 c1       	rjmp	.+528    	; 0xcc6 <SSD_setNumberOnSsd+0x248>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
     ab6:	eb ad       	ldd	r30, Y+59	; 0x3b
     ab8:	fc ad       	ldd	r31, Y+60	; 0x3c
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	eb ad       	ldd	r30, Y+59	; 0x3b
     abe:	fc ad       	ldd	r31, Y+60	; 0x3c
     ac0:	82 81       	ldd	r24, Z+2	; 0x02
     ac2:	9b 83       	std	Y+3, r25	; 0x03
     ac4:	8c 83       	std	Y+4, r24	; 0x04
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	8d 83       	std	Y+5, r24	; 0x05
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
     ace:	eb ad       	ldd	r30, Y+59	; 0x3b
     ad0:	fc ad       	ldd	r31, Y+60	; 0x3c
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	eb ad       	ldd	r30, Y+59	; 0x3b
     ad6:	fc ad       	ldd	r31, Y+60	; 0x3c
     ad8:	84 81       	ldd	r24, Z+4	; 0x04
     ada:	9f 83       	std	Y+7, r25	; 0x07
     adc:	88 87       	std	Y+8, r24	; 0x08
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	89 87       	std	Y+9, r24	; 0x09
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
     ae6:	eb ad       	ldd	r30, Y+59	; 0x3b
     ae8:	fc ad       	ldd	r31, Y+60	; 0x3c
     aea:	95 81       	ldd	r25, Z+5	; 0x05
     aec:	eb ad       	ldd	r30, Y+59	; 0x3b
     aee:	fc ad       	ldd	r31, Y+60	; 0x3c
     af0:	86 81       	ldd	r24, Z+6	; 0x06
     af2:	9b 87       	std	Y+11, r25	; 0x0b
     af4:	8c 87       	std	Y+12, r24	; 0x0c
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8d 87       	std	Y+13, r24	; 0x0d
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
     afe:	eb ad       	ldd	r30, Y+59	; 0x3b
     b00:	fc ad       	ldd	r31, Y+60	; 0x3c
     b02:	97 81       	ldd	r25, Z+7	; 0x07
     b04:	eb ad       	ldd	r30, Y+59	; 0x3b
     b06:	fc ad       	ldd	r31, Y+60	; 0x3c
     b08:	80 85       	ldd	r24, Z+8	; 0x08
     b0a:	9f 87       	std	Y+15, r25	; 0x0f
     b0c:	88 8b       	std	Y+16, r24	; 0x10
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	89 8b       	std	Y+17, r24	; 0x11
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
     b16:	eb ad       	ldd	r30, Y+59	; 0x3b
     b18:	fc ad       	ldd	r31, Y+60	; 0x3c
     b1a:	91 85       	ldd	r25, Z+9	; 0x09
     b1c:	eb ad       	ldd	r30, Y+59	; 0x3b
     b1e:	fc ad       	ldd	r31, Y+60	; 0x3c
     b20:	82 85       	ldd	r24, Z+10	; 0x0a
     b22:	9b 8b       	std	Y+19, r25	; 0x13
     b24:	8c 8b       	std	Y+20, r24	; 0x14
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	8d 8b       	std	Y+21, r24	; 0x15
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
     b2e:	eb ad       	ldd	r30, Y+59	; 0x3b
     b30:	fc ad       	ldd	r31, Y+60	; 0x3c
     b32:	93 85       	ldd	r25, Z+11	; 0x0b
     b34:	eb ad       	ldd	r30, Y+59	; 0x3b
     b36:	fc ad       	ldd	r31, Y+60	; 0x3c
     b38:	84 85       	ldd	r24, Z+12	; 0x0c
     b3a:	9f 8b       	std	Y+23, r25	; 0x17
     b3c:	88 8f       	std	Y+24, r24	; 0x18
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	89 8f       	std	Y+25, r24	; 0x19
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
     b46:	eb ad       	ldd	r30, Y+59	; 0x3b
     b48:	fc ad       	ldd	r31, Y+60	; 0x3c
     b4a:	95 85       	ldd	r25, Z+13	; 0x0d
     b4c:	eb ad       	ldd	r30, Y+59	; 0x3b
     b4e:	fc ad       	ldd	r31, Y+60	; 0x3c
     b50:	86 85       	ldd	r24, Z+14	; 0x0e
     b52:	9b 8f       	std	Y+27, r25	; 0x1b
     b54:	8c 8f       	std	Y+28, r24	; 0x1c
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8d 8f       	std	Y+29, r24	; 0x1d
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8e 8f       	std	Y+30, r24	; 0x1e

      gpioRet =
     b5e:	8d ad       	ldd	r24, Y+61	; 0x3d
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	82 1b       	sub	r24, r18
     b74:	93 0b       	sbc	r25, r19
     b76:	fc 01       	movw	r30, r24
     b78:	e2 54       	subi	r30, 0x42	; 66
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	20 81       	ld	r18, Z
     b7e:	ce 01       	movw	r24, r28
     b80:	03 96       	adiw	r24, 0x03	; 3
     b82:	62 2f       	mov	r22, r18
     b84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     b88:	89 83       	std	Y+1, r24	; 0x01
          GPIO_writePinLogic(&pinA, arrOfNumbersForAnodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 23       	and	r24, r24
     b8e:	b1 f4       	brne	.+44     	; 0xbbc <SSD_setNumberOnSsd+0x13e>
        gpioRet = GPIO_writePinLogic(&pinB,
     b90:	8d ad       	ldd	r24, Y+61	; 0x3d
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	c9 01       	movw	r24, r18
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	82 1b       	sub	r24, r18
     ba6:	93 0b       	sbc	r25, r19
     ba8:	fc 01       	movw	r30, r24
     baa:	e1 54       	subi	r30, 0x41	; 65
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	20 81       	ld	r18, Z
     bb0:	ce 01       	movw	r24, r28
     bb2:	07 96       	adiw	r24, 0x07	; 7
     bb4:	62 2f       	mov	r22, r18
     bb6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     bba:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 23       	and	r24, r24
     bc0:	b1 f4       	brne	.+44     	; 0xbee <SSD_setNumberOnSsd+0x170>
        gpioRet = GPIO_writePinLogic(&pinC,
     bc2:	8d ad       	ldd	r24, Y+61	; 0x3d
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	c9 01       	movw	r24, r18
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	82 1b       	sub	r24, r18
     bd8:	93 0b       	sbc	r25, r19
     bda:	fc 01       	movw	r30, r24
     bdc:	e0 54       	subi	r30, 0x40	; 64
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	20 81       	ld	r18, Z
     be2:	ce 01       	movw	r24, r28
     be4:	0b 96       	adiw	r24, 0x0b	; 11
     be6:	62 2f       	mov	r22, r18
     be8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     bec:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	88 23       	and	r24, r24
     bf2:	b1 f4       	brne	.+44     	; 0xc20 <SSD_setNumberOnSsd+0x1a2>
        gpioRet = GPIO_writePinLogic(&pinD,
     bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	c9 01       	movw	r24, r18
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	82 1b       	sub	r24, r18
     c0a:	93 0b       	sbc	r25, r19
     c0c:	fc 01       	movw	r30, r24
     c0e:	ef 53       	subi	r30, 0x3F	; 63
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	20 81       	ld	r18, Z
     c14:	ce 01       	movw	r24, r28
     c16:	0f 96       	adiw	r24, 0x0f	; 15
     c18:	62 2f       	mov	r22, r18
     c1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     c1e:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	88 23       	and	r24, r24
     c24:	b1 f4       	brne	.+44     	; 0xc52 <SSD_setNumberOnSsd+0x1d4>
        gpioRet = GPIO_writePinLogic(&pinE,
     c26:	8d ad       	ldd	r24, Y+61	; 0x3d
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	c9 01       	movw	r24, r18
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 1b       	sub	r24, r18
     c3c:	93 0b       	sbc	r25, r19
     c3e:	fc 01       	movw	r30, r24
     c40:	ee 53       	subi	r30, 0x3E	; 62
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	20 81       	ld	r18, Z
     c46:	ce 01       	movw	r24, r28
     c48:	43 96       	adiw	r24, 0x13	; 19
     c4a:	62 2f       	mov	r22, r18
     c4c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     c50:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	88 23       	and	r24, r24
     c56:	b1 f4       	brne	.+44     	; 0xc84 <SSD_setNumberOnSsd+0x206>
        gpioRet = GPIO_writePinLogic(&pinF,
     c58:	8d ad       	ldd	r24, Y+61	; 0x3d
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	c9 01       	movw	r24, r18
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	82 1b       	sub	r24, r18
     c6e:	93 0b       	sbc	r25, r19
     c70:	fc 01       	movw	r30, r24
     c72:	ed 53       	subi	r30, 0x3D	; 61
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	20 81       	ld	r18, Z
     c78:	ce 01       	movw	r24, r28
     c7a:	47 96       	adiw	r24, 0x17	; 23
     c7c:	62 2f       	mov	r22, r18
     c7e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     c82:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 23       	and	r24, r24
     c88:	b1 f4       	brne	.+44     	; 0xcb6 <SSD_setNumberOnSsd+0x238>
        gpioRet = GPIO_writePinLogic(&pinG,
     c8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	c9 01       	movw	r24, r18
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	82 1b       	sub	r24, r18
     ca0:	93 0b       	sbc	r25, r19
     ca2:	fc 01       	movw	r30, r24
     ca4:	ec 53       	subi	r30, 0x3C	; 60
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	20 81       	ld	r18, Z
     caa:	ce 01       	movw	r24, r28
     cac:	4b 96       	adiw	r24, 0x1b	; 27
     cae:	62 2f       	mov	r22, r18
     cb0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     cb4:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	88 23       	and	r24, r24
     cba:	11 f4       	brne	.+4      	; 0xcc0 <SSD_setNumberOnSsd+0x242>
        ssdRet = SSD_OK;
     cbc:	1a 82       	std	Y+2, r1	; 0x02
     cbe:	0c c1       	rjmp	.+536    	; 0xed8 <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	8a 83       	std	Y+2, r24	; 0x02
     cc4:	09 c1       	rjmp	.+530    	; 0xed8 <SSD_setNumberOnSsd+0x45a>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
     cc6:	eb ad       	ldd	r30, Y+59	; 0x3b
     cc8:	fc ad       	ldd	r31, Y+60	; 0x3c
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	09 f0       	breq	.+2      	; 0xcd2 <SSD_setNumberOnSsd+0x254>
     cd0:	03 c1       	rjmp	.+518    	; 0xed8 <SSD_setNumberOnSsd+0x45a>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
     cd2:	eb ad       	ldd	r30, Y+59	; 0x3b
     cd4:	fc ad       	ldd	r31, Y+60	; 0x3c
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	eb ad       	ldd	r30, Y+59	; 0x3b
     cda:	fc ad       	ldd	r31, Y+60	; 0x3c
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	9f 8f       	std	Y+31, r25	; 0x1f
     ce0:	88 a3       	std	Y+32, r24	; 0x20
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	89 a3       	std	Y+33, r24	; 0x21
     ce6:	1a a2       	std	Y+34, r1	; 0x22

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
     ce8:	eb ad       	ldd	r30, Y+59	; 0x3b
     cea:	fc ad       	ldd	r31, Y+60	; 0x3c
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	eb ad       	ldd	r30, Y+59	; 0x3b
     cf0:	fc ad       	ldd	r31, Y+60	; 0x3c
     cf2:	84 81       	ldd	r24, Z+4	; 0x04
     cf4:	9b a3       	std	Y+35, r25	; 0x23
     cf6:	8c a3       	std	Y+36, r24	; 0x24
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8d a3       	std	Y+37, r24	; 0x25
     cfc:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
     cfe:	eb ad       	ldd	r30, Y+59	; 0x3b
     d00:	fc ad       	ldd	r31, Y+60	; 0x3c
     d02:	95 81       	ldd	r25, Z+5	; 0x05
     d04:	eb ad       	ldd	r30, Y+59	; 0x3b
     d06:	fc ad       	ldd	r31, Y+60	; 0x3c
     d08:	86 81       	ldd	r24, Z+6	; 0x06
     d0a:	9f a3       	std	Y+39, r25	; 0x27
     d0c:	88 a7       	std	Y+40, r24	; 0x28
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	89 a7       	std	Y+41, r24	; 0x29
     d12:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
     d14:	eb ad       	ldd	r30, Y+59	; 0x3b
     d16:	fc ad       	ldd	r31, Y+60	; 0x3c
     d18:	97 81       	ldd	r25, Z+7	; 0x07
     d1a:	eb ad       	ldd	r30, Y+59	; 0x3b
     d1c:	fc ad       	ldd	r31, Y+60	; 0x3c
     d1e:	80 85       	ldd	r24, Z+8	; 0x08
     d20:	9b a7       	std	Y+43, r25	; 0x2b
     d22:	8c a7       	std	Y+44, r24	; 0x2c
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	8d a7       	std	Y+45, r24	; 0x2d
     d28:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
     d2a:	eb ad       	ldd	r30, Y+59	; 0x3b
     d2c:	fc ad       	ldd	r31, Y+60	; 0x3c
     d2e:	91 85       	ldd	r25, Z+9	; 0x09
     d30:	eb ad       	ldd	r30, Y+59	; 0x3b
     d32:	fc ad       	ldd	r31, Y+60	; 0x3c
     d34:	82 85       	ldd	r24, Z+10	; 0x0a
     d36:	9f a7       	std	Y+47, r25	; 0x2f
     d38:	88 ab       	std	Y+48, r24	; 0x30
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	89 ab       	std	Y+49, r24	; 0x31
     d3e:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
     d40:	eb ad       	ldd	r30, Y+59	; 0x3b
     d42:	fc ad       	ldd	r31, Y+60	; 0x3c
     d44:	93 85       	ldd	r25, Z+11	; 0x0b
     d46:	eb ad       	ldd	r30, Y+59	; 0x3b
     d48:	fc ad       	ldd	r31, Y+60	; 0x3c
     d4a:	84 85       	ldd	r24, Z+12	; 0x0c
     d4c:	9b ab       	std	Y+51, r25	; 0x33
     d4e:	8c ab       	std	Y+52, r24	; 0x34
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	8d ab       	std	Y+53, r24	; 0x35
     d54:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
     d56:	eb ad       	ldd	r30, Y+59	; 0x3b
     d58:	fc ad       	ldd	r31, Y+60	; 0x3c
     d5a:	95 85       	ldd	r25, Z+13	; 0x0d
     d5c:	eb ad       	ldd	r30, Y+59	; 0x3b
     d5e:	fc ad       	ldd	r31, Y+60	; 0x3c
     d60:	86 85       	ldd	r24, Z+14	; 0x0e
     d62:	9f ab       	std	Y+55, r25	; 0x37
     d64:	88 af       	std	Y+56, r24	; 0x38
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 af       	std	Y+57, r24	; 0x39
     d6a:	1a ae       	std	Y+58, r1	; 0x3a

      gpioRet = GPIO_writePinLogic(&pinA,
     d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	c9 01       	movw	r24, r18
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	82 1b       	sub	r24, r18
     d82:	93 0b       	sbc	r25, r19
     d84:	fc 01       	movw	r30, r24
     d86:	e8 58       	subi	r30, 0x88	; 136
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	20 81       	ld	r18, Z
     d8c:	ce 01       	movw	r24, r28
     d8e:	4f 96       	adiw	r24, 0x1f	; 31
     d90:	62 2f       	mov	r22, r18
     d92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     d96:	89 83       	std	Y+1, r24	; 0x01
                                   arrOfNumbersForCathodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	88 23       	and	r24, r24
     d9c:	b1 f4       	brne	.+44     	; 0xdca <SSD_setNumberOnSsd+0x34c>
        gpioRet = GPIO_writePinLogic(
     d9e:	8d ad       	ldd	r24, Y+61	; 0x3d
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	c9 01       	movw	r24, r18
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	82 1b       	sub	r24, r18
     db4:	93 0b       	sbc	r25, r19
     db6:	fc 01       	movw	r30, r24
     db8:	e7 58       	subi	r30, 0x87	; 135
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	20 81       	ld	r18, Z
     dbe:	ce 01       	movw	r24, r28
     dc0:	83 96       	adiw	r24, 0x23	; 35
     dc2:	62 2f       	mov	r22, r18
     dc4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     dc8:	89 83       	std	Y+1, r24	; 0x01
            &pinB, arrOfNumbersForCathodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	88 23       	and	r24, r24
     dce:	b1 f4       	brne	.+44     	; 0xdfc <SSD_setNumberOnSsd+0x37e>
        gpioRet = GPIO_writePinLogic(
     dd0:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 1b       	sub	r24, r18
     de6:	93 0b       	sbc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	e6 58       	subi	r30, 0x86	; 134
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	20 81       	ld	r18, Z
     df0:	ce 01       	movw	r24, r28
     df2:	87 96       	adiw	r24, 0x27	; 39
     df4:	62 2f       	mov	r22, r18
     df6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     dfa:	89 83       	std	Y+1, r24	; 0x01
            &pinC, arrOfNumbersForCathodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	88 23       	and	r24, r24
     e00:	b1 f4       	brne	.+44     	; 0xe2e <SSD_setNumberOnSsd+0x3b0>
        gpioRet = GPIO_writePinLogic(
     e02:	8d ad       	ldd	r24, Y+61	; 0x3d
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	fc 01       	movw	r30, r24
     e1c:	e5 58       	subi	r30, 0x85	; 133
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	20 81       	ld	r18, Z
     e22:	ce 01       	movw	r24, r28
     e24:	8b 96       	adiw	r24, 0x2b	; 43
     e26:	62 2f       	mov	r22, r18
     e28:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     e2c:	89 83       	std	Y+1, r24	; 0x01
            &pinD, arrOfNumbersForCathodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	88 23       	and	r24, r24
     e32:	b1 f4       	brne	.+44     	; 0xe60 <SSD_setNumberOnSsd+0x3e2>
        gpioRet = GPIO_writePinLogic(
     e34:	8d ad       	ldd	r24, Y+61	; 0x3d
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	c9 01       	movw	r24, r18
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e4 58       	subi	r30, 0x84	; 132
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	20 81       	ld	r18, Z
     e54:	ce 01       	movw	r24, r28
     e56:	8f 96       	adiw	r24, 0x2f	; 47
     e58:	62 2f       	mov	r22, r18
     e5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     e5e:	89 83       	std	Y+1, r24	; 0x01
            &pinE, arrOfNumbersForCathodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 23       	and	r24, r24
     e64:	b1 f4       	brne	.+44     	; 0xe92 <SSD_setNumberOnSsd+0x414>
        gpioRet = GPIO_writePinLogic(
     e66:	8d ad       	ldd	r24, Y+61	; 0x3d
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	c9 01       	movw	r24, r18
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	82 1b       	sub	r24, r18
     e7c:	93 0b       	sbc	r25, r19
     e7e:	fc 01       	movw	r30, r24
     e80:	e3 58       	subi	r30, 0x83	; 131
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	20 81       	ld	r18, Z
     e86:	ce 01       	movw	r24, r28
     e88:	c3 96       	adiw	r24, 0x33	; 51
     e8a:	62 2f       	mov	r22, r18
     e8c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     e90:	89 83       	std	Y+1, r24	; 0x01
            &pinF, arrOfNumbersForCathodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 23       	and	r24, r24
     e96:	b1 f4       	brne	.+44     	; 0xec4 <SSD_setNumberOnSsd+0x446>
        gpioRet = GPIO_writePinLogic(
     e98:	8d ad       	ldd	r24, Y+61	; 0x3d
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	c9 01       	movw	r24, r18
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	82 1b       	sub	r24, r18
     eae:	93 0b       	sbc	r25, r19
     eb0:	fc 01       	movw	r30, r24
     eb2:	e2 58       	subi	r30, 0x82	; 130
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	20 81       	ld	r18, Z
     eb8:	ce 01       	movw	r24, r28
     eba:	c7 96       	adiw	r24, 0x37	; 55
     ebc:	62 2f       	mov	r22, r18
     ebe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
     ec2:	89 83       	std	Y+1, r24	; 0x01
            &pinG, arrOfNumbersForCathodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	88 23       	and	r24, r24
     ec8:	11 f4       	brne	.+4      	; 0xece <SSD_setNumberOnSsd+0x450>
        ssdRet = SSD_OK;
     eca:	1a 82       	std	Y+2, r1	; 0x02
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <SSD_setNumberOnSsd+0x45a>

    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	8a 83       	std	Y+2, r24	; 0x02
  }

  return ssdRet;
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     eda:	ed 96       	adiw	r28, 0x3d	; 61
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <SSD_enableDot>:

EN_SSD_systemState_t SSD_enableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	2c 97       	sbiw	r28, 0x0c	; 12
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	9c 87       	std	Y+12, r25	; 0x0c
     f02:	8b 87       	std	Y+11, r24	; 0x0b

  EN_SSD_systemState_t ssdRet = SSD_NOK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
     f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	d9 f1       	breq	.+118    	; 0xf8a <SSD_enableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
     f14:	eb 85       	ldd	r30, Y+11	; 0x0b
     f16:	fc 85       	ldd	r31, Y+12	; 0x0c
     f18:	80 81       	ld	r24, Z
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	c9 f4       	brne	.+50     	; 0xf50 <SSD_enableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
     f1e:	eb 85       	ldd	r30, Y+11	; 0x0b
     f20:	fc 85       	ldd	r31, Y+12	; 0x0c
     f22:	91 89       	ldd	r25, Z+17	; 0x11
     f24:	eb 85       	ldd	r30, Y+11	; 0x0b
     f26:	fc 85       	ldd	r31, Y+12	; 0x0c
     f28:	82 89       	ldd	r24, Z+18	; 0x12
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8c 83       	std	Y+4, r24	; 0x04
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	8e 83       	std	Y+6, r24	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
     f36:	ce 01       	movw	r24, r28
     f38:	03 96       	adiw	r24, 0x03	; 3
     f3a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     f3e:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	88 23       	and	r24, r24
     f44:	11 f4       	brne	.+4      	; 0xf4a <SSD_enableDot+0x5e>
        ssdRet = SSD_OK;
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	22 c0       	rjmp	.+68     	; 0xf8e <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	1f c0       	rjmp	.+62     	; 0xf8e <SSD_enableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
     f50:	eb 85       	ldd	r30, Y+11	; 0x0b
     f52:	fc 85       	ldd	r31, Y+12	; 0x0c
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	d1 f4       	brne	.+52     	; 0xf8e <SSD_enableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
     f5a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f5c:	fc 85       	ldd	r31, Y+12	; 0x0c
     f5e:	91 89       	ldd	r25, Z+17	; 0x11
     f60:	eb 85       	ldd	r30, Y+11	; 0x0b
     f62:	fc 85       	ldd	r31, Y+12	; 0x0c
     f64:	82 89       	ldd	r24, Z+18	; 0x12
     f66:	9f 83       	std	Y+7, r25	; 0x07
     f68:	88 87       	std	Y+8, r24	; 0x08
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 87       	std	Y+9, r24	; 0x09
     f6e:	1a 86       	std	Y+10, r1	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
     f70:	ce 01       	movw	r24, r28
     f72:	07 96       	adiw	r24, 0x07	; 7
     f74:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     f78:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	88 23       	and	r24, r24
     f7e:	11 f4       	brne	.+4      	; 0xf84 <SSD_enableDot+0x98>
        ssdRet = SSD_OK;
     f80:	1a 82       	std	Y+2, r1	; 0x02
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	8a 83       	std	Y+2, r24	; 0x02
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <SSD_enableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f90:	2c 96       	adiw	r28, 0x0c	; 12
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <SSD_disableDot>:

EN_SSD_systemState_t SSD_disableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	2c 97       	sbiw	r28, 0x0c	; 12
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	9c 87       	std	Y+12, r25	; 0x0c
     fb8:	8b 87       	std	Y+11, r24	; 0x0b
  EN_SSD_systemState_t ssdRet = SSD_NOK;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
     fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	d9 f1       	breq	.+118    	; 0x1040 <SSD_disableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
     fca:	eb 85       	ldd	r30, Y+11	; 0x0b
     fcc:	fc 85       	ldd	r31, Y+12	; 0x0c
     fce:	80 81       	ld	r24, Z
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	c1 f4       	brne	.+48     	; 0x1004 <SSD_disableDot+0x62>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
     fd4:	eb 85       	ldd	r30, Y+11	; 0x0b
     fd6:	fc 85       	ldd	r31, Y+12	; 0x0c
     fd8:	91 89       	ldd	r25, Z+17	; 0x11
     fda:	eb 85       	ldd	r30, Y+11	; 0x0b
     fdc:	fc 85       	ldd	r31, Y+12	; 0x0c
     fde:	82 89       	ldd	r24, Z+18	; 0x12
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	8c 83       	std	Y+4, r24	; 0x04
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	1e 82       	std	Y+6, r1	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
     fea:	ce 01       	movw	r24, r28
     fec:	03 96       	adiw	r24, 0x03	; 3
     fee:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
     ff2:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 23       	and	r24, r24
     ff8:	11 f4       	brne	.+4      	; 0xffe <SSD_disableDot+0x5c>
        ssdRet = SSD_OK;
     ffa:	1a 82       	std	Y+2, r1	; 0x02
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	20 c0       	rjmp	.+64     	; 0x1044 <SSD_disableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1004:	eb 85       	ldd	r30, Y+11	; 0x0b
    1006:	fc 85       	ldd	r31, Y+12	; 0x0c
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	d9 f4       	brne	.+54     	; 0x1044 <SSD_disableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    100e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1010:	fc 85       	ldd	r31, Y+12	; 0x0c
    1012:	91 89       	ldd	r25, Z+17	; 0x11
    1014:	eb 85       	ldd	r30, Y+11	; 0x0b
    1016:	fc 85       	ldd	r31, Y+12	; 0x0c
    1018:	82 89       	ldd	r24, Z+18	; 0x12
    101a:	9f 83       	std	Y+7, r25	; 0x07
    101c:	88 87       	std	Y+8, r24	; 0x08
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	89 87       	std	Y+9, r24	; 0x09
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	8a 87       	std	Y+10, r24	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    1026:	ce 01       	movw	r24, r28
    1028:	07 96       	adiw	r24, 0x07	; 7
    102a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    102e:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 23       	and	r24, r24
    1034:	11 f4       	brne	.+4      	; 0x103a <SSD_disableDot+0x98>
        ssdRet = SSD_OK;
    1036:	1a 82       	std	Y+2, r1	; 0x02
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <SSD_disableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1046:	2c 96       	adiw	r28, 0x0c	; 12
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <SSD_dualInit>:

//////////////////////////////////////////////////////////////////////////////////////////////

EN_SSD_systemState_t
SSD_dualInit(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	a0 97       	sbiw	r28, 0x20	; 32
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	98 a3       	std	Y+32, r25	; 0x20
    106e:	8f 8f       	std	Y+31, r24	; 0x1f
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    107a:	98 a1       	ldd	r25, Y+32	; 0x20
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	09 f4       	brne	.+2      	; 0x1082 <SSD_dualInit+0x2a>
    1080:	99 c0       	rjmp	.+306    	; 0x11b4 <SSD_dualInit+0x15c>

    ST_GPIO_cfg_t pinA = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinAPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinAPortName};
    1082:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1084:	f8 a1       	ldd	r31, Y+32	; 0x20
    1086:	92 81       	ldd	r25, Z+2	; 0x02
    1088:	ef 8d       	ldd	r30, Y+31	; 0x1f
    108a:	f8 a1       	ldd	r31, Y+32	; 0x20
    108c:	83 81       	ldd	r24, Z+3	; 0x03
    108e:	1b 82       	std	Y+3, r1	; 0x03
    1090:	1c 82       	std	Y+4, r1	; 0x04
    1092:	1d 82       	std	Y+5, r1	; 0x05
    1094:	1e 82       	std	Y+6, r1	; 0x06
    1096:	9b 83       	std	Y+3, r25	; 0x03
    1098:	8c 83       	std	Y+4, r24	; 0x04
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8d 83       	std	Y+5, r24	; 0x05

    ST_GPIO_cfg_t pinB = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinBPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinBPortName};
    109e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10a0:	f8 a1       	ldd	r31, Y+32	; 0x20
    10a2:	94 81       	ldd	r25, Z+4	; 0x04
    10a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10a6:	f8 a1       	ldd	r31, Y+32	; 0x20
    10a8:	85 81       	ldd	r24, Z+5	; 0x05
    10aa:	1f 82       	std	Y+7, r1	; 0x07
    10ac:	18 86       	std	Y+8, r1	; 0x08
    10ae:	19 86       	std	Y+9, r1	; 0x09
    10b0:	1a 86       	std	Y+10, r1	; 0x0a
    10b2:	9f 83       	std	Y+7, r25	; 0x07
    10b4:	88 87       	std	Y+8, r24	; 0x08
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 87       	std	Y+9, r24	; 0x09

    ST_GPIO_cfg_t pinC = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinCPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinCPortName};
    10ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    10be:	96 81       	ldd	r25, Z+6	; 0x06
    10c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10c2:	f8 a1       	ldd	r31, Y+32	; 0x20
    10c4:	87 81       	ldd	r24, Z+7	; 0x07
    10c6:	1b 86       	std	Y+11, r1	; 0x0b
    10c8:	1c 86       	std	Y+12, r1	; 0x0c
    10ca:	1d 86       	std	Y+13, r1	; 0x0d
    10cc:	1e 86       	std	Y+14, r1	; 0x0e
    10ce:	9b 87       	std	Y+11, r25	; 0x0b
    10d0:	8c 87       	std	Y+12, r24	; 0x0c
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	8d 87       	std	Y+13, r24	; 0x0d

    ST_GPIO_cfg_t pinD = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinDPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinDPortName};
    10d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10d8:	f8 a1       	ldd	r31, Y+32	; 0x20
    10da:	90 85       	ldd	r25, Z+8	; 0x08
    10dc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10de:	f8 a1       	ldd	r31, Y+32	; 0x20
    10e0:	81 85       	ldd	r24, Z+9	; 0x09
    10e2:	1f 86       	std	Y+15, r1	; 0x0f
    10e4:	18 8a       	std	Y+16, r1	; 0x10
    10e6:	19 8a       	std	Y+17, r1	; 0x11
    10e8:	1a 8a       	std	Y+18, r1	; 0x12
    10ea:	9f 87       	std	Y+15, r25	; 0x0f
    10ec:	88 8b       	std	Y+16, r24	; 0x10
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	89 8b       	std	Y+17, r24	; 0x11

    ST_GPIO_cfg_t pinE = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinEPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinEPortName};
    10f2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    10f6:	92 85       	ldd	r25, Z+10	; 0x0a
    10f8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10fa:	f8 a1       	ldd	r31, Y+32	; 0x20
    10fc:	83 85       	ldd	r24, Z+11	; 0x0b
    10fe:	1b 8a       	std	Y+19, r1	; 0x13
    1100:	1c 8a       	std	Y+20, r1	; 0x14
    1102:	1d 8a       	std	Y+21, r1	; 0x15
    1104:	1e 8a       	std	Y+22, r1	; 0x16
    1106:	9b 8b       	std	Y+19, r25	; 0x13
    1108:	8c 8b       	std	Y+20, r24	; 0x14
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	8d 8b       	std	Y+21, r24	; 0x15

    ST_GPIO_cfg_t pinF = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinFPortName};
    110e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1110:	f8 a1       	ldd	r31, Y+32	; 0x20
    1112:	94 85       	ldd	r25, Z+12	; 0x0c
    1114:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1116:	f8 a1       	ldd	r31, Y+32	; 0x20
    1118:	85 85       	ldd	r24, Z+13	; 0x0d
    111a:	1f 8a       	std	Y+23, r1	; 0x17
    111c:	18 8e       	std	Y+24, r1	; 0x18
    111e:	19 8e       	std	Y+25, r1	; 0x19
    1120:	1a 8e       	std	Y+26, r1	; 0x1a
    1122:	9f 8b       	std	Y+23, r25	; 0x17
    1124:	88 8f       	std	Y+24, r24	; 0x18
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 8f       	std	Y+25, r24	; 0x19

    ST_GPIO_cfg_t pinG = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinGPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinGPortName};
    112a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    112c:	f8 a1       	ldd	r31, Y+32	; 0x20
    112e:	96 85       	ldd	r25, Z+14	; 0x0e
    1130:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1132:	f8 a1       	ldd	r31, Y+32	; 0x20
    1134:	87 85       	ldd	r24, Z+15	; 0x0f
    1136:	1b 8e       	std	Y+27, r1	; 0x1b
    1138:	1c 8e       	std	Y+28, r1	; 0x1c
    113a:	1d 8e       	std	Y+29, r1	; 0x1d
    113c:	1e 8e       	std	Y+30, r1	; 0x1e
    113e:	9b 8f       	std	Y+27, r25	; 0x1b
    1140:	8c 8f       	std	Y+28, r24	; 0x1c
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	8d 8f       	std	Y+29, r24	; 0x1d

    gpioRet = GPIO_initPin(&pinA);
    1146:	ce 01       	movw	r24, r28
    1148:	03 96       	adiw	r24, 0x03	; 3
    114a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    114e:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	88 23       	and	r24, r24
    1154:	21 f4       	brne	.+8      	; 0x115e <SSD_dualInit+0x106>
      GPIO_initPin(&pinB);
    1156:	ce 01       	movw	r24, r28
    1158:	07 96       	adiw	r24, 0x07	; 7
    115a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 23       	and	r24, r24
    1162:	21 f4       	brne	.+8      	; 0x116c <SSD_dualInit+0x114>
      GPIO_initPin(&pinC);
    1164:	ce 01       	movw	r24, r28
    1166:	0b 96       	adiw	r24, 0x0b	; 11
    1168:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 23       	and	r24, r24
    1170:	21 f4       	brne	.+8      	; 0x117a <SSD_dualInit+0x122>
      GPIO_initPin(&pinD);
    1172:	ce 01       	movw	r24, r28
    1174:	0f 96       	adiw	r24, 0x0f	; 15
    1176:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 23       	and	r24, r24
    117e:	21 f4       	brne	.+8      	; 0x1188 <SSD_dualInit+0x130>
      GPIO_initPin(&pinE);
    1180:	ce 01       	movw	r24, r28
    1182:	43 96       	adiw	r24, 0x13	; 19
    1184:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 23       	and	r24, r24
    118c:	21 f4       	brne	.+8      	; 0x1196 <SSD_dualInit+0x13e>
      GPIO_initPin(&pinF);
    118e:	ce 01       	movw	r24, r28
    1190:	47 96       	adiw	r24, 0x17	; 23
    1192:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 23       	and	r24, r24
    119a:	21 f4       	brne	.+8      	; 0x11a4 <SSD_dualInit+0x14c>
      GPIO_initPin(&pinG);
    119c:	ce 01       	movw	r24, r28
    119e:	4b 96       	adiw	r24, 0x1b	; 27
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }

    if (gpioRet == GPIO_OK) {
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	88 23       	and	r24, r24
    11a8:	11 f4       	brne	.+4      	; 0x11ae <SSD_dualInit+0x156>
      ssdRet = SSD_OK;
    11aa:	1a 82       	std	Y+2, r1	; 0x02
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <SSD_dualInit+0x160>
    } else {
      ssdRet = SSD_NOK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <SSD_dualInit+0x160>
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11ba:	a0 96       	adiw	r28, 0x20	; 32
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <SSD_dualSetCurrentSegmentComPin>:

EN_SSD_systemState_t SSD_dualSetCurrentSegmentComPin(
    ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	a5 97       	sbiw	r28, 0x25	; 37
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	9c a3       	std	Y+36, r25	; 0x24
    11e2:	8b a3       	std	Y+35, r24	; 0x23

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    11ec:	8b a1       	ldd	r24, Y+35	; 0x23
    11ee:	9c a1       	ldd	r25, Y+36	; 0x24
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <SSD_dualSetCurrentSegmentComPin+0x2a>
    11f4:	f7 c0       	rjmp	.+494    	; 0x13e4 <SSD_dualSetCurrentSegmentComPin+0x218>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    11f6:	eb a1       	ldd	r30, Y+35	; 0x23
    11f8:	fc a1       	ldd	r31, Y+36	; 0x24
    11fa:	86 89       	ldd	r24, Z+22	; 0x16
    11fc:	88 23       	and	r24, r24
    11fe:	09 f0       	breq	.+2      	; 0x1202 <SSD_dualSetCurrentSegmentComPin+0x36>
    1200:	76 c0       	rjmp	.+236    	; 0x12ee <SSD_dualSetCurrentSegmentComPin+0x122>
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    1202:	eb a1       	ldd	r30, Y+35	; 0x23
    1204:	fc a1       	ldd	r31, Y+36	; 0x24
    1206:	80 81       	ld	r24, Z
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	c9 f4       	brne	.+50     	; 0x123e <SSD_dualSetCurrentSegmentComPin+0x72>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    120c:	eb a1       	ldd	r30, Y+35	; 0x23
    120e:	fc a1       	ldd	r31, Y+36	; 0x24
    1210:	92 89       	ldd	r25, Z+18	; 0x12
    1212:	eb a1       	ldd	r30, Y+35	; 0x23
    1214:	fc a1       	ldd	r31, Y+36	; 0x24
    1216:	83 89       	ldd	r24, Z+19	; 0x13
    1218:	9b 83       	std	Y+3, r25	; 0x03
    121a:	8c 83       	std	Y+4, r24	; 0x04
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8e 83       	std	Y+6, r24	; 0x06

        gpioRet = GPIO_initPin(&pinFirstCom);
    1224:	ce 01       	movw	r24, r28
    1226:	03 96       	adiw	r24, 0x03	; 3
    1228:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    122c:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 23       	and	r24, r24
    1232:	11 f4       	brne	.+4      	; 0x1238 <SSD_dualSetCurrentSegmentComPin+0x6c>
          ssdRet = SSD_OK;
    1234:	1a 82       	std	Y+2, r1	; 0x02
    1236:	1f c0       	rjmp	.+62     	; 0x1276 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	1c c0       	rjmp	.+56     	; 0x1276 <SSD_dualSetCurrentSegmentComPin+0xaa>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    123e:	eb a1       	ldd	r30, Y+35	; 0x23
    1240:	fc a1       	ldd	r31, Y+36	; 0x24
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	b9 f4       	brne	.+46     	; 0x1276 <SSD_dualSetCurrentSegmentComPin+0xaa>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1248:	eb a1       	ldd	r30, Y+35	; 0x23
    124a:	fc a1       	ldd	r31, Y+36	; 0x24
    124c:	92 89       	ldd	r25, Z+18	; 0x12
    124e:	eb a1       	ldd	r30, Y+35	; 0x23
    1250:	fc a1       	ldd	r31, Y+36	; 0x24
    1252:	83 89       	ldd	r24, Z+19	; 0x13
    1254:	9f 83       	std	Y+7, r25	; 0x07
    1256:	88 87       	std	Y+8, r24	; 0x08
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 87       	std	Y+9, r24	; 0x09
    125c:	1a 86       	std	Y+10, r1	; 0x0a

        gpioRet = GPIO_initPin(&pinFirstCom);
    125e:	ce 01       	movw	r24, r28
    1260:	07 96       	adiw	r24, 0x07	; 7
    1262:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    1266:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 23       	and	r24, r24
    126c:	11 f4       	brne	.+4      	; 0x1272 <SSD_dualSetCurrentSegmentComPin+0xa6>
          ssdRet = SSD_OK;
    126e:	1a 82       	std	Y+2, r1	; 0x02
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	8a 83       	std	Y+2, r24	; 0x02

      } else {
        /*Do Nothing*/
      }

      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    1276:	eb a1       	ldd	r30, Y+35	; 0x23
    1278:	fc a1       	ldd	r31, Y+36	; 0x24
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	c1 f4       	brne	.+48     	; 0x12b0 <SSD_dualSetCurrentSegmentComPin+0xe4>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1280:	eb a1       	ldd	r30, Y+35	; 0x23
    1282:	fc a1       	ldd	r31, Y+36	; 0x24
    1284:	94 89       	ldd	r25, Z+20	; 0x14
    1286:	eb a1       	ldd	r30, Y+35	; 0x23
    1288:	fc a1       	ldd	r31, Y+36	; 0x24
    128a:	85 89       	ldd	r24, Z+21	; 0x15
    128c:	9b 87       	std	Y+11, r25	; 0x0b
    128e:	8c 87       	std	Y+12, r24	; 0x0c
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8d 87       	std	Y+13, r24	; 0x0d
    1294:	1e 86       	std	Y+14, r1	; 0x0e

        gpioRet = GPIO_initPin(&pinSecondCom);
    1296:	ce 01       	movw	r24, r28
    1298:	0b 96       	adiw	r24, 0x0b	; 11
    129a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    129e:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 23       	and	r24, r24
    12a4:	11 f4       	brne	.+4      	; 0x12aa <SSD_dualSetCurrentSegmentComPin+0xde>
          ssdRet = SSD_OK;
    12a6:	1a 82       	std	Y+2, r1	; 0x02
    12a8:	9f c0       	rjmp	.+318    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	9c c0       	rjmp	.+312    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    12b0:	eb a1       	ldd	r30, Y+35	; 0x23
    12b2:	fc a1       	ldd	r31, Y+36	; 0x24
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	88 23       	and	r24, r24
    12b8:	09 f0       	breq	.+2      	; 0x12bc <SSD_dualSetCurrentSegmentComPin+0xf0>
    12ba:	96 c0       	rjmp	.+300    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    12bc:	eb a1       	ldd	r30, Y+35	; 0x23
    12be:	fc a1       	ldd	r31, Y+36	; 0x24
    12c0:	94 89       	ldd	r25, Z+20	; 0x14
    12c2:	eb a1       	ldd	r30, Y+35	; 0x23
    12c4:	fc a1       	ldd	r31, Y+36	; 0x24
    12c6:	85 89       	ldd	r24, Z+21	; 0x15
    12c8:	9f 87       	std	Y+15, r25	; 0x0f
    12ca:	88 8b       	std	Y+16, r24	; 0x10
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 8b       	std	Y+17, r24	; 0x11
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	8a 8b       	std	Y+18, r24	; 0x12

        gpioRet = GPIO_initPin(&pinSecondCom);
    12d4:	ce 01       	movw	r24, r28
    12d6:	0f 96       	adiw	r24, 0x0f	; 15
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    12dc:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 23       	and	r24, r24
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <SSD_dualSetCurrentSegmentComPin+0x11c>
          ssdRet = SSD_OK;
    12e4:	1a 82       	std	Y+2, r1	; 0x02
    12e6:	80 c0       	rjmp	.+256    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	7d c0       	rjmp	.+250    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else {
        /*Do Nothing*/
      }

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    12ee:	eb a1       	ldd	r30, Y+35	; 0x23
    12f0:	fc a1       	ldd	r31, Y+36	; 0x24
    12f2:	86 89       	ldd	r24, Z+22	; 0x16
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <SSD_dualSetCurrentSegmentComPin+0x12e>
    12f8:	77 c0       	rjmp	.+238    	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    12fa:	eb a1       	ldd	r30, Y+35	; 0x23
    12fc:	fc a1       	ldd	r31, Y+36	; 0x24
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	c9 f4       	brne	.+50     	; 0x1336 <SSD_dualSetCurrentSegmentComPin+0x16a>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1304:	eb a1       	ldd	r30, Y+35	; 0x23
    1306:	fc a1       	ldd	r31, Y+36	; 0x24
    1308:	94 89       	ldd	r25, Z+20	; 0x14
    130a:	eb a1       	ldd	r30, Y+35	; 0x23
    130c:	fc a1       	ldd	r31, Y+36	; 0x24
    130e:	85 89       	ldd	r24, Z+21	; 0x15
    1310:	9b 8b       	std	Y+19, r25	; 0x13
    1312:	8c 8b       	std	Y+20, r24	; 0x14
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	8d 8b       	std	Y+21, r24	; 0x15
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8e 8b       	std	Y+22, r24	; 0x16

        gpioRet = GPIO_initPin(&pinSecondCom);
    131c:	ce 01       	movw	r24, r28
    131e:	43 96       	adiw	r24, 0x13	; 19
    1320:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    1324:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	88 23       	and	r24, r24
    132a:	11 f4       	brne	.+4      	; 0x1330 <SSD_dualSetCurrentSegmentComPin+0x164>
          ssdRet = SSD_OK;
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	1f c0       	rjmp	.+62     	; 0x136e <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8a 83       	std	Y+2, r24	; 0x02
    1334:	1c c0       	rjmp	.+56     	; 0x136e <SSD_dualSetCurrentSegmentComPin+0x1a2>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    1336:	eb a1       	ldd	r30, Y+35	; 0x23
    1338:	fc a1       	ldd	r31, Y+36	; 0x24
    133a:	81 81       	ldd	r24, Z+1	; 0x01
    133c:	88 23       	and	r24, r24
    133e:	b9 f4       	brne	.+46     	; 0x136e <SSD_dualSetCurrentSegmentComPin+0x1a2>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1340:	eb a1       	ldd	r30, Y+35	; 0x23
    1342:	fc a1       	ldd	r31, Y+36	; 0x24
    1344:	94 89       	ldd	r25, Z+20	; 0x14
    1346:	eb a1       	ldd	r30, Y+35	; 0x23
    1348:	fc a1       	ldd	r31, Y+36	; 0x24
    134a:	85 89       	ldd	r24, Z+21	; 0x15
    134c:	9f 8b       	std	Y+23, r25	; 0x17
    134e:	88 8f       	std	Y+24, r24	; 0x18
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 8f       	std	Y+25, r24	; 0x19
    1354:	1a 8e       	std	Y+26, r1	; 0x1a

        gpioRet = GPIO_initPin(&pinSecondCom);
    1356:	ce 01       	movw	r24, r28
    1358:	47 96       	adiw	r24, 0x17	; 23
    135a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    135e:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 23       	and	r24, r24
    1364:	11 f4       	brne	.+4      	; 0x136a <SSD_dualSetCurrentSegmentComPin+0x19e>
          ssdRet = SSD_OK;
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	02 c0       	rjmp	.+4      	; 0x136e <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8a 83       	std	Y+2, r24	; 0x02
        }
      } else {
        /*Do Nothing*/
      }
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    136e:	eb a1       	ldd	r30, Y+35	; 0x23
    1370:	fc a1       	ldd	r31, Y+36	; 0x24
    1372:	80 81       	ld	r24, Z
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	c1 f4       	brne	.+48     	; 0x13a8 <SSD_dualSetCurrentSegmentComPin+0x1dc>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1378:	eb a1       	ldd	r30, Y+35	; 0x23
    137a:	fc a1       	ldd	r31, Y+36	; 0x24
    137c:	92 89       	ldd	r25, Z+18	; 0x12
    137e:	eb a1       	ldd	r30, Y+35	; 0x23
    1380:	fc a1       	ldd	r31, Y+36	; 0x24
    1382:	83 89       	ldd	r24, Z+19	; 0x13
    1384:	9b 8f       	std	Y+27, r25	; 0x1b
    1386:	8c 8f       	std	Y+28, r24	; 0x1c
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
    138c:	1e 8e       	std	Y+30, r1	; 0x1e

        gpioRet = GPIO_initPin(&pinFirstCom);
    138e:	ce 01       	movw	r24, r28
    1390:	4b 96       	adiw	r24, 0x1b	; 27
    1392:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    1396:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 23       	and	r24, r24
    139c:	11 f4       	brne	.+4      	; 0x13a2 <SSD_dualSetCurrentSegmentComPin+0x1d6>
          ssdRet = SSD_OK;
    139e:	1a 82       	std	Y+2, r1	; 0x02
    13a0:	23 c0       	rjmp	.+70     	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	20 c0       	rjmp	.+64     	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    13a8:	eb a1       	ldd	r30, Y+35	; 0x23
    13aa:	fc a1       	ldd	r31, Y+36	; 0x24
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	d9 f4       	brne	.+54     	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    13b2:	eb a1       	ldd	r30, Y+35	; 0x23
    13b4:	fc a1       	ldd	r31, Y+36	; 0x24
    13b6:	92 89       	ldd	r25, Z+18	; 0x12
    13b8:	eb a1       	ldd	r30, Y+35	; 0x23
    13ba:	fc a1       	ldd	r31, Y+36	; 0x24
    13bc:	83 89       	ldd	r24, Z+19	; 0x13
    13be:	9f 8f       	std	Y+31, r25	; 0x1f
    13c0:	88 a3       	std	Y+32, r24	; 0x20
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 a3       	std	Y+33, r24	; 0x21
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	8a a3       	std	Y+34, r24	; 0x22

        gpioRet = GPIO_initPin(&pinFirstCom);
    13ca:	ce 01       	movw	r24, r28
    13cc:	4f 96       	adiw	r24, 0x1f	; 31
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    13d2:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	88 23       	and	r24, r24
    13d8:	11 f4       	brne	.+4      	; 0x13de <SSD_dualSetCurrentSegmentComPin+0x212>
          ssdRet = SSD_OK;
    13da:	1a 82       	std	Y+2, r1	; 0x02
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	8a 83       	std	Y+2, r24	; 0x02
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <SSD_dualSetCurrentSegmentComPin+0x21c>
      }
    } else {
    }

  } else {
    ssdRet = SSD_NULL_PTR;
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	8a 83       	std	Y+2, r24	; 0x02
  }
}
    13e8:	a5 96       	adiw	r28, 0x25	; 37
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <SSD_dualSwitchSegment>:

EN_SSD_systemState_t
SSD_dualSwitchSegment(ST_SSD_DualCfg_t *ST_ptrSsdDualCfgInstance,
                      EN_SSD_index_t indexOfTheDisplay) {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <SSD_dualSwitchSegment+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <SSD_dualSwitchSegment+0x8>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	9b 83       	std	Y+3, r25	; 0x03
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	6c 83       	std	Y+4, r22	; 0x04

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	9b 81       	ldd	r25, Y+3	; 0x03
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	31 f0       	breq	.+12     	; 0x1424 <SSD_dualSwitchSegment+0x2a>
    ST_ptrSsdDualCfgInstance->ssdCurrentDisplay = indexOfTheDisplay;
    1418:	ea 81       	ldd	r30, Y+2	; 0x02
    141a:	fb 81       	ldd	r31, Y+3	; 0x03
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	86 8b       	std	Z+22, r24	; 0x16
    ssdRet = SSD_OK;
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <SSD_dualSwitchSegment+0x2e>
  } else {
    ssdRet = SSD_NULL_PTR;
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	89 83       	std	Y+1, r24	; 0x01
  }
  return ssdRet;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <SSD_dualSetNumberOnSsd>:

EN_SSD_systemState_t
SSD_dualSetNumberOnSsd(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance,
                       EN_SSD_numbers_t valueOfNumber) {
    1438:	cf 92       	push	r12
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	6c 97       	sbiw	r28, 0x1c	; 28
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	99 8f       	std	Y+25, r25	; 0x19
    145a:	88 8f       	std	Y+24, r24	; 0x18
    145c:	6a 8f       	std	Y+26, r22	; 0x1a

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	8c 83       	std	Y+4, r24	; 0x04
  EN_SSD_typeOfCommon_t currentCommonType;
  EN_GPIO_mcuPins_t currentCommonPin;
  EN_GPIO_mcuPorts_t currentCommonPort;

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1462:	88 8d       	ldd	r24, Y+24	; 0x18
    1464:	99 8d       	ldd	r25, Y+25	; 0x19
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f4       	brne	.+2      	; 0x146c <SSD_dualSetNumberOnSsd+0x34>
    146a:	73 c0       	rjmp	.+230    	; 0x1552 <SSD_dualSetNumberOnSsd+0x11a>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    146c:	e8 8d       	ldd	r30, Y+24	; 0x18
    146e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1470:	86 89       	ldd	r24, Z+22	; 0x16
    1472:	88 23       	and	r24, r24
    1474:	69 f4       	brne	.+26     	; 0x1490 <SSD_dualSetNumberOnSsd+0x58>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdFirstCommonType;
    1476:	e8 8d       	ldd	r30, Y+24	; 0x18
    1478:	f9 8d       	ldd	r31, Y+25	; 0x19
    147a:	80 81       	ld	r24, Z
    147c:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName;
    147e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1480:	f9 8d       	ldd	r31, Y+25	; 0x19
    1482:	82 89       	ldd	r24, Z+18	; 0x12
    1484:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber;
    1486:	e8 8d       	ldd	r30, Y+24	; 0x18
    1488:	f9 8d       	ldd	r31, Y+25	; 0x19
    148a:	83 89       	ldd	r24, Z+19	; 0x13
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <SSD_dualSetNumberOnSsd+0x7a>

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    1490:	e8 8d       	ldd	r30, Y+24	; 0x18
    1492:	f9 8d       	ldd	r31, Y+25	; 0x19
    1494:	86 89       	ldd	r24, Z+22	; 0x16
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	61 f4       	brne	.+24     	; 0x14b2 <SSD_dualSetNumberOnSsd+0x7a>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdSecondCommonType;
    149a:	e8 8d       	ldd	r30, Y+24	; 0x18
    149c:	f9 8d       	ldd	r31, Y+25	; 0x19
    149e:	81 81       	ldd	r24, Z+1	; 0x01
    14a0:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName;
    14a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    14a4:	f9 8d       	ldd	r31, Y+25	; 0x19
    14a6:	84 89       	ldd	r24, Z+20	; 0x14
    14a8:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber;
    14aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    14ac:	f9 8d       	ldd	r31, Y+25	; 0x19
    14ae:	85 89       	ldd	r24, Z+21	; 0x15
    14b0:	8a 83       	std	Y+2, r24	; 0x02
        .ssdPinDPortName = ST_ptrSsdDualCfgInstance->ssdPinDPortName,
        .ssdPinEPortName = ST_ptrSsdDualCfgInstance->ssdPinEPortName,
        .ssdPinFPortName = ST_ptrSsdDualCfgInstance->ssdPinFPortName,
        .ssdPinGPortName = ST_ptrSsdDualCfgInstance->ssdPinGPortName,
        .ssdPinComPortName = currentCommonPort,
        .ssdPinComPinNumber = currentCommonPin};
    14b2:	e8 8d       	ldd	r30, Y+24	; 0x18
    14b4:	f9 8d       	ldd	r31, Y+25	; 0x19
    14b6:	92 81       	ldd	r25, Z+2	; 0x02
    14b8:	e8 8d       	ldd	r30, Y+24	; 0x18
    14ba:	f9 8d       	ldd	r31, Y+25	; 0x19
    14bc:	23 81       	ldd	r18, Z+3	; 0x03
    14be:	e8 8d       	ldd	r30, Y+24	; 0x18
    14c0:	f9 8d       	ldd	r31, Y+25	; 0x19
    14c2:	34 81       	ldd	r19, Z+4	; 0x04
    14c4:	e8 8d       	ldd	r30, Y+24	; 0x18
    14c6:	f9 8d       	ldd	r31, Y+25	; 0x19
    14c8:	45 81       	ldd	r20, Z+5	; 0x05
    14ca:	e8 8d       	ldd	r30, Y+24	; 0x18
    14cc:	f9 8d       	ldd	r31, Y+25	; 0x19
    14ce:	56 81       	ldd	r21, Z+6	; 0x06
    14d0:	e8 8d       	ldd	r30, Y+24	; 0x18
    14d2:	f9 8d       	ldd	r31, Y+25	; 0x19
    14d4:	67 81       	ldd	r22, Z+7	; 0x07
    14d6:	e8 8d       	ldd	r30, Y+24	; 0x18
    14d8:	f9 8d       	ldd	r31, Y+25	; 0x19
    14da:	70 85       	ldd	r23, Z+8	; 0x08
    14dc:	e8 8d       	ldd	r30, Y+24	; 0x18
    14de:	f9 8d       	ldd	r31, Y+25	; 0x19
    14e0:	a1 85       	ldd	r26, Z+9	; 0x09
    14e2:	e8 8d       	ldd	r30, Y+24	; 0x18
    14e4:	f9 8d       	ldd	r31, Y+25	; 0x19
    14e6:	b2 85       	ldd	r27, Z+10	; 0x0a
    14e8:	e8 8d       	ldd	r30, Y+24	; 0x18
    14ea:	f9 8d       	ldd	r31, Y+25	; 0x19
    14ec:	13 85       	ldd	r17, Z+11	; 0x0b
    14ee:	e8 8d       	ldd	r30, Y+24	; 0x18
    14f0:	f9 8d       	ldd	r31, Y+25	; 0x19
    14f2:	04 85       	ldd	r16, Z+12	; 0x0c
    14f4:	e8 8d       	ldd	r30, Y+24	; 0x18
    14f6:	f9 8d       	ldd	r31, Y+25	; 0x19
    14f8:	f5 84       	ldd	r15, Z+13	; 0x0d
    14fa:	e8 8d       	ldd	r30, Y+24	; 0x18
    14fc:	f9 8d       	ldd	r31, Y+25	; 0x19
    14fe:	e6 84       	ldd	r14, Z+14	; 0x0e
    1500:	e8 8d       	ldd	r30, Y+24	; 0x18
    1502:	f9 8d       	ldd	r31, Y+25	; 0x19
    1504:	d7 84       	ldd	r13, Z+15	; 0x0f
    1506:	83 e1       	ldi	r24, 0x13	; 19
    1508:	fe 01       	movw	r30, r28
    150a:	35 96       	adiw	r30, 0x05	; 5
    150c:	fc 8f       	std	Y+28, r31	; 0x1c
    150e:	eb 8f       	std	Y+27, r30	; 0x1b
    1510:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1512:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1514:	c8 2e       	mov	r12, r24
    1516:	11 92       	st	Z+, r1
    1518:	ca 94       	dec	r12
    151a:	e9 f7       	brne	.-6      	; 0x1516 <SSD_dualSetNumberOnSsd+0xde>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	2f 83       	std	Y+7, r18	; 0x07
    1524:	38 87       	std	Y+8, r19	; 0x08
    1526:	49 87       	std	Y+9, r20	; 0x09
    1528:	5a 87       	std	Y+10, r21	; 0x0a
    152a:	6b 87       	std	Y+11, r22	; 0x0b
    152c:	7c 87       	std	Y+12, r23	; 0x0c
    152e:	ad 87       	std	Y+13, r26	; 0x0d
    1530:	be 87       	std	Y+14, r27	; 0x0e
    1532:	1f 87       	std	Y+15, r17	; 0x0f
    1534:	08 8b       	std	Y+16, r16	; 0x10
    1536:	f9 8a       	std	Y+17, r15	; 0x11
    1538:	ea 8a       	std	Y+18, r14	; 0x12
    153a:	db 8a       	std	Y+19, r13	; 0x13
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	8c 8b       	std	Y+20, r24	; 0x14
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	8d 8b       	std	Y+21, r24	; 0x15

    ssdRet = SSD_setNumberOnSsd(&curruntSsdPins, valueOfNumber);
    1544:	ce 01       	movw	r24, r28
    1546:	05 96       	adiw	r24, 0x05	; 5
    1548:	6a 8d       	ldd	r22, Y+26	; 0x1a
    154a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <SSD_setNumberOnSsd>
    154e:	8c 83       	std	Y+4, r24	; 0x04
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <SSD_dualSetNumberOnSsd+0x11e>
  } else {
    ssdRet = SSD_NOK;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8c 83       	std	Y+4, r24	; 0x04
  }
  return ssdRet;
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	6c 96       	adiw	r28, 0x1c	; 28
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	08 95       	ret

00001576 <EKP_init>:

static ST_GPIO_cfg_t arrOfRows[KEYPAD_ROWS_SIZE];
static ST_GPIO_cfg_t arrOfColumns[KEYPAD_COLUMNS_SIZE];


EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	2e 97       	sbiw	r28, 0x0e	; 14
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	9e 87       	std	Y+14, r25	; 0x0e
    158c:	8d 87       	std	Y+13, r24	; 0x0d
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	8b 83       	std	Y+3, r24	; 0x03
	if (PTR_NULL != ST_ptrKeypadInstance) {
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	09 f4       	brne	.+2      	; 0x15a0 <EKP_init+0x2a>
    159e:	88 c0       	rjmp	.+272    	; 0x16b0 <EKP_init+0x13a>
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    15a0:	1a 82       	std	Y+2, r1	; 0x02
    15a2:	3b c0       	rjmp	.+118    	; 0x161a <EKP_init+0xa4>
			{
					.pinDirection = GPIO_OUTPUT,
					.logicOnPin = GPIO_HIGH,
					.portName = ST_ptrKeypadInstance->arrOfRowPorts[Rowscounter],
					.pinNumber = ST_ptrKeypadInstance->arrOfRowPins[Rowscounter]
			};
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	82 0f       	add	r24, r18
    15b0:	93 1f       	adc	r25, r19
    15b2:	fc 01       	movw	r30, r24
    15b4:	34 96       	adiw	r30, 0x04	; 4
    15b6:	40 81       	ld	r20, Z
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	80 81       	ld	r24, Z
    15ca:	4d 83       	std	Y+5, r20	; 0x05
    15cc:	8e 83       	std	Y+6, r24	; 0x06
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	8f 83       	std	Y+7, r24	; 0x07
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	88 87       	std	Y+8, r24	; 0x08
			gpioRet = GPIO_initPin(&tempStructForRowPin);
    15d6:	ce 01       	movw	r24, r28
    15d8:	05 96       	adiw	r24, 0x05	; 5
    15da:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    15de:	8b 83       	std	Y+3, r24	; 0x03
			if (gpioRet == GPIO_OK)
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 23       	and	r24, r24
    15e4:	b9 f4       	brne	.+46     	; 0x1614 <EKP_init+0x9e>
			{
				arrOfRows[Rowscounter] = tempStructForRowPin;
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	fc 01       	movw	r30, r24
    15f6:	e8 5c       	subi	r30, 0xC8	; 200
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	af 81       	ldd	r26, Y+7	; 0x07
    1600:	b8 85       	ldd	r27, Y+8	; 0x08
    1602:	80 83       	st	Z, r24
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	a2 83       	std	Z+2, r26	; 0x02
    1608:	b3 83       	std	Z+3, r27	; 0x03
				kpRet = EKP_OK;
    160a:	1c 82       	std	Y+4, r1	; 0x04
EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	03 c0       	rjmp	.+6      	; 0x161a <EKP_init+0xa4>
				arrOfRows[Rowscounter] = tempStructForRowPin;
				kpRet = EKP_OK;
			}
			else
			{
				kpRet = EKP_NOK;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	8c 83       	std	Y+4, r24	; 0x04
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <EKP_init+0xaa>
EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	10 f2       	brcs	.-124    	; 0x15a4 <EKP_init+0x2e>
			{
				kpRet = EKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <EKP_init+0xb2>
    1626:	41 c0       	rjmp	.+130    	; 0x16aa <EKP_init+0x134>
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	3b c0       	rjmp	.+118    	; 0x16a2 <EKP_init+0x12c>
				{
						.pinDirection = GPIO_INPUT,
						.logicOnPin = GPIO_HIGH,
						.portName = ST_ptrKeypadInstance->arrOfColumnPorts[Colscounter],
						.pinNumber = ST_ptrKeypadInstance->arrOfColumnPins[Colscounter]
				};
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	fc 01       	movw	r30, r24
    163c:	3c 96       	adiw	r30, 0x0c	; 12
    163e:	40 81       	ld	r20, Z
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	fc 01       	movw	r30, r24
    1650:	38 96       	adiw	r30, 0x08	; 8
    1652:	80 81       	ld	r24, Z
    1654:	49 87       	std	Y+9, r20	; 0x09
    1656:	8a 87       	std	Y+10, r24	; 0x0a
    1658:	1b 86       	std	Y+11, r1	; 0x0b
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8c 87       	std	Y+12, r24	; 0x0c
				gpioRet = GPIO_initPin(&tempStructForColPin);
    165e:	ce 01       	movw	r24, r28
    1660:	09 96       	adiw	r24, 0x09	; 9
    1662:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_initPin>
    1666:	8b 83       	std	Y+3, r24	; 0x03
				if (gpioRet == GPIO_OK)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	88 23       	and	r24, r24
    166c:	b9 f4       	brne	.+46     	; 0x169c <EKP_init+0x126>
				{
					arrOfColumns[Colscounter] = tempStructForColPin;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	fc 01       	movw	r30, r24
    167e:	e8 5b       	subi	r30, 0xB8	; 184
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	ab 85       	ldd	r26, Y+11	; 0x0b
    1688:	bc 85       	ldd	r27, Y+12	; 0x0c
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
					kpRet = EKP_OK;
    1692:	1c 82       	std	Y+4, r1	; 0x04
				kpRet = EKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <EKP_init+0x12c>
					arrOfColumns[Colscounter] = tempStructForColPin;
					kpRet = EKP_OK;
				}
				else
				{
					kpRet = EKP_NOK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	8c 83       	std	Y+4, r24	; 0x04
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <EKP_init+0x13e>
				kpRet = EKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	10 f2       	brcs	.-124    	; 0x162c <EKP_init+0xb6>
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <EKP_init+0x13e>

			}
		}
		else
		{
			kpRet = EKP_NOK;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	8c 83       	std	Y+4, r24	; 0x04
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <EKP_init+0x13e>
		}

	}
	else
	{
		kpRet = EKP_PTR_NULL;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16b6:	2e 96       	adiw	r28, 0x0e	; 14
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <EKP_scanningForPressedBtn>:


EN_EKP_systemStatus_t
EKP_scanningForPressedBtn(uint8_t *pressedBtnVal) {
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	27 97       	sbiw	r28, 0x07	; 7
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	9f 83       	std	Y+7, r25	; 0x07
    16de:	8e 83       	std	Y+6, r24	; 0x06

	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	9f 81       	ldd	r25, Y+7	; 0x07
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <EKP_scanningForPressedBtn+0x2a>
    16f0:	69 c0       	rjmp	.+210    	; 0x17c4 <EKP_scanningForPressedBtn+0xfc>
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    16f2:	1a 82       	std	Y+2, r1	; 0x02
    16f4:	62 c0       	rjmp	.+196    	; 0x17ba <EKP_scanningForPressedBtn+0xf2>

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	88 5c       	subi	r24, 0xC8	; 200
    1706:	9e 4f       	sbci	r25, 0xFE	; 254
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
    170e:	8b 83       	std	Y+3, r24	; 0x03

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	3f c0       	rjmp	.+126    	; 0x1792 <EKP_scanningForPressedBtn+0xca>

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	88 5b       	subi	r24, 0xB8	; 184
    1724:	9e 4f       	sbci	r25, 0xFE	; 254
    1726:	9e 01       	movw	r18, r28
    1728:	2b 5f       	subi	r18, 0xFB	; 251
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 80 01 	call	0x300	; 0x300 <GPIO_readPinLogic>
    1732:	8b 83       	std	Y+3, r24	; 0x03

				if (valOfPressedBtn == GPIO_LOW) {
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	88 23       	and	r24, r24
    1738:	49 f5       	brne	.+82     	; 0x178c <EKP_scanningForPressedBtn+0xc4>
    173a:	10 c0       	rjmp	.+32     	; 0x175c <EKP_scanningForPressedBtn+0x94>
					while(valOfPressedBtn == GPIO_LOW)
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	88 5b       	subi	r24, 0xB8	; 184
    174c:	9e 4f       	sbci	r25, 0xFE	; 254
    174e:	9e 01       	movw	r18, r28
    1750:	2b 5f       	subi	r18, 0xFB	; 251
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 80 01 	call	0x300	; 0x300 <GPIO_readPinLogic>
    175a:	8b 83       	std	Y+3, r24	; 0x03
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);

				if (valOfPressedBtn == GPIO_LOW) {
					while(valOfPressedBtn == GPIO_LOW)
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	88 23       	and	r24, r24
    1760:	69 f3       	breq	.-38     	; 0x173c <EKP_scanningForPressedBtn+0x74>
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
					}
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	48 2f       	mov	r20, r24
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	ca 01       	movw	r24, r20
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	fc 01       	movw	r30, r24
    177e:	ec 5f       	subi	r30, 0xFC	; 252
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	80 81       	ld	r24, Z
    1784:	ee 81       	ldd	r30, Y+6	; 0x06
    1786:	ff 81       	ldd	r31, Y+7	; 0x07
    1788:	80 83       	st	Z, r24
    178a:	07 c0       	rjmp	.+14     	; 0x179a <EKP_scanningForPressedBtn+0xd2>

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	08 f4       	brcc	.+2      	; 0x179a <EKP_scanningForPressedBtn+0xd2>
    1798:	bd cf       	rjmp	.-134    	; 0x1714 <EKP_scanningForPressedBtn+0x4c>
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
					break;
				}
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 5c       	subi	r24, 0xC8	; 200
    17aa:	9e 4f       	sbci	r25, 0xFE	; 254
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <GPIO_writePinLogic>
    17b2:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <EKP_scanningForPressedBtn+0xfa>
    17c0:	9a cf       	rjmp	.-204    	; 0x16f6 <EKP_scanningForPressedBtn+0x2e>
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <EKP_scanningForPressedBtn+0x100>
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
		}
	} else {
		kpRet = EKP_PTR_NULL;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17ca:	27 96       	adiw	r28, 0x07	; 7
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <appInit>:

extern ST_SSD_cfg_t ssdOne;
extern ST_EKP_cfg_t kp;

void appInit(void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	SSD_int(&ssdOne);
    17e4:	84 e1       	ldi	r24, 0x14	; 20
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 44 03 	call	0x688	; 0x688 <SSD_int>
	EKP_init(&kp);
    17ec:	87 e2       	ldi	r24, 0x27	; 39
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <EKP_init>
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <appMain>:

void appMain(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	uint8_t btn = 's';
    1804:	83 e7       	ldi	r24, 0x73	; 115
    1806:	89 83       	std	Y+1, r24	; 0x01
	SSD_setNumberOnSsd(&ssdOne,0);
    1808:	84 e1       	ldi	r24, 0x14	; 20
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <SSD_setNumberOnSsd>
	while(1)
	{
		EKP_scanningForPressedBtn(&btn);
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EKP_scanningForPressedBtn>
		if(btn !='s')
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	83 37       	cpi	r24, 0x73	; 115
    181e:	c9 f3       	breq	.-14     	; 0x1812 <appMain+0x18>
		{
			btn -= '0';
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	80 53       	subi	r24, 0x30	; 48
    1824:	89 83       	std	Y+1, r24	; 0x01
			SSD_setNumberOnSsd(&ssdOne,btn);
    1826:	29 81       	ldd	r18, Y+1	; 0x01
    1828:	84 e1       	ldi	r24, 0x14	; 20
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	62 2f       	mov	r22, r18
    182e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <SSD_setNumberOnSsd>
			btn = 's';
    1832:	83 e7       	ldi	r24, 0x73	; 115
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	ed cf       	rjmp	.-38     	; 0x1812 <appMain+0x18>

00001838 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	appInit();
    1840:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <appInit>
	appMain();
    1844:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <appMain>
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <_exit>:
    184e:	f8 94       	cli

00001850 <__stop_program>:
    1850:	ff cf       	rjmp	.-2      	; 0x1850 <__stop_program>
