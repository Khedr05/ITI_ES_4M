
05_Clock_On_Tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001320  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800221c  0800221c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800221c  0800221c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800221c  0800221c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800221c  0800221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002220  08002220  00012220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000058  0800227c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800227c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002eda  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a61  00000000  00000000  00022fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000020b  00000000  00000000  00023ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001229  00000000  00000000  00023ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000025be  00000000  00000000  0002511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005e21  00000000  00000000  000276da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000924  00000000  00000000  0002d4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0002de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800149c 	.word	0x0800149c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	0800149c 	.word	0x0800149c

080001d4 <appInit>:
uint8_t g_u8Sec = 0;
uint8_t g_u8DayNumber = 0;
uint8_t g_u8Time = 0;

void appInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	MRCC_Init();
 80001d8:	f000 ff86 	bl	80010e8 <MRCC_Init>
	MRCC_enablePeripheral(MRCC_AHP1_BUS,MRCC_GPIOA_PERIPHERAL);
 80001dc:	2100      	movs	r1, #0
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 ffaa 	bl	8001138 <MRCC_enablePeripheral>
	MRCC_enablePeripheral(MRCC_APB2_BUS , MRCC_SPI1_PERIPHERAL);
 80001e4:	210c      	movs	r1, #12
 80001e6:	2003      	movs	r0, #3
 80001e8:	f000 ffa6 	bl	8001138 <MRCC_enablePeripheral>

	MGPIO_setPinMode(MGPIO_PORTA,MGPIO_PIN5, MGPIO_MODE_ALTF);
 80001ec:	2202      	movs	r2, #2
 80001ee:	2105      	movs	r1, #5
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fc45 	bl	8000a80 <MGPIO_setPinMode>
	MGPIO_setPinMode(MGPIO_PORTA,MGPIO_PIN6, MGPIO_MODE_ALTF);
 80001f6:	2202      	movs	r2, #2
 80001f8:	2106      	movs	r1, #6
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 fc40 	bl	8000a80 <MGPIO_setPinMode>
	MGPIO_setPinMode(MGPIO_PORTA,MGPIO_PIN7, MGPIO_MODE_ALTF);
 8000200:	2202      	movs	r2, #2
 8000202:	2107      	movs	r1, #7
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fc3b 	bl	8000a80 <MGPIO_setPinMode>
	MGPIO_SetAltFun(MGPIO_PORTA,MGPIO_PIN5,MGPIO_ALTFN_5);
 800020a:	2205      	movs	r2, #5
 800020c:	2105      	movs	r1, #5
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fef2 	bl	8000ff8 <MGPIO_SetAltFun>
	MGPIO_SetAltFun(MGPIO_PORTA,MGPIO_PIN6,MGPIO_ALTFN_5);
 8000214:	2205      	movs	r2, #5
 8000216:	2106      	movs	r1, #6
 8000218:	2000      	movs	r0, #0
 800021a:	f000 feed 	bl	8000ff8 <MGPIO_SetAltFun>
	MGPIO_SetAltFun(MGPIO_PORTA,MGPIO_PIN7,MGPIO_ALTFN_5);
 800021e:	2205      	movs	r2, #5
 8000220:	2107      	movs	r1, #7
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fee8 	bl	8000ff8 <MGPIO_SetAltFun>

	HTFT_uddtInit(&tft);
 8000228:	4807      	ldr	r0, [pc, #28]	; (8000248 <appInit+0x74>)
 800022a:	f000 f9b3 	bl	8000594 <HTFT_uddtInit>
	HTFT_uddtClrDisplay(&tft);
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <appInit+0x74>)
 8000230:	f000 fb1e 	bl	8000870 <HTFT_uddtClrDisplay>
	HTFT_uddtFillBackgroundColor(&tft, HTFT_BLACK_COLOR);
 8000234:	2100      	movs	r1, #0
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <appInit+0x74>)
 8000238:	f000 fa9f 	bl	800077a <HTFT_uddtFillBackgroundColor>
	clockDisplayTime();
 800023c:	f000 f85c 	bl	80002f8 <clockDisplayTime>
	clockDisplayDay();
 8000240:	f000 f95c 	bl	80004fc <clockDisplayDay>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000000 	.word	0x20000000

0800024c <appMain>:
void appMain(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1)
	{
		MSTK_SetIntervalPeriodic(1000000,clockLogic);
 8000250:	4902      	ldr	r1, [pc, #8]	; (800025c <appMain+0x10>)
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <appMain+0x14>)
 8000254:	f001 f85e 	bl	8001314 <MSTK_SetIntervalPeriodic>
 8000258:	e7fa      	b.n	8000250 <appMain+0x4>
 800025a:	bf00      	nop
 800025c:	08000265 	.word	0x08000265
 8000260:	000f4240 	.word	0x000f4240

08000264 <clockLogic>:
	}
}

void clockLogic(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	g_u8Sec++;
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <clockLogic+0x80>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <clockLogic+0x80>)
 8000272:	701a      	strb	r2, [r3, #0]

	if(g_u8Sec == 60)
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <clockLogic+0x80>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b3c      	cmp	r3, #60	; 0x3c
 800027a:	d12d      	bne.n	80002d8 <clockLogic+0x74>
	{
		g_u8Min++;
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <clockLogic+0x84>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <clockLogic+0x84>)
 8000286:	701a      	strb	r2, [r3, #0]
		g_u8Sec = 0;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <clockLogic+0x80>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
		if(g_u8Min == 60)
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <clockLogic+0x84>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b3c      	cmp	r3, #60	; 0x3c
 8000294:	d108      	bne.n	80002a8 <clockLogic+0x44>
		{
			g_u8Hour++;
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <clockLogic+0x88>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <clockLogic+0x88>)
 80002a0:	701a      	strb	r2, [r3, #0]
			g_u8Min = 0;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <clockLogic+0x84>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
		}
		if(g_u8Hour == 12)
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <clockLogic+0x88>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b0c      	cmp	r3, #12
 80002ae:	d113      	bne.n	80002d8 <clockLogic+0x74>
		{
			g_u8Hour = 0;
 80002b0:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <clockLogic+0x88>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
			if(g_u8Time == 0)
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <clockLogic+0x8c>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d103      	bne.n	80002c6 <clockLogic+0x62>
			{
				g_u8Time = 1;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <clockLogic+0x8c>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e008      	b.n	80002d8 <clockLogic+0x74>
			}
			else
			{
				g_u8DayNumber++;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <clockLogic+0x90>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <clockLogic+0x90>)
 80002d0:	701a      	strb	r2, [r3, #0]
				g_u8Time = 0;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <clockLogic+0x8c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	clockDisplayTime();
 80002d8:	f000 f80e 	bl	80002f8 <clockDisplayTime>
	clockDisplayDay();
 80002dc:	f000 f90e 	bl	80004fc <clockDisplayDay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000076 	.word	0x20000076
 80002e8:	20000075 	.word	0x20000075
 80002ec:	20000074 	.word	0x20000074
 80002f0:	20000078 	.word	0x20000078
 80002f4:	20000077 	.word	0x20000077

080002f8 <clockDisplayTime>:

void clockDisplayTime(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af04      	add	r7, sp, #16
	HTFT_uddtDrawChar(&tft ,10,20,(g_u8Hour / 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 80002fe:	4b77      	ldr	r3, [pc, #476]	; (80004dc <clockDisplayTime+0x1e4>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4a77      	ldr	r2, [pc, #476]	; (80004e0 <clockDisplayTime+0x1e8>)
 8000304:	fba2 2303 	umull	r2, r3, r2, r3
 8000308:	08db      	lsrs	r3, r3, #3
 800030a:	b2db      	uxtb	r3, r3
 800030c:	3330      	adds	r3, #48	; 0x30
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2200      	movs	r2, #0
 8000312:	9203      	str	r2, [sp, #12]
 8000314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000318:	9202      	str	r2, [sp, #8]
 800031a:	4972      	ldr	r1, [pc, #456]	; (80004e4 <clockDisplayTime+0x1ec>)
 800031c:	466a      	mov	r2, sp
 800031e:	c903      	ldmia	r1, {r0, r1}
 8000320:	e882 0003 	stmia.w	r2, {r0, r1}
 8000324:	2214      	movs	r2, #20
 8000326:	210a      	movs	r1, #10
 8000328:	486f      	ldr	r0, [pc, #444]	; (80004e8 <clockDisplayTime+0x1f0>)
 800032a:	f000 fad2 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,25,20,(g_u8Hour % 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 800032e:	4b6b      	ldr	r3, [pc, #428]	; (80004dc <clockDisplayTime+0x1e4>)
 8000330:	781a      	ldrb	r2, [r3, #0]
 8000332:	4b6b      	ldr	r3, [pc, #428]	; (80004e0 <clockDisplayTime+0x1e8>)
 8000334:	fba3 1302 	umull	r1, r3, r3, r2
 8000338:	08d9      	lsrs	r1, r3, #3
 800033a:	460b      	mov	r3, r1
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	440b      	add	r3, r1
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	b2db      	uxtb	r3, r3
 8000346:	3330      	adds	r3, #48	; 0x30
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2200      	movs	r2, #0
 800034c:	9203      	str	r2, [sp, #12]
 800034e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000352:	9202      	str	r2, [sp, #8]
 8000354:	4963      	ldr	r1, [pc, #396]	; (80004e4 <clockDisplayTime+0x1ec>)
 8000356:	466a      	mov	r2, sp
 8000358:	c903      	ldmia	r1, {r0, r1}
 800035a:	e882 0003 	stmia.w	r2, {r0, r1}
 800035e:	2214      	movs	r2, #20
 8000360:	2119      	movs	r1, #25
 8000362:	4861      	ldr	r0, [pc, #388]	; (80004e8 <clockDisplayTime+0x1f0>)
 8000364:	f000 fab5 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,40,20,':',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 8000368:	2300      	movs	r3, #0
 800036a:	9303      	str	r3, [sp, #12]
 800036c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000370:	9302      	str	r3, [sp, #8]
 8000372:	4a5c      	ldr	r2, [pc, #368]	; (80004e4 <clockDisplayTime+0x1ec>)
 8000374:	466b      	mov	r3, sp
 8000376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037a:	e883 0003 	stmia.w	r3, {r0, r1}
 800037e:	233a      	movs	r3, #58	; 0x3a
 8000380:	2214      	movs	r2, #20
 8000382:	2128      	movs	r1, #40	; 0x28
 8000384:	4858      	ldr	r0, [pc, #352]	; (80004e8 <clockDisplayTime+0x1f0>)
 8000386:	f000 faa4 	bl	80008d2 <HTFT_uddtDrawChar>


	HTFT_uddtDrawChar(&tft ,50,20,(g_u8Min / 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 800038a:	4b58      	ldr	r3, [pc, #352]	; (80004ec <clockDisplayTime+0x1f4>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4a54      	ldr	r2, [pc, #336]	; (80004e0 <clockDisplayTime+0x1e8>)
 8000390:	fba2 2303 	umull	r2, r3, r2, r3
 8000394:	08db      	lsrs	r3, r3, #3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	3330      	adds	r3, #48	; 0x30
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2200      	movs	r2, #0
 800039e:	9203      	str	r2, [sp, #12]
 80003a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003a4:	9202      	str	r2, [sp, #8]
 80003a6:	494f      	ldr	r1, [pc, #316]	; (80004e4 <clockDisplayTime+0x1ec>)
 80003a8:	466a      	mov	r2, sp
 80003aa:	c903      	ldmia	r1, {r0, r1}
 80003ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80003b0:	2214      	movs	r2, #20
 80003b2:	2132      	movs	r1, #50	; 0x32
 80003b4:	484c      	ldr	r0, [pc, #304]	; (80004e8 <clockDisplayTime+0x1f0>)
 80003b6:	f000 fa8c 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,65,20,(g_u8Min % 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 80003ba:	4b4c      	ldr	r3, [pc, #304]	; (80004ec <clockDisplayTime+0x1f4>)
 80003bc:	781a      	ldrb	r2, [r3, #0]
 80003be:	4b48      	ldr	r3, [pc, #288]	; (80004e0 <clockDisplayTime+0x1e8>)
 80003c0:	fba3 1302 	umull	r1, r3, r3, r2
 80003c4:	08d9      	lsrs	r1, r3, #3
 80003c6:	460b      	mov	r3, r1
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3330      	adds	r3, #48	; 0x30
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2200      	movs	r2, #0
 80003d8:	9203      	str	r2, [sp, #12]
 80003da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003de:	9202      	str	r2, [sp, #8]
 80003e0:	4940      	ldr	r1, [pc, #256]	; (80004e4 <clockDisplayTime+0x1ec>)
 80003e2:	466a      	mov	r2, sp
 80003e4:	c903      	ldmia	r1, {r0, r1}
 80003e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80003ea:	2214      	movs	r2, #20
 80003ec:	2141      	movs	r1, #65	; 0x41
 80003ee:	483e      	ldr	r0, [pc, #248]	; (80004e8 <clockDisplayTime+0x1f0>)
 80003f0:	f000 fa6f 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,80,20,':',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 80003f4:	2300      	movs	r3, #0
 80003f6:	9303      	str	r3, [sp, #12]
 80003f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	4a39      	ldr	r2, [pc, #228]	; (80004e4 <clockDisplayTime+0x1ec>)
 8000400:	466b      	mov	r3, sp
 8000402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000406:	e883 0003 	stmia.w	r3, {r0, r1}
 800040a:	233a      	movs	r3, #58	; 0x3a
 800040c:	2214      	movs	r2, #20
 800040e:	2150      	movs	r1, #80	; 0x50
 8000410:	4835      	ldr	r0, [pc, #212]	; (80004e8 <clockDisplayTime+0x1f0>)
 8000412:	f000 fa5e 	bl	80008d2 <HTFT_uddtDrawChar>

	HTFT_uddtDrawChar(&tft ,90,20,(g_u8Sec / 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <clockDisplayTime+0x1f8>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	4a31      	ldr	r2, [pc, #196]	; (80004e0 <clockDisplayTime+0x1e8>)
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	3330      	adds	r3, #48	; 0x30
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2200      	movs	r2, #0
 800042a:	9203      	str	r2, [sp, #12]
 800042c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000430:	9202      	str	r2, [sp, #8]
 8000432:	492c      	ldr	r1, [pc, #176]	; (80004e4 <clockDisplayTime+0x1ec>)
 8000434:	466a      	mov	r2, sp
 8000436:	c903      	ldmia	r1, {r0, r1}
 8000438:	e882 0003 	stmia.w	r2, {r0, r1}
 800043c:	2214      	movs	r2, #20
 800043e:	215a      	movs	r1, #90	; 0x5a
 8000440:	4829      	ldr	r0, [pc, #164]	; (80004e8 <clockDisplayTime+0x1f0>)
 8000442:	f000 fa46 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,105,20,(g_u8Sec % 10)+'0',Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 8000446:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <clockDisplayTime+0x1f8>)
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <clockDisplayTime+0x1e8>)
 800044c:	fba3 1302 	umull	r1, r3, r3, r2
 8000450:	08d9      	lsrs	r1, r3, #3
 8000452:	460b      	mov	r3, r1
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	440b      	add	r3, r1
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	3330      	adds	r3, #48	; 0x30
 8000460:	b2db      	uxtb	r3, r3
 8000462:	2200      	movs	r2, #0
 8000464:	9203      	str	r2, [sp, #12]
 8000466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046a:	9202      	str	r2, [sp, #8]
 800046c:	491d      	ldr	r1, [pc, #116]	; (80004e4 <clockDisplayTime+0x1ec>)
 800046e:	466a      	mov	r2, sp
 8000470:	c903      	ldmia	r1, {r0, r1}
 8000472:	e882 0003 	stmia.w	r2, {r0, r1}
 8000476:	2214      	movs	r2, #20
 8000478:	2169      	movs	r1, #105	; 0x69
 800047a:	481b      	ldr	r0, [pc, #108]	; (80004e8 <clockDisplayTime+0x1f0>)
 800047c:	f000 fa29 	bl	80008d2 <HTFT_uddtDrawChar>

	HTFT_uddtDrawChar(&tft ,50,50,g_u8Region[g_u8Time][0],Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <clockDisplayTime+0x1fc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <clockDisplayTime+0x200>)
 8000488:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800048c:	2200      	movs	r2, #0
 800048e:	9203      	str	r2, [sp, #12]
 8000490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000494:	9202      	str	r2, [sp, #8]
 8000496:	4913      	ldr	r1, [pc, #76]	; (80004e4 <clockDisplayTime+0x1ec>)
 8000498:	466a      	mov	r2, sp
 800049a:	c903      	ldmia	r1, {r0, r1}
 800049c:	e882 0003 	stmia.w	r2, {r0, r1}
 80004a0:	2232      	movs	r2, #50	; 0x32
 80004a2:	2132      	movs	r1, #50	; 0x32
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <clockDisplayTime+0x1f0>)
 80004a6:	f000 fa14 	bl	80008d2 <HTFT_uddtDrawChar>
	HTFT_uddtDrawChar(&tft ,60,50,g_u8Region[g_u8Time][1],Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <clockDisplayTime+0x1fc>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <clockDisplayTime+0x200>)
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	785b      	ldrb	r3, [r3, #1]
 80004b6:	2200      	movs	r2, #0
 80004b8:	9203      	str	r2, [sp, #12]
 80004ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004be:	9202      	str	r2, [sp, #8]
 80004c0:	4908      	ldr	r1, [pc, #32]	; (80004e4 <clockDisplayTime+0x1ec>)
 80004c2:	466a      	mov	r2, sp
 80004c4:	c903      	ldmia	r1, {r0, r1}
 80004c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80004ca:	2232      	movs	r2, #50	; 0x32
 80004cc:	213c      	movs	r1, #60	; 0x3c
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <clockDisplayTime+0x1f0>)
 80004d0:	f000 f9ff 	bl	80008d2 <HTFT_uddtDrawChar>

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000074 	.word	0x20000074
 80004e0:	cccccccd 	.word	0xcccccccd
 80004e4:	20000050 	.word	0x20000050
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000075 	.word	0x20000075
 80004f0:	20000076 	.word	0x20000076
 80004f4:	20000078 	.word	0x20000078
 80004f8:	20000004 	.word	0x20000004

080004fc <clockDisplayDay>:

void clockDisplayDay(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af04      	add	r7, sp, #16
	if(g_u8DayNumber == 7)
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <clockDisplayDay+0x88>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b07      	cmp	r3, #7
 8000508:	d102      	bne.n	8000510 <clockDisplayDay+0x14>
		g_u8DayNumber = 0;
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <clockDisplayDay+0x88>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

	uint8_t x = 30;
 8000510:	231e      	movs	r3, #30
 8000512:	71fb      	strb	r3, [r7, #7]
	for(int j = 0; g_u8Days[g_u8DayNumber][j] != STR_NULL;j++)
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e021      	b.n	800055e <clockDisplayDay+0x62>
	{

	  HTFT_uddtDrawChar(&tft ,x,80,g_u8Days[g_u8DayNumber][j],Font_11x18,HTFT_GREEN_COLOR,HTFT_BLACK_COLOR);
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <clockDisplayDay+0x88>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4a19      	ldr	r2, [pc, #100]	; (8000588 <clockDisplayDay+0x8c>)
 8000522:	460b      	mov	r3, r1
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	441a      	add	r2, r3
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	79fc      	ldrb	r4, [r7, #7]
 8000534:	2200      	movs	r2, #0
 8000536:	9203      	str	r2, [sp, #12]
 8000538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053c:	9202      	str	r2, [sp, #8]
 800053e:	4913      	ldr	r1, [pc, #76]	; (800058c <clockDisplayDay+0x90>)
 8000540:	466a      	mov	r2, sp
 8000542:	c903      	ldmia	r1, {r0, r1}
 8000544:	e882 0003 	stmia.w	r2, {r0, r1}
 8000548:	2250      	movs	r2, #80	; 0x50
 800054a:	4621      	mov	r1, r4
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <clockDisplayDay+0x94>)
 800054e:	f000 f9c0 	bl	80008d2 <HTFT_uddtDrawChar>
	  x += 11;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	330b      	adds	r3, #11
 8000556:	71fb      	strb	r3, [r7, #7]
	for(int j = 0; g_u8Days[g_u8DayNumber][j] != STR_NULL;j++)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <clockDisplayDay+0x88>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <clockDisplayDay+0x8c>)
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	441a      	add	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1cf      	bne.n	800051a <clockDisplayDay+0x1e>
	}

}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000077 	.word	0x20000077
 8000588:	20000008 	.word	0x20000008
 800058c:	20000050 	.word	0x20000050
 8000590:	20000000 	.word	0x20000000

08000594 <HTFT_uddtInit>:

#include "../../../Inc/HAL/tft/tft_interface.h"


EN_HTFT_systeamState_t HTFT_uddtInit(ST_HTFT_cfg_t const *PS_uddtTftCfg)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 800059c:	2301      	movs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]

	if(PTR_NULL != PS_uddtTftCfg)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d053      	beq.n	800064e <HTFT_uddtInit+0xba>
	{
		ST_MSPI_cfg_t spi =
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <HTFT_uddtInit+0xc8>)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ae:	c303      	stmia	r3!, {r0, r1}
 80005b0:	701a      	strb	r2, [r3, #0]
				.ssmSelect = MSPI_SSM_ENABLED,
				.ssiSelect = MSPI_SSI_IS_SET,
				.dataFrameFormatSelection = MSPI_DFF_8_BIT
		};

		MSPI_uddtInit(&spi);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fe20 	bl	80011fc <MSPI_uddtInit>
		MGPIO_setPinMode(PS_uddtTftCfg->a0Port, PS_uddtTftCfg->a0Pin, MGPIO_MODE_OUTPUT);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7898      	ldrb	r0, [r3, #2]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fa5a 	bl	8000a80 <MGPIO_setPinMode>
		MGPIO_setOutputMode(PS_uddtTftCfg->a0Port, PS_uddtTftCfg->a0Pin, MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7898      	ldrb	r0, [r3, #2]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f000 faea 	bl	8000bb0 <MGPIO_setOutputMode>
		MGPIO_setOutputSpeed(PS_uddtTftCfg->a0Port, PS_uddtTftCfg->a0Pin, MGPIO_OUTPUT_SPEED_HIGH);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7898      	ldrb	r0, [r3, #2]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	2202      	movs	r2, #2
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 fb70 	bl	8000ccc <MGPIO_setOutputSpeed>

		MGPIO_setPinMode(PS_uddtTftCfg->rstPort, PS_uddtTftCfg->rstPin, MGPIO_MODE_OUTPUT);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7818      	ldrb	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f000 fa42 	bl	8000a80 <MGPIO_setPinMode>
		MGPIO_setOutputMode(PS_uddtTftCfg->rstPort, PS_uddtTftCfg->rstPin, MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7818      	ldrb	r0, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f000 fad2 	bl	8000bb0 <MGPIO_setOutputMode>
		MGPIO_setOutputSpeed(PS_uddtTftCfg->rstPort, PS_uddtTftCfg->rstPin, MGPIO_OUTPUT_SPEED_HIGH);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2202      	movs	r2, #2
 8000616:	4619      	mov	r1, r3
 8000618:	f000 fb58 	bl	8000ccc <MGPIO_setOutputSpeed>

		HTFT_uddtReset(PS_uddtTftCfg);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f861 	bl	80006e4 <HTFT_uddtReset>
		HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_SLEEP_OUT);
 8000622:	2111      	movs	r1, #17
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f81b 	bl	8000660 <HTFT_uddtWriteCommand>
		MSTK_setBusyWait(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fe3e 	bl	80012ac <MSTK_setBusyWait>
		HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_COLOR_MODE);
 8000630:	213a      	movs	r1, #58	; 0x3a
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f814 	bl	8000660 <HTFT_uddtWriteCommand>
		HTFT_uddtWriteData(PS_uddtTftCfg, HTFT_COMMAND_PARAMTER_RGB_565);
 8000638:	2105      	movs	r1, #5
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f831 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_DISPLAY_ON);
 8000640:	2129      	movs	r1, #41	; 0x29
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f80c 	bl	8000660 <HTFT_uddtWriteCommand>


		ret = HTFT_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	75fb      	strb	r3, [r7, #23]
 800064c:	e001      	b.n	8000652 <HTFT_uddtInit+0xbe>
	}
	else
	{
		ret = HTFT_PTR_NULL;
 800064e:	2302      	movs	r3, #2
 8000650:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
 8000652:	7dfb      	ldrb	r3, [r7, #23]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	080014b4 	.word	0x080014b4

08000660 <HTFT_uddtWriteCommand>:

EN_HTFT_systeamState_t HTFT_uddtWriteCommand(ST_HTFT_cfg_t const *PS_uddtTftCfg ,uint8_t copy_u8CommandToSend)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00e      	beq.n	8000694 <HTFT_uddtWriteCommand+0x34>
	{
		MGPIO_setPinVal(PS_uddtTftCfg->a0Port,PS_uddtTftCfg->a0Pin,MGPIO_LOGIC_LOW);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7898      	ldrb	r0, [r3, #2]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f000 fbb7 	bl	8000df4 <MGPIO_setPinVal>
		MSPI_uddtSendBlocking(copy_u8CommandToSend);
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fdf1 	bl	8001270 <MSPI_uddtSendBlocking>
		ret = HTFT_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e001      	b.n	8000698 <HTFT_uddtWriteCommand+0x38>
	}
	else
	{
		ret = HTFT_PTR_NULL;
 8000694:	2302      	movs	r3, #2
 8000696:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HTFT_uddtWriteData>:

EN_HTFT_systeamState_t HTFT_uddtWriteData(ST_HTFT_cfg_t const *PS_uddtTftCfg , uint8_t copy_u8DataToSend)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	70fb      	strb	r3, [r7, #3]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 80006ae:	2301      	movs	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00e      	beq.n	80006d6 <HTFT_uddtWriteData+0x34>
	{
		MGPIO_setPinVal(PS_uddtTftCfg->a0Port,PS_uddtTftCfg->a0Pin,MGPIO_LOGIC_HIGH);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7898      	ldrb	r0, [r3, #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	78db      	ldrb	r3, [r3, #3]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	f000 fb96 	bl	8000df4 <MGPIO_setPinVal>
		MSPI_uddtSendBlocking(copy_u8DataToSend);
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fdd0 	bl	8001270 <MSPI_uddtSendBlocking>
		ret = HTFT_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e001      	b.n	80006da <HTFT_uddtWriteData+0x38>
	}
	else
	{
		ret = HTFT_PTR_NULL;
 80006d6:	2302      	movs	r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HTFT_uddtReset>:

EN_HTFT_systeamState_t HTFT_uddtReset(ST_HTFT_cfg_t const *PS_uddtTftCfg)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d03a      	beq.n	800076c <HTFT_uddtReset+0x88>
	{
		MGPIO_setPinVal(PS_uddtTftCfg->rstPort,PS_uddtTftCfg->rstPin,MGPIO_LOGIC_HIGH);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7818      	ldrb	r0, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	2201      	movs	r2, #1
 8000700:	4619      	mov	r1, r3
 8000702:	f000 fb77 	bl	8000df4 <MGPIO_setPinVal>
		MSTK_setBusyWait(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 fdd0 	bl	80012ac <MSTK_setBusyWait>
		MGPIO_setPinVal(PS_uddtTftCfg->rstPort,PS_uddtTftCfg->rstPin,MGPIO_LOGIC_LOW);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7818      	ldrb	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	f000 fb6c 	bl	8000df4 <MGPIO_setPinVal>
		MSTK_setBusyWait(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fdc5 	bl	80012ac <MSTK_setBusyWait>
		MGPIO_setPinVal(PS_uddtTftCfg->rstPort,PS_uddtTftCfg->rstPin,MGPIO_LOGIC_HIGH);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7818      	ldrb	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	f000 fb61 	bl	8000df4 <MGPIO_setPinVal>
		MSTK_setBusyWait(100);
 8000732:	2064      	movs	r0, #100	; 0x64
 8000734:	f000 fdba 	bl	80012ac <MSTK_setBusyWait>
		MGPIO_setPinVal(PS_uddtTftCfg->rstPort,PS_uddtTftCfg->rstPin,MGPIO_LOGIC_LOW);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7818      	ldrb	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f000 fb56 	bl	8000df4 <MGPIO_setPinVal>
		MSTK_setBusyWait(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 fdaf 	bl	80012ac <MSTK_setBusyWait>
		MGPIO_setPinVal(PS_uddtTftCfg->rstPort,PS_uddtTftCfg->rstPin,MGPIO_LOGIC_HIGH);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7818      	ldrb	r0, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	f000 fb4b 	bl	8000df4 <MGPIO_setPinVal>
		MSTK_setBusyWait(1200);
 800075e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000762:	f000 fda3 	bl	80012ac <MSTK_setBusyWait>

		ret = HTFT_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e001      	b.n	8000770 <HTFT_uddtReset+0x8c>

	}
	else
	{
		ret = HTFT_PTR_NULL;
 800076c:	2302      	movs	r3, #2
 800076e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HTFT_uddtFillBackgroundColor>:
	}
	return ret;
}

EN_HTFT_systeamState_t HTFT_uddtFillBackgroundColor(ST_HTFT_cfg_t const *PS_uddtTftCfg , uint16_t copy_u16Color)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	807b      	strh	r3, [r7, #2]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01a      	beq.n	80007c6 <HTFT_uddtFillBackgroundColor+0x4c>
	{
			for(uint16_t i = 0; i < 20480 ; i++)
 8000790:	2300      	movs	r3, #0
 8000792:	81bb      	strh	r3, [r7, #12]
 8000794:	e012      	b.n	80007bc <HTFT_uddtFillBackgroundColor+0x42>
			{
				uint8_t loc_u8LowData = (uint8_t)copy_u16Color;
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	72fb      	strb	r3, [r7, #11]
				uint8_t loc_u8HighData = (uint8_t)(copy_u16Color>>8);
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	72bb      	strb	r3, [r7, #10]
				HTFT_uddtWriteData(PS_uddtTftCfg, loc_u8HighData);
 80007a2:	7abb      	ldrb	r3, [r7, #10]
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff7b 	bl	80006a2 <HTFT_uddtWriteData>
				HTFT_uddtWriteData(PS_uddtTftCfg, loc_u8LowData);
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff76 	bl	80006a2 <HTFT_uddtWriteData>
			for(uint16_t i = 0; i < 20480 ; i++)
 80007b6:	89bb      	ldrh	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	81bb      	strh	r3, [r7, #12]
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80007c2:	d3e8      	bcc.n	8000796 <HTFT_uddtFillBackgroundColor+0x1c>
 80007c4:	e001      	b.n	80007ca <HTFT_uddtFillBackgroundColor+0x50>

			}
	}
	else
	{
		ret = HTFT_PTR_NULL;
 80007c6:	2302      	movs	r3, #2
 80007c8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HTFT_uddtSetXYAxis>:

EN_HTFT_systeamState_t HTFT_uddtSetXYAxis(ST_HTFT_cfg_t const *PS_uddtTftCfg , uint8_t copy_u8XAxisStart , uint8_t copy_u8XAxisEnd , uint8_t copy_u8YAxisStart , uint8_t copy_u8YAxisEnd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	70fb      	strb	r3, [r7, #3]
 80007e6:	460b      	mov	r3, r1
 80007e8:	70bb      	strb	r3, [r7, #2]
 80007ea:	4613      	mov	r3, r2
 80007ec:	707b      	strb	r3, [r7, #1]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d034      	beq.n	8000862 <HTFT_uddtSetXYAxis+0x8e>
	{
			HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_X_AXIS);
 80007f8:	212a      	movs	r1, #42	; 0x2a
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff30 	bl	8000660 <HTFT_uddtWriteCommand>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxisStart);
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	4619      	mov	r1, r3
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff4c 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxisStart);
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	4619      	mov	r1, r3
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff47 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxisStart);
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff42 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxisEnd);
 800081e:	78bb      	ldrb	r3, [r7, #2]
 8000820:	4619      	mov	r1, r3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff3d 	bl	80006a2 <HTFT_uddtWriteData>

			HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_Y_AXIS);
 8000828:	212b      	movs	r1, #43	; 0x2b
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ff18 	bl	8000660 <HTFT_uddtWriteCommand>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxisStart);
 8000830:	787b      	ldrb	r3, [r7, #1]
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff34 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxisStart);
 800083a:	787b      	ldrb	r3, [r7, #1]
 800083c:	4619      	mov	r1, r3
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff2f 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxisStart);
 8000844:	787b      	ldrb	r3, [r7, #1]
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff2a 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxisEnd);
 800084e:	7e3b      	ldrb	r3, [r7, #24]
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff25 	bl	80006a2 <HTFT_uddtWriteData>

			HTFT_uddtWriteCommand(PS_uddtTftCfg , HTFT_COMMAND_RAM_WRITE);
 8000858:	212c      	movs	r1, #44	; 0x2c
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ff00 	bl	8000660 <HTFT_uddtWriteCommand>
 8000860:	e001      	b.n	8000866 <HTFT_uddtSetXYAxis+0x92>
	}
	else
	{
		ret = HTFT_PTR_NULL;
 8000862:	2302      	movs	r3, #2
 8000864:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HTFT_uddtClrDisplay>:
	return ret;
}


EN_HTFT_systeamState_t HTFT_uddtClrDisplay(ST_HTFT_cfg_t const *PS_uddtTftCfg)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 8000878:	2301      	movs	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d020      	beq.n	80008c4 <HTFT_uddtClrDisplay+0x54>
	{
		HTFT_uddtSetXYAxis(PS_uddtTftCfg ,HTFT_COMMAND_PARAMTER_X_AXIS_START , HTFT_COMMAND_PARAMTER_X_AXIS_END , HTFT_COMMAND_PARAMTER_Y_AXIS_START , HTFT_COMMAND_PARAMTER_Y_AXIS_END );
 8000882:	239f      	movs	r3, #159	; 0x9f
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	227f      	movs	r2, #127	; 0x7f
 800088a:	2100      	movs	r1, #0
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ffa1 	bl	80007d4 <HTFT_uddtSetXYAxis>

		for(uint16_t i = 0; i < 20480 ; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	81bb      	strh	r3, [r7, #12]
 8000896:	e010      	b.n	80008ba <HTFT_uddtClrDisplay+0x4a>
		{
			uint8_t loc_u8LowData = (uint8_t)HTFT_WHITE_COLOR;
 8000898:	23ff      	movs	r3, #255	; 0xff
 800089a:	72fb      	strb	r3, [r7, #11]
			uint8_t loc_u8HighData = (uint8_t)(HTFT_WHITE_COLOR>>8);
 800089c:	23ff      	movs	r3, #255	; 0xff
 800089e:	72bb      	strb	r3, [r7, #10]
			HTFT_uddtWriteData(PS_uddtTftCfg, loc_u8HighData);
 80008a0:	7abb      	ldrb	r3, [r7, #10]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fefc 	bl	80006a2 <HTFT_uddtWriteData>
			HTFT_uddtWriteData(PS_uddtTftCfg, loc_u8LowData);
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	4619      	mov	r1, r3
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fef7 	bl	80006a2 <HTFT_uddtWriteData>
		for(uint16_t i = 0; i < 20480 ; i++)
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	81bb      	strh	r3, [r7, #12]
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80008c0:	d3ea      	bcc.n	8000898 <HTFT_uddtClrDisplay+0x28>
 80008c2:	e001      	b.n	80008c8 <HTFT_uddtClrDisplay+0x58>
		}
	}
	else
	{
		ret = HTFT_PTR_NULL;
 80008c4:	2302      	movs	r3, #2
 80008c6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HTFT_uddtDrawChar>:


EN_HTFT_systeamState_t HTFT_uddtDrawChar(ST_HTFT_cfg_t const *PS_uddtTftCfg , uint8_t copy_u8XAxis, uint8_t copy_u8YAxis , uint8_t Copy_u8Character,
						FontDef copy_uddtFontSize, uint16_t copy_u16Color, uint16_t copy_u16BgColor )
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	4608      	mov	r0, r1
 80008dc:	4611      	mov	r1, r2
 80008de:	461a      	mov	r2, r3
 80008e0:	4603      	mov	r3, r0
 80008e2:	70fb      	strb	r3, [r7, #3]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70bb      	strb	r3, [r7, #2]
 80008e8:	4613      	mov	r3, r2
 80008ea:	707b      	strb	r3, [r7, #1]
	EN_HTFT_systeamState_t ret = HTFT_NOK;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]

	if(PTR_NULL != PS_uddtTftCfg)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8082 	beq.w	80009fc <HTFT_uddtDrawChar+0x12a>
	{
		uint32_t l_u32Data;
		uint8_t l_u8Counter1,l_u8Counter2;

		HTFT_uddtWriteCommand(PS_uddtTftCfg , 0x2A);
 80008f8:	212a      	movs	r1, #42	; 0x2a
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff feb0 	bl	8000660 <HTFT_uddtWriteCommand>
		HTFT_uddtWriteData(PS_uddtTftCfg, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fecd 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxis);
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fec8 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fec4 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8XAxis+copy_uddtFontSize.width-1);
 800091a:	7e3a      	ldrb	r2, [r7, #24]
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	4413      	add	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff feba 	bl	80006a2 <HTFT_uddtWriteData>

		HTFT_uddtWriteCommand(PS_uddtTftCfg , 0x2B);
 800092e:	212b      	movs	r1, #43	; 0x2b
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe95 	bl	8000660 <HTFT_uddtWriteCommand>
		HTFT_uddtWriteData(PS_uddtTftCfg, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff feb2 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxis);
 800093e:	78bb      	ldrb	r3, [r7, #2]
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fead 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, 0);
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fea9 	bl	80006a2 <HTFT_uddtWriteData>
		HTFT_uddtWriteData(PS_uddtTftCfg, copy_u8YAxis+copy_uddtFontSize.height-1);
 8000950:	7e7a      	ldrb	r2, [r7, #25]
 8000952:	78bb      	ldrb	r3, [r7, #2]
 8000954:	4413      	add	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3b01      	subs	r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fe9f 	bl	80006a2 <HTFT_uddtWriteData>

		HTFT_uddtWriteCommand(PS_uddtTftCfg , 0x2C);
 8000964:	212c      	movs	r1, #44	; 0x2c
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fe7a 	bl	8000660 <HTFT_uddtWriteCommand>

		   for(l_u8Counter1 = 0; l_u8Counter1 < copy_uddtFontSize.height; l_u8Counter1++)
 800096c:	2300      	movs	r3, #0
 800096e:	73bb      	strb	r3, [r7, #14]
 8000970:	e03d      	b.n	80009ee <HTFT_uddtDrawChar+0x11c>
		   {
			   l_u32Data = copy_uddtFontSize.data[(Copy_u8Character - 32) * copy_uddtFontSize.height + l_u8Counter1];
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	787b      	ldrb	r3, [r7, #1]
 8000976:	3b20      	subs	r3, #32
 8000978:	7e79      	ldrb	r1, [r7, #25]
 800097a:	fb03 f101 	mul.w	r1, r3, r1
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	440b      	add	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	60bb      	str	r3, [r7, #8]
		        for(l_u8Counter2 = 0; l_u8Counter2 < copy_uddtFontSize.width; l_u8Counter2++)
 800098a:	2300      	movs	r3, #0
 800098c:	737b      	strb	r3, [r7, #13]
 800098e:	e027      	b.n	80009e0 <HTFT_uddtDrawChar+0x10e>
		        {
		            if((l_u32Data << l_u8Counter2) & 0x8000)
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00e      	beq.n	80009be <HTFT_uddtDrawChar+0xec>
		            {
		            	HTFT_uddtWriteData(PS_uddtTftCfg, copy_u16Color >> 8);
 80009a0:	8c3b      	ldrh	r3, [r7, #32]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe79 	bl	80006a2 <HTFT_uddtWriteData>
		            	HTFT_uddtWriteData(PS_uddtTftCfg, (uint8_t)copy_u16Color  );
 80009b0:	8c3b      	ldrh	r3, [r7, #32]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fe73 	bl	80006a2 <HTFT_uddtWriteData>
 80009bc:	e00d      	b.n	80009da <HTFT_uddtDrawChar+0x108>

		            }
		            else
		            {
		            	HTFT_uddtWriteData(PS_uddtTftCfg, copy_u16BgColor >> 8   );
 80009be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe6a 	bl	80006a2 <HTFT_uddtWriteData>
		            	HTFT_uddtWriteData(PS_uddtTftCfg, (uint8_t)copy_u16BgColor  );
 80009ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fe64 	bl	80006a2 <HTFT_uddtWriteData>
		        for(l_u8Counter2 = 0; l_u8Counter2 < copy_uddtFontSize.width; l_u8Counter2++)
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	3301      	adds	r3, #1
 80009de:	737b      	strb	r3, [r7, #13]
 80009e0:	7e3b      	ldrb	r3, [r7, #24]
 80009e2:	7b7a      	ldrb	r2, [r7, #13]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d3d3      	bcc.n	8000990 <HTFT_uddtDrawChar+0xbe>
		   for(l_u8Counter1 = 0; l_u8Counter1 < copy_uddtFontSize.height; l_u8Counter1++)
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73bb      	strb	r3, [r7, #14]
 80009ee:	7e7b      	ldrb	r3, [r7, #25]
 80009f0:	7bba      	ldrb	r2, [r7, #14]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3bd      	bcc.n	8000972 <HTFT_uddtDrawChar+0xa0>
		            }
		        }
		    }
		   ret = HTFT_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e001      	b.n	8000a00 <HTFT_uddtDrawChar+0x12e>
	}
	else
	{
		ret = HTFT_PTR_NULL;
 80009fc:	2302      	movs	r3, #2
 80009fe:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <MDMA_uddtClearFlag>:
	}
	return ret;
}

EN_MDMA_systemState_t MDMA_uddtClearFlag(EN_MDMA_streamIdOptions_t copy_uddtStreamId )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	MDMA2_PERIPHERAL->MDMA_LIFCR|=(1U<<0)|(1U<<2)|(1U<<3)|(1U<<4)|(1U<<5);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MDMA_uddtClearFlag+0x24>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <MDMA_uddtClearFlag+0x24>)
 8000a1c:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000a20:	6093      	str	r3, [r2, #8]
}
 8000a22:	bf00      	nop
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40026400 	.word	0x40026400

08000a34 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	if(PTR_NULL != MDMA2_CallBackHandler)
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <DMA2_Stream0_IRQHandler+0x1c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <DMA2_Stream0_IRQHandler+0x12>
	{
		MDMA2_CallBackHandler();
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <DMA2_Stream0_IRQHandler+0x1c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4798      	blx	r3
	}
	else
	{
		/* Do Nothing */
	}
	MDMA_uddtClearFlag(MDMA_STREAM_ZERO);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff ffe0 	bl	8000a0c <MDMA_uddtClearFlag>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000007c 	.word	0x2000007c

08000a54 <EXTI0_IRQHandler>:
	return ret;
}


void EXTI0_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	if(PTR_NULL != arrOfPtrOfExtiCallBack[0])
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <EXTI0_IRQHandler+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <EXTI0_IRQHandler+0x1e>
	{
		arrOfPtrOfExtiCallBack[0]();
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI0_IRQHandler+0x24>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4798      	blx	r3
		SET_BIT(MEXTI_PERIPHERAL->MEXTI_PR,0);
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <EXTI0_IRQHandler+0x28>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <EXTI0_IRQHandler+0x28>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6153      	str	r3, [r2, #20]
	else
	{
		/* Do Nothing */
	}

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000080 	.word	0x20000080
 8000a7c:	40013c00 	.word	0x40013c00

08000a80 <MGPIO_setPinMode>:

#include "../../../Inc/MCAL/gpio/gpio_interface.h"


EN_MGPIO_systemState_t MGPIO_setPinMode (EN_MGPIO_portOptions_t copy_uddtPortName ,EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinModeOptions_t copy_uddtPinMode)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d873      	bhi.n	8000b84 <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d870      	bhi.n	8000b84 <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinMode >= MGPIO_MODE_OUTPUT && copy_uddtPinMode <= MGPIO_MODE_ANALOG))
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d06d      	beq.n	8000b84 <MGPIO_setPinMode+0x104>
 8000aa8:	797b      	ldrb	r3, [r7, #5]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d86a      	bhi.n	8000b84 <MGPIO_setPinMode+0x104>
	{
		switch(copy_uddtPortName)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d863      	bhi.n	8000b7c <MGPIO_setPinMode+0xfc>
 8000ab4:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <MGPIO_setPinMode+0x3c>)
 8000ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aba:	bf00      	nop
 8000abc:	08000ad5 	.word	0x08000ad5
 8000ac0:	08000af1 	.word	0x08000af1
 8000ac4:	08000b0d 	.word	0x08000b0d
 8000ac8:	08000b29 	.word	0x08000b29
 8000acc:	08000b45 	.word	0x08000b45
 8000ad0:	08000b61 	.word	0x08000b61
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MGPIO_setPinMode+0x118>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	7979      	ldrb	r1, [r7, #5]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <MGPIO_setPinMode+0x118>)
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
				break;
 8000aee:	e048      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MGPIO_setPinMode+0x11c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	7979      	ldrb	r1, [r7, #5]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <MGPIO_setPinMode+0x11c>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
				break;
 8000b0a:	e03a      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MGPIO_setPinMode+0x120>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	7979      	ldrb	r1, [r7, #5]
 8000b12:	79ba      	ldrb	r2, [r7, #6]
 8000b14:	0052      	lsls	r2, r2, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <MGPIO_setPinMode+0x120>)
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
				break;
 8000b26:	e02c      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MGPIO_setPinMode+0x124>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7979      	ldrb	r1, [r7, #5]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	0052      	lsls	r2, r2, #1
 8000b32:	fa01 f202 	lsl.w	r2, r1, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <MGPIO_setPinMode+0x124>)
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
				break;
 8000b42:	e01e      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MGPIO_setPinMode+0x128>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	7979      	ldrb	r1, [r7, #5]
 8000b4a:	79ba      	ldrb	r2, [r7, #6]
 8000b4c:	0052      	lsls	r2, r2, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4611      	mov	r1, r2
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <MGPIO_setPinMode+0x128>)
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
				break;
 8000b5e:	e010      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MGPIO_setPinMode+0x12c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	7979      	ldrb	r1, [r7, #5]
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	0052      	lsls	r2, r2, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <MGPIO_setPinMode+0x12c>)
 8000b72:	430b      	orrs	r3, r1
 8000b74:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
				break;
 8000b7a:	e002      	b.n	8000b82 <MGPIO_setPinMode+0x102>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	73fb      	strb	r3, [r7, #15]
				break;
 8000b80:	bf00      	nop
		switch(copy_uddtPortName)
 8000b82:	e001      	b.n	8000b88 <MGPIO_setPinMode+0x108>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8000b84:	2302      	movs	r3, #2
 8000b86:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021c00 	.word	0x40021c00

08000bb0 <MGPIO_setOutputMode>:




EN_MGPIO_systemState_t MGPIO_setOutputMode (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputResistorOptions_t copy_uddtOutputResistor)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d869      	bhi.n	8000ca0 <MGPIO_setOutputMode+0xf0>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d866      	bhi.n	8000ca0 <MGPIO_setOutputMode+0xf0>
		&& (copy_uddtOutputResistor >= MGPIO_OUTPUT_RESISTOR_PUSH_PULL && copy_uddtOutputResistor <= MGPIO_OUTPUT_RESISTOR_OPEN_DRAIN))
 8000bd2:	797b      	ldrb	r3, [r7, #5]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d863      	bhi.n	8000ca0 <MGPIO_setOutputMode+0xf0>
	{
		switch(copy_uddtPortName)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d85c      	bhi.n	8000c98 <MGPIO_setOutputMode+0xe8>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <MGPIO_setOutputMode+0x34>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bfd 	.word	0x08000bfd
 8000be8:	08000c17 	.word	0x08000c17
 8000bec:	08000c31 	.word	0x08000c31
 8000bf0:	08000c4b 	.word	0x08000c4b
 8000bf4:	08000c65 	.word	0x08000c65
 8000bf8:	08000c7f 	.word	0x08000c7f
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MGPIO_setOutputMode+0x104>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	7979      	ldrb	r1, [r7, #5]
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <MGPIO_setOutputMode+0x104>)
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
				break;
 8000c14:	e043      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MGPIO_setOutputMode+0x108>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	7979      	ldrb	r1, [r7, #5]
 8000c1c:	79ba      	ldrb	r2, [r7, #6]
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <MGPIO_setOutputMode+0x108>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
				break;
 8000c2e:	e036      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MGPIO_setOutputMode+0x10c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	7979      	ldrb	r1, [r7, #5]
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MGPIO_setOutputMode+0x10c>)
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
				break;
 8000c48:	e029      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MGPIO_setOutputMode+0x110>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	7979      	ldrb	r1, [r7, #5]
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <MGPIO_setOutputMode+0x110>)
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
				break;
 8000c62:	e01c      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MGPIO_setOutputMode+0x114>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	7979      	ldrb	r1, [r7, #5]
 8000c6a:	79ba      	ldrb	r2, [r7, #6]
 8000c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c70:	4611      	mov	r1, r2
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <MGPIO_setOutputMode+0x114>)
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
				break;
 8000c7c:	e00f      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MGPIO_setOutputMode+0x118>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	7979      	ldrb	r1, [r7, #5]
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <MGPIO_setOutputMode+0x118>)
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
				break;
 8000c96:	e002      	b.n	8000c9e <MGPIO_setOutputMode+0xee>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	73fb      	strb	r3, [r7, #15]
				break;
 8000c9c:	bf00      	nop
		switch(copy_uddtPortName)
 8000c9e:	e001      	b.n	8000ca4 <MGPIO_setOutputMode+0xf4>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40021c00 	.word	0x40021c00

08000ccc <MGPIO_setOutputSpeed>:


EN_MGPIO_systemState_t MGPIO_setOutputSpeed  (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputSpeedOptions_t copy_uddtOutputSpeed )
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	71bb      	strb	r3, [r7, #6]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d86f      	bhi.n	8000dc8 <MGPIO_setOutputSpeed+0xfc>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d86c      	bhi.n	8000dc8 <MGPIO_setOutputSpeed+0xfc>
		&& (copy_uddtOutputSpeed >= MGPIO_OUTPUT_SPEED_LOW && copy_uddtOutputSpeed <= MGPIO_OUTPUT_SPEED_VERY_HIGH))
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d869      	bhi.n	8000dc8 <MGPIO_setOutputSpeed+0xfc>
	{
		switch(copy_uddtPortName)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d862      	bhi.n	8000dc0 <MGPIO_setOutputSpeed+0xf4>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <MGPIO_setOutputSpeed+0x34>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d35 	.word	0x08000d35
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d6d 	.word	0x08000d6d
 8000d10:	08000d89 	.word	0x08000d89
 8000d14:	08000da5 	.word	0x08000da5
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <MGPIO_setOutputSpeed+0x110>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	7979      	ldrb	r1, [r7, #5]
 8000d1e:	79ba      	ldrb	r2, [r7, #6]
 8000d20:	0052      	lsls	r2, r2, #1
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	4611      	mov	r1, r2
 8000d28:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <MGPIO_setOutputSpeed+0x110>)
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
				break;
 8000d32:	e048      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MGPIO_setOutputSpeed+0x114>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	7979      	ldrb	r1, [r7, #5]
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	0052      	lsls	r2, r2, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	4611      	mov	r1, r2
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <MGPIO_setOutputSpeed+0x114>)
 8000d46:	430b      	orrs	r3, r1
 8000d48:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
				break;
 8000d4e:	e03a      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MGPIO_setOutputSpeed+0x118>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	7979      	ldrb	r1, [r7, #5]
 8000d56:	79ba      	ldrb	r2, [r7, #6]
 8000d58:	0052      	lsls	r2, r2, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <MGPIO_setOutputSpeed+0x118>)
 8000d62:	430b      	orrs	r3, r1
 8000d64:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
				break;
 8000d6a:	e02c      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MGPIO_setOutputSpeed+0x11c>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	7979      	ldrb	r1, [r7, #5]
 8000d72:	79ba      	ldrb	r2, [r7, #6]
 8000d74:	0052      	lsls	r2, r2, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <MGPIO_setOutputSpeed+0x11c>)
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
				break;
 8000d86:	e01e      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MGPIO_setOutputSpeed+0x120>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	7979      	ldrb	r1, [r7, #5]
 8000d8e:	79ba      	ldrb	r2, [r7, #6]
 8000d90:	0052      	lsls	r2, r2, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <MGPIO_setOutputSpeed+0x120>)
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
				break;
 8000da2:	e010      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MGPIO_setOutputSpeed+0x124>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	7979      	ldrb	r1, [r7, #5]
 8000daa:	79ba      	ldrb	r2, [r7, #6]
 8000dac:	0052      	lsls	r2, r2, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4611      	mov	r1, r2
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <MGPIO_setOutputSpeed+0x124>)
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
				break;
 8000dbe:	e002      	b.n	8000dc6 <MGPIO_setOutputSpeed+0xfa>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	73fb      	strb	r3, [r7, #15]
				break;
 8000dc4:	bf00      	nop
		switch(copy_uddtPortName)
 8000dc6:	e001      	b.n	8000dcc <MGPIO_setOutputSpeed+0x100>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40021c00 	.word	0x40021c00

08000df4 <MGPIO_setPinVal>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_setPinVal(EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinLogicOptions_t copy_uddtPinLogic)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	f200 80de 	bhi.w	8000fce <MGPIO_setPinVal+0x1da>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	f200 80da 	bhi.w	8000fce <MGPIO_setPinVal+0x1da>
		&& (copy_uddtPinLogic >= MGPIO_LOGIC_LOW && copy_uddtPinLogic <= MGPIO_LOGIC_HIGH))
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f200 80d6 	bhi.w	8000fce <MGPIO_setPinVal+0x1da>
	{
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d162      	bne.n	8000eee <MGPIO_setPinVal+0xfa>
		{
			switch(copy_uddtPortName)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d85c      	bhi.n	8000ee8 <MGPIO_setPinVal+0xf4>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <MGPIO_setPinVal+0x40>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e4d 	.word	0x08000e4d
 8000e38:	08000e67 	.word	0x08000e67
 8000e3c:	08000e81 	.word	0x08000e81
 8000e40:	08000e9b 	.word	0x08000e9b
 8000e44:	08000eb5 	.word	0x08000eb5
 8000e48:	08000ecf 	.word	0x08000ecf
			{
				case MGPIO_PORTA :
				{
					SET_BIT(MGPIOA_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000e4c:	4b64      	ldr	r3, [pc, #400]	; (8000fe0 <MGPIO_setPinVal+0x1ec>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	79ba      	ldrb	r2, [r7, #6]
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a61      	ldr	r2, [pc, #388]	; (8000fe0 <MGPIO_setPinVal+0x1ec>)
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
					break;
 8000e64:	e0b2      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTB :
				{
					SET_BIT(MGPIOB_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <MGPIO_setPinVal+0x1f0>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	79ba      	ldrb	r2, [r7, #6]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	4611      	mov	r1, r2
 8000e74:	4a5b      	ldr	r2, [pc, #364]	; (8000fe4 <MGPIO_setPinVal+0x1f0>)
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
					break;
 8000e7e:	e0a5      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTC :
				{
					SET_BIT(MGPIOC_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000e80:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <MGPIO_setPinVal+0x1f4>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a56      	ldr	r2, [pc, #344]	; (8000fe8 <MGPIO_setPinVal+0x1f4>)
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
					break;
 8000e98:	e098      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTD :
				{
					SET_BIT(MGPIOD_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <MGPIO_setPinVal+0x1f8>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4a50      	ldr	r2, [pc, #320]	; (8000fec <MGPIO_setPinVal+0x1f8>)
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
					break;
 8000eb2:	e08b      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTE :
				{
					SET_BIT(MGPIOE_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <MGPIO_setPinVal+0x1fc>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	79ba      	ldrb	r2, [r7, #6]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <MGPIO_setPinVal+0x1fc>)
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
					break;
 8000ecc:	e07e      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTH :
				{
					SET_BIT(MGPIOH_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <MGPIO_setPinVal+0x200>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	79ba      	ldrb	r2, [r7, #6]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	4611      	mov	r1, r2
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <MGPIO_setPinVal+0x200>)
 8000ede:	430b      	orrs	r3, r1
 8000ee0:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
					break;
 8000ee6:	e071      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				default :
				{
					ret = MGPIO_INVALID_PARAMTER;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	73fb      	strb	r3, [r7, #15]
					break;
 8000eec:	e06e      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
			}
		}
		else if(copy_uddtPinLogic == MGPIO_LOGIC_LOW)
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d168      	bne.n	8000fc6 <MGPIO_setPinVal+0x1d2>
		{
			switch(copy_uddtPortName)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	d862      	bhi.n	8000fc0 <MGPIO_setPinVal+0x1cc>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <MGPIO_setPinVal+0x10c>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f35 	.word	0x08000f35
 8000f08:	08000f51 	.word	0x08000f51
 8000f0c:	08000f6d 	.word	0x08000f6d
 8000f10:	08000f89 	.word	0x08000f89
 8000f14:	08000fa5 	.word	0x08000fa5
			{
				case MGPIO_PORTA :
				{
					CLR_BIT(MGPIOA_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000f18:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <MGPIO_setPinVal+0x1ec>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a2d      	ldr	r2, [pc, #180]	; (8000fe0 <MGPIO_setPinVal+0x1ec>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
					break;
 8000f32:	e04b      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTB :
				{
					CLR_BIT(MGPIOB_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MGPIO_setPinVal+0x1f0>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	79ba      	ldrb	r2, [r7, #6]
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	43d2      	mvns	r2, r2
 8000f42:	4611      	mov	r1, r2
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <MGPIO_setPinVal+0x1f0>)
 8000f46:	400b      	ands	r3, r1
 8000f48:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
					break;
 8000f4e:	e03d      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTC :
				{
					CLR_BIT(MGPIOC_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <MGPIO_setPinVal+0x1f4>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MGPIO_setPinVal+0x1f4>)
 8000f62:	400b      	ands	r3, r1
 8000f64:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
					break;
 8000f6a:	e02f      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTD :
				{
					CLR_BIT(MGPIOD_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MGPIO_setPinVal+0x1f8>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <MGPIO_setPinVal+0x1f8>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
					break;
 8000f86:	e021      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTE :
				{
					CLR_BIT(MGPIOE_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <MGPIO_setPinVal+0x1fc>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	4611      	mov	r1, r2
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <MGPIO_setPinVal+0x1fc>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
					break;
 8000fa2:	e013      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTH :
				{
					CLR_BIT(MGPIOH_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MGPIO_setPinVal+0x200>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	79ba      	ldrb	r2, [r7, #6]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <MGPIO_setPinVal+0x200>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
					break;
 8000fbe:	e005      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
				default :
				{
					ret = MGPIO_INVALID_PARAMTER;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
					break;
 8000fc4:	e002      	b.n	8000fcc <MGPIO_setPinVal+0x1d8>
				}
			}
		}
		else
		{
			ret = MGPIO_INVALID_PARAMTER;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	73fb      	strb	r3, [r7, #15]
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8000fca:	e002      	b.n	8000fd2 <MGPIO_setPinVal+0x1de>
 8000fcc:	e001      	b.n	8000fd2 <MGPIO_setPinVal+0x1de>
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40021c00 	.word	0x40021c00

08000ff8 <MGPIO_SetAltFun>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_SetAltFun (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_altfnOptions_t Copy_uddtAltFun)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
	if (copy_uddtPinNum <= 7U )
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	2b07      	cmp	r3, #7
 800100e:	d82d      	bhi.n	800106c <MGPIO_SetAltFun+0x74>
	{
		switch (copy_uddtPortName)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d01e      	beq.n	8001054 <MGPIO_SetAltFun+0x5c>
 8001016:	2b02      	cmp	r3, #2
 8001018:	dc59      	bgt.n	80010ce <MGPIO_SetAltFun+0xd6>
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <MGPIO_SetAltFun+0x2c>
 800101e:	2b01      	cmp	r3, #1
 8001020:	d00c      	beq.n	800103c <MGPIO_SetAltFun+0x44>
 8001022:	e054      	b.n	80010ce <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <MGPIO_SetAltFun+0xe4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	7979      	ldrb	r1, [r7, #5]
 800102a:	79ba      	ldrb	r2, [r7, #6]
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4611      	mov	r1, r2
 8001034:	4a29      	ldr	r2, [pc, #164]	; (80010dc <MGPIO_SetAltFun+0xe4>)
 8001036:	430b      	orrs	r3, r1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e048      	b.n	80010ce <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MGPIO_SetAltFun+0xe8>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	7979      	ldrb	r1, [r7, #5]
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4611      	mov	r1, r2
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <MGPIO_SetAltFun+0xe8>)
 800104e:	430b      	orrs	r3, r1
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	e03c      	b.n	80010ce <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MGPIO_SetAltFun+0xec>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	7979      	ldrb	r1, [r7, #5]
 800105a:	79ba      	ldrb	r2, [r7, #6]
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	4611      	mov	r1, r2
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MGPIO_SetAltFun+0xec>)
 8001066:	430b      	orrs	r3, r1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	e030      	b.n	80010ce <MGPIO_SetAltFun+0xd6>
		}
	}

	else  if (copy_uddtPinNum <= 15U )
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d82d      	bhi.n	80010ce <MGPIO_SetAltFun+0xd6>
	{
		switch (copy_uddtPortName)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d01e      	beq.n	80010b6 <MGPIO_SetAltFun+0xbe>
 8001078:	2b02      	cmp	r3, #2
 800107a:	dc28      	bgt.n	80010ce <MGPIO_SetAltFun+0xd6>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <MGPIO_SetAltFun+0x8e>
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00c      	beq.n	800109e <MGPIO_SetAltFun+0xa6>
 8001084:	e023      	b.n	80010ce <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MGPIO_SetAltFun+0xe4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	7979      	ldrb	r1, [r7, #5]
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <MGPIO_SetAltFun+0xe4>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6253      	str	r3, [r2, #36]	; 0x24
 800109c:	e017      	b.n	80010ce <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MGPIO_SetAltFun+0xe8>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	7979      	ldrb	r1, [r7, #5]
 80010a4:	79ba      	ldrb	r2, [r7, #6]
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	4611      	mov	r1, r2
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <MGPIO_SetAltFun+0xe8>)
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6253      	str	r3, [r2, #36]	; 0x24
 80010b4:	e00b      	b.n	80010ce <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MGPIO_SetAltFun+0xec>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	7979      	ldrb	r1, [r7, #5]
 80010bc:	79ba      	ldrb	r2, [r7, #6]
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <MGPIO_SetAltFun+0xec>)
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6253      	str	r3, [r2, #36]	; 0x24
 80010cc:	bf00      	nop
	else
	{
		// report error
	}

}
 80010ce:	bf00      	nop
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800

080010e8 <MRCC_Init>:

#include "../../../Inc/MCAL/rcc/rcc_interface.h"


EN_MRCC_systemState_t MRCC_Init(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	EN_MRCC_systemState_t ret = MRCC_NOK;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]

		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFFFFFC ) | (sysClkSelect << SW0_BIT));
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MRCC_Init+0x4c>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MRCC_Init+0x4c>)
 80010f8:	f023 0303 	bic.w	r3, r3, #3
 80010fc:	6093      	str	r3, [r2, #8]

		if(sysClkSelect == MRCC_SYS_CLK_HSI )
		{
			SET_BIT(MRCC_PERIPHERAL->RCC_CR_REG , HSION_BIT );
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MRCC_Init+0x4c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <MRCC_Init+0x4c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6013      	str	r3, [r2, #0]
			ret = MRCC_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
		}
		else
		{
			ret = MRCC_INVALID_PARAMTER;
		}
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MRCC_Init+0x4c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <MRCC_Init+0x4c>)
						|(ahbPrescaler << HPRE0_BIT)
						|(apbLowSpeedPrescaler << PPRE10_BIT)
						|(apbHighSpeedPrescaler << PPRE20_BIT));
 800111c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8001124:	6093      	str	r3, [r2, #8]
	return ret;
 8001126:	79fb      	ldrb	r3, [r7, #7]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40023800 	.word	0x40023800

08001138 <MRCC_enablePeripheral>:


EN_MRCC_systemState_t MRCC_enablePeripheral(EN_MRCC_busOptions_t busSelection,EN_MRCC_peripheralOptions_t PeripheralNumber)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	EN_MRCC_systemState_t ret = MRCC_NOK;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
	if((busSelection >=0 && busSelection <=4 ) && (PeripheralNumber >=0 && PeripheralNumber <= 31))
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d848      	bhi.n	80011e4 <MRCC_enablePeripheral+0xac>
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d845      	bhi.n	80011e4 <MRCC_enablePeripheral+0xac>
	{
		switch(busSelection)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d83e      	bhi.n	80011dc <MRCC_enablePeripheral+0xa4>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <MRCC_enablePeripheral+0x2c>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001175 	.word	0x08001175
 8001168:	0800118f 	.word	0x0800118f
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011c3 	.word	0x080011c3
		{
			case MRCC_AHP1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB1ENR_REG , PeripheralNumber);
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	4611      	mov	r1, r2
 8001182:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 8001184:	430b      	orrs	r3, r1
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
				ret = MRCC_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
				break;
 800118c:	e029      	b.n	80011e2 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_AHP2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB2ENR_REG , PeripheralNumber);
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4611      	mov	r1, r2
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 800119e:	430b      	orrs	r3, r1
 80011a0:	6353      	str	r3, [r2, #52]	; 0x34
				ret = MRCC_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
				break;
 80011a6:	e01c      	b.n	80011e2 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB1ENR_REG , PeripheralNumber);
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	4611      	mov	r1, r2
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
				ret = MRCC_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
				break;
 80011c0:	e00f      	b.n	80011e2 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB2ENR_REG , PeripheralNumber);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	79ba      	ldrb	r2, [r7, #6]
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	4611      	mov	r1, r2
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <MRCC_enablePeripheral+0xc0>)
 80011d2:	430b      	orrs	r3, r1
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
				ret = MRCC_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
				break;
 80011da:	e002      	b.n	80011e2 <MRCC_enablePeripheral+0xaa>
			}
			default :
			{
				ret = MRCC_INVALID_PARAMTER;
 80011dc:	2303      	movs	r3, #3
 80011de:	73fb      	strb	r3, [r7, #15]
		switch(busSelection)
 80011e0:	e002      	b.n	80011e8 <MRCC_enablePeripheral+0xb0>
 80011e2:	e001      	b.n	80011e8 <MRCC_enablePeripheral+0xb0>
			}
		}
	}
	else
	{
		ret = MRCC_INVALID_PARAMTER;
 80011e4:	2303      	movs	r3, #3
 80011e6:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MSPI_uddtInit>:

#include "../../../Inc/MCAL/spi/spi_interface.h"


EN_MSPI_systeamState_t MSPI_uddtInit(ST_MSPI_cfg_t const *PS_uddtSpiCfg)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	EN_MSPI_systeamState_t ret = MSPI_NOK;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
	if(PTR_NULL != PS_uddtSpiCfg)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d024      	beq.n	8001258 <MSPI_uddtInit+0x5c>
	{
		MSPI1_PERIPHERAL->MSPI_CR1 = ((MSPI1_PERIPHERAL->MSPI_CR1 & 0x0000)
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MSPI_uddtInit+0x70>)
 8001210:	681b      	ldr	r3, [r3, #0]
				|(PS_uddtSpiCfg->cpolSelect << CPOL_BIT)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	461a      	mov	r2, r3
				|(PS_uddtSpiCfg->cphaSelect << CPHA_BIT)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4313      	orrs	r3, r2
				|(PS_uddtSpiCfg->deviceRole << MSTR_BIT)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	7892      	ldrb	r2, [r2, #2]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4313      	orrs	r3, r2
				//|(PS_uddtSpiCfg->buadRate << BR0_BIT)
				|(PS_uddtSpiCfg->frameFormatSelection << LSBFIRST_BIT)
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	7952      	ldrb	r2, [r2, #5]
 800122c:	01d2      	lsls	r2, r2, #7
 800122e:	4313      	orrs	r3, r2
				|(PS_uddtSpiCfg->ssiSelect << SSI_BIT)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	7992      	ldrb	r2, [r2, #6]
 8001234:	0212      	lsls	r2, r2, #8
 8001236:	4313      	orrs	r3, r2
				|(PS_uddtSpiCfg->ssmSelect << SSM_BIT)
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	79d2      	ldrb	r2, [r2, #7]
 800123c:	0252      	lsls	r2, r2, #9
 800123e:	4313      	orrs	r3, r2
				|(PS_uddtSpiCfg->dataFrameFormatSelection << DFF_BIT)
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	7a12      	ldrb	r2, [r2, #8]
 8001244:	02d2      	lsls	r2, r2, #11
 8001246:	4313      	orrs	r3, r2
				|(PS_uddtSpiCfg->statusOfSpi << SPE_BIT));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7912      	ldrb	r2, [r2, #4]
 800124c:	0192      	lsls	r2, r2, #6
 800124e:	4611      	mov	r1, r2
		MSPI1_PERIPHERAL->MSPI_CR1 = ((MSPI1_PERIPHERAL->MSPI_CR1 & 0x0000)
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <MSPI_uddtInit+0x70>)
				|(PS_uddtSpiCfg->statusOfSpi << SPE_BIT));
 8001252:	430b      	orrs	r3, r1
		MSPI1_PERIPHERAL->MSPI_CR1 = ((MSPI1_PERIPHERAL->MSPI_CR1 & 0x0000)
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e001      	b.n	800125c <MSPI_uddtInit+0x60>
	}
	else
	{
		ret = MSPI_PTR_NULL;
 8001258:	2302      	movs	r3, #2
 800125a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40013000 	.word	0x40013000

08001270 <MSPI_uddtSendBlocking>:

EN_MSPI_systeamState_t MSPI_uddtSendBlocking(uint8_t copy_u8DataToSend)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	EN_MSPI_systeamState_t ret = MSPI_NOK;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]

	MSPI1_PERIPHERAL->MSPI_DR = (vuint32_t )copy_u8DataToSend;
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <MSPI_uddtSendBlocking+0x38>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	60d3      	str	r3, [r2, #12]
	while(GET_BIT(MSPI1_PERIPHERAL->MSPI_SR ,BSY_BIT) == 1);
 8001284:	bf00      	nop
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MSPI_uddtSendBlocking+0x38>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	09db      	lsrs	r3, r3, #7
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d0f8      	beq.n	8001286 <MSPI_uddtSendBlocking+0x16>

	ret = MSPI_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40013000 	.word	0x40013000

080012ac <MSTK_setBusyWait>:
	}
	return ret;
}

EN_MSTK_systemState_t	MSTK_setBusyWait(uint32_t copy_u32NumberOfTicks)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	EN_MSTK_systemState_t ret = MSTK_NOK;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]

	if(copy_u32NumberOfTicks >= MIN_VAL_OF_U32 && copy_u32NumberOfTicks <= MAX_VAL_OF_U32)
	{
		MSTK_PERIPHERAL->MSTK_STK_LOAD = copy_u32NumberOfTicks;
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6053      	str	r3, [r2, #4]
		SET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6013      	str	r3, [r2, #0]
		CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_CLKSOURCE_BIT);
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	6013      	str	r3, [r2, #0]

		while(GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT) == 0);
 80012d6:	bf00      	nop
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <MSTK_setBusyWait+0x2c>
		CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
		MSTK_PERIPHERAL->MSTK_STK_LOAD = 0;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
		MSTK_PERIPHERAL->MSTK_STK_VAL = 0;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MSTK_setBusyWait+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
		ret = MSTK_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		ret = MSTK_INVALID_PARAMTER;
	}
	return ret;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <MSTK_SetIntervalPeriodic>:
	}
	return ret;
}

EN_MSTK_systemState_t	MSTK_SetIntervalPeriodic(uint32_t copy_u32NumberOfTicks, void (*Pf)(void))
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	EN_MSTK_systemState_t ret = MSTK_NOK;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]

	if((copy_u32NumberOfTicks >= MIN_VAL_OF_U32 && copy_u32NumberOfTicks <= MAX_VAL_OF_U32) && (PTR_NULL != Pf))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d017      	beq.n	8001358 <MSTK_SetIntervalPeriodic+0x44>
	{
		MSTK_PERIPHERAL->MSTK_STK_LOAD = copy_u32NumberOfTicks;
 8001328:	4a10      	ldr	r2, [pc, #64]	; (800136c <MSTK_SetIntervalPeriodic+0x58>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6053      	str	r3, [r2, #4]
		pfForStkCallBack = Pf;
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <MSTK_SetIntervalPeriodic+0x5c>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6013      	str	r3, [r2, #0]
		g_u8intervalMode = MSTK_IntervalPeriodic;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MSTK_SetIntervalPeriodic+0x60>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
		SET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MSTK_SetIntervalPeriodic+0x58>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <MSTK_SetIntervalPeriodic+0x58>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]
		SET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_TICKINT_BIT);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MSTK_SetIntervalPeriodic+0x58>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <MSTK_SetIntervalPeriodic+0x58>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6013      	str	r3, [r2, #0]

		ret = MSTK_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e001      	b.n	800135c <MSTK_SetIntervalPeriodic+0x48>
	}
	else
	{
		ret = MSTK_INVALID_PARAMTER;
 8001358:	2302      	movs	r3, #2
 800135a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010
 8001370:	200000d8 	.word	0x200000d8
 8001374:	200000dc 	.word	0x200000dc

08001378 <SysTick_Handler>:
	return ret;
}


void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	if(PTR_NULL != pfForStkCallBack)
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <SysTick_Handler+0x6c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d02a      	beq.n	80013dc <SysTick_Handler+0x64>
	{
		uint8_t u8TempForFlagReading = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]
		if(g_u8intervalMode == MSTK_IntervalSingle)
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <SysTick_Handler+0x70>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <SysTick_Handler+0x48>
		{
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <SysTick_Handler+0x74>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0c1b      	lsrs	r3, r3, #16
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SysTick_Handler+0x6c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4798      	blx	r3
			CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <SysTick_Handler+0x74>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <SysTick_Handler+0x74>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]
			MSTK_PERIPHERAL->MSTK_STK_LOAD = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <SysTick_Handler+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
			MSTK_PERIPHERAL->MSTK_STK_VAL = 0;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <SysTick_Handler+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
	}
	else
	{
		/* Do Nothing */
	}
}
 80013be:	e00d      	b.n	80013dc <SysTick_Handler+0x64>
		else if(g_u8intervalMode == MSTK_IntervalPeriodic)
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <SysTick_Handler+0x70>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d109      	bne.n	80013dc <SysTick_Handler+0x64>
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <SysTick_Handler+0x74>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <SysTick_Handler+0x6c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4798      	blx	r3
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000d8 	.word	0x200000d8
 80013e8:	200000dc 	.word	0x200000dc
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <main>:


#include "../Inc/APPLICATION/app.h"

void main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	appInit();
 80013f4:	f7fe feee 	bl	80001d4 <appInit>
	appMain();
 80013f8:	f7fe ff28 	bl	800024c <appMain>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001402:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800142e:	f000 f811 	bl	8001454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001432:	f7ff ffdd 	bl	80013f0 <main>

08001436 <LoopForever>:

LoopForever:
  b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   r0, =_estack
 8001438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001444:	08002224 	.word	0x08002224
  ldr r2, =_sbss
 8001448:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 800144c:	200000e0 	.word	0x200000e0

08001450 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <__libc_init_array>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	4d0d      	ldr	r5, [pc, #52]	; (800148c <__libc_init_array+0x38>)
 8001458:	4c0d      	ldr	r4, [pc, #52]	; (8001490 <__libc_init_array+0x3c>)
 800145a:	1b64      	subs	r4, r4, r5
 800145c:	10a4      	asrs	r4, r4, #2
 800145e:	2600      	movs	r6, #0
 8001460:	42a6      	cmp	r6, r4
 8001462:	d109      	bne.n	8001478 <__libc_init_array+0x24>
 8001464:	4d0b      	ldr	r5, [pc, #44]	; (8001494 <__libc_init_array+0x40>)
 8001466:	4c0c      	ldr	r4, [pc, #48]	; (8001498 <__libc_init_array+0x44>)
 8001468:	f000 f818 	bl	800149c <_init>
 800146c:	1b64      	subs	r4, r4, r5
 800146e:	10a4      	asrs	r4, r4, #2
 8001470:	2600      	movs	r6, #0
 8001472:	42a6      	cmp	r6, r4
 8001474:	d105      	bne.n	8001482 <__libc_init_array+0x2e>
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	f855 3b04 	ldr.w	r3, [r5], #4
 800147c:	4798      	blx	r3
 800147e:	3601      	adds	r6, #1
 8001480:	e7ee      	b.n	8001460 <__libc_init_array+0xc>
 8001482:	f855 3b04 	ldr.w	r3, [r5], #4
 8001486:	4798      	blx	r3
 8001488:	3601      	adds	r6, #1
 800148a:	e7f2      	b.n	8001472 <__libc_init_array+0x1e>
 800148c:	0800221c 	.word	0x0800221c
 8001490:	0800221c 	.word	0x0800221c
 8001494:	0800221c 	.word	0x0800221c
 8001498:	08002220 	.word	0x08002220

0800149c <_init>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr

080014a8 <_fini>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr
