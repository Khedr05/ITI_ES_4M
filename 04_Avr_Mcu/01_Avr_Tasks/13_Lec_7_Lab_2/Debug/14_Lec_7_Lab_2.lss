
14_Lec_7_Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00004986  00004a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800096  00800096  00004a50  2**0
                  ALLOC
  3 .stab         00004578  00000000  00000000  00004a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002df3  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bdbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000befb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c06b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000faac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 24 	call	0x4874	; 0x4874 <main>
      8a:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 24 	jmp	0x488a	; 0x488a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 24 	jmp	0x488a	; 0x488a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_initPin+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	b1 f0       	breq	.+44     	; 0xb8e <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b62:	ea 81       	ldd	r30, Y+2	; 0x02
     b64:	fb 81       	ldd	r31, Y+3	; 0x03
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	62 2f       	mov	r22, r18
     b6e:	0e 94 d0 05 	call	0xba0	; 0xba0 <GPIO_changePinDir>
     b72:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 23       	and	r24, r24
     b78:	61 f4       	brne	.+24     	; 0xb92 <GPIO_initPin+0x4c>
			ret =
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	23 81       	ldd	r18, Z+3	; 0x03
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	9b 81       	ldd	r25, Y+3	; 0x03
     b84:	62 2f       	mov	r22, r18
     b86:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <GPIO_changePinDir+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_changePinDir+0x8>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_changePinDir+0xa>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	9b 83       	std	Y+3, r25	; 0x03
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <GPIO_changePinDir+0x22>
     bc0:	68 c0       	rjmp	.+208    	; 0xc92 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3e 83       	std	Y+6, r19	; 0x06
     bca:	2d 83       	std	Y+5, r18	; 0x05
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <GPIO_changePinDir+0x40>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	31 05       	cpc	r19, r1
     bdc:	71 f1       	breq	.+92     	; 0xc3a <GPIO_changePinDir+0x9a>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	fc 01       	movw	r30, r24
     bf0:	e8 59       	subi	r30, 0x98	; 152
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	a0 81       	ld	r26, Z
     bf6:	b1 81       	ldd	r27, Z+1	; 0x01
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	fb 81       	ldd	r31, Y+3	; 0x03
     bfc:	80 81       	ld	r24, Z
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	fc 01       	movw	r30, r24
     c08:	e8 59       	subi	r30, 0x98	; 152
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	01 90       	ld	r0, Z+
     c0e:	f0 81       	ld	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <GPIO_changePinDir+0x8c>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <GPIO_changePinDir+0x88>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	2e c0       	rjmp	.+92     	; 0xc96 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c3a:	ea 81       	ldd	r30, Y+2	; 0x02
     c3c:	fb 81       	ldd	r31, Y+3	; 0x03
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	fc 01       	movw	r30, r24
     c4a:	e8 59       	subi	r30, 0x98	; 152
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	a0 81       	ld	r26, Z
     c50:	b1 81       	ldd	r27, Z+1	; 0x01
     c52:	ea 81       	ldd	r30, Y+2	; 0x02
     c54:	fb 81       	ldd	r31, Y+3	; 0x03
     c56:	80 81       	ld	r24, Z
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	fc 01       	movw	r30, r24
     c62:	e8 59       	subi	r30, 0x98	; 152
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	01 90       	ld	r0, Z+
     c68:	f0 81       	ld	r31, Z
     c6a:	e0 2d       	mov	r30, r0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xe6>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_changePinDir+0xe2>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	26 96       	adiw	r28, 0x06	; 6
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <GPIO_writePinLogic+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <GPIO_writePinLogic+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <GPIO_writePinLogic+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9b 83       	std	Y+3, r25	; 0x03
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <GPIO_writePinLogic+0x22>
     cca:	68 c0       	rjmp	.+208    	; 0xd9c <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	2d 83       	std	Y+5, r18	; 0x05
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <GPIO_writePinLogic+0x40>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	71 f1       	breq	.+92     	; 0xd44 <GPIO_writePinLogic+0x9a>
     ce8:	5b c0       	rjmp	.+182    	; 0xda0 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cea:	ea 81       	ldd	r30, Y+2	; 0x02
     cec:	fb 81       	ldd	r31, Y+3	; 0x03
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e0 59       	subi	r30, 0x90	; 144
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	a0 81       	ld	r26, Z
     d00:	b1 81       	ldd	r27, Z+1	; 0x01
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	fc 01       	movw	r30, r24
     d12:	e0 59       	subi	r30, 0x90	; 144
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_writePinLogic+0x8c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_writePinLogic+0x88>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	2e c0       	rjmp	.+92     	; 0xda0 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	fc 01       	movw	r30, r24
     d54:	e0 59       	subi	r30, 0x90	; 144
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	ea 81       	ldd	r30, Y+2	; 0x02
     d5e:	fb 81       	ldd	r31, Y+3	; 0x03
     d60:	80 81       	ld	r24, Z
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	fc 01       	movw	r30, r24
     d6c:	e0 59       	subi	r30, 0x90	; 144
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xe6>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_writePinLogic+0xe2>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	26 96       	adiw	r28, 0x06	; 6
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <GPIO_readPinLogic+0x6>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <GPIO_readPinLogic+0x8>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7d 83       	std	Y+5, r23	; 0x05
     dc8:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	11 f1       	breq	.+68     	; 0xe1a <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	fc 01       	movw	r30, r24
     de6:	e8 58       	subi	r30, 0x88	; 136
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_readPinLogic+0x54>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_readPinLogic+0x50>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	ec 81       	ldd	r30, Y+4	; 0x04
     e12:	fd 81       	ldd	r31, Y+5	; 0x05
     e14:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_togglePinLogic+0x6>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f1       	breq	.+88     	; 0xea4 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	e0 59       	subi	r30, 0x90	; 144
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	ea 81       	ldd	r30, Y+2	; 0x02
     e66:	fb 81       	ldd	r31, Y+3	; 0x03
     e68:	80 81       	ld	r24, Z
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	fc 01       	movw	r30, r24
     e74:	e0 59       	subi	r30, 0x90	; 144
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x68>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_togglePinLogic+0x64>
     e9c:	84 27       	eor	r24, r20
     e9e:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	38 87       	std	Y+8, r19	; 0x08
     edc:	2f 83       	std	Y+7, r18	; 0x07
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	31 f0       	breq	.+12     	; 0xef2 <GPIO_initPort+0x3c>
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	31 05       	cpc	r19, r1
     eee:	79 f0       	breq	.+30     	; 0xf0e <GPIO_initPort+0x58>
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e8 59       	subi	r30, 0x98	; 152
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	01 90       	ld	r0, Z+
     f04:	f0 81       	ld	r31, Z
     f06:	e0 2d       	mov	r30, r0
     f08:	10 82       	st	Z, r1
		ret = GPIO_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 59       	subi	r30, 0x98	; 152
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	31 f0       	breq	.+12     	; 0xf48 <GPIO_initPort+0x92>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	79 f0       	breq	.+30     	; 0xf64 <GPIO_initPort+0xae>
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e0 59       	subi	r30, 0x90	; 144
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	10 82       	st	Z, r1
		ret = GPIO_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	fc 01       	movw	r30, r24
     f70:	e0 59       	subi	r30, 0x90	; 144
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	01 90       	ld	r0, Z+
     f76:	f0 81       	ld	r31, Z
     f78:	e0 2d       	mov	r30, r0
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	80 83       	st	Z, r24
		ret = GPIO_OK;
     f7e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_changePortDir+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GPIO_changePortDir+0x8>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 83       	std	Y+5, r19	; 0x05
     fb2:	2c 83       	std	Y+4, r18	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	31 f0       	breq	.+12     	; 0xfc8 <GPIO_changePortDir+0x34>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <GPIO_changePortDir+0x50>
     fc6:	1c c0       	rjmp	.+56     	; 0x1000 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	10 82       	st	Z, r1
		ret = GPIO_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	e8 59       	subi	r30, 0x98	; 152
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	01 90       	ld	r0, Z+
     ff6:	f0 81       	ld	r31, Z
     ff8:	e0 2d       	mov	r30, r0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
		ret = GPIO_OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_writePortLogic+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_writePortLogic+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <GPIO_writePortLogic+0x34>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	79 f0       	breq	.+30     	; 0x1062 <GPIO_writePortLogic+0x50>
    1044:	1c c0       	rjmp	.+56     	; 0x107e <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	fc 01       	movw	r30, r24
    1052:	e0 59       	subi	r30, 0x90	; 144
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	01 90       	ld	r0, Z+
    1058:	f0 81       	ld	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	10 82       	st	Z, r1
		ret = GPIO_OK;
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0e c0       	rjmp	.+28     	; 0x107e <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e0 59       	subi	r30, 0x90	; 144
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 83       	st	Z, r24
		ret = GPIO_OK;
    107c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPortLogic+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPortLogic+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	7c 83       	std	Y+4, r23	; 0x04
    10a0:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e8 58       	subi	r30, 0x88	; 136
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	80 83       	st	Z, r24
	ret = GPIO_OK;
    10c4:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_togglePortLogic+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	a0 81       	ld	r26, Z
    10f8:	b1 81       	ldd	r27, Z+1	; 0x01
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e8 59       	subi	r30, 0x98	; 152
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	20 81       	ld	r18, Z
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e8 59       	subi	r30, 0x98	; 152
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	80 81       	ld	r24, Z
    112a:	82 27       	eor	r24, r18
    112c:	8c 93       	st	X, r24
	ret = GPIO_OK;
    112e:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_set4msbValue+0x6>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	e0 59       	subi	r30, 0x90	; 144
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	a0 81       	ld	r26, Z
    1162:	b1 81       	ldd	r27, Z+1	; 0x01
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	fc 01       	movw	r30, r24
    1170:	e0 59       	subi	r30, 0x90	; 144
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	01 90       	ld	r0, Z+
    1176:	f0 81       	ld	r31, Z
    1178:	e0 2d       	mov	r30, r0
    117a:	80 81       	ld	r24, Z
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	fc 01       	movw	r30, r24
    118c:	e0 59       	subi	r30, 0x90	; 144
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	a0 81       	ld	r26, Z
    1192:	b1 81       	ldd	r27, Z+1	; 0x01
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	fc 01       	movw	r30, r24
    11a0:	e0 59       	subi	r30, 0x90	; 144
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	01 90       	ld	r0, Z+
    11a6:	f0 81       	ld	r31, Z
    11a8:	e0 2d       	mov	r30, r0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 95       	swap	r24
    11b6:	92 95       	swap	r25
    11b8:	90 7f       	andi	r25, 0xF0	; 240
    11ba:	98 27       	eor	r25, r24
    11bc:	80 7f       	andi	r24, 0xF0	; 240
    11be:	98 27       	eor	r25, r24
    11c0:	82 2b       	or	r24, r18
    11c2:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    11c4:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	27 97       	sbiw	r28, 0x07	; 7
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	6d 83       	std	Y+5, r22	; 0x05
    11f0:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	fc 01       	movw	r30, r24
    1202:	e0 59       	subi	r30, 0x90	; 144
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	80 81       	ld	r24, Z
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	fc 01       	movw	r30, r24
    121a:	e0 59       	subi	r30, 0x90	; 144
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	01 90       	ld	r0, Z+
    1220:	f0 81       	ld	r31, Z
    1222:	e0 2d       	mov	r30, r0
    1224:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	fc 01       	movw	r30, r24
    1232:	e0 59       	subi	r30, 0x90	; 144
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	a0 81       	ld	r26, Z
    1238:	b1 81       	ldd	r27, Z+1	; 0x01
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	fc 01       	movw	r30, r24
    1246:	e0 59       	subi	r30, 0x90	; 144
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	01 90       	ld	r0, Z+
    124c:	f0 81       	ld	r31, Z
    124e:	e0 2d       	mov	r30, r0
    1250:	90 81       	ld	r25, Z
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	89 2b       	or	r24, r25
    1256:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    1258:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	27 96       	adiw	r28, 0x07	; 7
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <MADC_init>:


static void(*ptrCallbackHandler)(void) = PTR_NULL;

EN_MADC_systeamState_t MADC_init(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <MADC_init+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <MADC_init+0x8>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9d 83       	std	Y+5, r25	; 0x05
    127e:	8c 83       	std	Y+4, r24	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	8b 83       	std	Y+3, r24	; 0x03

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	09 f4       	brne	.+2      	; 0x128e <MADC_init+0x20>
    128c:	67 c0       	rjmp	.+206    	; 0x135c <MADC_init+0xee>
	{
		uint8_t ADMUX_REG_TEMP = 0;
    128e:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t ADCSRA_REG_TEMP = 0;
    1290:	19 82       	std	Y+1, r1	; 0x01

		// disable adc
		MADC_disable();
    1292:	a6 e2       	ldi	r26, 0x26	; 38
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e6 e2       	ldi	r30, 0x26	; 38
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	8c 93       	st	X, r24

		// select vref
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0x3F)   | (ST_ptrAdcCfgInstance_t->referenceSource << REFS0_BIT ));
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	2f 73       	andi	r18, 0x3F	; 63
    12a6:	ec 81       	ldd	r30, Y+4	; 0x04
    12a8:	fd 81       	ldd	r31, Y+5	; 0x05
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	00 24       	eor	r0, r0
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	07 94       	ror	r0
    12b8:	96 95       	lsr	r25
    12ba:	87 95       	ror	r24
    12bc:	07 94       	ror	r0
    12be:	98 2f       	mov	r25, r24
    12c0:	80 2d       	mov	r24, r0
    12c2:	82 2b       	or	r24, r18
    12c4:	8a 83       	std	Y+2, r24	; 0x02
		// select adjust result
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xDF)   | (ST_ptrAdcCfgInstance_t->resultAdjust << ADLAR_BIT));
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	2f 7d       	andi	r18, 0xDF	; 223
    12cc:	ec 81       	ldd	r30, Y+4	; 0x04
    12ce:	fd 81       	ldd	r31, Y+5	; 0x05
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	82 95       	swap	r24
    12dc:	92 95       	swap	r25
    12de:	90 7f       	andi	r25, 0xF0	; 240
    12e0:	98 27       	eor	r25, r24
    12e2:	80 7f       	andi	r24, 0xF0	; 240
    12e4:	98 27       	eor	r25, r24
    12e6:	82 2b       	or	r24, r18
    12e8:	8a 83       	std	Y+2, r24	; 0x02
		// select adc channel
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xE0)   | (ST_ptrAdcCfgInstance_t->channelSelection));
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	98 2f       	mov	r25, r24
    12ee:	90 7e       	andi	r25, 0xE0	; 224
    12f0:	ec 81       	ldd	r30, Y+4	; 0x04
    12f2:	fd 81       	ldd	r31, Y+5	; 0x05
    12f4:	84 81       	ldd	r24, Z+4	; 0x04
    12f6:	89 2b       	or	r24, r25
    12f8:	8a 83       	std	Y+2, r24	; 0x02
		// select prescaler
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF8) | (ST_ptrAdcCfgInstance_t->prescalerDivision));
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	98 2f       	mov	r25, r24
    12fe:	98 7f       	andi	r25, 0xF8	; 248
    1300:	ec 81       	ldd	r30, Y+4	; 0x04
    1302:	fd 81       	ldd	r31, Y+5	; 0x05
    1304:	85 81       	ldd	r24, Z+5	; 0x05
    1306:	89 2b       	or	r24, r25
    1308:	89 83       	std	Y+1, r24	; 0x01
		// enable or disable interrupt
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF7) | (ST_ptrAdcCfgInstance_t->triggerSource << ADIE_BIT));
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	27 7f       	andi	r18, 0xF7	; 247
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	86 81       	ldd	r24, Z+6	; 0x06
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	82 2b       	or	r24, r18
    1328:	89 83       	std	Y+1, r24	; 0x01

		// assign the values in registers
		ADMUX_REG	 = ADMUX_REG_TEMP;
    132a:	e7 e2       	ldi	r30, 0x27	; 39
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
		ADCSRA_REG 	 = ADCSRA_REG_TEMP;
    1332:	e6 e2       	ldi	r30, 0x26	; 38
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	80 83       	st	Z, r24

		// set pointer of isr callback

		ptrCallbackHandler = ST_ptrAdcCfgInstance_t->MADC_setCallback;
    133a:	ec 81       	ldd	r30, Y+4	; 0x04
    133c:	fd 81       	ldd	r31, Y+5	; 0x05
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	90 93 97 00 	sts	0x0097, r25
    1346:	80 93 96 00 	sts	0x0096, r24

		// enable adc
		MADC_enable();
    134a:	a6 e2       	ldi	r26, 0x26	; 38
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e6 e2       	ldi	r30, 0x26	; 38
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    1358:	1b 82       	std	Y+3, r1	; 0x03
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <MADC_init+0xf2>

	}
	else
	{
		adcRet = MADC_PTR_NULL;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return adcRet;
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <MADC_deinit>:
EN_MADC_systeamState_t MADC_deinit(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <MADC_deinit+0x6>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	81 f0       	breq	.+32     	; 0x13ae <MADC_deinit+0x3c>
	{
		// disable adc interrupt
		MADC_interruptDisable();
    138e:	a6 e2       	ldi	r26, 0x26	; 38
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e6 e2       	ldi	r30, 0x26	; 38
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	87 7f       	andi	r24, 0xF7	; 247
    139a:	8c 93       	st	X, r24
		// disable adc
		MADC_disable();
    139c:	a6 e2       	ldi	r26, 0x26	; 38
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e6 e2       	ldi	r30, 0x26	; 38
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 77       	andi	r24, 0x7F	; 127
    13a8:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <MADC_deinit+0x40>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <MADC_startConversion>:

EN_MADC_systeamState_t MADC_startConversion(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <MADC_startConversion+0x6>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	49 f0       	breq	.+18     	; 0x13ee <MADC_startConversion+0x2e>
	{
		// start conversion
		SET_BIT(ADCSRA_REG,ADSC_BIT);
    13dc:	a6 e2       	ldi	r26, 0x26	; 38
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e6 e2       	ldi	r30, 0x26	; 38
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 64       	ori	r24, 0x40	; 64
    13e8:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    13ea:	19 82       	std	Y+1, r1	; 0x01
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <MADC_startConversion+0x32>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <MADC_getConversionResult>:

EN_MADC_systeamState_t MADC_getConversionResult(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t, Uint16_t *_ConversionResult)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	27 97       	sbiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	9b 83       	std	Y+3, r25	; 0x03
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	7d 83       	std	Y+5, r23	; 0x05
    141a:	6c 83       	std	Y+4, r22	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01

	if( (PTR_NULL != ST_ptrAdcCfgInstance_t) && (PTR_NULL != _ConversionResult) )
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f4       	brne	.+2      	; 0x142a <MADC_getConversionResult+0x2a>
    1428:	5b c0       	rjmp	.+182    	; 0x14e0 <MADC_getConversionResult+0xe0>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	09 f4       	brne	.+2      	; 0x1434 <MADC_getConversionResult+0x34>
    1432:	56 c0       	rjmp	.+172    	; 0x14e0 <MADC_getConversionResult+0xe0>
	{
		// polling on adc flag
		while(GET_BIT(ADCSRA_REG,ADIF_BIT) != 1);
    1434:	e6 e2       	ldi	r30, 0x26	; 38
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	82 95       	swap	r24
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	a9 f3       	breq	.-22     	; 0x1434 <MADC_getConversionResult+0x34>
		// clear adc flag
		SET_BIT(ADCSRA_REG,ADIF_BIT);
    144a:	a6 e2       	ldi	r26, 0x26	; 38
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e6 e2       	ldi	r30, 0x26	; 38
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 61       	ori	r24, 0x10	; 16
    1456:	8c 93       	st	X, r24

		switch(ST_ptrAdcCfgInstance_t->resultAdjust)
    1458:	ea 81       	ldd	r30, Y+2	; 0x02
    145a:	fb 81       	ldd	r31, Y+3	; 0x03
    145c:	83 81       	ldd	r24, Z+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3f 83       	std	Y+7, r19	; 0x07
    1464:	2e 83       	std	Y+6, r18	; 0x06
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	31 f0       	breq	.+12     	; 0x147a <MADC_getConversionResult+0x7a>
    146e:	2e 81       	ldd	r18, Y+6	; 0x06
    1470:	3f 81       	ldd	r19, Y+7	; 0x07
    1472:	21 30       	cpi	r18, 0x01	; 1
    1474:	31 05       	cpc	r19, r1
    1476:	a9 f0       	breq	.+42     	; 0x14a2 <MADC_getConversionResult+0xa2>
    1478:	30 c0       	rjmp	.+96     	; 0x14da <MADC_getConversionResult+0xda>
		{
		case MADC_RIGHT_ADJUST  : *_ConversionResult = (Uint16_t)(ADCL_REG + (ADCH_REG << 8)); adcRet = MADC_OK;  break;
    147a:	e4 e2       	ldi	r30, 0x24	; 36
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	e5 e2       	ldi	r30, 0x25	; 37
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	98 2f       	mov	r25, r24
    1490:	88 27       	eor	r24, r24
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	ec 81       	ldd	r30, Y+4	; 0x04
    1498:	fd 81       	ldd	r31, Y+5	; 0x05
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	21 c0       	rjmp	.+66     	; 0x14e4 <MADC_getConversionResult+0xe4>
		case MADC_LEFT_ADJUST	:  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); adcRet = MADC_OK; break;
    14a2:	e4 e2       	ldi	r30, 0x24	; 36
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	e5 e2       	ldi	r30, 0x25	; 37
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	98 2f       	mov	r25, r24
    14b8:	88 27       	eor	r24, r24
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	08 2e       	mov	r0, r24
    14c0:	89 2f       	mov	r24, r25
    14c2:	00 0c       	add	r0, r0
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 0b       	sbc	r25, r25
    14c8:	00 0c       	add	r0, r0
    14ca:	88 1f       	adc	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	ec 81       	ldd	r30, Y+4	; 0x04
    14d0:	fd 81       	ldd	r31, Y+5	; 0x05
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <MADC_getConversionResult+0xe4>
		default 				: adcRet = MADC_NOK; break;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <MADC_getConversionResult+0xe4>
		}
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e6:	27 96       	adiw	r28, 0x07	; 7
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <__vector_16>:


ISR(ADC_INT)
{
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptrCallbackHandler)
    1522:	80 91 96 00 	lds	r24, 0x0096
    1526:	90 91 97 00 	lds	r25, 0x0097
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	29 f0       	breq	.+10     	; 0x1538 <__vector_16+0x40>
	{
		ptrCallbackHandler();
    152e:	e0 91 96 00 	lds	r30, 0x0096
    1532:	f0 91 97 00 	lds	r31, 0x0097
    1536:	09 95       	icall
	}
	else /*Do Nothing */;
}
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	ff 91       	pop	r31
    153e:	ef 91       	pop	r30
    1540:	bf 91       	pop	r27
    1542:	af 91       	pop	r26
    1544:	9f 91       	pop	r25
    1546:	8f 91       	pop	r24
    1548:	7f 91       	pop	r23
    154a:	6f 91       	pop	r22
    154c:	5f 91       	pop	r21
    154e:	4f 91       	pop	r20
    1550:	3f 91       	pop	r19
    1552:	2f 91       	pop	r18
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/led/led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	28 97       	sbiw	r28, 0x08	; 8
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	98 85       	ldd	r25, Y+8	; 0x08
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	d9 f0       	breq	.+54     	; 0x15bc <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1586:	ef 81       	ldd	r30, Y+7	; 0x07
    1588:	f8 85       	ldd	r31, Y+8	; 0x08
    158a:	81 81       	ldd	r24, Z+1	; 0x01
    158c:	ef 81       	ldd	r30, Y+7	; 0x07
    158e:	f8 85       	ldd	r31, Y+8	; 0x08
    1590:	92 81       	ldd	r25, Z+2	; 0x02
    1592:	ef 81       	ldd	r30, Y+7	; 0x07
    1594:	f8 85       	ldd	r31, Y+8	; 0x08
    1596:	20 81       	ld	r18, Z
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    15a2:	ce 01       	movw	r24, r28
    15a4:	03 96       	adiw	r24, 0x03	; 3
    15a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    15aa:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	88 23       	and	r24, r24
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <LED_init+0x58>
      ledRet = LED_OK;
    15b2:	1a 82       	std	Y+2, r1	; 0x02
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15c2:	28 96       	adiw	r28, 0x08	; 8
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	28 97       	sbiw	r28, 0x08	; 8
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	98 87       	std	Y+8, r25	; 0x08
    15ea:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	e1 f0       	breq	.+56     	; 0x1634 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    15fc:	ef 81       	ldd	r30, Y+7	; 0x07
    15fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1600:	81 81       	ldd	r24, Z+1	; 0x01
    1602:	ef 81       	ldd	r30, Y+7	; 0x07
    1604:	f8 85       	ldd	r31, Y+8	; 0x08
    1606:	92 81       	ldd	r25, Z+2	; 0x02
    1608:	ef 81       	ldd	r30, Y+7	; 0x07
    160a:	f8 85       	ldd	r31, Y+8	; 0x08
    160c:	20 81       	ld	r18, Z
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    1618:	ce 01       	movw	r24, r28
    161a:	03 96       	adiw	r24, 0x03	; 3
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1622:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	88 23       	and	r24, r24
    1628:	11 f4       	brne	.+4      	; 0x162e <LED_turnOn+0x5a>
      ledRet = LED_OK;
    162a:	1a 82       	std	Y+2, r1	; 0x02
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8a 83       	std	Y+2, r24	; 0x02
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
}
    163a:	28 96       	adiw	r28, 0x08	; 8
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	28 97       	sbiw	r28, 0x08	; 8
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	98 87       	std	Y+8, r25	; 0x08
    1662:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    166c:	8f 81       	ldd	r24, Y+7	; 0x07
    166e:	98 85       	ldd	r25, Y+8	; 0x08
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	e1 f0       	breq	.+56     	; 0x16ac <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1674:	ef 81       	ldd	r30, Y+7	; 0x07
    1676:	f8 85       	ldd	r31, Y+8	; 0x08
    1678:	81 81       	ldd	r24, Z+1	; 0x01
    167a:	ef 81       	ldd	r30, Y+7	; 0x07
    167c:	f8 85       	ldd	r31, Y+8	; 0x08
    167e:	92 81       	ldd	r25, Z+2	; 0x02
    1680:	ef 81       	ldd	r30, Y+7	; 0x07
    1682:	f8 85       	ldd	r31, Y+8	; 0x08
    1684:	20 81       	ld	r18, Z
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    1690:	ce 01       	movw	r24, r28
    1692:	03 96       	adiw	r24, 0x03	; 3
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    169a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	88 23       	and	r24, r24
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    16a2:	1a 82       	std	Y+2, r1	; 0x02
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16b2:	28 96       	adiw	r28, 0x08	; 8
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	28 97       	sbiw	r28, 0x08	; 8
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	98 87       	std	Y+8, r25	; 0x08
    16da:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	d9 f0       	breq	.+54     	; 0x1722 <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    16ec:	ef 81       	ldd	r30, Y+7	; 0x07
    16ee:	f8 85       	ldd	r31, Y+8	; 0x08
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	ef 81       	ldd	r30, Y+7	; 0x07
    16f4:	f8 85       	ldd	r31, Y+8	; 0x08
    16f6:	92 81       	ldd	r25, Z+2	; 0x02
    16f8:	ef 81       	ldd	r30, Y+7	; 0x07
    16fa:	f8 85       	ldd	r31, Y+8	; 0x08
    16fc:	20 81       	ld	r18, Z
    16fe:	8b 83       	std	Y+3, r24	; 0x03
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    1708:	ce 01       	movw	r24, r28
    170a:	03 96       	adiw	r24, 0x03	; 3
    170c:	0e 94 18 07 	call	0xe30	; 0xe30 <GPIO_togglePinLogic>
    1710:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	88 23       	and	r24, r24
    1716:	11 f4       	brne	.+4      	; 0x171c <LED_toggle+0x58>
      ledRet = LED_OK;
    1718:	1a 82       	std	Y+2, r1	; 0x02
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 96       	adiw	r28, 0x08	; 8
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	ce 59       	subi	r28, 0x9E	; 158
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	fe 01       	movw	r30, r28
    1756:	e3 56       	subi	r30, 0x63	; 99
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    175e:	fe 01       	movw	r30, r28
    1760:	e0 58       	subi	r30, 0x80	; 128
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1768:	fe 01       	movw	r30, r28
    176a:	e1 58       	subi	r30, 0x81	; 129
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    1772:	fe 01       	movw	r30, r28
    1774:	e3 56       	subi	r30, 0x63	; 99
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	09 f4       	brne	.+2      	; 0x1782 <HLCD_init+0x48>
    1780:	18 c7       	rjmp	.+3632   	; 0x25b2 <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    1782:	fe 01       	movw	r30, r28
    1784:	e3 56       	subi	r30, 0x63	; 99
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	01 90       	ld	r0, Z+
    178a:	f0 81       	ld	r31, Z
    178c:	e0 2d       	mov	r30, r0
    178e:	81 81       	ldd	r24, Z+1	; 0x01
    1790:	fe 01       	movw	r30, r28
    1792:	e3 56       	subi	r30, 0x63	; 99
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	01 90       	ld	r0, Z+
    1798:	f0 81       	ld	r31, Z
    179a:	e0 2d       	mov	r30, r0
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	fe 01       	movw	r30, r28
    17a0:	ef 57       	subi	r30, 0x7F	; 127
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 83       	st	Z, r24
    17a6:	fe 01       	movw	r30, r28
    17a8:	ef 57       	subi	r30, 0x7F	; 127
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	fe 01       	movw	r30, r28
    17b0:	ef 57       	subi	r30, 0x7F	; 127
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	82 83       	std	Z+2, r24	; 0x02
    17b8:	fe 01       	movw	r30, r28
    17ba:	ef 57       	subi	r30, 0x7F	; 127
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    17c0:	fe 01       	movw	r30, r28
    17c2:	e3 56       	subi	r30, 0x63	; 99
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	01 90       	ld	r0, Z+
    17c8:	f0 81       	ld	r31, Z
    17ca:	e0 2d       	mov	r30, r0
    17cc:	81 81       	ldd	r24, Z+1	; 0x01
    17ce:	fe 01       	movw	r30, r28
    17d0:	e3 56       	subi	r30, 0x63	; 99
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	01 90       	ld	r0, Z+
    17d6:	f0 81       	ld	r31, Z
    17d8:	e0 2d       	mov	r30, r0
    17da:	94 81       	ldd	r25, Z+4	; 0x04
    17dc:	fe 01       	movw	r30, r28
    17de:	eb 57       	subi	r30, 0x7B	; 123
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 83       	st	Z, r24
    17e4:	fe 01       	movw	r30, r28
    17e6:	eb 57       	subi	r30, 0x7B	; 123
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 57       	subi	r30, 0x7B	; 123
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	82 83       	std	Z+2, r24	; 0x02
    17f6:	fe 01       	movw	r30, r28
    17f8:	eb 57       	subi	r30, 0x7B	; 123
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 56       	subi	r30, 0x63	; 99
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	01 90       	ld	r0, Z+
    1806:	f0 81       	ld	r31, Z
    1808:	e0 2d       	mov	r30, r0
    180a:	81 81       	ldd	r24, Z+1	; 0x01
    180c:	fe 01       	movw	r30, r28
    180e:	e3 56       	subi	r30, 0x63	; 99
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	01 90       	ld	r0, Z+
    1814:	f0 81       	ld	r31, Z
    1816:	e0 2d       	mov	r30, r0
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	fe 01       	movw	r30, r28
    181c:	e7 57       	subi	r30, 0x77	; 119
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 83       	st	Z, r24
    1822:	fe 01       	movw	r30, r28
    1824:	e7 57       	subi	r30, 0x77	; 119
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	fe 01       	movw	r30, r28
    182c:	e7 57       	subi	r30, 0x77	; 119
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	82 83       	std	Z+2, r24	; 0x02
    1834:	fe 01       	movw	r30, r28
    1836:	e7 57       	subi	r30, 0x77	; 119
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    183c:	ce 01       	movw	r24, r28
    183e:	8f 57       	subi	r24, 0x7F	; 127
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1846:	fe 01       	movw	r30, r28
    1848:	e1 58       	subi	r30, 0x81	; 129
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    184e:	fe 01       	movw	r30, r28
    1850:	e1 58       	subi	r30, 0x81	; 129
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	51 f4       	brne	.+20     	; 0x186e <HLCD_init+0x134>
    185a:	ce 01       	movw	r24, r28
    185c:	8b 57       	subi	r24, 0x7B	; 123
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1864:	fe 01       	movw	r30, r28
    1866:	e1 58       	subi	r30, 0x81	; 129
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 83       	st	Z, r24
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    186e:	fe 01       	movw	r30, r28
    1870:	e0 58       	subi	r30, 0x80	; 128
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    1878:	fe 01       	movw	r30, r28
    187a:	e1 58       	subi	r30, 0x81	; 129
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	88 23       	and	r24, r24
    1882:	51 f4       	brne	.+20     	; 0x1898 <HLCD_init+0x15e>
    1884:	ce 01       	movw	r24, r28
    1886:	87 57       	subi	r24, 0x77	; 119
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    188e:	fe 01       	movw	r30, r28
    1890:	e1 58       	subi	r30, 0x81	; 129
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 83       	st	Z, r24
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    1898:	fe 01       	movw	r30, r28
    189a:	e0 58       	subi	r30, 0x80	; 128
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    18a2:	fe 01       	movw	r30, r28
    18a4:	e3 56       	subi	r30, 0x63	; 99
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	01 90       	ld	r0, Z+
    18aa:	f0 81       	ld	r31, Z
    18ac:	e0 2d       	mov	r30, r0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 23       	and	r24, r24
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <HLCD_init+0x17c>
    18b4:	42 c4       	rjmp	.+2180   	; 0x213a <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    18b6:	fe 01       	movw	r30, r28
    18b8:	e3 56       	subi	r30, 0x63	; 99
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	01 90       	ld	r0, Z+
    18be:	f0 81       	ld	r31, Z
    18c0:	e0 2d       	mov	r30, r0
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	fe 01       	movw	r30, r28
    18c6:	e3 56       	subi	r30, 0x63	; 99
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	01 90       	ld	r0, Z+
    18cc:	f0 81       	ld	r31, Z
    18ce:	e0 2d       	mov	r30, r0
    18d0:	92 85       	ldd	r25, Z+10	; 0x0a
    18d2:	fe 01       	movw	r30, r28
    18d4:	e3 57       	subi	r30, 0x73	; 115
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 83       	st	Z, r24
    18da:	fe 01       	movw	r30, r28
    18dc:	e3 57       	subi	r30, 0x73	; 115
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	fe 01       	movw	r30, r28
    18e4:	e3 57       	subi	r30, 0x73	; 115
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	82 83       	std	Z+2, r24	; 0x02
    18ec:	fe 01       	movw	r30, r28
    18ee:	e3 57       	subi	r30, 0x73	; 115
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    18f4:	fe 01       	movw	r30, r28
    18f6:	e3 56       	subi	r30, 0x63	; 99
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	01 90       	ld	r0, Z+
    18fc:	f0 81       	ld	r31, Z
    18fe:	e0 2d       	mov	r30, r0
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	fe 01       	movw	r30, r28
    1904:	e3 56       	subi	r30, 0x63	; 99
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	01 90       	ld	r0, Z+
    190a:	f0 81       	ld	r31, Z
    190c:	e0 2d       	mov	r30, r0
    190e:	93 85       	ldd	r25, Z+11	; 0x0b
    1910:	fe 01       	movw	r30, r28
    1912:	ef 56       	subi	r30, 0x6F	; 111
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	80 83       	st	Z, r24
    1918:	fe 01       	movw	r30, r28
    191a:	ef 56       	subi	r30, 0x6F	; 111
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	fe 01       	movw	r30, r28
    1922:	ef 56       	subi	r30, 0x6F	; 111
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	82 83       	std	Z+2, r24	; 0x02
    192a:	fe 01       	movw	r30, r28
    192c:	ef 56       	subi	r30, 0x6F	; 111
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1932:	fe 01       	movw	r30, r28
    1934:	e3 56       	subi	r30, 0x63	; 99
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	01 90       	ld	r0, Z+
    193a:	f0 81       	ld	r31, Z
    193c:	e0 2d       	mov	r30, r0
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	fe 01       	movw	r30, r28
    1942:	e3 56       	subi	r30, 0x63	; 99
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	01 90       	ld	r0, Z+
    1948:	f0 81       	ld	r31, Z
    194a:	e0 2d       	mov	r30, r0
    194c:	94 85       	ldd	r25, Z+12	; 0x0c
    194e:	fe 01       	movw	r30, r28
    1950:	eb 56       	subi	r30, 0x6B	; 107
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 83       	st	Z, r24
    1956:	fe 01       	movw	r30, r28
    1958:	eb 56       	subi	r30, 0x6B	; 107
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	fe 01       	movw	r30, r28
    1960:	eb 56       	subi	r30, 0x6B	; 107
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	fe 01       	movw	r30, r28
    196a:	eb 56       	subi	r30, 0x6B	; 107
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1970:	fe 01       	movw	r30, r28
    1972:	e3 56       	subi	r30, 0x63	; 99
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	01 90       	ld	r0, Z+
    1978:	f0 81       	ld	r31, Z
    197a:	e0 2d       	mov	r30, r0
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	fe 01       	movw	r30, r28
    1980:	e3 56       	subi	r30, 0x63	; 99
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	01 90       	ld	r0, Z+
    1986:	f0 81       	ld	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	95 85       	ldd	r25, Z+13	; 0x0d
    198c:	fe 01       	movw	r30, r28
    198e:	e7 56       	subi	r30, 0x67	; 103
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 83       	st	Z, r24
    1994:	fe 01       	movw	r30, r28
    1996:	e7 56       	subi	r30, 0x67	; 103
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	fe 01       	movw	r30, r28
    199e:	e7 56       	subi	r30, 0x67	; 103
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	82 83       	std	Z+2, r24	; 0x02
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 56       	subi	r30, 0x67	; 103
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    19ae:	fe 01       	movw	r30, r28
    19b0:	e1 58       	subi	r30, 0x81	; 129
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	88 23       	and	r24, r24
    19b8:	51 f4       	brne	.+20     	; 0x19ce <HLCD_init+0x294>
    19ba:	ce 01       	movw	r24, r28
    19bc:	83 57       	subi	r24, 0x73	; 115
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 58       	subi	r30, 0x81	; 129
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 83       	st	Z, r24
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    19ce:	fe 01       	movw	r30, r28
    19d0:	e0 58       	subi	r30, 0x80	; 128
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    19d8:	fe 01       	movw	r30, r28
    19da:	e1 58       	subi	r30, 0x81	; 129
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	88 23       	and	r24, r24
    19e2:	51 f4       	brne	.+20     	; 0x19f8 <HLCD_init+0x2be>
    19e4:	ce 01       	movw	r24, r28
    19e6:	8f 56       	subi	r24, 0x6F	; 111
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    19ee:	fe 01       	movw	r30, r28
    19f0:	e1 58       	subi	r30, 0x81	; 129
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 83       	st	Z, r24
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    19f8:	fe 01       	movw	r30, r28
    19fa:	e0 58       	subi	r30, 0x80	; 128
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    1a02:	fe 01       	movw	r30, r28
    1a04:	e1 58       	subi	r30, 0x81	; 129
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 23       	and	r24, r24
    1a0c:	51 f4       	brne	.+20     	; 0x1a22 <HLCD_init+0x2e8>
    1a0e:	ce 01       	movw	r24, r28
    1a10:	8b 56       	subi	r24, 0x6B	; 107
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e1 58       	subi	r30, 0x81	; 129
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 83       	st	Z, r24
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    1a22:	fe 01       	movw	r30, r28
    1a24:	e0 58       	subi	r30, 0x80	; 128
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e1 58       	subi	r30, 0x81	; 129
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	88 23       	and	r24, r24
    1a36:	51 f4       	brne	.+20     	; 0x1a4c <HLCD_init+0x312>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	87 56       	subi	r24, 0x67	; 103
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e1 58       	subi	r30, 0x81	; 129
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 83       	st	Z, r24
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e0 58       	subi	r30, 0x80	; 128
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
    1a56:	fe 01       	movw	r30, r28
    1a58:	e5 58       	subi	r30, 0x85	; 133
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 ef       	ldi	r26, 0xF0	; 240
    1a62:	b1 e4       	ldi	r27, 0x41	; 65
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	09 58       	subi	r16, 0x89	; 137
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	e5 58       	subi	r30, 0x85	; 133
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a ef       	ldi	r20, 0xFA	; 250
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e9 58       	subi	r30, 0x89	; 137
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	44 f4       	brge	.+16     	; 0x1ac8 <HLCD_init+0x38e>
		__ticks = 1;
    1ab8:	fe 01       	movw	r30, r28
    1aba:	eb 58       	subi	r30, 0x8B	; 139
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
    1ac6:	64 c0       	rjmp	.+200    	; 0x1b90 <HLCD_init+0x456>
	else if (__tmp > 65535)
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e9 58       	subi	r30, 0x89	; 137
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	0c f0       	brlt	.+2      	; 0x1ae8 <HLCD_init+0x3ae>
    1ae6:	43 c0       	rjmp	.+134    	; 0x1b6e <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e5 58       	subi	r30, 0x85	; 133
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8e 01       	movw	r16, r28
    1b08:	0b 58       	subi	r16, 0x8B	; 139
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	f8 01       	movw	r30, r16
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	1f c0       	rjmp	.+62     	; 0x1b5e <HLCD_init+0x424>
    1b20:	fe 01       	movw	r30, r28
    1b22:	ed 58       	subi	r30, 0x8D	; 141
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ed 58       	subi	r30, 0x8D	; 141
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <HLCD_init+0x3fe>
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ed 58       	subi	r30, 0x8D	; 141
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	de 01       	movw	r26, r28
    1b48:	ab 58       	subi	r26, 0x8B	; 139
    1b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	eb 58       	subi	r30, 0x8B	; 139
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	11 96       	adiw	r26, 0x01	; 1
    1b5a:	9c 93       	st	X, r25
    1b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	eb 58       	subi	r30, 0x8B	; 139
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	d1 f6       	brne	.-76     	; 0x1b20 <HLCD_init+0x3e6>
    1b6c:	27 c0       	rjmp	.+78     	; 0x1bbc <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	8e 01       	movw	r16, r28
    1b70:	0b 58       	subi	r16, 0x8B	; 139
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	e9 58       	subi	r30, 0x89	; 137
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	de 01       	movw	r26, r28
    1b92:	af 58       	subi	r26, 0x8F	; 143
    1b94:	bf 4f       	sbci	r27, 0xFF	; 255
    1b96:	fe 01       	movw	r30, r28
    1b98:	eb 58       	subi	r30, 0x8B	; 139
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	8d 93       	st	X+, r24
    1ba2:	9c 93       	st	X, r25
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 58       	subi	r30, 0x8F	; 143
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <HLCD_init+0x474>
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ef 58       	subi	r30, 0x8F	; 143
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e3 56       	subi	r30, 0x63	; 99
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	68 e2       	ldi	r22, 0x28	; 40
    1bc8:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e3 59       	subi	r30, 0x93	; 147
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a8 e4       	ldi	r26, 0x48	; 72
    1bd8:	b2 e4       	ldi	r27, 0x42	; 66
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	07 59       	subi	r16, 0x97	; 151
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	e3 59       	subi	r30, 0x93	; 147
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e7 59       	subi	r30, 0x97	; 151
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <HLCD_init+0x504>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e9 59       	subi	r30, 0x99	; 153
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 59       	subi	r30, 0x97	; 151
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <HLCD_init+0x524>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 59       	subi	r30, 0x93	; 147
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	09 59       	subi	r16, 0x99	; 153
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <HLCD_init+0x59a>
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 59       	subi	r30, 0x9B	; 155
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	eb 59       	subi	r30, 0x9B	; 155
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <HLCD_init+0x574>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	eb 59       	subi	r30, 0x9B	; 155
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a9 59       	subi	r26, 0x99	; 153
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e9 59       	subi	r30, 0x99	; 153
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e9 59       	subi	r30, 0x99	; 153
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <HLCD_init+0x55c>
    1ce2:	27 c0       	rjmp	.+78     	; 0x1d32 <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	09 59       	subi	r16, 0x99	; 153
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e7 59       	subi	r30, 0x97	; 151
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	ad 59       	subi	r26, 0x9D	; 157
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e9 59       	subi	r30, 0x99	; 153
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	8d 93       	st	X+, r24
    1d18:	9c 93       	st	X, r25
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 59       	subi	r30, 0x9D	; 157
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <HLCD_init+0x5ea>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 59       	subi	r30, 0x9D	; 157
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    1d32:	fe 01       	movw	r30, r28
    1d34:	e3 56       	subi	r30, 0x63	; 99
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	6f e0       	ldi	r22, 0x0F	; 15
    1d3e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e1 5a       	subi	r30, 0xA1	; 161
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a8 e4       	ldi	r26, 0x48	; 72
    1d4e:	b2 e4       	ldi	r27, 0x42	; 66
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	05 5a       	subi	r16, 0xA5	; 165
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e1 5a       	subi	r30, 0xA1	; 161
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 5a       	subi	r30, 0xA5	; 165
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	44 f4       	brge	.+16     	; 0x1db4 <HLCD_init+0x67a>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	64 c0       	rjmp	.+200    	; 0x1e7c <HLCD_init+0x742>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e5 5a       	subi	r30, 0xA5	; 165
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <HLCD_init+0x69a>
    1dd2:	43 c0       	rjmp	.+134    	; 0x1e5a <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e1 5a       	subi	r30, 0xA1	; 161
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e 01       	movw	r16, r28
    1df4:	07 5a       	subi	r16, 0xA7	; 167
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	1f c0       	rjmp	.+62     	; 0x1e4a <HLCD_init+0x710>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e9 5a       	subi	r30, 0xA9	; 169
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e9 5a       	subi	r30, 0xA9	; 169
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <HLCD_init+0x6ea>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e9 5a       	subi	r30, 0xA9	; 169
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	de 01       	movw	r26, r28
    1e34:	a7 5a       	subi	r26, 0xA7	; 167
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e7 5a       	subi	r30, 0xA7	; 167
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 5a       	subi	r30, 0xA7	; 167
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <HLCD_init+0x6d2>
    1e58:	27 c0       	rjmp	.+78     	; 0x1ea8 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	07 5a       	subi	r16, 0xA7	; 167
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 5a       	subi	r30, 0xA5	; 165
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	de 01       	movw	r26, r28
    1e7e:	ab 5a       	subi	r26, 0xAB	; 171
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	e7 5a       	subi	r30, 0xA7	; 167
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	8d 93       	st	X+, r24
    1e8e:	9c 93       	st	X, r25
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 5a       	subi	r30, 0xAB	; 171
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <HLCD_init+0x760>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	eb 5a       	subi	r30, 0xAB	; 171
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e3 56       	subi	r30, 0x63	; 99
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ef 5a       	subi	r30, 0xAF	; 175
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	80 83       	st	Z, r24
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	8e 01       	movw	r16, r28
    1ed0:	03 5b       	subi	r16, 0xB3	; 179
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ef 5a       	subi	r30, 0xAF	; 175
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4a ef       	ldi	r20, 0xFA	; 250
    1ee8:	54 e4       	ldi	r21, 0x44	; 68
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efc:	fe 01       	movw	r30, r28
    1efe:	e3 5b       	subi	r30, 0xB3	; 179
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	44 f4       	brge	.+16     	; 0x1f2a <HLCD_init+0x7f0>
		__ticks = 1;
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e5 5b       	subi	r30, 0xB5	; 181
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	64 c0       	rjmp	.+200    	; 0x1ff2 <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e3 5b       	subi	r30, 0xB3	; 179
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	0c f0       	brlt	.+2      	; 0x1f4a <HLCD_init+0x810>
    1f48:	43 c0       	rjmp	.+134    	; 0x1fd0 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ef 5a       	subi	r30, 0xAF	; 175
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8e 01       	movw	r16, r28
    1f6a:	05 5b       	subi	r16, 0xB5	; 181
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	1f c0       	rjmp	.+62     	; 0x1fc0 <HLCD_init+0x886>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e7 5b       	subi	r30, 0xB7	; 183
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	88 ec       	ldi	r24, 0xC8	; 200
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 5b       	subi	r30, 0xB7	; 183
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <HLCD_init+0x860>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e7 5b       	subi	r30, 0xB7	; 183
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	de 01       	movw	r26, r28
    1faa:	a5 5b       	subi	r26, 0xB5	; 181
    1fac:	bf 4f       	sbci	r27, 0xFF	; 255
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e5 5b       	subi	r30, 0xB5	; 181
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	9c 93       	st	X, r25
    1fbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e5 5b       	subi	r30, 0xB5	; 181
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	d1 f6       	brne	.-76     	; 0x1f82 <HLCD_init+0x848>
    1fce:	27 c0       	rjmp	.+78     	; 0x201e <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	05 5b       	subi	r16, 0xB5	; 181
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e3 5b       	subi	r30, 0xB3	; 179
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	de 01       	movw	r26, r28
    1ff4:	a9 5b       	subi	r26, 0xB9	; 185
    1ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e5 5b       	subi	r30, 0xB5	; 181
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	8d 93       	st	X+, r24
    2004:	9c 93       	st	X, r25
    2006:	fe 01       	movw	r30, r28
    2008:	e9 5b       	subi	r30, 0xB9	; 185
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <HLCD_init+0x8d6>
    2014:	fe 01       	movw	r30, r28
    2016:	e9 5b       	subi	r30, 0xB9	; 185
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    201e:	fe 01       	movw	r30, r28
    2020:	e3 56       	subi	r30, 0x63	; 99
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	66 e0       	ldi	r22, 0x06	; 6
    202a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    202e:	fe 01       	movw	r30, r28
    2030:	ed 5b       	subi	r30, 0xBD	; 189
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a8 e4       	ldi	r26, 0x48	; 72
    203a:	b2 e4       	ldi	r27, 0x42	; 66
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	a2 83       	std	Z+2, r26	; 0x02
    2042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	8e 01       	movw	r16, r28
    2046:	01 5c       	subi	r16, 0xC1	; 193
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	ed 5b       	subi	r30, 0xBD	; 189
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	f8 01       	movw	r30, r16
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2072:	fe 01       	movw	r30, r28
    2074:	ff 96       	adiw	r30, 0x3f	; 63
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <HLCD_init+0x95e>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9e af       	std	Y+62, r25	; 0x3e
    2094:	8d af       	std	Y+61, r24	; 0x3d
    2096:	46 c0       	rjmp	.+140    	; 0x2124 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    2098:	fe 01       	movw	r30, r28
    209a:	ff 96       	adiw	r30, 0x3f	; 63
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	64 f5       	brge	.+88     	; 0x210c <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5b       	subi	r30, 0xBD	; 189
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e af       	std	Y+62, r25	; 0x3e
    20e0:	8d af       	std	Y+61, r24	; 0x3d
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <HLCD_init+0x9c8>
    20e4:	88 ec       	ldi	r24, 0xC8	; 200
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9c af       	std	Y+60, r25	; 0x3c
    20ea:	8b af       	std	Y+59, r24	; 0x3b
    20ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <HLCD_init+0x9b6>
    20f4:	9c af       	std	Y+60, r25	; 0x3c
    20f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9e af       	std	Y+62, r25	; 0x3e
    2100:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8d ad       	ldd	r24, Y+61	; 0x3d
    2104:	9e ad       	ldd	r25, Y+62	; 0x3e
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <HLCD_init+0x9aa>
    210a:	58 c2       	rjmp	.+1200   	; 0x25bc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	fe 01       	movw	r30, r28
    210e:	ff 96       	adiw	r30, 0x3f	; 63
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e af       	std	Y+62, r25	; 0x3e
    2122:	8d af       	std	Y+61, r24	; 0x3d
    2124:	8d ad       	ldd	r24, Y+61	; 0x3d
    2126:	9e ad       	ldd	r25, Y+62	; 0x3e
    2128:	9a af       	std	Y+58, r25	; 0x3a
    212a:	89 af       	std	Y+57, r24	; 0x39
    212c:	89 ad       	ldd	r24, Y+57	; 0x39
    212e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <HLCD_init+0x9f6>
    2134:	9a af       	std	Y+58, r25	; 0x3a
    2136:	89 af       	std	Y+57, r24	; 0x39
    2138:	41 c2       	rjmp	.+1154   	; 0x25bc <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    213a:	fe 01       	movw	r30, r28
    213c:	e3 56       	subi	r30, 0x63	; 99
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	01 90       	ld	r0, Z+
    2142:	f0 81       	ld	r31, Z
    2144:	e0 2d       	mov	r30, r0
    2146:	80 81       	ld	r24, Z
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	09 f0       	breq	.+2      	; 0x214e <HLCD_init+0xa14>
    214c:	2c c2       	rjmp	.+1112   	; 0x25a6 <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    214e:	fe 01       	movw	r30, r28
    2150:	e1 58       	subi	r30, 0x81	; 129
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	81 f4       	brne	.+32     	; 0x217a <HLCD_init+0xa40>
    215a:	fe 01       	movw	r30, r28
    215c:	e3 56       	subi	r30, 0x63	; 99
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	01 90       	ld	r0, Z+
    2162:	f0 81       	ld	r31, Z
    2164:	e0 2d       	mov	r30, r0
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <GPIO_initPort>
    2170:	fe 01       	movw	r30, r28
    2172:	e1 58       	subi	r30, 0x81	; 129
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 83       	st	Z, r24
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    217a:	fe 01       	movw	r30, r28
    217c:	e0 58       	subi	r30, 0x80	; 128
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 83       	st	Z, r24
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e8       	ldi	r26, 0x80	; 128
    218a:	bf e3       	ldi	r27, 0x3F	; 63
    218c:	8d ab       	std	Y+53, r24	; 0x35
    218e:	9e ab       	std	Y+54, r25	; 0x36
    2190:	af ab       	std	Y+55, r26	; 0x37
    2192:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6d a9       	ldd	r22, Y+53	; 0x35
    2196:	7e a9       	ldd	r23, Y+54	; 0x36
    2198:	8f a9       	ldd	r24, Y+55	; 0x37
    219a:	98 ad       	ldd	r25, Y+56	; 0x38
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	89 ab       	std	Y+49, r24	; 0x31
    21ae:	9a ab       	std	Y+50, r25	; 0x32
    21b0:	ab ab       	std	Y+51, r26	; 0x33
    21b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b4:	69 a9       	ldd	r22, Y+49	; 0x31
    21b6:	7a a9       	ldd	r23, Y+50	; 0x32
    21b8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ba:	9c a9       	ldd	r25, Y+52	; 0x34
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <HLCD_init+0xa9c>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    21d6:	69 a9       	ldd	r22, Y+49	; 0x31
    21d8:	7a a9       	ldd	r23, Y+50	; 0x32
    21da:	8b a9       	ldd	r24, Y+51	; 0x33
    21dc:	9c a9       	ldd	r25, Y+52	; 0x34
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6d a9       	ldd	r22, Y+53	; 0x35
    21f0:	7e a9       	ldd	r23, Y+54	; 0x36
    21f2:	8f a9       	ldd	r24, Y+55	; 0x37
    21f4:	98 ad       	ldd	r25, Y+56	; 0x38
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	98 ab       	std	Y+48, r25	; 0x30
    2214:	8f a7       	std	Y+47, r24	; 0x2f
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <HLCD_init+0xafc>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e a7       	std	Y+46, r25	; 0x2e
    221e:	8d a7       	std	Y+45, r24	; 0x2d
    2220:	8d a5       	ldd	r24, Y+45	; 0x2d
    2222:	9e a5       	ldd	r25, Y+46	; 0x2e
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <HLCD_init+0xaea>
    2228:	9e a7       	std	Y+46, r25	; 0x2e
    222a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8f a5       	ldd	r24, Y+47	; 0x2f
    222e:	98 a9       	ldd	r25, Y+48	; 0x30
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	98 ab       	std	Y+48, r25	; 0x30
    2234:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <HLCD_init+0xade>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	69 a9       	ldd	r22, Y+49	; 0x31
    2242:	7a a9       	ldd	r23, Y+50	; 0x32
    2244:	8b a9       	ldd	r24, Y+51	; 0x33
    2246:	9c a9       	ldd	r25, Y+52	; 0x34
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	98 ab       	std	Y+48, r25	; 0x30
    2252:	8f a7       	std	Y+47, r24	; 0x2f
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	9c a7       	std	Y+44, r25	; 0x2c
    225a:	8b a7       	std	Y+43, r24	; 0x2b
    225c:	8b a5       	ldd	r24, Y+43	; 0x2b
    225e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <HLCD_init+0xb26>
    2264:	9c a7       	std	Y+44, r25	; 0x2c
    2266:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    2268:	fe 01       	movw	r30, r28
    226a:	e1 58       	subi	r30, 0x81	; 129
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	88 23       	and	r24, r24
    2272:	69 f4       	brne	.+26     	; 0x228e <HLCD_init+0xb54>
    2274:	fe 01       	movw	r30, r28
    2276:	e3 56       	subi	r30, 0x63	; 99
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	68 e3       	ldi	r22, 0x38	; 56
    2280:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    2284:	fe 01       	movw	r30, r28
    2286:	e0 58       	subi	r30, 0x80	; 128
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 83       	st	Z, r24
    228c:	05 c0       	rjmp	.+10     	; 0x2298 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    228e:	fe 01       	movw	r30, r28
    2290:	e0 58       	subi	r30, 0x80	; 128
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 83       	st	Z, r24
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e8       	ldi	r26, 0x80	; 128
    229e:	bf e3       	ldi	r27, 0x3F	; 63
    22a0:	8f a3       	std	Y+39, r24	; 0x27
    22a2:	98 a7       	std	Y+40, r25	; 0x28
    22a4:	a9 a7       	std	Y+41, r26	; 0x29
    22a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	6f a1       	ldd	r22, Y+39	; 0x27
    22aa:	78 a5       	ldd	r23, Y+40	; 0x28
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a ef       	ldi	r20, 0xFA	; 250
    22b6:	54 e4       	ldi	r21, 0x44	; 68
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8b a3       	std	Y+35, r24	; 0x23
    22c2:	9c a3       	std	Y+36, r25	; 0x24
    22c4:	ad a3       	std	Y+37, r26	; 0x25
    22c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22c8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ca:	7c a1       	ldd	r23, Y+36	; 0x24
    22cc:	8d a1       	ldd	r24, Y+37	; 0x25
    22ce:	9e a1       	ldd	r25, Y+38	; 0x26
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <HLCD_init+0xbb0>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	89 a3       	std	Y+33, r24	; 0x21
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	6f a1       	ldd	r22, Y+39	; 0x27
    2304:	78 a5       	ldd	r23, Y+40	; 0x28
    2306:	89 a5       	ldd	r24, Y+41	; 0x29
    2308:	9a a5       	ldd	r25, Y+42	; 0x2a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9a a3       	std	Y+34, r25	; 0x22
    2328:	89 a3       	std	Y+33, r24	; 0x21
    232a:	0f c0       	rjmp	.+30     	; 0x234a <HLCD_init+0xc10>
    232c:	88 ec       	ldi	r24, 0xC8	; 200
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	98 a3       	std	Y+32, r25	; 0x20
    2332:	8f 8f       	std	Y+31, r24	; 0x1f
    2334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2336:	98 a1       	ldd	r25, Y+32	; 0x20
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <HLCD_init+0xbfe>
    233c:	98 a3       	std	Y+32, r25	; 0x20
    233e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	89 a1       	ldd	r24, Y+33	; 0x21
    234c:	9a a1       	ldd	r25, Y+34	; 0x22
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <HLCD_init+0xbf2>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	9e 8f       	std	Y+30, r25	; 0x1e
    236e:	8d 8f       	std	Y+29, r24	; 0x1d
    2370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <HLCD_init+0xc3a>
    2378:	9e 8f       	std	Y+30, r25	; 0x1e
    237a:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    237c:	fe 01       	movw	r30, r28
    237e:	e0 58       	subi	r30, 0x80	; 128
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	88 23       	and	r24, r24
    2386:	69 f4       	brne	.+26     	; 0x23a2 <HLCD_init+0xc68>
    2388:	fe 01       	movw	r30, r28
    238a:	e3 56       	subi	r30, 0x63	; 99
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	6e e0       	ldi	r22, 0x0E	; 14
    2394:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    2398:	fe 01       	movw	r30, r28
    239a:	e0 58       	subi	r30, 0x80	; 128
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 83       	st	Z, r24
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    23a2:	fe 01       	movw	r30, r28
    23a4:	e0 58       	subi	r30, 0x80	; 128
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 83       	st	Z, r24
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a0 e8       	ldi	r26, 0x80	; 128
    23b2:	bf e3       	ldi	r27, 0x3F	; 63
    23b4:	89 8f       	std	Y+25, r24	; 0x19
    23b6:	9a 8f       	std	Y+26, r25	; 0x1a
    23b8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	69 8d       	ldd	r22, Y+25	; 0x19
    23be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a ef       	ldi	r20, 0xFA	; 250
    23ca:	54 e4       	ldi	r21, 0x44	; 68
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8d 8b       	std	Y+21, r24	; 0x15
    23d6:	9e 8b       	std	Y+22, r25	; 0x16
    23d8:	af 8b       	std	Y+23, r26	; 0x17
    23da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	2c f4       	brge	.+10     	; 0x23fe <HLCD_init+0xcc4>
		__ticks = 1;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	3f c0       	rjmp	.+126    	; 0x247c <HLCD_init+0xd42>
	else if (__tmp > 65535)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	4c f5       	brge	.+82     	; 0x2468 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	0f c0       	rjmp	.+30     	; 0x245e <HLCD_init+0xd24>
    2440:	88 ec       	ldi	r24, 0xC8	; 200
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <HLCD_init+0xd12>
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	69 f7       	brne	.-38     	; 0x2440 <HLCD_init+0xd06>
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	98 89       	ldd	r25, Y+16	; 0x10
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <HLCD_init+0xd4e>
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    2490:	fe 01       	movw	r30, r28
    2492:	e0 58       	subi	r30, 0x80	; 128
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	88 23       	and	r24, r24
    249a:	69 f4       	brne	.+26     	; 0x24b6 <HLCD_init+0xd7c>
    249c:	fe 01       	movw	r30, r28
    249e:	e3 56       	subi	r30, 0x63	; 99
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    24ac:	fe 01       	movw	r30, r28
    24ae:	e0 58       	subi	r30, 0x80	; 128
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 83       	st	Z, r24
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    24b6:	fe 01       	movw	r30, r28
    24b8:	e0 58       	subi	r30, 0x80	; 128
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 83       	st	Z, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e8       	ldi	r26, 0x80	; 128
    24c6:	bf e3       	ldi	r27, 0x3F	; 63
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	9c 87       	std	Y+12, r25	; 0x0c
    24cc:	ad 87       	std	Y+13, r26	; 0x0d
    24ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8f 83       	std	Y+7, r24	; 0x07
    24ea:	98 87       	std	Y+8, r25	; 0x08
    24ec:	a9 87       	std	Y+9, r26	; 0x09
    24ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <HLCD_init+0xdd8>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <HLCD_init+0xe38>
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <HLCD_init+0xe26>
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <HLCD_init+0xe1a>
    257a:	20 c0       	rjmp	.+64     	; 0x25bc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <HLCD_init+0xe62>
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	0b c0       	rjmp	.+22     	; 0x25bc <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    25a6:	fe 01       	movw	r30, r28
    25a8:	e0 58       	subi	r30, 0x80	; 128
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	80 83       	st	Z, r24
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    25b2:	fe 01       	movw	r30, r28
    25b4:	e0 58       	subi	r30, 0x80	; 128
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	80 83       	st	Z, r24
	}

	return lcdRet;
    25bc:	fe 01       	movw	r30, r28
    25be:	e0 58       	subi	r30, 0x80	; 128
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
}
    25c4:	c2 56       	subi	r28, 0x62	; 98
    25c6:	df 4f       	sbci	r29, 0xFF	; 255
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	08 95       	ret

000025dc <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	cd 59       	subi	r28, 0x9D	; 157
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	fe 01       	movw	r30, r28
    25f8:	e5 56       	subi	r30, 0x65	; 101
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	fe 01       	movw	r30, r28
    2602:	e3 56       	subi	r30, 0x63	; 99
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2608:	fe 01       	movw	r30, r28
    260a:	e2 57       	subi	r30, 0x72	; 114
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2612:	fe 01       	movw	r30, r28
    2614:	e3 57       	subi	r30, 0x73	; 115
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    261c:	fe 01       	movw	r30, r28
    261e:	e5 56       	subi	r30, 0x65	; 101
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f4       	brne	.+2      	; 0x262c <HLCD_sendCmd+0x50>
    262a:	2f c7       	rjmp	.+3678   	; 0x348a <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    262c:	fe 01       	movw	r30, r28
    262e:	e5 56       	subi	r30, 0x65	; 101
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	01 90       	ld	r0, Z+
    2634:	f0 81       	ld	r31, Z
    2636:	e0 2d       	mov	r30, r0
    2638:	81 81       	ldd	r24, Z+1	; 0x01
    263a:	fe 01       	movw	r30, r28
    263c:	e5 56       	subi	r30, 0x65	; 101
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	01 90       	ld	r0, Z+
    2642:	f0 81       	ld	r31, Z
    2644:	e0 2d       	mov	r30, r0
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	fe 01       	movw	r30, r28
    264a:	e1 57       	subi	r30, 0x71	; 113
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 83       	st	Z, r24
    2650:	fe 01       	movw	r30, r28
    2652:	e1 57       	subi	r30, 0x71	; 113
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	fe 01       	movw	r30, r28
    265a:	e1 57       	subi	r30, 0x71	; 113
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	82 83       	std	Z+2, r24	; 0x02
    2662:	fe 01       	movw	r30, r28
    2664:	e1 57       	subi	r30, 0x71	; 113
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    266a:	fe 01       	movw	r30, r28
    266c:	e5 56       	subi	r30, 0x65	; 101
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	01 90       	ld	r0, Z+
    2672:	f0 81       	ld	r31, Z
    2674:	e0 2d       	mov	r30, r0
    2676:	81 81       	ldd	r24, Z+1	; 0x01
    2678:	fe 01       	movw	r30, r28
    267a:	e5 56       	subi	r30, 0x65	; 101
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	01 90       	ld	r0, Z+
    2680:	f0 81       	ld	r31, Z
    2682:	e0 2d       	mov	r30, r0
    2684:	94 81       	ldd	r25, Z+4	; 0x04
    2686:	fe 01       	movw	r30, r28
    2688:	ed 56       	subi	r30, 0x6D	; 109
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 83       	st	Z, r24
    268e:	fe 01       	movw	r30, r28
    2690:	ed 56       	subi	r30, 0x6D	; 109
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	fe 01       	movw	r30, r28
    2698:	ed 56       	subi	r30, 0x6D	; 109
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	82 83       	std	Z+2, r24	; 0x02
    26a0:	fe 01       	movw	r30, r28
    26a2:	ed 56       	subi	r30, 0x6D	; 109
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    26a8:	fe 01       	movw	r30, r28
    26aa:	e5 56       	subi	r30, 0x65	; 101
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	01 90       	ld	r0, Z+
    26b0:	f0 81       	ld	r31, Z
    26b2:	e0 2d       	mov	r30, r0
    26b4:	81 81       	ldd	r24, Z+1	; 0x01
    26b6:	fe 01       	movw	r30, r28
    26b8:	e5 56       	subi	r30, 0x65	; 101
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	01 90       	ld	r0, Z+
    26be:	f0 81       	ld	r31, Z
    26c0:	e0 2d       	mov	r30, r0
    26c2:	95 81       	ldd	r25, Z+5	; 0x05
    26c4:	fe 01       	movw	r30, r28
    26c6:	e9 56       	subi	r30, 0x69	; 105
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 83       	st	Z, r24
    26cc:	fe 01       	movw	r30, r28
    26ce:	e9 56       	subi	r30, 0x69	; 105
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 56       	subi	r30, 0x69	; 105
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	82 83       	std	Z+2, r24	; 0x02
    26de:	fe 01       	movw	r30, r28
    26e0:	e9 56       	subi	r30, 0x69	; 105
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    26e6:	ce 01       	movw	r24, r28
    26e8:	81 57       	subi	r24, 0x71	; 113
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    26f2:	fe 01       	movw	r30, r28
    26f4:	e3 57       	subi	r30, 0x73	; 115
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    26fa:	fe 01       	movw	r30, r28
    26fc:	e3 57       	subi	r30, 0x73	; 115
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	88 23       	and	r24, r24
    2704:	59 f4       	brne	.+22     	; 0x271c <HLCD_sendCmd+0x140>
    2706:	ce 01       	movw	r24, r28
    2708:	8d 56       	subi	r24, 0x6D	; 109
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2712:	fe 01       	movw	r30, r28
    2714:	e3 57       	subi	r30, 0x73	; 115
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 83       	st	Z, r24
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    271c:	fe 01       	movw	r30, r28
    271e:	e2 57       	subi	r30, 0x72	; 114
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	80 83       	st	Z, r24
    2726:	fe 01       	movw	r30, r28
    2728:	e7 57       	subi	r30, 0x77	; 119
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 ef       	ldi	r26, 0xF0	; 240
    2732:	b1 e4       	ldi	r27, 0x41	; 65
    2734:	80 83       	st	Z, r24
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	a2 83       	std	Z+2, r26	; 0x02
    273a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	8e 01       	movw	r16, r28
    273e:	0b 57       	subi	r16, 0x7B	; 123
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e7 57       	subi	r30, 0x77	; 119
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	4a ef       	ldi	r20, 0xFA	; 250
    2756:	54 e4       	ldi	r21, 0x44	; 68
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	f8 01       	movw	r30, r16
    2762:	80 83       	st	Z, r24
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	a2 83       	std	Z+2, r26	; 0x02
    2768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    276a:	fe 01       	movw	r30, r28
    276c:	eb 57       	subi	r30, 0x7B	; 123
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	44 f4       	brge	.+16     	; 0x2798 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    2788:	fe 01       	movw	r30, r28
    278a:	ed 57       	subi	r30, 0x7D	; 125
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	64 c0       	rjmp	.+200    	; 0x2860 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    2798:	fe 01       	movw	r30, r28
    279a:	eb 57       	subi	r30, 0x7B	; 123
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <HLCD_sendCmd+0x1dc>
    27b6:	43 c0       	rjmp	.+134    	; 0x283e <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 57       	subi	r30, 0x77	; 119
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8e 01       	movw	r16, r28
    27d8:	0d 57       	subi	r16, 0x7D	; 125
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	1f c0       	rjmp	.+62     	; 0x282e <HLCD_sendCmd+0x252>
    27f0:	fe 01       	movw	r30, r28
    27f2:	ef 57       	subi	r30, 0x7F	; 127
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	fe 01       	movw	r30, r28
    2800:	ef 57       	subi	r30, 0x7F	; 127
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <HLCD_sendCmd+0x22c>
    280c:	fe 01       	movw	r30, r28
    280e:	ef 57       	subi	r30, 0x7F	; 127
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	de 01       	movw	r26, r28
    2818:	ad 57       	subi	r26, 0x7D	; 125
    281a:	bf 4f       	sbci	r27, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	ed 57       	subi	r30, 0x7D	; 125
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	11 96       	adiw	r26, 0x01	; 1
    282a:	9c 93       	st	X, r25
    282c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	fe 01       	movw	r30, r28
    2830:	ed 57       	subi	r30, 0x7D	; 125
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	d1 f6       	brne	.-76     	; 0x27f0 <HLCD_sendCmd+0x214>
    283c:	28 c0       	rjmp	.+80     	; 0x288e <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	8e 01       	movw	r16, r28
    2840:	0d 57       	subi	r16, 0x7D	; 125
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	eb 57       	subi	r30, 0x7B	; 123
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	de 01       	movw	r26, r28
    2862:	a1 58       	subi	r26, 0x81	; 129
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	ed 57       	subi	r30, 0x7D	; 125
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	9c 93       	st	X, r25
    2874:	8e 93       	st	-X, r24
    2876:	fe 01       	movw	r30, r28
    2878:	e1 58       	subi	r30, 0x81	; 129
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <HLCD_sendCmd+0x2a4>
    2884:	fe 01       	movw	r30, r28
    2886:	e1 58       	subi	r30, 0x81	; 129
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    288e:	fe 01       	movw	r30, r28
    2890:	e5 56       	subi	r30, 0x65	; 101
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	01 90       	ld	r0, Z+
    2896:	f0 81       	ld	r31, Z
    2898:	e0 2d       	mov	r30, r0
    289a:	80 81       	ld	r24, Z
    289c:	88 23       	and	r24, r24
    289e:	09 f0       	breq	.+2      	; 0x28a2 <HLCD_sendCmd+0x2c6>
    28a0:	3d c4       	rjmp	.+2170   	; 0x311c <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 57       	subi	r30, 0x73	; 115
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	88 23       	and	r24, r24
    28ac:	59 f4       	brne	.+22     	; 0x28c4 <HLCD_sendCmd+0x2e8>
    28ae:	ce 01       	movw	r24, r28
    28b0:	89 56       	subi	r24, 0x69	; 105
    28b2:	9f 4f       	sbci	r25, 0xFF	; 255
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    28ba:	fe 01       	movw	r30, r28
    28bc:	e3 57       	subi	r30, 0x73	; 115
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 83       	st	Z, r24
    28c2:	05 c0       	rjmp	.+10     	; 0x28ce <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    28c4:	fe 01       	movw	r30, r28
    28c6:	e2 57       	subi	r30, 0x72	; 114
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 83       	st	Z, r24
    28ce:	fe 01       	movw	r30, r28
    28d0:	e5 58       	subi	r30, 0x85	; 133
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a8 e4       	ldi	r26, 0x48	; 72
    28da:	b2 e4       	ldi	r27, 0x42	; 66
    28dc:	80 83       	st	Z, r24
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	a2 83       	std	Z+2, r26	; 0x02
    28e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	8e 01       	movw	r16, r28
    28e6:	09 58       	subi	r16, 0x89	; 137
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	e5 58       	subi	r30, 0x85	; 133
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a ef       	ldi	r20, 0xFA	; 250
    28fe:	54 e4       	ldi	r21, 0x44	; 68
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2912:	fe 01       	movw	r30, r28
    2914:	e9 58       	subi	r30, 0x89	; 137
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	44 f4       	brge	.+16     	; 0x2940 <HLCD_sendCmd+0x364>
		__ticks = 1;
    2930:	fe 01       	movw	r30, r28
    2932:	eb 58       	subi	r30, 0x8B	; 139
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	64 c0       	rjmp	.+200    	; 0x2a08 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    2940:	fe 01       	movw	r30, r28
    2942:	e9 58       	subi	r30, 0x89	; 137
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	0c f0       	brlt	.+2      	; 0x2960 <HLCD_sendCmd+0x384>
    295e:	43 c0       	rjmp	.+134    	; 0x29e6 <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	fe 01       	movw	r30, r28
    2962:	e5 58       	subi	r30, 0x85	; 133
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8e 01       	movw	r16, r28
    2980:	0b 58       	subi	r16, 0x8B	; 139
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	f8 01       	movw	r30, r16
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
    2996:	1f c0       	rjmp	.+62     	; 0x29d6 <HLCD_sendCmd+0x3fa>
    2998:	fe 01       	movw	r30, r28
    299a:	ed 58       	subi	r30, 0x8D	; 141
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	fe 01       	movw	r30, r28
    29a8:	ed 58       	subi	r30, 0x8D	; 141
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <HLCD_sendCmd+0x3d4>
    29b4:	fe 01       	movw	r30, r28
    29b6:	ed 58       	subi	r30, 0x8D	; 141
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	de 01       	movw	r26, r28
    29c0:	ab 58       	subi	r26, 0x8B	; 139
    29c2:	bf 4f       	sbci	r27, 0xFF	; 255
    29c4:	fe 01       	movw	r30, r28
    29c6:	eb 58       	subi	r30, 0x8B	; 139
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	9c 93       	st	X, r25
    29d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	fe 01       	movw	r30, r28
    29d8:	eb 58       	subi	r30, 0x8B	; 139
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	d1 f6       	brne	.-76     	; 0x2998 <HLCD_sendCmd+0x3bc>
    29e4:	27 c0       	rjmp	.+78     	; 0x2a34 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	8e 01       	movw	r16, r28
    29e8:	0b 58       	subi	r16, 0x8B	; 139
    29ea:	1f 4f       	sbci	r17, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	e9 58       	subi	r30, 0x89	; 137
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	de 01       	movw	r26, r28
    2a0a:	af 58       	subi	r26, 0x8F	; 143
    2a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	eb 58       	subi	r30, 0x8B	; 139
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	8d 93       	st	X+, r24
    2a1a:	9c 93       	st	X, r25
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ef 58       	subi	r30, 0x8F	; 143
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <HLCD_sendCmd+0x44a>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ef 58       	subi	r30, 0x8F	; 143
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    2a34:	fe 01       	movw	r30, r28
    2a36:	e5 56       	subi	r30, 0x65	; 101
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	01 90       	ld	r0, Z+
    2a3c:	f0 81       	ld	r31, Z
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	22 81       	ldd	r18, Z+2	; 0x02
    2a42:	fe 01       	movw	r30, r28
    2a44:	e3 56       	subi	r30, 0x63	; 99
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	92 95       	swap	r25
    2a4e:	9f 70       	andi	r25, 0x0F	; 15
    2a50:	82 2f       	mov	r24, r18
    2a52:	69 2f       	mov	r22, r25
    2a54:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e3 59       	subi	r30, 0x93	; 147
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a8 e4       	ldi	r26, 0x48	; 72
    2a64:	b2 e4       	ldi	r27, 0x42	; 66
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	07 59       	subi	r16, 0x97	; 151
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e3 59       	subi	r30, 0x93	; 147
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a ef       	ldi	r20, 0xFA	; 250
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e7 59       	subi	r30, 0x97	; 151
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	44 f4       	brge	.+16     	; 0x2aca <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    2aba:	fe 01       	movw	r30, r28
    2abc:	e9 59       	subi	r30, 0x99	; 153
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	64 c0       	rjmp	.+200    	; 0x2b92 <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 59       	subi	r30, 0x97	; 151
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	0c f0       	brlt	.+2      	; 0x2aea <HLCD_sendCmd+0x50e>
    2ae8:	43 c0       	rjmp	.+134    	; 0x2b70 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aea:	fe 01       	movw	r30, r28
    2aec:	e3 59       	subi	r30, 0x93	; 147
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8e 01       	movw	r16, r28
    2b0a:	09 59       	subi	r16, 0x99	; 153
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
    2b20:	1f c0       	rjmp	.+62     	; 0x2b60 <HLCD_sendCmd+0x584>
    2b22:	fe 01       	movw	r30, r28
    2b24:	eb 59       	subi	r30, 0x9B	; 155
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	88 ec       	ldi	r24, 0xC8	; 200
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24
    2b30:	fe 01       	movw	r30, r28
    2b32:	eb 59       	subi	r30, 0x9B	; 155
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <HLCD_sendCmd+0x55e>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	eb 59       	subi	r30, 0x9B	; 155
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	de 01       	movw	r26, r28
    2b4a:	a9 59       	subi	r26, 0x99	; 153
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 59       	subi	r30, 0x99	; 153
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	9c 93       	st	X, r25
    2b5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	fe 01       	movw	r30, r28
    2b62:	e9 59       	subi	r30, 0x99	; 153
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	d1 f6       	brne	.-76     	; 0x2b22 <HLCD_sendCmd+0x546>
    2b6e:	28 c0       	rjmp	.+80     	; 0x2bc0 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	8e 01       	movw	r16, r28
    2b72:	09 59       	subi	r16, 0x99	; 153
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 59       	subi	r30, 0x97	; 151
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	de 01       	movw	r26, r28
    2b94:	ad 59       	subi	r26, 0x9D	; 157
    2b96:	bf 4f       	sbci	r27, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e9 59       	subi	r30, 0x99	; 153
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	11 96       	adiw	r26, 0x01	; 1
    2ba4:	9c 93       	st	X, r25
    2ba6:	8e 93       	st	-X, r24
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ed 59       	subi	r30, 0x9D	; 157
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <HLCD_sendCmd+0x5d6>
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 59       	subi	r30, 0x9D	; 157
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e3 57       	subi	r30, 0x73	; 115
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 23       	and	r24, r24
    2bca:	59 f4       	brne	.+22     	; 0x2be2 <HLCD_sendCmd+0x606>
    2bcc:	ce 01       	movw	r24, r28
    2bce:	89 56       	subi	r24, 0x69	; 105
    2bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 57       	subi	r30, 0x73	; 115
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 83       	st	Z, r24
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    2be2:	fe 01       	movw	r30, r28
    2be4:	e2 57       	subi	r30, 0x72	; 114
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 83       	st	Z, r24
    2bec:	fe 01       	movw	r30, r28
    2bee:	e1 5a       	subi	r30, 0xA1	; 161
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a8 e4       	ldi	r26, 0x48	; 72
    2bf8:	b2 e4       	ldi	r27, 0x42	; 66
    2bfa:	80 83       	st	Z, r24
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	a2 83       	std	Z+2, r26	; 0x02
    2c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	8e 01       	movw	r16, r28
    2c04:	05 5a       	subi	r16, 0xA5	; 165
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e1 5a       	subi	r30, 0xA1	; 161
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	4a ef       	ldi	r20, 0xFA	; 250
    2c1c:	54 e4       	ldi	r21, 0x44	; 68
    2c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c30:	fe 01       	movw	r30, r28
    2c32:	e5 5a       	subi	r30, 0xA5	; 165
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	44 f4       	brge	.+16     	; 0x2c5e <HLCD_sendCmd+0x682>
		__ticks = 1;
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e7 5a       	subi	r30, 0xA7	; 167
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	80 83       	st	Z, r24
    2c5c:	64 c0       	rjmp	.+200    	; 0x2d26 <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e5 5a       	subi	r30, 0xA5	; 165
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	3f ef       	ldi	r19, 0xFF	; 255
    2c70:	4f e7       	ldi	r20, 0x7F	; 127
    2c72:	57 e4       	ldi	r21, 0x47	; 71
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c78:	18 16       	cp	r1, r24
    2c7a:	0c f0       	brlt	.+2      	; 0x2c7e <HLCD_sendCmd+0x6a2>
    2c7c:	43 c0       	rjmp	.+134    	; 0x2d04 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e1 5a       	subi	r30, 0xA1	; 161
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8e 01       	movw	r16, r28
    2c9e:	07 5a       	subi	r16, 0xA7	; 167
    2ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	1f c0       	rjmp	.+62     	; 0x2cf4 <HLCD_sendCmd+0x718>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e9 5a       	subi	r30, 0xA9	; 169
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e9 5a       	subi	r30, 0xA9	; 169
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <HLCD_sendCmd+0x6f2>
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 5a       	subi	r30, 0xA9	; 169
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	de 01       	movw	r26, r28
    2cde:	a7 5a       	subi	r26, 0xA7	; 167
    2ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e7 5a       	subi	r30, 0xA7	; 167
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	11 96       	adiw	r26, 0x01	; 1
    2cf0:	9c 93       	st	X, r25
    2cf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e7 5a       	subi	r30, 0xA7	; 167
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	d1 f6       	brne	.-76     	; 0x2cb6 <HLCD_sendCmd+0x6da>
    2d02:	28 c0       	rjmp	.+80     	; 0x2d54 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	8e 01       	movw	r16, r28
    2d06:	07 5a       	subi	r16, 0xA7	; 167
    2d08:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e5 5a       	subi	r30, 0xA5	; 165
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	f8 01       	movw	r30, r16
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	de 01       	movw	r26, r28
    2d28:	ab 5a       	subi	r26, 0xAB	; 171
    2d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e7 5a       	subi	r30, 0xA7	; 167
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	11 96       	adiw	r26, 0x01	; 1
    2d38:	9c 93       	st	X, r25
    2d3a:	8e 93       	st	-X, r24
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	eb 5a       	subi	r30, 0xAB	; 171
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <HLCD_sendCmd+0x76a>
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	eb 5a       	subi	r30, 0xAB	; 171
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2d54:	fe 01       	movw	r30, r28
    2d56:	e3 57       	subi	r30, 0x73	; 115
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	88 23       	and	r24, r24
    2d5e:	59 f4       	brne	.+22     	; 0x2d76 <HLCD_sendCmd+0x79a>
    2d60:	ce 01       	movw	r24, r28
    2d62:	89 56       	subi	r24, 0x69	; 105
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e3 57       	subi	r30, 0x73	; 115
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 83       	st	Z, r24
    2d74:	05 c0       	rjmp	.+10     	; 0x2d80 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    2d76:	fe 01       	movw	r30, r28
    2d78:	e2 57       	subi	r30, 0x72	; 114
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	80 83       	st	Z, r24
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 5a       	subi	r30, 0xAF	; 175
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a8 e4       	ldi	r26, 0x48	; 72
    2d8c:	b2 e4       	ldi	r27, 0x42	; 66
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	03 5b       	subi	r16, 0xB3	; 179
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ef 5a       	subi	r30, 0xAF	; 175
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e3 5b       	subi	r30, 0xB3	; 179
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <HLCD_sendCmd+0x816>
		__ticks = 1;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e5 5b       	subi	r30, 0xB5	; 181
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	64 c0       	rjmp	.+200    	; 0x2eba <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e3 5b       	subi	r30, 0xB3	; 179
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <HLCD_sendCmd+0x836>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	ef 5a       	subi	r30, 0xAF	; 175
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 01       	movw	r16, r28
    2e32:	05 5b       	subi	r16, 0xB5	; 181
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <HLCD_sendCmd+0x8ac>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 5b       	subi	r30, 0xB7	; 183
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5b       	subi	r30, 0xB7	; 183
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <HLCD_sendCmd+0x886>
    2e66:	fe 01       	movw	r30, r28
    2e68:	e7 5b       	subi	r30, 0xB7	; 183
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	de 01       	movw	r26, r28
    2e72:	a5 5b       	subi	r26, 0xB5	; 181
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	e5 5b       	subi	r30, 0xB5	; 181
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	9c 93       	st	X, r25
    2e86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5b       	subi	r30, 0xB5	; 181
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <HLCD_sendCmd+0x86e>
    2e96:	27 c0       	rjmp	.+78     	; 0x2ee6 <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	05 5b       	subi	r16, 0xB5	; 181
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e3 5b       	subi	r30, 0xB3	; 179
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	de 01       	movw	r26, r28
    2ebc:	a9 5b       	subi	r26, 0xB9	; 185
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e5 5b       	subi	r30, 0xB5	; 181
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	8d 93       	st	X+, r24
    2ecc:	9c 93       	st	X, r25
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 5b       	subi	r30, 0xB9	; 185
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <HLCD_sendCmd+0x8fc>
    2edc:	fe 01       	movw	r30, r28
    2ede:	e9 5b       	subi	r30, 0xB9	; 185
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e5 56       	subi	r30, 0x65	; 101
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	01 90       	ld	r0, Z+
    2eee:	f0 81       	ld	r31, Z
    2ef0:	e0 2d       	mov	r30, r0
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e3 56       	subi	r30, 0x63	; 99
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	60 81       	ld	r22, Z
    2efc:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    2f00:	fe 01       	movw	r30, r28
    2f02:	ed 5b       	subi	r30, 0xBD	; 189
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a8 e4       	ldi	r26, 0x48	; 72
    2f0c:	b2 e4       	ldi	r27, 0x42	; 66
    2f0e:	80 83       	st	Z, r24
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	a2 83       	std	Z+2, r26	; 0x02
    2f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f16:	8e 01       	movw	r16, r28
    2f18:	01 5c       	subi	r16, 0xC1	; 193
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ed 5b       	subi	r30, 0xBD	; 189
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a ef       	ldi	r20, 0xFA	; 250
    2f30:	54 e4       	ldi	r21, 0x44	; 68
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	f8 01       	movw	r30, r16
    2f3c:	80 83       	st	Z, r24
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	a2 83       	std	Z+2, r26	; 0x02
    2f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f44:	fe 01       	movw	r30, r28
    2f46:	ff 96       	adiw	r30, 0x3f	; 63
    2f48:	60 81       	ld	r22, Z
    2f4a:	71 81       	ldd	r23, Z+1	; 0x01
    2f4c:	82 81       	ldd	r24, Z+2	; 0x02
    2f4e:	93 81       	ldd	r25, Z+3	; 0x03
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <HLCD_sendCmd+0x98e>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9e af       	std	Y+62, r25	; 0x3e
    2f66:	8d af       	std	Y+61, r24	; 0x3d
    2f68:	46 c0       	rjmp	.+140    	; 0x2ff6 <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ff 96       	adiw	r30, 0x3f	; 63
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	3f ef       	ldi	r19, 0xFF	; 255
    2f7a:	4f e7       	ldi	r20, 0x7F	; 127
    2f7c:	57 e4       	ldi	r21, 0x47	; 71
    2f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f82:	18 16       	cp	r1, r24
    2f84:	64 f5       	brge	.+88     	; 0x2fde <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f86:	fe 01       	movw	r30, r28
    2f88:	ed 5b       	subi	r30, 0xBD	; 189
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e af       	std	Y+62, r25	; 0x3e
    2fb2:	8d af       	std	Y+61, r24	; 0x3d
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <HLCD_sendCmd+0x9f8>
    2fb6:	88 ec       	ldi	r24, 0xC8	; 200
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9c af       	std	Y+60, r25	; 0x3c
    2fbc:	8b af       	std	Y+59, r24	; 0x3b
    2fbe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fc0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <HLCD_sendCmd+0x9e6>
    2fc6:	9c af       	std	Y+60, r25	; 0x3c
    2fc8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fcc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9e af       	std	Y+62, r25	; 0x3e
    2fd2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <HLCD_sendCmd+0x9da>
    2fdc:	16 c0       	rjmp	.+44     	; 0x300a <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ff 96       	adiw	r30, 0x3f	; 63
    2fe2:	60 81       	ld	r22, Z
    2fe4:	71 81       	ldd	r23, Z+1	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9e af       	std	Y+62, r25	; 0x3e
    2ff4:	8d af       	std	Y+61, r24	; 0x3d
    2ff6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffa:	9a af       	std	Y+58, r25	; 0x3a
    2ffc:	89 af       	std	Y+57, r24	; 0x39
    2ffe:	89 ad       	ldd	r24, Y+57	; 0x39
    3000:	9a ad       	ldd	r25, Y+58	; 0x3a
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <HLCD_sendCmd+0xa26>
    3006:	9a af       	std	Y+58, r25	; 0x3a
    3008:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    300a:	fe 01       	movw	r30, r28
    300c:	e3 57       	subi	r30, 0x73	; 115
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	88 23       	and	r24, r24
    3014:	59 f4       	brne	.+22     	; 0x302c <HLCD_sendCmd+0xa50>
    3016:	ce 01       	movw	r24, r28
    3018:	89 56       	subi	r24, 0x69	; 105
    301a:	9f 4f       	sbci	r25, 0xFF	; 255
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3022:	fe 01       	movw	r30, r28
    3024:	e3 57       	subi	r30, 0x73	; 115
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 83       	st	Z, r24
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    302c:	fe 01       	movw	r30, r28
    302e:	e2 57       	subi	r30, 0x72	; 114
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	80 83       	st	Z, r24
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a8 e4       	ldi	r26, 0x48	; 72
    303c:	b2 e4       	ldi	r27, 0x42	; 66
    303e:	8d ab       	std	Y+53, r24	; 0x35
    3040:	9e ab       	std	Y+54, r25	; 0x36
    3042:	af ab       	std	Y+55, r26	; 0x37
    3044:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3046:	6d a9       	ldd	r22, Y+53	; 0x35
    3048:	7e a9       	ldd	r23, Y+54	; 0x36
    304a:	8f a9       	ldd	r24, Y+55	; 0x37
    304c:	98 ad       	ldd	r25, Y+56	; 0x38
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	4a ef       	ldi	r20, 0xFA	; 250
    3054:	54 e4       	ldi	r21, 0x44	; 68
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	89 ab       	std	Y+49, r24	; 0x31
    3060:	9a ab       	std	Y+50, r25	; 0x32
    3062:	ab ab       	std	Y+51, r26	; 0x33
    3064:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3066:	69 a9       	ldd	r22, Y+49	; 0x31
    3068:	7a a9       	ldd	r23, Y+50	; 0x32
    306a:	8b a9       	ldd	r24, Y+51	; 0x33
    306c:	9c a9       	ldd	r25, Y+52	; 0x34
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	2c f4       	brge	.+10     	; 0x3088 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	98 ab       	std	Y+48, r25	; 0x30
    3084:	8f a7       	std	Y+47, r24	; 0x2f
    3086:	3f c0       	rjmp	.+126    	; 0x3106 <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    3088:	69 a9       	ldd	r22, Y+49	; 0x31
    308a:	7a a9       	ldd	r23, Y+50	; 0x32
    308c:	8b a9       	ldd	r24, Y+51	; 0x33
    308e:	9c a9       	ldd	r25, Y+52	; 0x34
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	3f ef       	ldi	r19, 0xFF	; 255
    3094:	4f e7       	ldi	r20, 0x7F	; 127
    3096:	57 e4       	ldi	r21, 0x47	; 71
    3098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309c:	18 16       	cp	r1, r24
    309e:	4c f5       	brge	.+82     	; 0x30f2 <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a0:	6d a9       	ldd	r22, Y+53	; 0x35
    30a2:	7e a9       	ldd	r23, Y+54	; 0x36
    30a4:	8f a9       	ldd	r24, Y+55	; 0x37
    30a6:	98 ad       	ldd	r25, Y+56	; 0x38
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e2       	ldi	r20, 0x20	; 32
    30ae:	51 e4       	ldi	r21, 0x41	; 65
    30b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	98 ab       	std	Y+48, r25	; 0x30
    30c6:	8f a7       	std	Y+47, r24	; 0x2f
    30c8:	0f c0       	rjmp	.+30     	; 0x30e8 <HLCD_sendCmd+0xb0c>
    30ca:	88 ec       	ldi	r24, 0xC8	; 200
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9e a7       	std	Y+46, r25	; 0x2e
    30d0:	8d a7       	std	Y+45, r24	; 0x2d
    30d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <HLCD_sendCmd+0xafa>
    30da:	9e a7       	std	Y+46, r25	; 0x2e
    30dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30de:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e0:	98 a9       	ldd	r25, Y+48	; 0x30
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	98 ab       	std	Y+48, r25	; 0x30
    30e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ea:	98 a9       	ldd	r25, Y+48	; 0x30
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	69 f7       	brne	.-38     	; 0x30ca <HLCD_sendCmd+0xaee>
    30f0:	bb c1       	rjmp	.+886    	; 0x3468 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f2:	69 a9       	ldd	r22, Y+49	; 0x31
    30f4:	7a a9       	ldd	r23, Y+50	; 0x32
    30f6:	8b a9       	ldd	r24, Y+51	; 0x33
    30f8:	9c a9       	ldd	r25, Y+52	; 0x34
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	98 ab       	std	Y+48, r25	; 0x30
    3104:	8f a7       	std	Y+47, r24	; 0x2f
    3106:	8f a5       	ldd	r24, Y+47	; 0x2f
    3108:	98 a9       	ldd	r25, Y+48	; 0x30
    310a:	9c a7       	std	Y+44, r25	; 0x2c
    310c:	8b a7       	std	Y+43, r24	; 0x2b
    310e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3110:	9c a5       	ldd	r25, Y+44	; 0x2c
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <HLCD_sendCmd+0xb36>
    3116:	9c a7       	std	Y+44, r25	; 0x2c
    3118:	8b a7       	std	Y+43, r24	; 0x2b
    311a:	a6 c1       	rjmp	.+844    	; 0x3468 <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    311c:	fe 01       	movw	r30, r28
    311e:	e5 56       	subi	r30, 0x65	; 101
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	01 90       	ld	r0, Z+
    3124:	f0 81       	ld	r31, Z
    3126:	e0 2d       	mov	r30, r0
    3128:	80 81       	ld	r24, Z
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	09 f0       	breq	.+2      	; 0x3130 <HLCD_sendCmd+0xb54>
    312e:	97 c1       	rjmp	.+814    	; 0x345e <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3130:	fe 01       	movw	r30, r28
    3132:	e3 57       	subi	r30, 0x73	; 115
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	88 23       	and	r24, r24
    313a:	59 f4       	brne	.+22     	; 0x3152 <HLCD_sendCmd+0xb76>
    313c:	ce 01       	movw	r24, r28
    313e:	89 56       	subi	r24, 0x69	; 105
    3140:	9f 4f       	sbci	r25, 0xFF	; 255
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3148:	fe 01       	movw	r30, r28
    314a:	e3 57       	subi	r30, 0x73	; 115
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 83       	st	Z, r24
    3150:	05 c0       	rjmp	.+10     	; 0x315c <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    3152:	fe 01       	movw	r30, r28
    3154:	e2 57       	subi	r30, 0x72	; 114
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	80 83       	st	Z, r24
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e8       	ldi	r26, 0x80	; 128
    3162:	bf e3       	ldi	r27, 0x3F	; 63
    3164:	8f a3       	std	Y+39, r24	; 0x27
    3166:	98 a7       	std	Y+40, r25	; 0x28
    3168:	a9 a7       	std	Y+41, r26	; 0x29
    316a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316c:	6f a1       	ldd	r22, Y+39	; 0x27
    316e:	78 a5       	ldd	r23, Y+40	; 0x28
    3170:	89 a5       	ldd	r24, Y+41	; 0x29
    3172:	9a a5       	ldd	r25, Y+42	; 0x2a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a ef       	ldi	r20, 0xFA	; 250
    317a:	54 e4       	ldi	r21, 0x44	; 68
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8b a3       	std	Y+35, r24	; 0x23
    3186:	9c a3       	std	Y+36, r25	; 0x24
    3188:	ad a3       	std	Y+37, r26	; 0x25
    318a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    318c:	6b a1       	ldd	r22, Y+35	; 0x23
    318e:	7c a1       	ldd	r23, Y+36	; 0x24
    3190:	8d a1       	ldd	r24, Y+37	; 0x25
    3192:	9e a1       	ldd	r25, Y+38	; 0x26
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e8       	ldi	r20, 0x80	; 128
    319a:	5f e3       	ldi	r21, 0x3F	; 63
    319c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a0:	88 23       	and	r24, r24
    31a2:	2c f4       	brge	.+10     	; 0x31ae <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	3f c0       	rjmp	.+126    	; 0x322c <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    31ae:	6b a1       	ldd	r22, Y+35	; 0x23
    31b0:	7c a1       	ldd	r23, Y+36	; 0x24
    31b2:	8d a1       	ldd	r24, Y+37	; 0x25
    31b4:	9e a1       	ldd	r25, Y+38	; 0x26
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	3f ef       	ldi	r19, 0xFF	; 255
    31ba:	4f e7       	ldi	r20, 0x7F	; 127
    31bc:	57 e4       	ldi	r21, 0x47	; 71
    31be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c2:	18 16       	cp	r1, r24
    31c4:	4c f5       	brge	.+82     	; 0x3218 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c6:	6f a1       	ldd	r22, Y+39	; 0x27
    31c8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ca:	89 a5       	ldd	r24, Y+41	; 0x29
    31cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	40 e2       	ldi	r20, 0x20	; 32
    31d4:	51 e4       	ldi	r21, 0x41	; 65
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9a a3       	std	Y+34, r25	; 0x22
    31ec:	89 a3       	std	Y+33, r24	; 0x21
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <HLCD_sendCmd+0xc32>
    31f0:	88 ec       	ldi	r24, 0xC8	; 200
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	98 a3       	std	Y+32, r25	; 0x20
    31f6:	8f 8f       	std	Y+31, r24	; 0x1f
    31f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31fa:	98 a1       	ldd	r25, Y+32	; 0x20
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <HLCD_sendCmd+0xc20>
    3200:	98 a3       	std	Y+32, r25	; 0x20
    3202:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3204:	89 a1       	ldd	r24, Y+33	; 0x21
    3206:	9a a1       	ldd	r25, Y+34	; 0x22
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	9a a3       	std	Y+34, r25	; 0x22
    320c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320e:	89 a1       	ldd	r24, Y+33	; 0x21
    3210:	9a a1       	ldd	r25, Y+34	; 0x22
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	69 f7       	brne	.-38     	; 0x31f0 <HLCD_sendCmd+0xc14>
    3216:	14 c0       	rjmp	.+40     	; 0x3240 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3218:	6b a1       	ldd	r22, Y+35	; 0x23
    321a:	7c a1       	ldd	r23, Y+36	; 0x24
    321c:	8d a1       	ldd	r24, Y+37	; 0x25
    321e:	9e a1       	ldd	r25, Y+38	; 0x26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9a a3       	std	Y+34, r25	; 0x22
    322a:	89 a3       	std	Y+33, r24	; 0x21
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	9a a1       	ldd	r25, Y+34	; 0x22
    3230:	9e 8f       	std	Y+30, r25	; 0x1e
    3232:	8d 8f       	std	Y+29, r24	; 0x1d
    3234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3236:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <HLCD_sendCmd+0xc5c>
    323c:	9e 8f       	std	Y+30, r25	; 0x1e
    323e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    3240:	fe 01       	movw	r30, r28
    3242:	e5 56       	subi	r30, 0x65	; 101
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	01 90       	ld	r0, Z+
    3248:	f0 81       	ld	r31, Z
    324a:	e0 2d       	mov	r30, r0
    324c:	92 81       	ldd	r25, Z+2	; 0x02
    324e:	fe 01       	movw	r30, r28
    3250:	e3 56       	subi	r30, 0x63	; 99
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	89 2f       	mov	r24, r25
    3260:	ba 01       	movw	r22, r20
    3262:	a9 01       	movw	r20, r18
    3264:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <GPIO_SetPortValue>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a0 e8       	ldi	r26, 0x80	; 128
    326e:	bf e3       	ldi	r27, 0x3F	; 63
    3270:	89 8f       	std	Y+25, r24	; 0x19
    3272:	9a 8f       	std	Y+26, r25	; 0x1a
    3274:	ab 8f       	std	Y+27, r26	; 0x1b
    3276:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3278:	69 8d       	ldd	r22, Y+25	; 0x19
    327a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	4a ef       	ldi	r20, 0xFA	; 250
    3286:	54 e4       	ldi	r21, 0x44	; 68
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	8d 8b       	std	Y+21, r24	; 0x15
    3292:	9e 8b       	std	Y+22, r25	; 0x16
    3294:	af 8b       	std	Y+23, r26	; 0x17
    3296:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3298:	6d 89       	ldd	r22, Y+21	; 0x15
    329a:	7e 89       	ldd	r23, Y+22	; 0x16
    329c:	8f 89       	ldd	r24, Y+23	; 0x17
    329e:	98 8d       	ldd	r25, Y+24	; 0x18
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e8       	ldi	r20, 0x80	; 128
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ac:	88 23       	and	r24, r24
    32ae:	2c f4       	brge	.+10     	; 0x32ba <HLCD_sendCmd+0xcde>
		__ticks = 1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
    32b8:	3f c0       	rjmp	.+126    	; 0x3338 <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    32ba:	6d 89       	ldd	r22, Y+21	; 0x15
    32bc:	7e 89       	ldd	r23, Y+22	; 0x16
    32be:	8f 89       	ldd	r24, Y+23	; 0x17
    32c0:	98 8d       	ldd	r25, Y+24	; 0x18
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	3f ef       	ldi	r19, 0xFF	; 255
    32c6:	4f e7       	ldi	r20, 0x7F	; 127
    32c8:	57 e4       	ldi	r21, 0x47	; 71
    32ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ce:	18 16       	cp	r1, r24
    32d0:	4c f5       	brge	.+82     	; 0x3324 <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d2:	69 8d       	ldd	r22, Y+25	; 0x19
    32d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e2       	ldi	r20, 0x20	; 32
    32e0:	51 e4       	ldi	r21, 0x41	; 65
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9c 8b       	std	Y+20, r25	; 0x14
    32f8:	8b 8b       	std	Y+19, r24	; 0x13
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <HLCD_sendCmd+0xd3e>
    32fc:	88 ec       	ldi	r24, 0xC8	; 200
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9a 8b       	std	Y+18, r25	; 0x12
    3302:	89 8b       	std	Y+17, r24	; 0x11
    3304:	89 89       	ldd	r24, Y+17	; 0x11
    3306:	9a 89       	ldd	r25, Y+18	; 0x12
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <HLCD_sendCmd+0xd2c>
    330c:	9a 8b       	std	Y+18, r25	; 0x12
    330e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3310:	8b 89       	ldd	r24, Y+19	; 0x13
    3312:	9c 89       	ldd	r25, Y+20	; 0x14
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	9c 8b       	std	Y+20, r25	; 0x14
    3318:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331a:	8b 89       	ldd	r24, Y+19	; 0x13
    331c:	9c 89       	ldd	r25, Y+20	; 0x14
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	69 f7       	brne	.-38     	; 0x32fc <HLCD_sendCmd+0xd20>
    3322:	14 c0       	rjmp	.+40     	; 0x334c <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	9c 8b       	std	Y+20, r25	; 0x14
    3336:	8b 8b       	std	Y+19, r24	; 0x13
    3338:	8b 89       	ldd	r24, Y+19	; 0x13
    333a:	9c 89       	ldd	r25, Y+20	; 0x14
    333c:	98 8b       	std	Y+16, r25	; 0x10
    333e:	8f 87       	std	Y+15, r24	; 0x0f
    3340:	8f 85       	ldd	r24, Y+15	; 0x0f
    3342:	98 89       	ldd	r25, Y+16	; 0x10
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <HLCD_sendCmd+0xd68>
    3348:	98 8b       	std	Y+16, r25	; 0x10
    334a:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    334c:	fe 01       	movw	r30, r28
    334e:	e3 57       	subi	r30, 0x73	; 115
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	88 23       	and	r24, r24
    3356:	59 f4       	brne	.+22     	; 0x336e <HLCD_sendCmd+0xd92>
    3358:	ce 01       	movw	r24, r28
    335a:	89 56       	subi	r24, 0x69	; 105
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3364:	fe 01       	movw	r30, r28
    3366:	e3 57       	subi	r30, 0x73	; 115
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	80 83       	st	Z, r24
    336c:	05 c0       	rjmp	.+10     	; 0x3378 <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    336e:	fe 01       	movw	r30, r28
    3370:	e2 57       	subi	r30, 0x72	; 114
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 83       	st	Z, r24
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	a0 e8       	ldi	r26, 0x80	; 128
    337e:	bf e3       	ldi	r27, 0x3F	; 63
    3380:	8b 87       	std	Y+11, r24	; 0x0b
    3382:	9c 87       	std	Y+12, r25	; 0x0c
    3384:	ad 87       	std	Y+13, r26	; 0x0d
    3386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a ef       	ldi	r20, 0xFA	; 250
    3396:	54 e4       	ldi	r21, 0x44	; 68
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	8f 83       	std	Y+7, r24	; 0x07
    33a2:	98 87       	std	Y+8, r25	; 0x08
    33a4:	a9 87       	std	Y+9, r26	; 0x09
    33a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a8:	6f 81       	ldd	r22, Y+7	; 0x07
    33aa:	78 85       	ldd	r23, Y+8	; 0x08
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	2c f4       	brge	.+10     	; 0x33ca <HLCD_sendCmd+0xdee>
		__ticks = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
    33c8:	3f c0       	rjmp	.+126    	; 0x3448 <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    33ca:	6f 81       	ldd	r22, Y+7	; 0x07
    33cc:	78 85       	ldd	r23, Y+8	; 0x08
    33ce:	89 85       	ldd	r24, Y+9	; 0x09
    33d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	4c f5       	brge	.+82     	; 0x3434 <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e2       	ldi	r20, 0x20	; 32
    33f0:	51 e4       	ldi	r21, 0x41	; 65
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
    340a:	0f c0       	rjmp	.+30     	; 0x342a <HLCD_sendCmd+0xe4e>
    340c:	88 ec       	ldi	r24, 0xC8	; 200
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 83       	std	Y+4, r25	; 0x04
    3412:	8b 83       	std	Y+3, r24	; 0x03
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	9c 81       	ldd	r25, Y+4	; 0x04
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <HLCD_sendCmd+0xe3c>
    341c:	9c 83       	std	Y+4, r25	; 0x04
    341e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	9e 83       	std	Y+6, r25	; 0x06
    3428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	69 f7       	brne	.-38     	; 0x340c <HLCD_sendCmd+0xe30>
    3432:	1a c0       	rjmp	.+52     	; 0x3468 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3434:	6f 81       	ldd	r22, Y+7	; 0x07
    3436:	78 85       	ldd	r23, Y+8	; 0x08
    3438:	89 85       	ldd	r24, Y+9	; 0x09
    343a:	9a 85       	ldd	r25, Y+10	; 0x0a
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	9a 81       	ldd	r25, Y+2	; 0x02
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	f1 f7       	brne	.-4      	; 0x3454 <HLCD_sendCmd+0xe78>
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	05 c0       	rjmp	.+10     	; 0x3468 <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    345e:	fe 01       	movw	r30, r28
    3460:	e2 57       	subi	r30, 0x72	; 114
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    3468:	fe 01       	movw	r30, r28
    346a:	e3 57       	subi	r30, 0x73	; 115
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	88 23       	and	r24, r24
    3472:	29 f4       	brne	.+10     	; 0x347e <HLCD_sendCmd+0xea2>
    3474:	fe 01       	movw	r30, r28
    3476:	e2 57       	subi	r30, 0x72	; 114
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	10 82       	st	Z, r1
    347c:	0b c0       	rjmp	.+22     	; 0x3494 <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    347e:	fe 01       	movw	r30, r28
    3480:	e2 57       	subi	r30, 0x72	; 114
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	80 83       	st	Z, r24
    3488:	05 c0       	rjmp	.+10     	; 0x3494 <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    348a:	fe 01       	movw	r30, r28
    348c:	e2 57       	subi	r30, 0x72	; 114
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	80 83       	st	Z, r24
	}

	return lcdRet;
    3494:	fe 01       	movw	r30, r28
    3496:	e2 57       	subi	r30, 0x72	; 114
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
}
    349c:	c3 56       	subi	r28, 0x63	; 99
    349e:	df 4f       	sbci	r29, 0xFF	; 255
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	cd 59       	subi	r28, 0x9D	; 157
    34c2:	d0 40       	sbci	r29, 0x00	; 0
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	fe 01       	movw	r30, r28
    34d0:	e5 56       	subi	r30, 0x65	; 101
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	fe 01       	movw	r30, r28
    34da:	e3 56       	subi	r30, 0x63	; 99
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    34e0:	fe 01       	movw	r30, r28
    34e2:	e2 57       	subi	r30, 0x72	; 114
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    34ea:	fe 01       	movw	r30, r28
    34ec:	e3 57       	subi	r30, 0x73	; 115
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    34f4:	fe 01       	movw	r30, r28
    34f6:	e5 56       	subi	r30, 0x65	; 101
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	91 81       	ldd	r25, Z+1	; 0x01
    34fe:	00 97       	sbiw	r24, 0x00	; 0
    3500:	09 f4       	brne	.+2      	; 0x3504 <HLCD_displayChar+0x50>
    3502:	2f c7       	rjmp	.+3678   	; 0x4362 <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3504:	fe 01       	movw	r30, r28
    3506:	e5 56       	subi	r30, 0x65	; 101
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	01 90       	ld	r0, Z+
    350c:	f0 81       	ld	r31, Z
    350e:	e0 2d       	mov	r30, r0
    3510:	81 81       	ldd	r24, Z+1	; 0x01
    3512:	fe 01       	movw	r30, r28
    3514:	e5 56       	subi	r30, 0x65	; 101
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	01 90       	ld	r0, Z+
    351a:	f0 81       	ld	r31, Z
    351c:	e0 2d       	mov	r30, r0
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	fe 01       	movw	r30, r28
    3522:	e1 57       	subi	r30, 0x71	; 113
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 83       	st	Z, r24
    3528:	fe 01       	movw	r30, r28
    352a:	e1 57       	subi	r30, 0x71	; 113
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	91 83       	std	Z+1, r25	; 0x01
    3530:	fe 01       	movw	r30, r28
    3532:	e1 57       	subi	r30, 0x71	; 113
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	82 83       	std	Z+2, r24	; 0x02
    353a:	fe 01       	movw	r30, r28
    353c:	e1 57       	subi	r30, 0x71	; 113
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3542:	fe 01       	movw	r30, r28
    3544:	e5 56       	subi	r30, 0x65	; 101
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	01 90       	ld	r0, Z+
    354a:	f0 81       	ld	r31, Z
    354c:	e0 2d       	mov	r30, r0
    354e:	81 81       	ldd	r24, Z+1	; 0x01
    3550:	fe 01       	movw	r30, r28
    3552:	e5 56       	subi	r30, 0x65	; 101
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	01 90       	ld	r0, Z+
    3558:	f0 81       	ld	r31, Z
    355a:	e0 2d       	mov	r30, r0
    355c:	94 81       	ldd	r25, Z+4	; 0x04
    355e:	fe 01       	movw	r30, r28
    3560:	ed 56       	subi	r30, 0x6D	; 109
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 83       	st	Z, r24
    3566:	fe 01       	movw	r30, r28
    3568:	ed 56       	subi	r30, 0x6D	; 109
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	fe 01       	movw	r30, r28
    3570:	ed 56       	subi	r30, 0x6D	; 109
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	82 83       	std	Z+2, r24	; 0x02
    3578:	fe 01       	movw	r30, r28
    357a:	ed 56       	subi	r30, 0x6D	; 109
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3580:	fe 01       	movw	r30, r28
    3582:	e5 56       	subi	r30, 0x65	; 101
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	01 90       	ld	r0, Z+
    3588:	f0 81       	ld	r31, Z
    358a:	e0 2d       	mov	r30, r0
    358c:	81 81       	ldd	r24, Z+1	; 0x01
    358e:	fe 01       	movw	r30, r28
    3590:	e5 56       	subi	r30, 0x65	; 101
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	01 90       	ld	r0, Z+
    3596:	f0 81       	ld	r31, Z
    3598:	e0 2d       	mov	r30, r0
    359a:	95 81       	ldd	r25, Z+5	; 0x05
    359c:	fe 01       	movw	r30, r28
    359e:	e9 56       	subi	r30, 0x69	; 105
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 83       	st	Z, r24
    35a4:	fe 01       	movw	r30, r28
    35a6:	e9 56       	subi	r30, 0x69	; 105
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	91 83       	std	Z+1, r25	; 0x01
    35ac:	fe 01       	movw	r30, r28
    35ae:	e9 56       	subi	r30, 0x69	; 105
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	82 83       	std	Z+2, r24	; 0x02
    35b6:	fe 01       	movw	r30, r28
    35b8:	e9 56       	subi	r30, 0x69	; 105
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    35be:	ce 01       	movw	r24, r28
    35c0:	81 57       	subi	r24, 0x71	; 113
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	61 e0       	ldi	r22, 0x01	; 1
    35c6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e3 57       	subi	r30, 0x73	; 115
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    35d2:	fe 01       	movw	r30, r28
    35d4:	e3 57       	subi	r30, 0x73	; 115
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 81       	ld	r24, Z
    35da:	88 23       	and	r24, r24
    35dc:	59 f4       	brne	.+22     	; 0x35f4 <HLCD_displayChar+0x140>
    35de:	ce 01       	movw	r24, r28
    35e0:	8d 56       	subi	r24, 0x6D	; 109
    35e2:	9f 4f       	sbci	r25, 0xFF	; 255
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    35ea:	fe 01       	movw	r30, r28
    35ec:	e3 57       	subi	r30, 0x73	; 115
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	80 83       	st	Z, r24
    35f2:	05 c0       	rjmp	.+10     	; 0x35fe <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    35f4:	fe 01       	movw	r30, r28
    35f6:	e2 57       	subi	r30, 0x72	; 114
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	80 83       	st	Z, r24
    35fe:	fe 01       	movw	r30, r28
    3600:	e7 57       	subi	r30, 0x77	; 119
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	a0 ef       	ldi	r26, 0xF0	; 240
    360a:	b1 e4       	ldi	r27, 0x41	; 65
    360c:	80 83       	st	Z, r24
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	a2 83       	std	Z+2, r26	; 0x02
    3612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	8e 01       	movw	r16, r28
    3616:	0b 57       	subi	r16, 0x7B	; 123
    3618:	1f 4f       	sbci	r17, 0xFF	; 255
    361a:	fe 01       	movw	r30, r28
    361c:	e7 57       	subi	r30, 0x77	; 119
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4a ef       	ldi	r20, 0xFA	; 250
    362e:	54 e4       	ldi	r21, 0x44	; 68
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	f8 01       	movw	r30, r16
    363a:	80 83       	st	Z, r24
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	a2 83       	std	Z+2, r26	; 0x02
    3640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3642:	fe 01       	movw	r30, r28
    3644:	eb 57       	subi	r30, 0x7B	; 123
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	44 f4       	brge	.+16     	; 0x3670 <HLCD_displayChar+0x1bc>
		__ticks = 1;
    3660:	fe 01       	movw	r30, r28
    3662:	ed 57       	subi	r30, 0x7D	; 125
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	64 c0       	rjmp	.+200    	; 0x3738 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    3670:	fe 01       	movw	r30, r28
    3672:	eb 57       	subi	r30, 0x7B	; 123
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	60 81       	ld	r22, Z
    3678:	71 81       	ldd	r23, Z+1	; 0x01
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	4f e7       	ldi	r20, 0x7F	; 127
    3684:	57 e4       	ldi	r21, 0x47	; 71
    3686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368a:	18 16       	cp	r1, r24
    368c:	0c f0       	brlt	.+2      	; 0x3690 <HLCD_displayChar+0x1dc>
    368e:	43 c0       	rjmp	.+134    	; 0x3716 <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3690:	fe 01       	movw	r30, r28
    3692:	e7 57       	subi	r30, 0x77	; 119
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	51 e4       	ldi	r21, 0x41	; 65
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	8e 01       	movw	r16, r28
    36b0:	0d 57       	subi	r16, 0x7D	; 125
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	f8 01       	movw	r30, r16
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	1f c0       	rjmp	.+62     	; 0x3706 <HLCD_displayChar+0x252>
    36c8:	fe 01       	movw	r30, r28
    36ca:	ef 57       	subi	r30, 0x7F	; 127
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	88 ec       	ldi	r24, 0xC8	; 200
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	fe 01       	movw	r30, r28
    36d8:	ef 57       	subi	r30, 0x7F	; 127
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <HLCD_displayChar+0x22c>
    36e4:	fe 01       	movw	r30, r28
    36e6:	ef 57       	subi	r30, 0x7F	; 127
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ee:	de 01       	movw	r26, r28
    36f0:	ad 57       	subi	r26, 0x7D	; 125
    36f2:	bf 4f       	sbci	r27, 0xFF	; 255
    36f4:	fe 01       	movw	r30, r28
    36f6:	ed 57       	subi	r30, 0x7D	; 125
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	9c 93       	st	X, r25
    3704:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	fe 01       	movw	r30, r28
    3708:	ed 57       	subi	r30, 0x7D	; 125
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	80 81       	ld	r24, Z
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	d1 f6       	brne	.-76     	; 0x36c8 <HLCD_displayChar+0x214>
    3714:	28 c0       	rjmp	.+80     	; 0x3766 <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3716:	8e 01       	movw	r16, r28
    3718:	0d 57       	subi	r16, 0x7D	; 125
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	fe 01       	movw	r30, r28
    371e:	eb 57       	subi	r30, 0x7B	; 123
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	f8 01       	movw	r30, r16
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	80 83       	st	Z, r24
    3738:	de 01       	movw	r26, r28
    373a:	a1 58       	subi	r26, 0x81	; 129
    373c:	bf 4f       	sbci	r27, 0xFF	; 255
    373e:	fe 01       	movw	r30, r28
    3740:	ed 57       	subi	r30, 0x7D	; 125
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	9c 93       	st	X, r25
    374c:	8e 93       	st	-X, r24
    374e:	fe 01       	movw	r30, r28
    3750:	e1 58       	subi	r30, 0x81	; 129
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <HLCD_displayChar+0x2a4>
    375c:	fe 01       	movw	r30, r28
    375e:	e1 58       	subi	r30, 0x81	; 129
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    3766:	fe 01       	movw	r30, r28
    3768:	e5 56       	subi	r30, 0x65	; 101
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	01 90       	ld	r0, Z+
    376e:	f0 81       	ld	r31, Z
    3770:	e0 2d       	mov	r30, r0
    3772:	80 81       	ld	r24, Z
    3774:	88 23       	and	r24, r24
    3776:	09 f0       	breq	.+2      	; 0x377a <HLCD_displayChar+0x2c6>
    3778:	3d c4       	rjmp	.+2170   	; 0x3ff4 <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    377a:	fe 01       	movw	r30, r28
    377c:	e3 57       	subi	r30, 0x73	; 115
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	88 23       	and	r24, r24
    3784:	59 f4       	brne	.+22     	; 0x379c <HLCD_displayChar+0x2e8>
    3786:	ce 01       	movw	r24, r28
    3788:	89 56       	subi	r24, 0x69	; 105
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3792:	fe 01       	movw	r30, r28
    3794:	e3 57       	subi	r30, 0x73	; 115
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 83       	st	Z, r24
    379a:	05 c0       	rjmp	.+10     	; 0x37a6 <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    379c:	fe 01       	movw	r30, r28
    379e:	e2 57       	subi	r30, 0x72	; 114
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	80 83       	st	Z, r24
    37a6:	fe 01       	movw	r30, r28
    37a8:	e5 58       	subi	r30, 0x85	; 133
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	a0 ef       	ldi	r26, 0xF0	; 240
    37b2:	b1 e4       	ldi	r27, 0x41	; 65
    37b4:	80 83       	st	Z, r24
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37bc:	8e 01       	movw	r16, r28
    37be:	09 58       	subi	r16, 0x89	; 137
    37c0:	1f 4f       	sbci	r17, 0xFF	; 255
    37c2:	fe 01       	movw	r30, r28
    37c4:	e5 58       	subi	r30, 0x85	; 133
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	60 81       	ld	r22, Z
    37ca:	71 81       	ldd	r23, Z+1	; 0x01
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	93 81       	ldd	r25, Z+3	; 0x03
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	4a ef       	ldi	r20, 0xFA	; 250
    37d6:	54 e4       	ldi	r21, 0x44	; 68
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	f8 01       	movw	r30, r16
    37e2:	80 83       	st	Z, r24
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	a2 83       	std	Z+2, r26	; 0x02
    37e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ea:	fe 01       	movw	r30, r28
    37ec:	e9 58       	subi	r30, 0x89	; 137
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	60 81       	ld	r22, Z
    37f2:	71 81       	ldd	r23, Z+1	; 0x01
    37f4:	82 81       	ldd	r24, Z+2	; 0x02
    37f6:	93 81       	ldd	r25, Z+3	; 0x03
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e8       	ldi	r20, 0x80	; 128
    37fe:	5f e3       	ldi	r21, 0x3F	; 63
    3800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3804:	88 23       	and	r24, r24
    3806:	44 f4       	brge	.+16     	; 0x3818 <HLCD_displayChar+0x364>
		__ticks = 1;
    3808:	fe 01       	movw	r30, r28
    380a:	eb 58       	subi	r30, 0x8B	; 139
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	80 83       	st	Z, r24
    3816:	64 c0       	rjmp	.+200    	; 0x38e0 <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    3818:	fe 01       	movw	r30, r28
    381a:	e9 58       	subi	r30, 0x89	; 137
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	60 81       	ld	r22, Z
    3820:	71 81       	ldd	r23, Z+1	; 0x01
    3822:	82 81       	ldd	r24, Z+2	; 0x02
    3824:	93 81       	ldd	r25, Z+3	; 0x03
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	0c f0       	brlt	.+2      	; 0x3838 <HLCD_displayChar+0x384>
    3836:	43 c0       	rjmp	.+134    	; 0x38be <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3838:	fe 01       	movw	r30, r28
    383a:	e5 58       	subi	r30, 0x85	; 133
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e2       	ldi	r20, 0x20	; 32
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	8e 01       	movw	r16, r28
    3858:	0b 58       	subi	r16, 0x8B	; 139
    385a:	1f 4f       	sbci	r17, 0xFF	; 255
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	f8 01       	movw	r30, r16
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
    386e:	1f c0       	rjmp	.+62     	; 0x38ae <HLCD_displayChar+0x3fa>
    3870:	fe 01       	movw	r30, r28
    3872:	ed 58       	subi	r30, 0x8D	; 141
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	88 ec       	ldi	r24, 0xC8	; 200
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
    387e:	fe 01       	movw	r30, r28
    3880:	ed 58       	subi	r30, 0x8D	; 141
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	f1 f7       	brne	.-4      	; 0x3888 <HLCD_displayChar+0x3d4>
    388c:	fe 01       	movw	r30, r28
    388e:	ed 58       	subi	r30, 0x8D	; 141
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3896:	de 01       	movw	r26, r28
    3898:	ab 58       	subi	r26, 0x8B	; 139
    389a:	bf 4f       	sbci	r27, 0xFF	; 255
    389c:	fe 01       	movw	r30, r28
    389e:	eb 58       	subi	r30, 0x8B	; 139
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	11 96       	adiw	r26, 0x01	; 1
    38aa:	9c 93       	st	X, r25
    38ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ae:	fe 01       	movw	r30, r28
    38b0:	eb 58       	subi	r30, 0x8B	; 139
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	80 81       	ld	r24, Z
    38b6:	91 81       	ldd	r25, Z+1	; 0x01
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	d1 f6       	brne	.-76     	; 0x3870 <HLCD_displayChar+0x3bc>
    38bc:	27 c0       	rjmp	.+78     	; 0x390c <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38be:	8e 01       	movw	r16, r28
    38c0:	0b 58       	subi	r16, 0x8B	; 139
    38c2:	1f 4f       	sbci	r17, 0xFF	; 255
    38c4:	fe 01       	movw	r30, r28
    38c6:	e9 58       	subi	r30, 0x89	; 137
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	60 81       	ld	r22, Z
    38cc:	71 81       	ldd	r23, Z+1	; 0x01
    38ce:	82 81       	ldd	r24, Z+2	; 0x02
    38d0:	93 81       	ldd	r25, Z+3	; 0x03
    38d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	f8 01       	movw	r30, r16
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
    38e0:	de 01       	movw	r26, r28
    38e2:	af 58       	subi	r26, 0x8F	; 143
    38e4:	bf 4f       	sbci	r27, 0xFF	; 255
    38e6:	fe 01       	movw	r30, r28
    38e8:	eb 58       	subi	r30, 0x8B	; 139
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	8d 93       	st	X+, r24
    38f2:	9c 93       	st	X, r25
    38f4:	fe 01       	movw	r30, r28
    38f6:	ef 58       	subi	r30, 0x8F	; 143
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <HLCD_displayChar+0x44a>
    3902:	fe 01       	movw	r30, r28
    3904:	ef 58       	subi	r30, 0x8F	; 143
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	91 83       	std	Z+1, r25	; 0x01
    390a:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    390c:	fe 01       	movw	r30, r28
    390e:	e5 56       	subi	r30, 0x65	; 101
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	01 90       	ld	r0, Z+
    3914:	f0 81       	ld	r31, Z
    3916:	e0 2d       	mov	r30, r0
    3918:	22 81       	ldd	r18, Z+2	; 0x02
    391a:	fe 01       	movw	r30, r28
    391c:	e3 56       	subi	r30, 0x63	; 99
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	80 81       	ld	r24, Z
    3922:	98 2f       	mov	r25, r24
    3924:	92 95       	swap	r25
    3926:	9f 70       	andi	r25, 0x0F	; 15
    3928:	82 2f       	mov	r24, r18
    392a:	69 2f       	mov	r22, r25
    392c:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    3930:	fe 01       	movw	r30, r28
    3932:	e3 59       	subi	r30, 0x93	; 147
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	a0 ef       	ldi	r26, 0xF0	; 240
    393c:	b1 e4       	ldi	r27, 0x41	; 65
    393e:	80 83       	st	Z, r24
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	a2 83       	std	Z+2, r26	; 0x02
    3944:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3946:	8e 01       	movw	r16, r28
    3948:	07 59       	subi	r16, 0x97	; 151
    394a:	1f 4f       	sbci	r17, 0xFF	; 255
    394c:	fe 01       	movw	r30, r28
    394e:	e3 59       	subi	r30, 0x93	; 147
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	4a ef       	ldi	r20, 0xFA	; 250
    3960:	54 e4       	ldi	r21, 0x44	; 68
    3962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	f8 01       	movw	r30, r16
    396c:	80 83       	st	Z, r24
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	a2 83       	std	Z+2, r26	; 0x02
    3972:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3974:	fe 01       	movw	r30, r28
    3976:	e7 59       	subi	r30, 0x97	; 151
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	82 81       	ldd	r24, Z+2	; 0x02
    3980:	93 81       	ldd	r25, Z+3	; 0x03
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e8       	ldi	r20, 0x80	; 128
    3988:	5f e3       	ldi	r21, 0x3F	; 63
    398a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    398e:	88 23       	and	r24, r24
    3990:	44 f4       	brge	.+16     	; 0x39a2 <HLCD_displayChar+0x4ee>
		__ticks = 1;
    3992:	fe 01       	movw	r30, r28
    3994:	e9 59       	subi	r30, 0x99	; 153
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	80 83       	st	Z, r24
    39a0:	64 c0       	rjmp	.+200    	; 0x3a6a <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    39a2:	fe 01       	movw	r30, r28
    39a4:	e7 59       	subi	r30, 0x97	; 151
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	60 81       	ld	r22, Z
    39aa:	71 81       	ldd	r23, Z+1	; 0x01
    39ac:	82 81       	ldd	r24, Z+2	; 0x02
    39ae:	93 81       	ldd	r25, Z+3	; 0x03
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	3f ef       	ldi	r19, 0xFF	; 255
    39b4:	4f e7       	ldi	r20, 0x7F	; 127
    39b6:	57 e4       	ldi	r21, 0x47	; 71
    39b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39bc:	18 16       	cp	r1, r24
    39be:	0c f0       	brlt	.+2      	; 0x39c2 <HLCD_displayChar+0x50e>
    39c0:	43 c0       	rjmp	.+134    	; 0x3a48 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c2:	fe 01       	movw	r30, r28
    39c4:	e3 59       	subi	r30, 0x93	; 147
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	60 81       	ld	r22, Z
    39ca:	71 81       	ldd	r23, Z+1	; 0x01
    39cc:	82 81       	ldd	r24, Z+2	; 0x02
    39ce:	93 81       	ldd	r25, Z+3	; 0x03
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e2       	ldi	r20, 0x20	; 32
    39d6:	51 e4       	ldi	r21, 0x41	; 65
    39d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	8e 01       	movw	r16, r28
    39e2:	09 59       	subi	r16, 0x99	; 153
    39e4:	1f 4f       	sbci	r17, 0xFF	; 255
    39e6:	bc 01       	movw	r22, r24
    39e8:	cd 01       	movw	r24, r26
    39ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	f8 01       	movw	r30, r16
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
    39f8:	1f c0       	rjmp	.+62     	; 0x3a38 <HLCD_displayChar+0x584>
    39fa:	fe 01       	movw	r30, r28
    39fc:	eb 59       	subi	r30, 0x9B	; 155
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	88 ec       	ldi	r24, 0xC8	; 200
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	80 83       	st	Z, r24
    3a08:	fe 01       	movw	r30, r28
    3a0a:	eb 59       	subi	r30, 0x9B	; 155
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 81       	ld	r24, Z
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <HLCD_displayChar+0x55e>
    3a16:	fe 01       	movw	r30, r28
    3a18:	eb 59       	subi	r30, 0x9B	; 155
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	de 01       	movw	r26, r28
    3a22:	a9 59       	subi	r26, 0x99	; 153
    3a24:	bf 4f       	sbci	r27, 0xFF	; 255
    3a26:	fe 01       	movw	r30, r28
    3a28:	e9 59       	subi	r30, 0x99	; 153
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 81       	ld	r24, Z
    3a2e:	91 81       	ldd	r25, Z+1	; 0x01
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	11 96       	adiw	r26, 0x01	; 1
    3a34:	9c 93       	st	X, r25
    3a36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e9 59       	subi	r30, 0x99	; 153
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	d1 f6       	brne	.-76     	; 0x39fa <HLCD_displayChar+0x546>
    3a46:	28 c0       	rjmp	.+80     	; 0x3a98 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a48:	8e 01       	movw	r16, r28
    3a4a:	09 59       	subi	r16, 0x99	; 153
    3a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e7 59       	subi	r30, 0x97	; 151
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	60 81       	ld	r22, Z
    3a56:	71 81       	ldd	r23, Z+1	; 0x01
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	f8 01       	movw	r30, r16
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	80 83       	st	Z, r24
    3a6a:	de 01       	movw	r26, r28
    3a6c:	ad 59       	subi	r26, 0x9D	; 157
    3a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a70:	fe 01       	movw	r30, r28
    3a72:	e9 59       	subi	r30, 0x99	; 153
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	91 81       	ldd	r25, Z+1	; 0x01
    3a7a:	11 96       	adiw	r26, 0x01	; 1
    3a7c:	9c 93       	st	X, r25
    3a7e:	8e 93       	st	-X, r24
    3a80:	fe 01       	movw	r30, r28
    3a82:	ed 59       	subi	r30, 0x9D	; 157
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <HLCD_displayChar+0x5d6>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	ed 59       	subi	r30, 0x9D	; 157
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e3 57       	subi	r30, 0x73	; 115
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	80 81       	ld	r24, Z
    3aa0:	88 23       	and	r24, r24
    3aa2:	59 f4       	brne	.+22     	; 0x3aba <HLCD_displayChar+0x606>
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	89 56       	subi	r24, 0x69	; 105
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e3 57       	subi	r30, 0x73	; 115
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 83       	st	Z, r24
    3ab8:	05 c0       	rjmp	.+10     	; 0x3ac4 <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    3aba:	fe 01       	movw	r30, r28
    3abc:	e2 57       	subi	r30, 0x72	; 114
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	80 83       	st	Z, r24
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e1 5a       	subi	r30, 0xA1	; 161
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	a0 ef       	ldi	r26, 0xF0	; 240
    3ad0:	b1 e4       	ldi	r27, 0x41	; 65
    3ad2:	80 83       	st	Z, r24
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	a2 83       	std	Z+2, r26	; 0x02
    3ad8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	8e 01       	movw	r16, r28
    3adc:	05 5a       	subi	r16, 0xA5	; 165
    3ade:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e1 5a       	subi	r30, 0xA1	; 161
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	4a ef       	ldi	r20, 0xFA	; 250
    3af4:	54 e4       	ldi	r21, 0x44	; 68
    3af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	f8 01       	movw	r30, r16
    3b00:	80 83       	st	Z, r24
    3b02:	91 83       	std	Z+1, r25	; 0x01
    3b04:	a2 83       	std	Z+2, r26	; 0x02
    3b06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e5 5a       	subi	r30, 0xA5	; 165
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	82 81       	ldd	r24, Z+2	; 0x02
    3b14:	93 81       	ldd	r25, Z+3	; 0x03
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e8       	ldi	r20, 0x80	; 128
    3b1c:	5f e3       	ldi	r21, 0x3F	; 63
    3b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b22:	88 23       	and	r24, r24
    3b24:	44 f4       	brge	.+16     	; 0x3b36 <HLCD_displayChar+0x682>
		__ticks = 1;
    3b26:	fe 01       	movw	r30, r28
    3b28:	e7 5a       	subi	r30, 0xA7	; 167
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	80 83       	st	Z, r24
    3b34:	64 c0       	rjmp	.+200    	; 0x3bfe <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    3b36:	fe 01       	movw	r30, r28
    3b38:	e5 5a       	subi	r30, 0xA5	; 165
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	60 81       	ld	r22, Z
    3b3e:	71 81       	ldd	r23, Z+1	; 0x01
    3b40:	82 81       	ldd	r24, Z+2	; 0x02
    3b42:	93 81       	ldd	r25, Z+3	; 0x03
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	3f ef       	ldi	r19, 0xFF	; 255
    3b48:	4f e7       	ldi	r20, 0x7F	; 127
    3b4a:	57 e4       	ldi	r21, 0x47	; 71
    3b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b50:	18 16       	cp	r1, r24
    3b52:	0c f0       	brlt	.+2      	; 0x3b56 <HLCD_displayChar+0x6a2>
    3b54:	43 c0       	rjmp	.+134    	; 0x3bdc <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b56:	fe 01       	movw	r30, r28
    3b58:	e1 5a       	subi	r30, 0xA1	; 161
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e2       	ldi	r20, 0x20	; 32
    3b6a:	51 e4       	ldi	r21, 0x41	; 65
    3b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	8e 01       	movw	r16, r28
    3b76:	07 5a       	subi	r16, 0xA7	; 167
    3b78:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	f8 01       	movw	r30, r16
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
    3b8c:	1f c0       	rjmp	.+62     	; 0x3bcc <HLCD_displayChar+0x718>
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e9 5a       	subi	r30, 0xA9	; 169
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	88 ec       	ldi	r24, 0xC8	; 200
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	91 83       	std	Z+1, r25	; 0x01
    3b9a:	80 83       	st	Z, r24
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 5a       	subi	r30, 0xA9	; 169
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <HLCD_displayChar+0x6f2>
    3baa:	fe 01       	movw	r30, r28
    3bac:	e9 5a       	subi	r30, 0xA9	; 169
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	91 83       	std	Z+1, r25	; 0x01
    3bb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb4:	de 01       	movw	r26, r28
    3bb6:	a7 5a       	subi	r26, 0xA7	; 167
    3bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bba:	fe 01       	movw	r30, r28
    3bbc:	e7 5a       	subi	r30, 0xA7	; 167
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	11 96       	adiw	r26, 0x01	; 1
    3bc8:	9c 93       	st	X, r25
    3bca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e7 5a       	subi	r30, 0xA7	; 167
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	d1 f6       	brne	.-76     	; 0x3b8e <HLCD_displayChar+0x6da>
    3bda:	28 c0       	rjmp	.+80     	; 0x3c2c <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bdc:	8e 01       	movw	r16, r28
    3bde:	07 5a       	subi	r16, 0xA7	; 167
    3be0:	1f 4f       	sbci	r17, 0xFF	; 255
    3be2:	fe 01       	movw	r30, r28
    3be4:	e5 5a       	subi	r30, 0xA5	; 165
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	80 83       	st	Z, r24
    3bfe:	de 01       	movw	r26, r28
    3c00:	ab 5a       	subi	r26, 0xAB	; 171
    3c02:	bf 4f       	sbci	r27, 0xFF	; 255
    3c04:	fe 01       	movw	r30, r28
    3c06:	e7 5a       	subi	r30, 0xA7	; 167
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	80 81       	ld	r24, Z
    3c0c:	91 81       	ldd	r25, Z+1	; 0x01
    3c0e:	11 96       	adiw	r26, 0x01	; 1
    3c10:	9c 93       	st	X, r25
    3c12:	8e 93       	st	-X, r24
    3c14:	fe 01       	movw	r30, r28
    3c16:	eb 5a       	subi	r30, 0xAB	; 171
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	80 81       	ld	r24, Z
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	01 97       	sbiw	r24, 0x01	; 1
    3c20:	f1 f7       	brne	.-4      	; 0x3c1e <HLCD_displayChar+0x76a>
    3c22:	fe 01       	movw	r30, r28
    3c24:	eb 5a       	subi	r30, 0xAB	; 171
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e3 57       	subi	r30, 0x73	; 115
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	88 23       	and	r24, r24
    3c36:	59 f4       	brne	.+22     	; 0x3c4e <HLCD_displayChar+0x79a>
    3c38:	ce 01       	movw	r24, r28
    3c3a:	89 56       	subi	r24, 0x69	; 105
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	61 e0       	ldi	r22, 0x01	; 1
    3c40:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3c44:	fe 01       	movw	r30, r28
    3c46:	e3 57       	subi	r30, 0x73	; 115
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 83       	st	Z, r24
    3c4c:	05 c0       	rjmp	.+10     	; 0x3c58 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    3c4e:	fe 01       	movw	r30, r28
    3c50:	e2 57       	subi	r30, 0x72	; 114
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	80 83       	st	Z, r24
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ef 5a       	subi	r30, 0xAF	; 175
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	a0 ef       	ldi	r26, 0xF0	; 240
    3c64:	b1 e4       	ldi	r27, 0x41	; 65
    3c66:	80 83       	st	Z, r24
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	a2 83       	std	Z+2, r26	; 0x02
    3c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6e:	8e 01       	movw	r16, r28
    3c70:	03 5b       	subi	r16, 0xB3	; 179
    3c72:	1f 4f       	sbci	r17, 0xFF	; 255
    3c74:	fe 01       	movw	r30, r28
    3c76:	ef 5a       	subi	r30, 0xAF	; 175
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a ef       	ldi	r20, 0xFA	; 250
    3c88:	54 e4       	ldi	r21, 0x44	; 68
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	f8 01       	movw	r30, r16
    3c94:	80 83       	st	Z, r24
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	a2 83       	std	Z+2, r26	; 0x02
    3c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e3 5b       	subi	r30, 0xB3	; 179
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	40 e8       	ldi	r20, 0x80	; 128
    3cb0:	5f e3       	ldi	r21, 0x3F	; 63
    3cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb6:	88 23       	and	r24, r24
    3cb8:	44 f4       	brge	.+16     	; 0x3cca <HLCD_displayChar+0x816>
		__ticks = 1;
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e5 5b       	subi	r30, 0xB5	; 181
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	80 83       	st	Z, r24
    3cc8:	64 c0       	rjmp	.+200    	; 0x3d92 <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e3 5b       	subi	r30, 0xB3	; 179
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	3f ef       	ldi	r19, 0xFF	; 255
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	57 e4       	ldi	r21, 0x47	; 71
    3ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <HLCD_displayChar+0x836>
    3ce8:	43 c0       	rjmp	.+134    	; 0x3d70 <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cea:	fe 01       	movw	r30, r28
    3cec:	ef 5a       	subi	r30, 0xAF	; 175
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e2       	ldi	r20, 0x20	; 32
    3cfe:	51 e4       	ldi	r21, 0x41	; 65
    3d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	8e 01       	movw	r16, r28
    3d0a:	05 5b       	subi	r16, 0xB5	; 181
    3d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
    3d20:	1f c0       	rjmp	.+62     	; 0x3d60 <HLCD_displayChar+0x8ac>
    3d22:	fe 01       	movw	r30, r28
    3d24:	e7 5b       	subi	r30, 0xB7	; 183
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	88 ec       	ldi	r24, 0xC8	; 200
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	91 83       	std	Z+1, r25	; 0x01
    3d2e:	80 83       	st	Z, r24
    3d30:	fe 01       	movw	r30, r28
    3d32:	e7 5b       	subi	r30, 0xB7	; 183
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <HLCD_displayChar+0x886>
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e7 5b       	subi	r30, 0xB7	; 183
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d48:	de 01       	movw	r26, r28
    3d4a:	a5 5b       	subi	r26, 0xB5	; 181
    3d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4e:	fe 01       	movw	r30, r28
    3d50:	e5 5b       	subi	r30, 0xB5	; 181
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	80 81       	ld	r24, Z
    3d56:	91 81       	ldd	r25, Z+1	; 0x01
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	11 96       	adiw	r26, 0x01	; 1
    3d5c:	9c 93       	st	X, r25
    3d5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d60:	fe 01       	movw	r30, r28
    3d62:	e5 5b       	subi	r30, 0xB5	; 181
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	d1 f6       	brne	.-76     	; 0x3d22 <HLCD_displayChar+0x86e>
    3d6e:	27 c0       	rjmp	.+78     	; 0x3dbe <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d70:	8e 01       	movw	r16, r28
    3d72:	05 5b       	subi	r16, 0xB5	; 181
    3d74:	1f 4f       	sbci	r17, 0xFF	; 255
    3d76:	fe 01       	movw	r30, r28
    3d78:	e3 5b       	subi	r30, 0xB3	; 179
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
    3d92:	de 01       	movw	r26, r28
    3d94:	a9 5b       	subi	r26, 0xB9	; 185
    3d96:	bf 4f       	sbci	r27, 0xFF	; 255
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e5 5b       	subi	r30, 0xB5	; 181
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	8d 93       	st	X+, r24
    3da4:	9c 93       	st	X, r25
    3da6:	fe 01       	movw	r30, r28
    3da8:	e9 5b       	subi	r30, 0xB9	; 185
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 81       	ld	r24, Z
    3dae:	91 81       	ldd	r25, Z+1	; 0x01
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <HLCD_displayChar+0x8fc>
    3db4:	fe 01       	movw	r30, r28
    3db6:	e9 5b       	subi	r30, 0xB9	; 185
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	91 83       	std	Z+1, r25	; 0x01
    3dbc:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e5 56       	subi	r30, 0x65	; 101
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	01 90       	ld	r0, Z+
    3dc6:	f0 81       	ld	r31, Z
    3dc8:	e0 2d       	mov	r30, r0
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e3 56       	subi	r30, 0x63	; 99
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	60 81       	ld	r22, Z
    3dd4:	0e 94 9e 08 	call	0x113c	; 0x113c <GPIO_set4msbValue>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	ed 5b       	subi	r30, 0xBD	; 189
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	a0 ef       	ldi	r26, 0xF0	; 240
    3de4:	b1 e4       	ldi	r27, 0x41	; 65
    3de6:	80 83       	st	Z, r24
    3de8:	91 83       	std	Z+1, r25	; 0x01
    3dea:	a2 83       	std	Z+2, r26	; 0x02
    3dec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dee:	8e 01       	movw	r16, r28
    3df0:	01 5c       	subi	r16, 0xC1	; 193
    3df2:	1f 4f       	sbci	r17, 0xFF	; 255
    3df4:	fe 01       	movw	r30, r28
    3df6:	ed 5b       	subi	r30, 0xBD	; 189
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	4a ef       	ldi	r20, 0xFA	; 250
    3e08:	54 e4       	ldi	r21, 0x44	; 68
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	f8 01       	movw	r30, r16
    3e14:	80 83       	st	Z, r24
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	a2 83       	std	Z+2, r26	; 0x02
    3e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	ff 96       	adiw	r30, 0x3f	; 63
    3e20:	60 81       	ld	r22, Z
    3e22:	71 81       	ldd	r23, Z+1	; 0x01
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <HLCD_displayChar+0x98e>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9e af       	std	Y+62, r25	; 0x3e
    3e3e:	8d af       	std	Y+61, r24	; 0x3d
    3e40:	46 c0       	rjmp	.+140    	; 0x3ece <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    3e42:	fe 01       	movw	r30, r28
    3e44:	ff 96       	adiw	r30, 0x3f	; 63
    3e46:	60 81       	ld	r22, Z
    3e48:	71 81       	ldd	r23, Z+1	; 0x01
    3e4a:	82 81       	ldd	r24, Z+2	; 0x02
    3e4c:	93 81       	ldd	r25, Z+3	; 0x03
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	3f ef       	ldi	r19, 0xFF	; 255
    3e52:	4f e7       	ldi	r20, 0x7F	; 127
    3e54:	57 e4       	ldi	r21, 0x47	; 71
    3e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e5a:	18 16       	cp	r1, r24
    3e5c:	64 f5       	brge	.+88     	; 0x3eb6 <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5e:	fe 01       	movw	r30, r28
    3e60:	ed 5b       	subi	r30, 0xBD	; 189
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e2       	ldi	r20, 0x20	; 32
    3e72:	51 e4       	ldi	r21, 0x41	; 65
    3e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	bc 01       	movw	r22, r24
    3e7e:	cd 01       	movw	r24, r26
    3e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	9e af       	std	Y+62, r25	; 0x3e
    3e8a:	8d af       	std	Y+61, r24	; 0x3d
    3e8c:	0f c0       	rjmp	.+30     	; 0x3eac <HLCD_displayChar+0x9f8>
    3e8e:	88 ec       	ldi	r24, 0xC8	; 200
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9c af       	std	Y+60, r25	; 0x3c
    3e94:	8b af       	std	Y+59, r24	; 0x3b
    3e96:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e98:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <HLCD_displayChar+0x9e6>
    3e9e:	9c af       	std	Y+60, r25	; 0x3c
    3ea0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ea4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	9e af       	std	Y+62, r25	; 0x3e
    3eaa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eac:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eae:	9e ad       	ldd	r25, Y+62	; 0x3e
    3eb0:	00 97       	sbiw	r24, 0x00	; 0
    3eb2:	69 f7       	brne	.-38     	; 0x3e8e <HLCD_displayChar+0x9da>
    3eb4:	16 c0       	rjmp	.+44     	; 0x3ee2 <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	ff 96       	adiw	r30, 0x3f	; 63
    3eba:	60 81       	ld	r22, Z
    3ebc:	71 81       	ldd	r23, Z+1	; 0x01
    3ebe:	82 81       	ldd	r24, Z+2	; 0x02
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	9e af       	std	Y+62, r25	; 0x3e
    3ecc:	8d af       	std	Y+61, r24	; 0x3d
    3ece:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ed0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ed2:	9a af       	std	Y+58, r25	; 0x3a
    3ed4:	89 af       	std	Y+57, r24	; 0x39
    3ed6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ed8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <HLCD_displayChar+0xa26>
    3ede:	9a af       	std	Y+58, r25	; 0x3a
    3ee0:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e3 57       	subi	r30, 0x73	; 115
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	88 23       	and	r24, r24
    3eec:	59 f4       	brne	.+22     	; 0x3f04 <HLCD_displayChar+0xa50>
    3eee:	ce 01       	movw	r24, r28
    3ef0:	89 56       	subi	r24, 0x69	; 105
    3ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    3efa:	fe 01       	movw	r30, r28
    3efc:	e3 57       	subi	r30, 0x73	; 115
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 83       	st	Z, r24
    3f02:	05 c0       	rjmp	.+10     	; 0x3f0e <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    3f04:	fe 01       	movw	r30, r28
    3f06:	e2 57       	subi	r30, 0x72	; 114
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	80 83       	st	Z, r24
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	a0 ef       	ldi	r26, 0xF0	; 240
    3f14:	b1 e4       	ldi	r27, 0x41	; 65
    3f16:	8d ab       	std	Y+53, r24	; 0x35
    3f18:	9e ab       	std	Y+54, r25	; 0x36
    3f1a:	af ab       	std	Y+55, r26	; 0x37
    3f1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1e:	6d a9       	ldd	r22, Y+53	; 0x35
    3f20:	7e a9       	ldd	r23, Y+54	; 0x36
    3f22:	8f a9       	ldd	r24, Y+55	; 0x37
    3f24:	98 ad       	ldd	r25, Y+56	; 0x38
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	4a ef       	ldi	r20, 0xFA	; 250
    3f2c:	54 e4       	ldi	r21, 0x44	; 68
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	89 ab       	std	Y+49, r24	; 0x31
    3f38:	9a ab       	std	Y+50, r25	; 0x32
    3f3a:	ab ab       	std	Y+51, r26	; 0x33
    3f3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3f40:	7a a9       	ldd	r23, Y+50	; 0x32
    3f42:	8b a9       	ldd	r24, Y+51	; 0x33
    3f44:	9c a9       	ldd	r25, Y+52	; 0x34
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	2c f4       	brge	.+10     	; 0x3f60 <HLCD_displayChar+0xaac>
		__ticks = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	98 ab       	std	Y+48, r25	; 0x30
    3f5c:	8f a7       	std	Y+47, r24	; 0x2f
    3f5e:	3f c0       	rjmp	.+126    	; 0x3fde <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    3f60:	69 a9       	ldd	r22, Y+49	; 0x31
    3f62:	7a a9       	ldd	r23, Y+50	; 0x32
    3f64:	8b a9       	ldd	r24, Y+51	; 0x33
    3f66:	9c a9       	ldd	r25, Y+52	; 0x34
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	4c f5       	brge	.+82     	; 0x3fca <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f78:	6d a9       	ldd	r22, Y+53	; 0x35
    3f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e2       	ldi	r20, 0x20	; 32
    3f86:	51 e4       	ldi	r21, 0x41	; 65
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	98 ab       	std	Y+48, r25	; 0x30
    3f9e:	8f a7       	std	Y+47, r24	; 0x2f
    3fa0:	0f c0       	rjmp	.+30     	; 0x3fc0 <HLCD_displayChar+0xb0c>
    3fa2:	88 ec       	ldi	r24, 0xC8	; 200
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	9e a7       	std	Y+46, r25	; 0x2e
    3fa8:	8d a7       	std	Y+45, r24	; 0x2d
    3faa:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fac:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <HLCD_displayChar+0xafa>
    3fb2:	9e a7       	std	Y+46, r25	; 0x2e
    3fb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	98 ab       	std	Y+48, r25	; 0x30
    3fbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	69 f7       	brne	.-38     	; 0x3fa2 <HLCD_displayChar+0xaee>
    3fc8:	bb c1       	rjmp	.+886    	; 0x4340 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fca:	69 a9       	ldd	r22, Y+49	; 0x31
    3fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    3fce:	8b a9       	ldd	r24, Y+51	; 0x33
    3fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    3fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	98 ab       	std	Y+48, r25	; 0x30
    3fdc:	8f a7       	std	Y+47, r24	; 0x2f
    3fde:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fe0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fe2:	9c a7       	std	Y+44, r25	; 0x2c
    3fe4:	8b a7       	std	Y+43, r24	; 0x2b
    3fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <HLCD_displayChar+0xb36>
    3fee:	9c a7       	std	Y+44, r25	; 0x2c
    3ff0:	8b a7       	std	Y+43, r24	; 0x2b
    3ff2:	a6 c1       	rjmp	.+844    	; 0x4340 <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e5 56       	subi	r30, 0x65	; 101
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	f0 81       	ld	r31, Z
    3ffe:	e0 2d       	mov	r30, r0
    4000:	80 81       	ld	r24, Z
    4002:	81 30       	cpi	r24, 0x01	; 1
    4004:	09 f0       	breq	.+2      	; 0x4008 <HLCD_displayChar+0xb54>
    4006:	97 c1       	rjmp	.+814    	; 0x4336 <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4008:	fe 01       	movw	r30, r28
    400a:	e3 57       	subi	r30, 0x73	; 115
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	88 23       	and	r24, r24
    4012:	59 f4       	brne	.+22     	; 0x402a <HLCD_displayChar+0xb76>
    4014:	ce 01       	movw	r24, r28
    4016:	89 56       	subi	r24, 0x69	; 105
    4018:	9f 4f       	sbci	r25, 0xFF	; 255
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    4020:	fe 01       	movw	r30, r28
    4022:	e3 57       	subi	r30, 0x73	; 115
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	80 83       	st	Z, r24
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    402a:	fe 01       	movw	r30, r28
    402c:	e2 57       	subi	r30, 0x72	; 114
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	80 83       	st	Z, r24
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	a0 e8       	ldi	r26, 0x80	; 128
    403a:	bf e3       	ldi	r27, 0x3F	; 63
    403c:	8f a3       	std	Y+39, r24	; 0x27
    403e:	98 a7       	std	Y+40, r25	; 0x28
    4040:	a9 a7       	std	Y+41, r26	; 0x29
    4042:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4044:	6f a1       	ldd	r22, Y+39	; 0x27
    4046:	78 a5       	ldd	r23, Y+40	; 0x28
    4048:	89 a5       	ldd	r24, Y+41	; 0x29
    404a:	9a a5       	ldd	r25, Y+42	; 0x2a
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	4a ef       	ldi	r20, 0xFA	; 250
    4052:	54 e4       	ldi	r21, 0x44	; 68
    4054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	8b a3       	std	Y+35, r24	; 0x23
    405e:	9c a3       	std	Y+36, r25	; 0x24
    4060:	ad a3       	std	Y+37, r26	; 0x25
    4062:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4064:	6b a1       	ldd	r22, Y+35	; 0x23
    4066:	7c a1       	ldd	r23, Y+36	; 0x24
    4068:	8d a1       	ldd	r24, Y+37	; 0x25
    406a:	9e a1       	ldd	r25, Y+38	; 0x26
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	2c f4       	brge	.+10     	; 0x4086 <HLCD_displayChar+0xbd2>
		__ticks = 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	9a a3       	std	Y+34, r25	; 0x22
    4082:	89 a3       	std	Y+33, r24	; 0x21
    4084:	3f c0       	rjmp	.+126    	; 0x4104 <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    4086:	6b a1       	ldd	r22, Y+35	; 0x23
    4088:	7c a1       	ldd	r23, Y+36	; 0x24
    408a:	8d a1       	ldd	r24, Y+37	; 0x25
    408c:	9e a1       	ldd	r25, Y+38	; 0x26
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	3f ef       	ldi	r19, 0xFF	; 255
    4092:	4f e7       	ldi	r20, 0x7F	; 127
    4094:	57 e4       	ldi	r21, 0x47	; 71
    4096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    409a:	18 16       	cp	r1, r24
    409c:	4c f5       	brge	.+82     	; 0x40f0 <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409e:	6f a1       	ldd	r22, Y+39	; 0x27
    40a0:	78 a5       	ldd	r23, Y+40	; 0x28
    40a2:	89 a5       	ldd	r24, Y+41	; 0x29
    40a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	51 e4       	ldi	r21, 0x41	; 65
    40ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	9a a3       	std	Y+34, r25	; 0x22
    40c4:	89 a3       	std	Y+33, r24	; 0x21
    40c6:	0f c0       	rjmp	.+30     	; 0x40e6 <HLCD_displayChar+0xc32>
    40c8:	88 ec       	ldi	r24, 0xC8	; 200
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	98 a3       	std	Y+32, r25	; 0x20
    40ce:	8f 8f       	std	Y+31, r24	; 0x1f
    40d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40d2:	98 a1       	ldd	r25, Y+32	; 0x20
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <HLCD_displayChar+0xc20>
    40d8:	98 a3       	std	Y+32, r25	; 0x20
    40da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40dc:	89 a1       	ldd	r24, Y+33	; 0x21
    40de:	9a a1       	ldd	r25, Y+34	; 0x22
    40e0:	01 97       	sbiw	r24, 0x01	; 1
    40e2:	9a a3       	std	Y+34, r25	; 0x22
    40e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e6:	89 a1       	ldd	r24, Y+33	; 0x21
    40e8:	9a a1       	ldd	r25, Y+34	; 0x22
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	69 f7       	brne	.-38     	; 0x40c8 <HLCD_displayChar+0xc14>
    40ee:	14 c0       	rjmp	.+40     	; 0x4118 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f0:	6b a1       	ldd	r22, Y+35	; 0x23
    40f2:	7c a1       	ldd	r23, Y+36	; 0x24
    40f4:	8d a1       	ldd	r24, Y+37	; 0x25
    40f6:	9e a1       	ldd	r25, Y+38	; 0x26
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9a a3       	std	Y+34, r25	; 0x22
    4102:	89 a3       	std	Y+33, r24	; 0x21
    4104:	89 a1       	ldd	r24, Y+33	; 0x21
    4106:	9a a1       	ldd	r25, Y+34	; 0x22
    4108:	9e 8f       	std	Y+30, r25	; 0x1e
    410a:	8d 8f       	std	Y+29, r24	; 0x1d
    410c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    410e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <HLCD_displayChar+0xc5c>
    4114:	9e 8f       	std	Y+30, r25	; 0x1e
    4116:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    4118:	fe 01       	movw	r30, r28
    411a:	e5 56       	subi	r30, 0x65	; 101
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	01 90       	ld	r0, Z+
    4120:	f0 81       	ld	r31, Z
    4122:	e0 2d       	mov	r30, r0
    4124:	92 81       	ldd	r25, Z+2	; 0x02
    4126:	fe 01       	movw	r30, r28
    4128:	e3 56       	subi	r30, 0x63	; 99
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 81       	ld	r24, Z
    412e:	28 2f       	mov	r18, r24
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	50 e0       	ldi	r21, 0x00	; 0
    4136:	89 2f       	mov	r24, r25
    4138:	ba 01       	movw	r22, r20
    413a:	a9 01       	movw	r20, r18
    413c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <GPIO_SetPortValue>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	a0 e8       	ldi	r26, 0x80	; 128
    4146:	bf e3       	ldi	r27, 0x3F	; 63
    4148:	89 8f       	std	Y+25, r24	; 0x19
    414a:	9a 8f       	std	Y+26, r25	; 0x1a
    414c:	ab 8f       	std	Y+27, r26	; 0x1b
    414e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4150:	69 8d       	ldd	r22, Y+25	; 0x19
    4152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	4a ef       	ldi	r20, 0xFA	; 250
    415e:	54 e4       	ldi	r21, 0x44	; 68
    4160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	8d 8b       	std	Y+21, r24	; 0x15
    416a:	9e 8b       	std	Y+22, r25	; 0x16
    416c:	af 8b       	std	Y+23, r26	; 0x17
    416e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4170:	6d 89       	ldd	r22, Y+21	; 0x15
    4172:	7e 89       	ldd	r23, Y+22	; 0x16
    4174:	8f 89       	ldd	r24, Y+23	; 0x17
    4176:	98 8d       	ldd	r25, Y+24	; 0x18
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e8       	ldi	r20, 0x80	; 128
    417e:	5f e3       	ldi	r21, 0x3F	; 63
    4180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4184:	88 23       	and	r24, r24
    4186:	2c f4       	brge	.+10     	; 0x4192 <HLCD_displayChar+0xcde>
		__ticks = 1;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	9c 8b       	std	Y+20, r25	; 0x14
    418e:	8b 8b       	std	Y+19, r24	; 0x13
    4190:	3f c0       	rjmp	.+126    	; 0x4210 <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    4192:	6d 89       	ldd	r22, Y+21	; 0x15
    4194:	7e 89       	ldd	r23, Y+22	; 0x16
    4196:	8f 89       	ldd	r24, Y+23	; 0x17
    4198:	98 8d       	ldd	r25, Y+24	; 0x18
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	3f ef       	ldi	r19, 0xFF	; 255
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	57 e4       	ldi	r21, 0x47	; 71
    41a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41a6:	18 16       	cp	r1, r24
    41a8:	4c f5       	brge	.+82     	; 0x41fc <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41aa:	69 8d       	ldd	r22, Y+25	; 0x19
    41ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e2       	ldi	r20, 0x20	; 32
    41b8:	51 e4       	ldi	r21, 0x41	; 65
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	9c 8b       	std	Y+20, r25	; 0x14
    41d0:	8b 8b       	std	Y+19, r24	; 0x13
    41d2:	0f c0       	rjmp	.+30     	; 0x41f2 <HLCD_displayChar+0xd3e>
    41d4:	88 ec       	ldi	r24, 0xC8	; 200
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9a 8b       	std	Y+18, r25	; 0x12
    41da:	89 8b       	std	Y+17, r24	; 0x11
    41dc:	89 89       	ldd	r24, Y+17	; 0x11
    41de:	9a 89       	ldd	r25, Y+18	; 0x12
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <HLCD_displayChar+0xd2c>
    41e4:	9a 8b       	std	Y+18, r25	; 0x12
    41e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e8:	8b 89       	ldd	r24, Y+19	; 0x13
    41ea:	9c 89       	ldd	r25, Y+20	; 0x14
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	9c 8b       	std	Y+20, r25	; 0x14
    41f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f2:	8b 89       	ldd	r24, Y+19	; 0x13
    41f4:	9c 89       	ldd	r25, Y+20	; 0x14
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	69 f7       	brne	.-38     	; 0x41d4 <HLCD_displayChar+0xd20>
    41fa:	14 c0       	rjmp	.+40     	; 0x4224 <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fc:	6d 89       	ldd	r22, Y+21	; 0x15
    41fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4200:	8f 89       	ldd	r24, Y+23	; 0x17
    4202:	98 8d       	ldd	r25, Y+24	; 0x18
    4204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	9c 8b       	std	Y+20, r25	; 0x14
    420e:	8b 8b       	std	Y+19, r24	; 0x13
    4210:	8b 89       	ldd	r24, Y+19	; 0x13
    4212:	9c 89       	ldd	r25, Y+20	; 0x14
    4214:	98 8b       	std	Y+16, r25	; 0x10
    4216:	8f 87       	std	Y+15, r24	; 0x0f
    4218:	8f 85       	ldd	r24, Y+15	; 0x0f
    421a:	98 89       	ldd	r25, Y+16	; 0x10
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	f1 f7       	brne	.-4      	; 0x421c <HLCD_displayChar+0xd68>
    4220:	98 8b       	std	Y+16, r25	; 0x10
    4222:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4224:	fe 01       	movw	r30, r28
    4226:	e3 57       	subi	r30, 0x73	; 115
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	80 81       	ld	r24, Z
    422c:	88 23       	and	r24, r24
    422e:	59 f4       	brne	.+22     	; 0x4246 <HLCD_displayChar+0xd92>
    4230:	ce 01       	movw	r24, r28
    4232:	89 56       	subi	r24, 0x69	; 105
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    423c:	fe 01       	movw	r30, r28
    423e:	e3 57       	subi	r30, 0x73	; 115
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 83       	st	Z, r24
    4244:	05 c0       	rjmp	.+10     	; 0x4250 <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    4246:	fe 01       	movw	r30, r28
    4248:	e2 57       	subi	r30, 0x72	; 114
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	80 83       	st	Z, r24
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	a0 e8       	ldi	r26, 0x80	; 128
    4256:	bf e3       	ldi	r27, 0x3F	; 63
    4258:	8b 87       	std	Y+11, r24	; 0x0b
    425a:	9c 87       	std	Y+12, r25	; 0x0c
    425c:	ad 87       	std	Y+13, r26	; 0x0d
    425e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4260:	6b 85       	ldd	r22, Y+11	; 0x0b
    4262:	7c 85       	ldd	r23, Y+12	; 0x0c
    4264:	8d 85       	ldd	r24, Y+13	; 0x0d
    4266:	9e 85       	ldd	r25, Y+14	; 0x0e
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	4a ef       	ldi	r20, 0xFA	; 250
    426e:	54 e4       	ldi	r21, 0x44	; 68
    4270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	8f 83       	std	Y+7, r24	; 0x07
    427a:	98 87       	std	Y+8, r25	; 0x08
    427c:	a9 87       	std	Y+9, r26	; 0x09
    427e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4280:	6f 81       	ldd	r22, Y+7	; 0x07
    4282:	78 85       	ldd	r23, Y+8	; 0x08
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	5f e3       	ldi	r21, 0x3F	; 63
    4290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4294:	88 23       	and	r24, r24
    4296:	2c f4       	brge	.+10     	; 0x42a2 <HLCD_displayChar+0xdee>
		__ticks = 1;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	9e 83       	std	Y+6, r25	; 0x06
    429e:	8d 83       	std	Y+5, r24	; 0x05
    42a0:	3f c0       	rjmp	.+126    	; 0x4320 <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    42a2:	6f 81       	ldd	r22, Y+7	; 0x07
    42a4:	78 85       	ldd	r23, Y+8	; 0x08
    42a6:	89 85       	ldd	r24, Y+9	; 0x09
    42a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	3f ef       	ldi	r19, 0xFF	; 255
    42ae:	4f e7       	ldi	r20, 0x7F	; 127
    42b0:	57 e4       	ldi	r21, 0x47	; 71
    42b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b6:	18 16       	cp	r1, r24
    42b8:	4c f5       	brge	.+82     	; 0x430c <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    42bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42be:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e2       	ldi	r20, 0x20	; 32
    42c8:	51 e4       	ldi	r21, 0x41	; 65
    42ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	9e 83       	std	Y+6, r25	; 0x06
    42e0:	8d 83       	std	Y+5, r24	; 0x05
    42e2:	0f c0       	rjmp	.+30     	; 0x4302 <HLCD_displayChar+0xe4e>
    42e4:	88 ec       	ldi	r24, 0xC8	; 200
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9c 83       	std	Y+4, r25	; 0x04
    42ea:	8b 83       	std	Y+3, r24	; 0x03
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
    42ee:	9c 81       	ldd	r25, Y+4	; 0x04
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <HLCD_displayChar+0xe3c>
    42f4:	9c 83       	std	Y+4, r25	; 0x04
    42f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f8:	8d 81       	ldd	r24, Y+5	; 0x05
    42fa:	9e 81       	ldd	r25, Y+6	; 0x06
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4302:	8d 81       	ldd	r24, Y+5	; 0x05
    4304:	9e 81       	ldd	r25, Y+6	; 0x06
    4306:	00 97       	sbiw	r24, 0x00	; 0
    4308:	69 f7       	brne	.-38     	; 0x42e4 <HLCD_displayChar+0xe30>
    430a:	1a c0       	rjmp	.+52     	; 0x4340 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    430c:	6f 81       	ldd	r22, Y+7	; 0x07
    430e:	78 85       	ldd	r23, Y+8	; 0x08
    4310:	89 85       	ldd	r24, Y+9	; 0x09
    4312:	9a 85       	ldd	r25, Y+10	; 0x0a
    4314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	9e 83       	std	Y+6, r25	; 0x06
    431e:	8d 83       	std	Y+5, r24	; 0x05
    4320:	8d 81       	ldd	r24, Y+5	; 0x05
    4322:	9e 81       	ldd	r25, Y+6	; 0x06
    4324:	9a 83       	std	Y+2, r25	; 0x02
    4326:	89 83       	std	Y+1, r24	; 0x01
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <HLCD_displayChar+0xe78>
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	05 c0       	rjmp	.+10     	; 0x4340 <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4336:	fe 01       	movw	r30, r28
    4338:	e2 57       	subi	r30, 0x72	; 114
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	83 e0       	ldi	r24, 0x03	; 3
    433e:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    4340:	fe 01       	movw	r30, r28
    4342:	e3 57       	subi	r30, 0x73	; 115
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 81       	ld	r24, Z
    4348:	88 23       	and	r24, r24
    434a:	29 f4       	brne	.+10     	; 0x4356 <HLCD_displayChar+0xea2>
    434c:	fe 01       	movw	r30, r28
    434e:	e2 57       	subi	r30, 0x72	; 114
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	10 82       	st	Z, r1
    4354:	0b c0       	rjmp	.+22     	; 0x436c <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    4356:	fe 01       	movw	r30, r28
    4358:	e2 57       	subi	r30, 0x72	; 114
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	80 83       	st	Z, r24
    4360:	05 c0       	rjmp	.+10     	; 0x436c <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    4362:	fe 01       	movw	r30, r28
    4364:	e2 57       	subi	r30, 0x72	; 114
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	80 83       	st	Z, r24
	}

	return lcdRet;
    436c:	fe 01       	movw	r30, r28
    436e:	e2 57       	subi	r30, 0x72	; 114
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
}
    4374:	c3 56       	subi	r28, 0x63	; 99
    4376:	df 4f       	sbci	r29, 0xFF	; 255
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
    4382:	cf 91       	pop	r28
    4384:	df 91       	pop	r29
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	08 95       	ret

0000438c <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    438c:	df 93       	push	r29
    438e:	cf 93       	push	r28
    4390:	00 d0       	rcall	.+0      	; 0x4392 <HLCD_displayString+0x6>
    4392:	00 d0       	rcall	.+0      	; 0x4394 <HLCD_displayString+0x8>
    4394:	00 d0       	rcall	.+0      	; 0x4396 <HLCD_displayString+0xa>
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	9c 83       	std	Y+4, r25	; 0x04
    439c:	8b 83       	std	Y+3, r24	; 0x03
    439e:	7e 83       	std	Y+6, r23	; 0x06
    43a0:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    43a6:	8b 81       	ldd	r24, Y+3	; 0x03
    43a8:	9c 81       	ldd	r25, Y+4	; 0x04
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	69 f1       	breq	.+90     	; 0x4408 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    43ae:	eb 81       	ldd	r30, Y+3	; 0x03
    43b0:	fc 81       	ldd	r31, Y+4	; 0x04
    43b2:	80 81       	ld	r24, Z
    43b4:	88 23       	and	r24, r24
    43b6:	51 f1       	breq	.+84     	; 0x440c <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    43b8:	eb 81       	ldd	r30, Y+3	; 0x03
    43ba:	fc 81       	ldd	r31, Y+4	; 0x04
    43bc:	80 81       	ld	r24, Z
    43be:	81 30       	cpi	r24, 0x01	; 1
    43c0:	01 f5       	brne	.+64     	; 0x4402 <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    43c2:	19 82       	std	Y+1, r1	; 0x01
    43c4:	12 c0       	rjmp	.+36     	; 0x43ea <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    43c6:	89 81       	ldd	r24, Y+1	; 0x01
    43c8:	28 2f       	mov	r18, r24
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	9e 81       	ldd	r25, Y+6	; 0x06
    43d0:	fc 01       	movw	r30, r24
    43d2:	e2 0f       	add	r30, r18
    43d4:	f3 1f       	adc	r31, r19
    43d6:	20 81       	ld	r18, Z
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	9c 81       	ldd	r25, Y+4	; 0x04
    43dc:	62 2f       	mov	r22, r18
    43de:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <HLCD_displayChar>
    43e2:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	8f 5f       	subi	r24, 0xFF	; 255
    43e8:	89 83       	std	Y+1, r24	; 0x01
    43ea:	89 81       	ldd	r24, Y+1	; 0x01
    43ec:	28 2f       	mov	r18, r24
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	8d 81       	ldd	r24, Y+5	; 0x05
    43f2:	9e 81       	ldd	r25, Y+6	; 0x06
    43f4:	fc 01       	movw	r30, r24
    43f6:	e2 0f       	add	r30, r18
    43f8:	f3 1f       	adc	r31, r19
    43fa:	80 81       	ld	r24, Z
    43fc:	88 23       	and	r24, r24
    43fe:	19 f7       	brne	.-58     	; 0x43c6 <HLCD_displayString+0x3a>
    4400:	05 c0       	rjmp	.+10     	; 0x440c <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	8a 83       	std	Y+2, r24	; 0x02
    4406:	02 c0       	rjmp	.+4      	; 0x440c <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4408:	82 e0       	ldi	r24, 0x02	; 2
    440a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    440c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    440e:	26 96       	adiw	r28, 0x06	; 6
    4410:	0f b6       	in	r0, 0x3f	; 63
    4412:	f8 94       	cli
    4414:	de bf       	out	0x3e, r29	; 62
    4416:	0f be       	out	0x3f, r0	; 63
    4418:	cd bf       	out	0x3d, r28	; 61
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	08 95       	ret

00004420 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    4420:	df 93       	push	r29
    4422:	cf 93       	push	r28
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	6b 97       	sbiw	r28, 0x1b	; 27
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	f8 94       	cli
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	0f be       	out	0x3f, r0	; 63
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	9f 8b       	std	Y+23, r25	; 0x17
    4436:	8e 8b       	std	Y+22, r24	; 0x16
    4438:	48 8f       	std	Y+24, r20	; 0x18
    443a:	59 8f       	std	Y+25, r21	; 0x19
    443c:	6a 8f       	std	Y+26, r22	; 0x1a
    443e:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4444:	8e 89       	ldd	r24, Y+22	; 0x16
    4446:	9f 89       	ldd	r25, Y+23	; 0x17
    4448:	00 97       	sbiw	r24, 0x00	; 0
    444a:	01 f1       	breq	.+64     	; 0x448c <HLCD_displayNumber+0x6c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    444c:	ee 89       	ldd	r30, Y+22	; 0x16
    444e:	ff 89       	ldd	r31, Y+23	; 0x17
    4450:	80 81       	ld	r24, Z
    4452:	88 23       	and	r24, r24
    4454:	e9 f0       	breq	.+58     	; 0x4490 <HLCD_displayNumber+0x70>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4456:	ee 89       	ldd	r30, Y+22	; 0x16
    4458:	ff 89       	ldd	r31, Y+23	; 0x17
    445a:	80 81       	ld	r24, Z
    445c:	81 30       	cpi	r24, 0x01	; 1
    445e:	99 f4       	brne	.+38     	; 0x4486 <HLCD_displayNumber+0x66>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    4460:	88 8d       	ldd	r24, Y+24	; 0x18
    4462:	99 8d       	ldd	r25, Y+25	; 0x19
    4464:	9e 01       	movw	r18, r28
    4466:	2e 5f       	subi	r18, 0xFE	; 254
    4468:	3f 4f       	sbci	r19, 0xFF	; 255
    446a:	b9 01       	movw	r22, r18
    446c:	4a e0       	ldi	r20, 0x0A	; 10
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    4474:	8e 89       	ldd	r24, Y+22	; 0x16
    4476:	9f 89       	ldd	r25, Y+23	; 0x17
    4478:	9e 01       	movw	r18, r28
    447a:	2e 5f       	subi	r18, 0xFE	; 254
    447c:	3f 4f       	sbci	r19, 0xFF	; 255
    447e:	b9 01       	movw	r22, r18
    4480:	0e 94 c6 21 	call	0x438c	; 0x438c <HLCD_displayString>
    4484:	05 c0       	rjmp	.+10     	; 0x4490 <HLCD_displayNumber+0x70>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4486:	83 e0       	ldi	r24, 0x03	; 3
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <HLCD_displayNumber+0x70>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    448c:	82 e0       	ldi	r24, 0x02	; 2
    448e:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    4490:	89 81       	ldd	r24, Y+1	; 0x01
}
    4492:	6b 96       	adiw	r28, 0x1b	; 27
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	cf 91       	pop	r28
    44a0:	df 91       	pop	r29
    44a2:	08 95       	ret

000044a4 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	00 d0       	rcall	.+0      	; 0x44aa <HLCD_changeCursorPosation+0x6>
    44aa:	00 d0       	rcall	.+0      	; 0x44ac <HLCD_changeCursorPosation+0x8>
    44ac:	0f 92       	push	r0
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	9b 83       	std	Y+3, r25	; 0x03
    44b4:	8a 83       	std	Y+2, r24	; 0x02
    44b6:	6c 83       	std	Y+4, r22	; 0x04
    44b8:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    44be:	8a 81       	ldd	r24, Y+2	; 0x02
    44c0:	9b 81       	ldd	r25, Y+3	; 0x03
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	91 f1       	breq	.+100    	; 0x452a <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    44c6:	ea 81       	ldd	r30, Y+2	; 0x02
    44c8:	fb 81       	ldd	r31, Y+3	; 0x03
    44ca:	80 81       	ld	r24, Z
    44cc:	88 23       	and	r24, r24
    44ce:	79 f1       	breq	.+94     	; 0x452e <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    44d0:	ea 81       	ldd	r30, Y+2	; 0x02
    44d2:	fb 81       	ldd	r31, Y+3	; 0x03
    44d4:	80 81       	ld	r24, Z
    44d6:	81 30       	cpi	r24, 0x01	; 1
    44d8:	29 f5       	brne	.+74     	; 0x4524 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    44da:	8c 81       	ldd	r24, Y+4	; 0x04
    44dc:	88 23       	and	r24, r24
    44de:	71 f4       	brne	.+28     	; 0x44fc <HLCD_changeCursorPosation+0x58>
    44e0:	8d 81       	ldd	r24, Y+5	; 0x05
    44e2:	80 31       	cpi	r24, 0x10	; 16
    44e4:	58 f4       	brcc	.+22     	; 0x44fc <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    44e6:	8d 81       	ldd	r24, Y+5	; 0x05
    44e8:	8f 70       	andi	r24, 0x0F	; 15
    44ea:	80 68       	ori	r24, 0x80	; 128
    44ec:	28 2f       	mov	r18, r24
    44ee:	8a 81       	ldd	r24, Y+2	; 0x02
    44f0:	9b 81       	ldd	r25, Y+3	; 0x03
    44f2:	62 2f       	mov	r22, r18
    44f4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	19 c0       	rjmp	.+50     	; 0x452e <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    44fc:	8c 81       	ldd	r24, Y+4	; 0x04
    44fe:	81 30       	cpi	r24, 0x01	; 1
    4500:	71 f4       	brne	.+28     	; 0x451e <HLCD_changeCursorPosation+0x7a>
    4502:	8d 81       	ldd	r24, Y+5	; 0x05
    4504:	80 31       	cpi	r24, 0x10	; 16
    4506:	58 f4       	brcc	.+22     	; 0x451e <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	8f 70       	andi	r24, 0x0F	; 15
    450c:	80 6c       	ori	r24, 0xC0	; 192
    450e:	28 2f       	mov	r18, r24
    4510:	8a 81       	ldd	r24, Y+2	; 0x02
    4512:	9b 81       	ldd	r25, Y+3	; 0x03
    4514:	62 2f       	mov	r22, r18
    4516:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    451a:	89 83       	std	Y+1, r24	; 0x01
    451c:	08 c0       	rjmp	.+16     	; 0x452e <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    451e:	84 e0       	ldi	r24, 0x04	; 4
    4520:	89 83       	std	Y+1, r24	; 0x01
    4522:	05 c0       	rjmp	.+10     	; 0x452e <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4524:	83 e0       	ldi	r24, 0x03	; 3
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	02 c0       	rjmp	.+4      	; 0x452e <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    452a:	82 e0       	ldi	r24, 0x02	; 2
    452c:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    452e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	cf 91       	pop	r28
    453c:	df 91       	pop	r29
    453e:	08 95       	ret

00004540 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    4540:	df 93       	push	r29
    4542:	cf 93       	push	r28
    4544:	00 d0       	rcall	.+0      	; 0x4546 <HLCD_shiftDisplay+0x6>
    4546:	00 d0       	rcall	.+0      	; 0x4548 <HLCD_shiftDisplay+0x8>
    4548:	00 d0       	rcall	.+0      	; 0x454a <HLCD_shiftDisplay+0xa>
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	9c 83       	std	Y+4, r25	; 0x04
    4550:	8b 83       	std	Y+3, r24	; 0x03
    4552:	6d 83       	std	Y+5, r22	; 0x05
    4554:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    455a:	8b 81       	ldd	r24, Y+3	; 0x03
    455c:	9c 81       	ldd	r25, Y+4	; 0x04
    455e:	00 97       	sbiw	r24, 0x00	; 0
    4560:	31 f1       	breq	.+76     	; 0x45ae <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    4562:	8e 81       	ldd	r24, Y+6	; 0x06
    4564:	8c 31       	cpi	r24, 0x1C	; 28
    4566:	19 f0       	breq	.+6      	; 0x456e <HLCD_shiftDisplay+0x2e>
    4568:	8e 81       	ldd	r24, Y+6	; 0x06
    456a:	88 31       	cpi	r24, 0x18	; 24
    456c:	e9 f4       	brne	.+58     	; 0x45a8 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    456e:	eb 81       	ldd	r30, Y+3	; 0x03
    4570:	fc 81       	ldd	r31, Y+4	; 0x04
    4572:	80 81       	ld	r24, Z
    4574:	88 23       	and	r24, r24
    4576:	e9 f0       	breq	.+58     	; 0x45b2 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4578:	eb 81       	ldd	r30, Y+3	; 0x03
    457a:	fc 81       	ldd	r31, Y+4	; 0x04
    457c:	80 81       	ld	r24, Z
    457e:	81 30       	cpi	r24, 0x01	; 1
    4580:	81 f4       	brne	.+32     	; 0x45a2 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    4582:	19 82       	std	Y+1, r1	; 0x01
    4584:	09 c0       	rjmp	.+18     	; 0x4598 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    4586:	8b 81       	ldd	r24, Y+3	; 0x03
    4588:	9c 81       	ldd	r25, Y+4	; 0x04
    458a:	6e 81       	ldd	r22, Y+6	; 0x06
    458c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    4590:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	8f 5f       	subi	r24, 0xFF	; 255
    4596:	89 83       	std	Y+1, r24	; 0x01
    4598:	99 81       	ldd	r25, Y+1	; 0x01
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	98 17       	cp	r25, r24
    459e:	98 f3       	brcs	.-26     	; 0x4586 <HLCD_shiftDisplay+0x46>
    45a0:	08 c0       	rjmp	.+16     	; 0x45b2 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	8a 83       	std	Y+2, r24	; 0x02
    45a6:	05 c0       	rjmp	.+10     	; 0x45b2 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    45a8:	84 e0       	ldi	r24, 0x04	; 4
    45aa:	8a 83       	std	Y+2, r24	; 0x02
    45ac:	02 c0       	rjmp	.+4      	; 0x45b2 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    45ae:	82 e0       	ldi	r24, 0x02	; 2
    45b0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    45b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    45b4:	26 96       	adiw	r28, 0x06	; 6
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	08 95       	ret

000045c6 <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    45c6:	df 93       	push	r29
    45c8:	cf 93       	push	r28
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	27 97       	sbiw	r28, 0x07	; 7
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	9c 83       	std	Y+4, r25	; 0x04
    45dc:	8b 83       	std	Y+3, r24	; 0x03
    45de:	7e 83       	std	Y+6, r23	; 0x06
    45e0:	6d 83       	std	Y+5, r22	; 0x05
    45e2:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	9c 81       	ldd	r25, Y+4	; 0x04
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <HLCD_createNewCustomChar+0x2c>
    45f0:	4f c0       	rjmp	.+158    	; 0x4690 <HLCD_createNewCustomChar+0xca>
    45f2:	8d 81       	ldd	r24, Y+5	; 0x05
    45f4:	9e 81       	ldd	r25, Y+6	; 0x06
    45f6:	00 97       	sbiw	r24, 0x00	; 0
    45f8:	09 f4       	brne	.+2      	; 0x45fc <HLCD_createNewCustomChar+0x36>
    45fa:	4a c0       	rjmp	.+148    	; 0x4690 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    45fc:	8f 81       	ldd	r24, Y+7	; 0x07
    45fe:	88 30       	cpi	r24, 0x08	; 8
    4600:	08 f0       	brcs	.+2      	; 0x4604 <HLCD_createNewCustomChar+0x3e>
    4602:	43 c0       	rjmp	.+134    	; 0x468a <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4604:	eb 81       	ldd	r30, Y+3	; 0x03
    4606:	fc 81       	ldd	r31, Y+4	; 0x04
    4608:	80 81       	ld	r24, Z
    460a:	88 23       	and	r24, r24
    460c:	09 f4       	brne	.+2      	; 0x4610 <HLCD_createNewCustomChar+0x4a>
    460e:	42 c0       	rjmp	.+132    	; 0x4694 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4610:	eb 81       	ldd	r30, Y+3	; 0x03
    4612:	fc 81       	ldd	r31, Y+4	; 0x04
    4614:	80 81       	ld	r24, Z
    4616:	81 30       	cpi	r24, 0x01	; 1
    4618:	a9 f5       	brne	.+106    	; 0x4684 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    461a:	8f 81       	ldd	r24, Y+7	; 0x07
    461c:	88 2f       	mov	r24, r24
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	88 0f       	add	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	88 0f       	add	r24, r24
    462a:	99 1f       	adc	r25, r25
    462c:	80 64       	ori	r24, 0x40	; 64
    462e:	28 2f       	mov	r18, r24
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	9c 81       	ldd	r25, Y+4	; 0x04
    4634:	62 2f       	mov	r22, r18
    4636:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    463a:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    463c:	8a 81       	ldd	r24, Y+2	; 0x02
    463e:	88 23       	and	r24, r24
    4640:	d1 f4       	brne	.+52     	; 0x4676 <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    4642:	19 82       	std	Y+1, r1	; 0x01
    4644:	15 c0       	rjmp	.+42     	; 0x4670 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    4646:	89 81       	ldd	r24, Y+1	; 0x01
    4648:	28 2f       	mov	r18, r24
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	8d 81       	ldd	r24, Y+5	; 0x05
    464e:	9e 81       	ldd	r25, Y+6	; 0x06
    4650:	fc 01       	movw	r30, r24
    4652:	e2 0f       	add	r30, r18
    4654:	f3 1f       	adc	r31, r19
    4656:	20 81       	ld	r18, Z
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	9c 81       	ldd	r25, Y+4	; 0x04
    465c:	62 2f       	mov	r22, r18
    465e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <HLCD_displayChar>
    4662:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    4664:	8a 81       	ldd	r24, Y+2	; 0x02
    4666:	88 23       	and	r24, r24
    4668:	31 f4       	brne	.+12     	; 0x4676 <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	8f 5f       	subi	r24, 0xFF	; 255
    466e:	89 83       	std	Y+1, r24	; 0x01
    4670:	89 81       	ldd	r24, Y+1	; 0x01
    4672:	88 30       	cpi	r24, 0x08	; 8
    4674:	40 f3       	brcs	.-48     	; 0x4646 <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	9c 81       	ldd	r25, Y+4	; 0x04
    467a:	60 e8       	ldi	r22, 0x80	; 128
    467c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    4680:	8a 83       	std	Y+2, r24	; 0x02
    4682:	08 c0       	rjmp	.+16     	; 0x4694 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4684:	83 e0       	ldi	r24, 0x03	; 3
    4686:	8a 83       	std	Y+2, r24	; 0x02
    4688:	05 c0       	rjmp	.+10     	; 0x4694 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    468a:	84 e0       	ldi	r24, 0x04	; 4
    468c:	8a 83       	std	Y+2, r24	; 0x02
    468e:	02 c0       	rjmp	.+4      	; 0x4694 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4690:	82 e0       	ldi	r24, 0x02	; 2
    4692:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    4694:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4696:	27 96       	adiw	r28, 0x07	; 7
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	08 95       	ret

000046a8 <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    46a8:	df 93       	push	r29
    46aa:	cf 93       	push	r28
    46ac:	00 d0       	rcall	.+0      	; 0x46ae <HLCD_Clr+0x6>
    46ae:	0f 92       	push	r0
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
    46b4:	9b 83       	std	Y+3, r25	; 0x03
    46b6:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    46bc:	8a 81       	ldd	r24, Y+2	; 0x02
    46be:	9b 81       	ldd	r25, Y+3	; 0x03
    46c0:	61 e0       	ldi	r22, 0x01	; 1
    46c2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <HLCD_sendCmd>
    46c6:	89 83       	std	Y+1, r24	; 0x01
	if(lcdRet == HLCD_OK)
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	88 23       	and	r24, r24
    46cc:	39 f4       	brne	.+14     	; 0x46dc <HLCD_Clr+0x34>
	lcdRet = HLCD_changeCursorPosation(ST_ptrLcdCfgInstance,0,0);
    46ce:	8a 81       	ldd	r24, Y+2	; 0x02
    46d0:	9b 81       	ldd	r25, Y+3	; 0x03
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	40 e0       	ldi	r20, 0x00	; 0
    46d6:	0e 94 52 22 	call	0x44a4	; 0x44a4 <HLCD_changeCursorPosation>
    46da:	89 83       	std	Y+1, r24	; 0x01
	else /* Do Nohting */;

	return lcdRet;
    46dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	08 95       	ret

000046ea <appInit>:
		.prescalerDivision = MADC_DIV8,
		.channelSelection = MADC_CHANNEL_ZERO
};

void appInit(void)
{
    46ea:	df 93       	push	r29
    46ec:	cf 93       	push	r28
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
    46f2:	80 e8       	ldi	r24, 0x80	; 128
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	0e 94 9d 0b 	call	0x173a	; 0x173a <HLCD_init>
	MADC_init(&adc);
    46fa:	8e e8       	ldi	r24, 0x8E	; 142
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 37 09 	call	0x126e	; 0x126e <MADC_init>
}
    4702:	cf 91       	pop	r28
    4704:	df 91       	pop	r29
    4706:	08 95       	ret

00004708 <appMain>:

void appMain(void)
{
    4708:	df 93       	push	r29
    470a:	cf 93       	push	r28
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
    4710:	62 97       	sbiw	r28, 0x12	; 18
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	f8 94       	cli
    4716:	de bf       	out	0x3e, r29	; 62
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	cd bf       	out	0x3d, r28	; 61
	Uint16_t digitalValue = 0;
    471c:	1a 8a       	std	Y+18, r1	; 0x12
    471e:	19 8a       	std	Y+17, r1	; 0x11
	Uint16_t voltage = 0;
    4720:	18 8a       	std	Y+16, r1	; 0x10
    4722:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		MADC_startConversion(&adc);
    4724:	8e e8       	ldi	r24, 0x8E	; 142
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MADC_startConversion>
		MADC_getConversionResult(&adc,&digitalValue);
    472c:	8e e8       	ldi	r24, 0x8E	; 142
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	9e 01       	movw	r18, r28
    4732:	2f 5e       	subi	r18, 0xEF	; 239
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
    4736:	b9 01       	movw	r22, r18
    4738:	0e 94 00 0a 	call	0x1400	; 0x1400 <MADC_getConversionResult>
		voltage = ((digitalValue * 5) / 1024) * 1000 ;
    473c:	29 89       	ldd	r18, Y+17	; 0x11
    473e:	3a 89       	ldd	r19, Y+18	; 0x12
    4740:	c9 01       	movw	r24, r18
    4742:	88 0f       	add	r24, r24
    4744:	99 1f       	adc	r25, r25
    4746:	88 0f       	add	r24, r24
    4748:	99 1f       	adc	r25, r25
    474a:	82 0f       	add	r24, r18
    474c:	93 1f       	adc	r25, r19
    474e:	9c 01       	movw	r18, r24
    4750:	23 2f       	mov	r18, r19
    4752:	33 27       	eor	r19, r19
    4754:	26 95       	lsr	r18
    4756:	26 95       	lsr	r18
    4758:	88 ee       	ldi	r24, 0xE8	; 232
    475a:	93 e0       	ldi	r25, 0x03	; 3
    475c:	ac 01       	movw	r20, r24
    475e:	24 9f       	mul	r18, r20
    4760:	c0 01       	movw	r24, r0
    4762:	25 9f       	mul	r18, r21
    4764:	90 0d       	add	r25, r0
    4766:	34 9f       	mul	r19, r20
    4768:	90 0d       	add	r25, r0
    476a:	11 24       	eor	r1, r1
    476c:	98 8b       	std	Y+16, r25	; 0x10
    476e:	8f 87       	std	Y+15, r24	; 0x0f

		HLCD_displayNumber(&myLcd,voltage);
    4770:	8f 85       	ldd	r24, Y+15	; 0x0f
    4772:	98 89       	ldd	r25, Y+16	; 0x10
    4774:	9c 01       	movw	r18, r24
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	50 e0       	ldi	r21, 0x00	; 0
    477a:	80 e8       	ldi	r24, 0x80	; 128
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	ba 01       	movw	r22, r20
    4780:	a9 01       	movw	r20, r18
    4782:	0e 94 10 22 	call	0x4420	; 0x4420 <HLCD_displayNumber>
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	aa e7       	ldi	r26, 0x7A	; 122
    478c:	b4 e4       	ldi	r27, 0x44	; 68
    478e:	8b 87       	std	Y+11, r24	; 0x0b
    4790:	9c 87       	std	Y+12, r25	; 0x0c
    4792:	ad 87       	std	Y+13, r26	; 0x0d
    4794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4796:	6b 85       	ldd	r22, Y+11	; 0x0b
    4798:	7c 85       	ldd	r23, Y+12	; 0x0c
    479a:	8d 85       	ldd	r24, Y+13	; 0x0d
    479c:	9e 85       	ldd	r25, Y+14	; 0x0e
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	4a ef       	ldi	r20, 0xFA	; 250
    47a4:	54 e4       	ldi	r21, 0x44	; 68
    47a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	8f 83       	std	Y+7, r24	; 0x07
    47b0:	98 87       	std	Y+8, r25	; 0x08
    47b2:	a9 87       	std	Y+9, r26	; 0x09
    47b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47b6:	6f 81       	ldd	r22, Y+7	; 0x07
    47b8:	78 85       	ldd	r23, Y+8	; 0x08
    47ba:	89 85       	ldd	r24, Y+9	; 0x09
    47bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	40 e8       	ldi	r20, 0x80	; 128
    47c4:	5f e3       	ldi	r21, 0x3F	; 63
    47c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47ca:	88 23       	and	r24, r24
    47cc:	2c f4       	brge	.+10     	; 0x47d8 <appMain+0xd0>
		__ticks = 1;
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	9e 83       	std	Y+6, r25	; 0x06
    47d4:	8d 83       	std	Y+5, r24	; 0x05
    47d6:	3f c0       	rjmp	.+126    	; 0x4856 <appMain+0x14e>
	else if (__tmp > 65535)
    47d8:	6f 81       	ldd	r22, Y+7	; 0x07
    47da:	78 85       	ldd	r23, Y+8	; 0x08
    47dc:	89 85       	ldd	r24, Y+9	; 0x09
    47de:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	3f ef       	ldi	r19, 0xFF	; 255
    47e4:	4f e7       	ldi	r20, 0x7F	; 127
    47e6:	57 e4       	ldi	r21, 0x47	; 71
    47e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47ec:	18 16       	cp	r1, r24
    47ee:	4c f5       	brge	.+82     	; 0x4842 <appMain+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e2       	ldi	r20, 0x20	; 32
    47fe:	51 e4       	ldi	r21, 0x41	; 65
    4800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	bc 01       	movw	r22, r24
    480a:	cd 01       	movw	r24, r26
    480c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	9e 83       	std	Y+6, r25	; 0x06
    4816:	8d 83       	std	Y+5, r24	; 0x05
    4818:	0f c0       	rjmp	.+30     	; 0x4838 <appMain+0x130>
    481a:	88 ec       	ldi	r24, 0xC8	; 200
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	9c 83       	std	Y+4, r25	; 0x04
    4820:	8b 83       	std	Y+3, r24	; 0x03
    4822:	8b 81       	ldd	r24, Y+3	; 0x03
    4824:	9c 81       	ldd	r25, Y+4	; 0x04
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	f1 f7       	brne	.-4      	; 0x4826 <appMain+0x11e>
    482a:	9c 83       	std	Y+4, r25	; 0x04
    482c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482e:	8d 81       	ldd	r24, Y+5	; 0x05
    4830:	9e 81       	ldd	r25, Y+6	; 0x06
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	9e 83       	std	Y+6, r25	; 0x06
    4836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4838:	8d 81       	ldd	r24, Y+5	; 0x05
    483a:	9e 81       	ldd	r25, Y+6	; 0x06
    483c:	00 97       	sbiw	r24, 0x00	; 0
    483e:	69 f7       	brne	.-38     	; 0x481a <appMain+0x112>
    4840:	14 c0       	rjmp	.+40     	; 0x486a <appMain+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4842:	6f 81       	ldd	r22, Y+7	; 0x07
    4844:	78 85       	ldd	r23, Y+8	; 0x08
    4846:	89 85       	ldd	r24, Y+9	; 0x09
    4848:	9a 85       	ldd	r25, Y+10	; 0x0a
    484a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	9e 83       	std	Y+6, r25	; 0x06
    4854:	8d 83       	std	Y+5, r24	; 0x05
    4856:	8d 81       	ldd	r24, Y+5	; 0x05
    4858:	9e 81       	ldd	r25, Y+6	; 0x06
    485a:	9a 83       	std	Y+2, r25	; 0x02
    485c:	89 83       	std	Y+1, r24	; 0x01
    485e:	89 81       	ldd	r24, Y+1	; 0x01
    4860:	9a 81       	ldd	r25, Y+2	; 0x02
    4862:	01 97       	sbiw	r24, 0x01	; 1
    4864:	f1 f7       	brne	.-4      	; 0x4862 <appMain+0x15a>
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HLCD_Clr(&myLcd);
    486a:	80 e8       	ldi	r24, 0x80	; 128
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e 94 54 23 	call	0x46a8	; 0x46a8 <HLCD_Clr>
    4872:	58 cf       	rjmp	.-336    	; 0x4724 <appMain+0x1c>

00004874 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
	appInit();
    487c:	0e 94 75 23 	call	0x46ea	; 0x46ea <appInit>
	appMain();
    4880:	0e 94 84 23 	call	0x4708	; 0x4708 <appMain>
}
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <__prologue_saves__>:
    488a:	2f 92       	push	r2
    488c:	3f 92       	push	r3
    488e:	4f 92       	push	r4
    4890:	5f 92       	push	r5
    4892:	6f 92       	push	r6
    4894:	7f 92       	push	r7
    4896:	8f 92       	push	r8
    4898:	9f 92       	push	r9
    489a:	af 92       	push	r10
    489c:	bf 92       	push	r11
    489e:	cf 92       	push	r12
    48a0:	df 92       	push	r13
    48a2:	ef 92       	push	r14
    48a4:	ff 92       	push	r15
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
    48b2:	ca 1b       	sub	r28, r26
    48b4:	db 0b       	sbc	r29, r27
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	09 94       	ijmp

000048c2 <__epilogue_restores__>:
    48c2:	2a 88       	ldd	r2, Y+18	; 0x12
    48c4:	39 88       	ldd	r3, Y+17	; 0x11
    48c6:	48 88       	ldd	r4, Y+16	; 0x10
    48c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    48cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    48ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    48d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    48d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    48d4:	b9 84       	ldd	r11, Y+9	; 0x09
    48d6:	c8 84       	ldd	r12, Y+8	; 0x08
    48d8:	df 80       	ldd	r13, Y+7	; 0x07
    48da:	ee 80       	ldd	r14, Y+6	; 0x06
    48dc:	fd 80       	ldd	r15, Y+5	; 0x05
    48de:	0c 81       	ldd	r16, Y+4	; 0x04
    48e0:	1b 81       	ldd	r17, Y+3	; 0x03
    48e2:	aa 81       	ldd	r26, Y+2	; 0x02
    48e4:	b9 81       	ldd	r27, Y+1	; 0x01
    48e6:	ce 0f       	add	r28, r30
    48e8:	d1 1d       	adc	r29, r1
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	f8 94       	cli
    48ee:	de bf       	out	0x3e, r29	; 62
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	cd bf       	out	0x3d, r28	; 61
    48f4:	ed 01       	movw	r28, r26
    48f6:	08 95       	ret

000048f8 <itoa>:
    48f8:	fb 01       	movw	r30, r22
    48fa:	9f 01       	movw	r18, r30
    48fc:	e8 94       	clt
    48fe:	42 30       	cpi	r20, 0x02	; 2
    4900:	c4 f0       	brlt	.+48     	; 0x4932 <itoa+0x3a>
    4902:	45 32       	cpi	r20, 0x25	; 37
    4904:	b4 f4       	brge	.+44     	; 0x4932 <itoa+0x3a>
    4906:	4a 30       	cpi	r20, 0x0A	; 10
    4908:	29 f4       	brne	.+10     	; 0x4914 <itoa+0x1c>
    490a:	97 fb       	bst	r25, 7
    490c:	1e f4       	brtc	.+6      	; 0x4914 <itoa+0x1c>
    490e:	90 95       	com	r25
    4910:	81 95       	neg	r24
    4912:	9f 4f       	sbci	r25, 0xFF	; 255
    4914:	64 2f       	mov	r22, r20
    4916:	77 27       	eor	r23, r23
    4918:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodhi4>
    491c:	80 5d       	subi	r24, 0xD0	; 208
    491e:	8a 33       	cpi	r24, 0x3A	; 58
    4920:	0c f0       	brlt	.+2      	; 0x4924 <itoa+0x2c>
    4922:	89 5d       	subi	r24, 0xD9	; 217
    4924:	81 93       	st	Z+, r24
    4926:	cb 01       	movw	r24, r22
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	a1 f7       	brne	.-24     	; 0x4914 <itoa+0x1c>
    492c:	16 f4       	brtc	.+4      	; 0x4932 <itoa+0x3a>
    492e:	5d e2       	ldi	r21, 0x2D	; 45
    4930:	51 93       	st	Z+, r21
    4932:	10 82       	st	Z, r1
    4934:	c9 01       	movw	r24, r18
    4936:	0c 94 9d 24 	jmp	0x493a	; 0x493a <strrev>

0000493a <strrev>:
    493a:	dc 01       	movw	r26, r24
    493c:	fc 01       	movw	r30, r24
    493e:	67 2f       	mov	r22, r23
    4940:	71 91       	ld	r23, Z+
    4942:	77 23       	and	r23, r23
    4944:	e1 f7       	brne	.-8      	; 0x493e <strrev+0x4>
    4946:	32 97       	sbiw	r30, 0x02	; 2
    4948:	04 c0       	rjmp	.+8      	; 0x4952 <strrev+0x18>
    494a:	7c 91       	ld	r23, X
    494c:	6d 93       	st	X+, r22
    494e:	70 83       	st	Z, r23
    4950:	62 91       	ld	r22, -Z
    4952:	ae 17       	cp	r26, r30
    4954:	bf 07       	cpc	r27, r31
    4956:	c8 f3       	brcs	.-14     	; 0x494a <strrev+0x10>
    4958:	08 95       	ret

0000495a <__udivmodhi4>:
    495a:	aa 1b       	sub	r26, r26
    495c:	bb 1b       	sub	r27, r27
    495e:	51 e1       	ldi	r21, 0x11	; 17
    4960:	07 c0       	rjmp	.+14     	; 0x4970 <__udivmodhi4_ep>

00004962 <__udivmodhi4_loop>:
    4962:	aa 1f       	adc	r26, r26
    4964:	bb 1f       	adc	r27, r27
    4966:	a6 17       	cp	r26, r22
    4968:	b7 07       	cpc	r27, r23
    496a:	10 f0       	brcs	.+4      	; 0x4970 <__udivmodhi4_ep>
    496c:	a6 1b       	sub	r26, r22
    496e:	b7 0b       	sbc	r27, r23

00004970 <__udivmodhi4_ep>:
    4970:	88 1f       	adc	r24, r24
    4972:	99 1f       	adc	r25, r25
    4974:	5a 95       	dec	r21
    4976:	a9 f7       	brne	.-22     	; 0x4962 <__udivmodhi4_loop>
    4978:	80 95       	com	r24
    497a:	90 95       	com	r25
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	08 95       	ret

00004982 <_exit>:
    4982:	f8 94       	cli

00004984 <__stop_program>:
    4984:	ff cf       	rjmp	.-2      	; 0x4984 <__stop_program>
