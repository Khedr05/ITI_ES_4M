
11_Lec_4_Assignment_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00004bb6  00004c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  008000c8  008000c8  00004cb2  2**0
                  ALLOC
  3 .stab         00004a94  00000000  00000000  00004cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003774  00000000  00000000  00009748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000cffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d16c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000edb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000fca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001160b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <main>
      8a:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 25 	jmp	0x4a98	; 0x4a98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 25 	jmp	0x4a98	; 0x4a98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CALC_interface>:
	uint8_t operandOne[OPERAND_MAX_SIZE];
	uint8_t operandTwo[OPERAND_MAX_SIZE];


void CALC_interface(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <CALC_interface+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		switch(statesOfCalc)
     b50:	80 91 c8 00 	lds	r24, 0x00C8
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	91 05       	cpc	r25, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <CALC_interface+0x22>
     b66:	5e c0       	rjmp	.+188    	; 0xc24 <CALC_interface+0xde>
     b68:	29 81       	ldd	r18, Y+1	; 0x01
     b6a:	3a 81       	ldd	r19, Y+2	; 0x02
     b6c:	25 30       	cpi	r18, 0x05	; 5
     b6e:	31 05       	cpc	r19, r1
     b70:	ec f4       	brge	.+58     	; 0xbac <CALC_interface+0x66>
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <CALC_interface+0x38>
     b7c:	50 c0       	rjmp	.+160    	; 0xc1e <CALC_interface+0xd8>
     b7e:	29 81       	ldd	r18, Y+1	; 0x01
     b80:	3a 81       	ldd	r19, Y+2	; 0x02
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <CALC_interface+0x4c>
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	79 f1       	breq	.+94     	; 0xbee <CALC_interface+0xa8>
     b90:	df cf       	rjmp	.-66     	; 0xb50 <CALC_interface+0xa>
     b92:	29 81       	ldd	r18, Y+1	; 0x01
     b94:	3a 81       	ldd	r19, Y+2	; 0x02
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <CALC_interface+0x58>
     b9c:	4f c0       	rjmp	.+158    	; 0xc3c <CALC_interface+0xf6>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <CALC_interface+0x64>
     ba8:	4f c0       	rjmp	.+158    	; 0xc48 <CALC_interface+0x102>
     baa:	d2 cf       	rjmp	.-92     	; 0xb50 <CALC_interface+0xa>
     bac:	29 81       	ldd	r18, Y+1	; 0x01
     bae:	3a 81       	ldd	r19, Y+2	; 0x02
     bb0:	27 30       	cpi	r18, 0x07	; 7
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <CALC_interface+0x72>
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <CALC_interface+0xf0>
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	91 05       	cpc	r25, r1
     bc0:	5c f4       	brge	.+22     	; 0xbd8 <CALC_interface+0x92>
     bc2:	29 81       	ldd	r18, Y+1	; 0x01
     bc4:	3a 81       	ldd	r19, Y+2	; 0x02
     bc6:	25 30       	cpi	r18, 0x05	; 5
     bc8:	31 05       	cpc	r19, r1
     bca:	79 f1       	breq	.+94     	; 0xc2a <CALC_interface+0xe4>
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	86 30       	cpi	r24, 0x06	; 6
     bd2:	91 05       	cpc	r25, r1
     bd4:	69 f1       	breq	.+90     	; 0xc30 <CALC_interface+0xea>
     bd6:	bc cf       	rjmp	.-136    	; 0xb50 <CALC_interface+0xa>
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	3a 81       	ldd	r19, Y+2	; 0x02
     bdc:	28 30       	cpi	r18, 0x08	; 8
     bde:	31 05       	cpc	r19, r1
     be0:	81 f1       	breq	.+96     	; 0xc42 <CALC_interface+0xfc>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	89 30       	cpi	r24, 0x09	; 9
     be8:	91 05       	cpc	r25, r1
     bea:	89 f1       	breq	.+98     	; 0xc4e <CALC_interface+0x108>
     bec:	b1 cf       	rjmp	.-158    	; 0xb50 <CALC_interface+0xa>
		{

		case CALC_SCANNING :
		{
			HKP_scanningForPressedBtn(&pressedKeyVal);
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 44 24 	call	0x4888	; 0x4888 <HKP_scanningForPressedBtn>
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <CALC_interface+0xba>
			while(pressedKeyVal == '#')
			{
				HKP_scanningForPressedBtn(&pressedKeyVal);
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 44 24 	call	0x4888	; 0x4888 <HKP_scanningForPressedBtn>
		{

		case CALC_SCANNING :
		{
			HKP_scanningForPressedBtn(&pressedKeyVal);
			while(pressedKeyVal == '#')
     c00:	80 91 80 00 	lds	r24, 0x0080
     c04:	83 32       	cpi	r24, 0x23	; 35
     c06:	c1 f3       	breq	.-16     	; 0xbf8 <CALC_interface+0xb2>
			{
				HKP_scanningForPressedBtn(&pressedKeyVal);
			}
			HLCD_displayChar(&myLcd,pressedKeyVal);
     c08:	20 91 80 00 	lds	r18, 0x0080
     c0c:	8a ea       	ldi	r24, 0xAA	; 170
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	62 2f       	mov	r22, r18
     c12:	0e 94 80 1a 	call	0x3500	; 0x3500 <HLCD_displayChar>
			statesOfCalc = CALC_CHECK_INPUT;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 c8 00 	sts	0x00C8, r24
     c1c:	99 cf       	rjmp	.-206    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_CHECK_INPUT :
		{
			CALC_checkInput();
     c1e:	0e 94 50 06 	call	0xca0	; 0xca0 <CALC_checkInput>
     c22:	96 cf       	rjmp	.-212    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_FIRST_OPERAND_SAVE :
		{
			CALC_saveFirstOperand();
     c24:	0e 94 99 06 	call	0xd32	; 0xd32 <CALC_saveFirstOperand>
     c28:	93 cf       	rjmp	.-218    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_SECOND_OPERAND_SAVE :
		{
			CALC_saveSecondOperand();
     c2a:	0e 94 b4 06 	call	0xd68	; 0xd68 <CALC_saveSecondOperand>
     c2e:	90 cf       	rjmp	.-224    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_OPERATOR_SAVE :
		{
			CALC_saveOperator();
     c30:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CALC_saveOperator>
     c34:	8d cf       	rjmp	.-230    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_GET_THE_TWO_OPERAND :
		{
			CALC_getValueOfOperand();
     c36:	0e 94 df 06 	call	0xdbe	; 0xdbe <CALC_getValueOfOperand>
     c3a:	8a cf       	rjmp	.-236    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_GET_RESUALT :
		{
			CALC_getResult();
     c3c:	0e 94 09 07 	call	0xe12	; 0xe12 <CALC_getResult>
     c40:	87 cf       	rjmp	.-242    	; 0xb50 <CALC_interface+0xa>
			break;
		}
		case CALC_DISPLAY_RESULT :
		{
			CALC_afterResult();
     c42:	0e 94 b3 07 	call	0xf66	; 0xf66 <CALC_afterResult>
     c46:	84 cf       	rjmp	.-248    	; 0xb50 <CALC_interface+0xa>
			break;
		}
		case CALC_CLR_LCD :
		{
			CALC_clrDisplay();
     c48:	0e 94 f6 07 	call	0xfec	; 0xfec <CALC_clrDisplay>
     c4c:	81 cf       	rjmp	.-254    	; 0xb50 <CALC_interface+0xa>
			break;
		}

		case CALC_INVALID_PARAMTERS :
		{
			HLCD_Clr(&myLcd);
     c4e:	8a ea       	ldi	r24, 0xAA	; 170
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <HLCD_Clr>
			HLCD_displayString(&myLcd,(uint8_t)"Invalid Input");
     c56:	80 e6       	ldi	r24, 0x60	; 96
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	9c 01       	movw	r18, r24
     c60:	8a ea       	ldi	r24, 0xAA	; 170
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b9 01       	movw	r22, r18
     c66:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <HLCD_displayString>
			HLCD_changeCursorPosation(&myLcd,1,0);
     c6a:	8a ea       	ldi	r24, 0xAA	; 170
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	0e 94 78 22 	call	0x44f0	; 0x44f0 <HLCD_changeCursorPosation>
			HLCD_displayString(&myLcd,(uint8_t)"Try Again");
     c76:	8e e6       	ldi	r24, 0x6E	; 110
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9c 01       	movw	r18, r24
     c80:	8a ea       	ldi	r24, 0xAA	; 170
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	b9 01       	movw	r22, r18
     c86:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <HLCD_displayString>
			HLCD_Clr(&myLcd);
     c8a:	8a ea       	ldi	r24, 0xAA	; 170
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <HLCD_Clr>
			pressedKeyVal = '#';
     c92:	83 e2       	ldi	r24, 0x23	; 35
     c94:	80 93 80 00 	sts	0x0080, r24
			statesOfCalc = CALC_CLR_LCD;
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	80 93 c8 00 	sts	0x00C8, r24
     c9e:	58 cf       	rjmp	.-336    	; 0xb50 <CALC_interface+0xa>

00000ca0 <CALC_checkInput>:
	}
}


void CALC_checkInput(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	if((pressedKeyVal >= '0') && (pressedKeyVal <= '9'))
     ca8:	80 91 80 00 	lds	r24, 0x0080
     cac:	80 33       	cpi	r24, 0x30	; 48
     cae:	a0 f0       	brcs	.+40     	; 0xcd8 <CALC_checkInput+0x38>
     cb0:	80 91 80 00 	lds	r24, 0x0080
     cb4:	8a 33       	cpi	r24, 0x3A	; 58
     cb6:	80 f4       	brcc	.+32     	; 0xcd8 <CALC_checkInput+0x38>
	{
		if(operandNumberFlag == 0)
     cb8:	80 91 c9 00 	lds	r24, 0x00C9
     cbc:	88 23       	and	r24, r24
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <CALC_checkInput+0x28>
		{
			statesOfCalc = CALC_FIRST_OPERAND_SAVE;
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	80 93 c8 00 	sts	0x00C8, r24
     cc6:	32 c0       	rjmp	.+100    	; 0xd2c <CALC_checkInput+0x8c>
		}
		else if(operandNumberFlag == 1)
     cc8:	80 91 c9 00 	lds	r24, 0x00C9
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	71 f5       	brne	.+92     	; 0xd2c <CALC_checkInput+0x8c>
		{
			statesOfCalc = CALC_SECOND_OPERAND_SAVE;
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	80 93 c8 00 	sts	0x00C8, r24
     cd6:	2a c0       	rjmp	.+84     	; 0xd2c <CALC_checkInput+0x8c>
		else
		{
			/* Do Nothing */
		}
	}
	else if((pressedKeyVal == '+') || (pressedKeyVal == '-') || (pressedKeyVal == '*') || (pressedKeyVal == '/') )
     cd8:	80 91 80 00 	lds	r24, 0x0080
     cdc:	8b 32       	cpi	r24, 0x2B	; 43
     cde:	61 f0       	breq	.+24     	; 0xcf8 <CALC_checkInput+0x58>
     ce0:	80 91 80 00 	lds	r24, 0x0080
     ce4:	8d 32       	cpi	r24, 0x2D	; 45
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <CALC_checkInput+0x58>
     ce8:	80 91 80 00 	lds	r24, 0x0080
     cec:	8a 32       	cpi	r24, 0x2A	; 42
     cee:	21 f0       	breq	.+8      	; 0xcf8 <CALC_checkInput+0x58>
     cf0:	80 91 80 00 	lds	r24, 0x0080
     cf4:	8f 32       	cpi	r24, 0x2F	; 47
     cf6:	39 f4       	brne	.+14     	; 0xd06 <CALC_checkInput+0x66>
	{
		operandNumberFlag = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 c9 00 	sts	0x00C9, r24
		statesOfCalc = CALC_OPERATOR_SAVE;
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	80 93 c8 00 	sts	0x00C8, r24
     d04:	13 c0       	rjmp	.+38     	; 0xd2c <CALC_checkInput+0x8c>
	}
	else if(pressedKeyVal == 'c')
     d06:	80 91 80 00 	lds	r24, 0x0080
     d0a:	83 36       	cpi	r24, 0x63	; 99
     d0c:	21 f4       	brne	.+8      	; 0xd16 <CALC_checkInput+0x76>
	{
		statesOfCalc = CALC_CLR_LCD;
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	80 93 c8 00 	sts	0x00C8, r24
     d14:	0b c0       	rjmp	.+22     	; 0xd2c <CALC_checkInput+0x8c>
	}
	else if(pressedKeyVal == '=')
     d16:	80 91 80 00 	lds	r24, 0x0080
     d1a:	8d 33       	cpi	r24, 0x3D	; 61
     d1c:	21 f4       	brne	.+8      	; 0xd26 <CALC_checkInput+0x86>
	{
		statesOfCalc = CALC_GET_THE_TWO_OPERAND;
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	80 93 c8 00 	sts	0x00C8, r24
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <CALC_checkInput+0x8c>
	}
	else
	{
		statesOfCalc = CALC_INVALID_PARAMTERS;
     d26:	89 e0       	ldi	r24, 0x09	; 9
     d28:	80 93 c8 00 	sts	0x00C8, r24
	}
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <CALC_saveFirstOperand>:

void CALC_saveFirstOperand(void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	operandOne[counterOfOperandOneArr] = pressedKeyVal;
     d3a:	80 91 ca 00 	lds	r24, 0x00CA
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	20 91 80 00 	lds	r18, 0x0080
     d46:	fc 01       	movw	r30, r24
     d48:	e4 5a       	subi	r30, 0xA4	; 164
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	20 83       	st	Z, r18
	counterOfOperandOneArr++;
     d4e:	80 91 ca 00 	lds	r24, 0x00CA
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	80 93 ca 00 	sts	0x00CA, r24
	pressedKeyVal = '#';
     d58:	83 e2       	ldi	r24, 0x23	; 35
     d5a:	80 93 80 00 	sts	0x0080, r24
	statesOfCalc = CALC_SCANNING;
     d5e:	10 92 c8 00 	sts	0x00C8, r1
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <CALC_saveSecondOperand>:

void CALC_saveSecondOperand(void)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	operandTwo[counterOfOperandTwoArr] = pressedKeyVal;
     d70:	80 91 cb 00 	lds	r24, 0x00CB
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	20 91 80 00 	lds	r18, 0x0080
     d7c:	fc 01       	movw	r30, r24
     d7e:	e8 50       	subi	r30, 0x08	; 8
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	20 83       	st	Z, r18
	counterOfOperandTwoArr++;
     d84:	80 91 cb 00 	lds	r24, 0x00CB
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 93 cb 00 	sts	0x00CB, r24
	pressedKeyVal = '#';
     d8e:	83 e2       	ldi	r24, 0x23	; 35
     d90:	80 93 80 00 	sts	0x0080, r24
	statesOfCalc = CALC_SCANNING;
     d94:	10 92 c8 00 	sts	0x00C8, r1
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <CALC_saveOperator>:

void CALC_saveOperator(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	operator = pressedKeyVal;
     da6:	80 91 80 00 	lds	r24, 0x0080
     daa:	80 93 81 00 	sts	0x0081, r24
	pressedKeyVal = '#';
     dae:	83 e2       	ldi	r24, 0x23	; 35
     db0:	80 93 80 00 	sts	0x0080, r24
	statesOfCalc = CALC_SCANNING;
     db4:	10 92 c8 00 	sts	0x00C8, r1
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CALC_getValueOfOperand>:

void CALC_getValueOfOperand(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	operandOneVal = atoi((char *)operandOne);
     dc6:	8c e5       	ldi	r24, 0x5C	; 92
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 67 25 	call	0x4ace	; 0x4ace <atoi>
     dce:	aa 27       	eor	r26, r26
     dd0:	97 fd       	sbrc	r25, 7
     dd2:	a0 95       	com	r26
     dd4:	ba 2f       	mov	r27, r26
     dd6:	80 93 cc 00 	sts	0x00CC, r24
     dda:	90 93 cd 00 	sts	0x00CD, r25
     dde:	a0 93 ce 00 	sts	0x00CE, r26
     de2:	b0 93 cf 00 	sts	0x00CF, r27
	operandTwoVal = atoi((char *)operandTwo);
     de6:	88 ef       	ldi	r24, 0xF8	; 248
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 67 25 	call	0x4ace	; 0x4ace <atoi>
     dee:	aa 27       	eor	r26, r26
     df0:	97 fd       	sbrc	r25, 7
     df2:	a0 95       	com	r26
     df4:	ba 2f       	mov	r27, r26
     df6:	80 93 d0 00 	sts	0x00D0, r24
     dfa:	90 93 d1 00 	sts	0x00D1, r25
     dfe:	a0 93 d2 00 	sts	0x00D2, r26
     e02:	b0 93 d3 00 	sts	0x00D3, r27
	statesOfCalc = CALC_GET_RESUALT;
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	80 93 c8 00 	sts	0x00C8, r24
}
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <CALC_getResult>:

void CALC_getResult(void)
{
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	if(operator == '+')
     e22:	80 91 81 00 	lds	r24, 0x0081
     e26:	8b 32       	cpi	r24, 0x2B	; 43
     e28:	01 f5       	brne	.+64     	; 0xe6a <CALC_getResult+0x58>
	{
		result = operandOneVal + operandTwoVal;
     e2a:	20 91 cc 00 	lds	r18, 0x00CC
     e2e:	30 91 cd 00 	lds	r19, 0x00CD
     e32:	40 91 ce 00 	lds	r20, 0x00CE
     e36:	50 91 cf 00 	lds	r21, 0x00CF
     e3a:	80 91 d0 00 	lds	r24, 0x00D0
     e3e:	90 91 d1 00 	lds	r25, 0x00D1
     e42:	a0 91 d2 00 	lds	r26, 0x00D2
     e46:	b0 91 d3 00 	lds	r27, 0x00D3
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	a4 1f       	adc	r26, r20
     e50:	b5 1f       	adc	r27, r21
     e52:	80 93 d4 00 	sts	0x00D4, r24
     e56:	90 93 d5 00 	sts	0x00D5, r25
     e5a:	a0 93 d6 00 	sts	0x00D6, r26
     e5e:	b0 93 d7 00 	sts	0x00D7, r27
		statesOfCalc = CALC_DISPLAY_RESULT;
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	80 93 c8 00 	sts	0x00C8, r24
     e68:	77 c0       	rjmp	.+238    	; 0xf58 <CALC_getResult+0x146>
	}
	else if(operator == '-')
     e6a:	80 91 81 00 	lds	r24, 0x0081
     e6e:	8d 32       	cpi	r24, 0x2D	; 45
     e70:	21 f5       	brne	.+72     	; 0xeba <CALC_getResult+0xa8>
	{
		result = operandOneVal - operandTwoVal;
     e72:	20 91 cc 00 	lds	r18, 0x00CC
     e76:	30 91 cd 00 	lds	r19, 0x00CD
     e7a:	40 91 ce 00 	lds	r20, 0x00CE
     e7e:	50 91 cf 00 	lds	r21, 0x00CF
     e82:	80 91 d0 00 	lds	r24, 0x00D0
     e86:	90 91 d1 00 	lds	r25, 0x00D1
     e8a:	a0 91 d2 00 	lds	r26, 0x00D2
     e8e:	b0 91 d3 00 	lds	r27, 0x00D3
     e92:	79 01       	movw	r14, r18
     e94:	8a 01       	movw	r16, r20
     e96:	e8 1a       	sub	r14, r24
     e98:	f9 0a       	sbc	r15, r25
     e9a:	0a 0b       	sbc	r16, r26
     e9c:	1b 0b       	sbc	r17, r27
     e9e:	d8 01       	movw	r26, r16
     ea0:	c7 01       	movw	r24, r14
     ea2:	80 93 d4 00 	sts	0x00D4, r24
     ea6:	90 93 d5 00 	sts	0x00D5, r25
     eaa:	a0 93 d6 00 	sts	0x00D6, r26
     eae:	b0 93 d7 00 	sts	0x00D7, r27
		statesOfCalc = CALC_DISPLAY_RESULT;
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	80 93 c8 00 	sts	0x00C8, r24
     eb8:	4f c0       	rjmp	.+158    	; 0xf58 <CALC_getResult+0x146>
	}
	else if(operator == '*')
     eba:	80 91 81 00 	lds	r24, 0x0081
     ebe:	8a 32       	cpi	r24, 0x2A	; 42
     ec0:	11 f5       	brne	.+68     	; 0xf06 <CALC_getResult+0xf4>
	{
		result = operandOneVal * operandTwoVal;
     ec2:	80 91 cc 00 	lds	r24, 0x00CC
     ec6:	90 91 cd 00 	lds	r25, 0x00CD
     eca:	a0 91 ce 00 	lds	r26, 0x00CE
     ece:	b0 91 cf 00 	lds	r27, 0x00CF
     ed2:	20 91 d0 00 	lds	r18, 0x00D0
     ed6:	30 91 d1 00 	lds	r19, 0x00D1
     eda:	40 91 d2 00 	lds	r20, 0x00D2
     ede:	50 91 d3 00 	lds	r21, 0x00D3
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 ef 24 	call	0x49de	; 0x49de <__mulsi3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	80 93 d4 00 	sts	0x00D4, r24
     ef2:	90 93 d5 00 	sts	0x00D5, r25
     ef6:	a0 93 d6 00 	sts	0x00D6, r26
     efa:	b0 93 d7 00 	sts	0x00D7, r27
		statesOfCalc = CALC_DISPLAY_RESULT;
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	80 93 c8 00 	sts	0x00C8, r24
     f04:	29 c0       	rjmp	.+82     	; 0xf58 <CALC_getResult+0x146>
	}
	else if(operator == '/')
     f06:	80 91 81 00 	lds	r24, 0x0081
     f0a:	8f 32       	cpi	r24, 0x2F	; 47
     f0c:	11 f5       	brne	.+68     	; 0xf52 <CALC_getResult+0x140>
	{
		result = operandOneVal / operandTwoVal;
     f0e:	80 91 cc 00 	lds	r24, 0x00CC
     f12:	90 91 cd 00 	lds	r25, 0x00CD
     f16:	a0 91 ce 00 	lds	r26, 0x00CE
     f1a:	b0 91 cf 00 	lds	r27, 0x00CF
     f1e:	20 91 d0 00 	lds	r18, 0x00D0
     f22:	30 91 d1 00 	lds	r19, 0x00D1
     f26:	40 91 d2 00 	lds	r20, 0x00D2
     f2a:	50 91 d3 00 	lds	r21, 0x00D3
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__udivmodsi4>
     f36:	da 01       	movw	r26, r20
     f38:	c9 01       	movw	r24, r18
     f3a:	80 93 d4 00 	sts	0x00D4, r24
     f3e:	90 93 d5 00 	sts	0x00D5, r25
     f42:	a0 93 d6 00 	sts	0x00D6, r26
     f46:	b0 93 d7 00 	sts	0x00D7, r27
		statesOfCalc = CALC_DISPLAY_RESULT;
     f4a:	88 e0       	ldi	r24, 0x08	; 8
     f4c:	80 93 c8 00 	sts	0x00C8, r24
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <CALC_getResult+0x146>
	}
	else
	{
		statesOfCalc = CALC_INVALID_PARAMTERS;
     f52:	89 e0       	ldi	r24, 0x09	; 9
     f54:	80 93 c8 00 	sts	0x00C8, r24
	}
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	08 95       	ret

00000f66 <CALC_afterResult>:

void CALC_afterResult(void)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	HLCD_displayNumber(&myLcd,result);
     f6e:	20 91 d4 00 	lds	r18, 0x00D4
     f72:	30 91 d5 00 	lds	r19, 0x00D5
     f76:	40 91 d6 00 	lds	r20, 0x00D6
     f7a:	50 91 d7 00 	lds	r21, 0x00D7
     f7e:	8a ea       	ldi	r24, 0xAA	; 170
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	ba 01       	movw	r22, r20
     f84:	a9 01       	movw	r20, r18
     f86:	0e 94 36 22 	call	0x446c	; 0x446c <HLCD_displayNumber>
	pressedKeyVal = '#';
     f8a:	83 e2       	ldi	r24, 0x23	; 35
     f8c:	80 93 80 00 	sts	0x0080, r24
	operandNumberFlag = 0;
     f90:	10 92 c9 00 	sts	0x00C9, r1
	counterOfOperandOneArr = 0;
     f94:	10 92 ca 00 	sts	0x00CA, r1
	counterOfOperandTwoArr = 0;
     f98:	10 92 cb 00 	sts	0x00CB, r1
	operator = '#';
     f9c:	83 e2       	ldi	r24, 0x23	; 35
     f9e:	80 93 81 00 	sts	0x0081, r24
	operandOneVal = 0;
     fa2:	10 92 cc 00 	sts	0x00CC, r1
     fa6:	10 92 cd 00 	sts	0x00CD, r1
     faa:	10 92 ce 00 	sts	0x00CE, r1
     fae:	10 92 cf 00 	sts	0x00CF, r1
	operandTwoVal = 0;
     fb2:	10 92 d0 00 	sts	0x00D0, r1
     fb6:	10 92 d1 00 	sts	0x00D1, r1
     fba:	10 92 d2 00 	sts	0x00D2, r1
     fbe:	10 92 d3 00 	sts	0x00D3, r1

	memset(operandOne , 0 , sizeof(operandOne));
     fc2:	8c e5       	ldi	r24, 0x5C	; 92
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	44 e6       	ldi	r20, 0x64	; 100
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <memset>
	memset(operandTwo , 0 , sizeof(operandTwo));
     fd2:	88 ef       	ldi	r24, 0xF8	; 248
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	44 e6       	ldi	r20, 0x64	; 100
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <memset>
	statesOfCalc = CALC_SCANNING;
     fe2:	10 92 c8 00 	sts	0x00C8, r1
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CALC_clrDisplay>:

void CALC_clrDisplay(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	HLCD_Clr(&myLcd);
     ff4:	8a ea       	ldi	r24, 0xAA	; 170
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <HLCD_Clr>
	pressedKeyVal = '#';
     ffc:	83 e2       	ldi	r24, 0x23	; 35
     ffe:	80 93 80 00 	sts	0x0080, r24
	operandNumberFlag = 0;
    1002:	10 92 c9 00 	sts	0x00C9, r1
	counterOfOperandOneArr = 0;
    1006:	10 92 ca 00 	sts	0x00CA, r1
	counterOfOperandTwoArr = 0;
    100a:	10 92 cb 00 	sts	0x00CB, r1
	operator = '#';
    100e:	83 e2       	ldi	r24, 0x23	; 35
    1010:	80 93 81 00 	sts	0x0081, r24
	operandOneVal = 0;
    1014:	10 92 cc 00 	sts	0x00CC, r1
    1018:	10 92 cd 00 	sts	0x00CD, r1
    101c:	10 92 ce 00 	sts	0x00CE, r1
    1020:	10 92 cf 00 	sts	0x00CF, r1
	operandTwoVal = 0;
    1024:	10 92 d0 00 	sts	0x00D0, r1
    1028:	10 92 d1 00 	sts	0x00D1, r1
    102c:	10 92 d2 00 	sts	0x00D2, r1
    1030:	10 92 d3 00 	sts	0x00D3, r1

	memset(operandOne , 0 , sizeof(operandOne));
    1034:	8c e5       	ldi	r24, 0x5C	; 92
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	44 e6       	ldi	r20, 0x64	; 100
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <memset>
	memset(operandTwo , 0 , sizeof(operandTwo));
    1044:	88 ef       	ldi	r24, 0xF8	; 248
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	44 e6       	ldi	r20, 0x64	; 100
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <memset>
	statesOfCalc = CALC_SCANNING;
    1054:	10 92 c8 00 	sts	0x00C8, r1

}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <GPIO_initPin+0x6>
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9b 83       	std	Y+3, r25	; 0x03
    106c:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	b1 f0       	breq	.+44     	; 0x10a6 <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
    107a:	ea 81       	ldd	r30, Y+2	; 0x02
    107c:	fb 81       	ldd	r31, Y+3	; 0x03
    107e:	22 81       	ldd	r18, Z+2	; 0x02
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	62 2f       	mov	r22, r18
    1086:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_changePinDir>
    108a:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 23       	and	r24, r24
    1090:	61 f4       	brne	.+24     	; 0x10aa <GPIO_initPin+0x4c>
			ret =
    1092:	ea 81       	ldd	r30, Y+2	; 0x02
    1094:	fb 81       	ldd	r31, Y+3	; 0x03
    1096:	23 81       	ldd	r18, Z+3	; 0x03
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	62 2f       	mov	r22, r18
    109e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_changePinDir+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_changePinDir+0x8>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_changePinDir+0xa>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	09 f4       	brne	.+2      	; 0x10da <GPIO_changePinDir+0x22>
    10d8:	68 c0       	rjmp	.+208    	; 0x11aa <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3e 83       	std	Y+6, r19	; 0x06
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	31 f0       	breq	.+12     	; 0x10f8 <GPIO_changePinDir+0x40>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	21 30       	cpi	r18, 0x01	; 1
    10f2:	31 05       	cpc	r19, r1
    10f4:	71 f1       	breq	.+92     	; 0x1152 <GPIO_changePinDir+0x9a>
    10f6:	5b c0       	rjmp	.+182    	; 0x11ae <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    10f8:	ea 81       	ldd	r30, Y+2	; 0x02
    10fa:	fb 81       	ldd	r31, Y+3	; 0x03
    10fc:	80 81       	ld	r24, Z
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	fc 01       	movw	r30, r24
    1108:	ee 57       	subi	r30, 0x7E	; 126
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	a0 81       	ld	r26, Z
    110e:	b1 81       	ldd	r27, Z+1	; 0x01
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	80 81       	ld	r24, Z
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	fc 01       	movw	r30, r24
    1120:	ee 57       	subi	r30, 0x7E	; 126
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	01 90       	ld	r0, Z+
    1126:	f0 81       	ld	r31, Z
    1128:	e0 2d       	mov	r30, r0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	ea 81       	ldd	r30, Y+2	; 0x02
    1130:	fb 81       	ldd	r31, Y+3	; 0x03
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_changePinDir+0x8c>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_changePinDir+0x88>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	2e c0       	rjmp	.+92     	; 0x11ae <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    1152:	ea 81       	ldd	r30, Y+2	; 0x02
    1154:	fb 81       	ldd	r31, Y+3	; 0x03
    1156:	80 81       	ld	r24, Z
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	fc 01       	movw	r30, r24
    1162:	ee 57       	subi	r30, 0x7E	; 126
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	a0 81       	ld	r26, Z
    1168:	b1 81       	ldd	r27, Z+1	; 0x01
    116a:	ea 81       	ldd	r30, Y+2	; 0x02
    116c:	fb 81       	ldd	r31, Y+3	; 0x03
    116e:	80 81       	ld	r24, Z
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	ee 57       	subi	r30, 0x7E	; 126
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_changePinDir+0xe6>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_changePinDir+0xe2>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <GPIO_writePinLogic+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <GPIO_writePinLogic+0x8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_writePinLogic+0xa>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	9b 81       	ldd	r25, Y+3	; 0x03
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <GPIO_writePinLogic+0x22>
    11e2:	68 c0       	rjmp	.+208    	; 0x12b4 <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3e 83       	std	Y+6, r19	; 0x06
    11ec:	2d 83       	std	Y+5, r18	; 0x05
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	31 f0       	breq	.+12     	; 0x1202 <GPIO_writePinLogic+0x40>
    11f6:	2d 81       	ldd	r18, Y+5	; 0x05
    11f8:	3e 81       	ldd	r19, Y+6	; 0x06
    11fa:	21 30       	cpi	r18, 0x01	; 1
    11fc:	31 05       	cpc	r19, r1
    11fe:	71 f1       	breq	.+92     	; 0x125c <GPIO_writePinLogic+0x9a>
    1200:	5b c0       	rjmp	.+182    	; 0x12b8 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
    1202:	ea 81       	ldd	r30, Y+2	; 0x02
    1204:	fb 81       	ldd	r31, Y+3	; 0x03
    1206:	80 81       	ld	r24, Z
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	fc 01       	movw	r30, r24
    1212:	e6 57       	subi	r30, 0x76	; 118
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	a0 81       	ld	r26, Z
    1218:	b1 81       	ldd	r27, Z+1	; 0x01
    121a:	ea 81       	ldd	r30, Y+2	; 0x02
    121c:	fb 81       	ldd	r31, Y+3	; 0x03
    121e:	80 81       	ld	r24, Z
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e6 57       	subi	r30, 0x76	; 118
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	ea 81       	ldd	r30, Y+2	; 0x02
    123a:	fb 81       	ldd	r31, Y+3	; 0x03
    123c:	81 81       	ldd	r24, Z+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_writePinLogic+0x8c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_writePinLogic+0x88>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	2e c0       	rjmp	.+92     	; 0x12b8 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	80 81       	ld	r24, Z
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	fc 01       	movw	r30, r24
    126c:	e6 57       	subi	r30, 0x76	; 118
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	a0 81       	ld	r26, Z
    1272:	b1 81       	ldd	r27, Z+1	; 0x01
    1274:	ea 81       	ldd	r30, Y+2	; 0x02
    1276:	fb 81       	ldd	r31, Y+3	; 0x03
    1278:	80 81       	ld	r24, Z
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	fc 01       	movw	r30, r24
    1284:	e6 57       	subi	r30, 0x76	; 118
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	01 90       	ld	r0, Z+
    128a:	f0 81       	ld	r31, Z
    128c:	e0 2d       	mov	r30, r0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	ea 81       	ldd	r30, Y+2	; 0x02
    1294:	fb 81       	ldd	r31, Y+3	; 0x03
    1296:	81 81       	ldd	r24, Z+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePinLogic+0xe6>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePinLogic+0xe2>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    12b0:	19 82       	std	Y+1, r1	; 0x01
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GPIO_readPinLogic+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <GPIO_readPinLogic+0x8>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9b 83       	std	Y+3, r25	; 0x03
    12dc:	8a 83       	std	Y+2, r24	; 0x02
    12de:	7d 83       	std	Y+5, r23	; 0x05
    12e0:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	11 f1       	breq	.+68     	; 0x1332 <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	80 81       	ld	r24, Z
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	fc 01       	movw	r30, r24
    12fe:	ee 56       	subi	r30, 0x6E	; 110
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	01 90       	ld	r0, Z+
    1304:	f0 81       	ld	r31, Z
    1306:	e0 2d       	mov	r30, r0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	ea 81       	ldd	r30, Y+2	; 0x02
    1310:	fb 81       	ldd	r31, Y+3	; 0x03
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a9 01       	movw	r20, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <GPIO_readPinLogic+0x54>
    131c:	55 95       	asr	r21
    131e:	47 95       	ror	r20
    1320:	8a 95       	dec	r24
    1322:	e2 f7       	brpl	.-8      	; 0x131c <GPIO_readPinLogic+0x50>
    1324:	ca 01       	movw	r24, r20
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	ec 81       	ldd	r30, Y+4	; 0x04
    132a:	fd 81       	ldd	r31, Y+5	; 0x05
    132c:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    132e:	19 82       	std	Y+1, r1	; 0x01
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_togglePinLogic+0x6>
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	9b 83       	std	Y+3, r25	; 0x03
    1356:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	9b 81       	ldd	r25, Y+3	; 0x03
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f1       	breq	.+88     	; 0x13bc <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
    1364:	ea 81       	ldd	r30, Y+2	; 0x02
    1366:	fb 81       	ldd	r31, Y+3	; 0x03
    1368:	80 81       	ld	r24, Z
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	fc 01       	movw	r30, r24
    1374:	e6 57       	subi	r30, 0x76	; 118
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	a0 81       	ld	r26, Z
    137a:	b1 81       	ldd	r27, Z+1	; 0x01
    137c:	ea 81       	ldd	r30, Y+2	; 0x02
    137e:	fb 81       	ldd	r31, Y+3	; 0x03
    1380:	80 81       	ld	r24, Z
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	fc 01       	movw	r30, r24
    138c:	e6 57       	subi	r30, 0x76	; 118
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	01 90       	ld	r0, Z+
    1392:	f0 81       	ld	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	ea 81       	ldd	r30, Y+2	; 0x02
    139c:	fb 81       	ldd	r31, Y+3	; 0x03
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_togglePinLogic+0x68>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_togglePinLogic+0x64>
    13b4:	84 27       	eor	r24, r20
    13b6:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    13b8:	19 82       	std	Y+1, r1	; 0x01
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	28 97       	sbiw	r28, 0x08	; 8
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	38 87       	std	Y+8, r19	; 0x08
    13f4:	2f 83       	std	Y+7, r18	; 0x07
    13f6:	8f 81       	ldd	r24, Y+7	; 0x07
    13f8:	98 85       	ldd	r25, Y+8	; 0x08
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	31 f0       	breq	.+12     	; 0x140a <GPIO_initPort+0x3c>
    13fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1400:	38 85       	ldd	r19, Y+8	; 0x08
    1402:	21 30       	cpi	r18, 0x01	; 1
    1404:	31 05       	cpc	r19, r1
    1406:	79 f0       	breq	.+30     	; 0x1426 <GPIO_initPort+0x58>
    1408:	1c c0       	rjmp	.+56     	; 0x1442 <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	fc 01       	movw	r30, r24
    1416:	ee 57       	subi	r30, 0x7E	; 126
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	01 90       	ld	r0, Z+
    141c:	f0 81       	ld	r31, Z
    141e:	e0 2d       	mov	r30, r0
    1420:	10 82       	st	Z, r1
		ret = GPIO_OK;
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	fc 01       	movw	r30, r24
    1432:	ee 57       	subi	r30, 0x7E	; 126
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	01 90       	ld	r0, Z+
    1438:	f0 81       	ld	r31, Z
    143a:	e0 2d       	mov	r30, r0
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1440:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3e 83       	std	Y+6, r19	; 0x06
    144a:	2d 83       	std	Y+5, r18	; 0x05
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	31 f0       	breq	.+12     	; 0x1460 <GPIO_initPort+0x92>
    1454:	2d 81       	ldd	r18, Y+5	; 0x05
    1456:	3e 81       	ldd	r19, Y+6	; 0x06
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	79 f0       	breq	.+30     	; 0x147c <GPIO_initPort+0xae>
    145e:	1c c0       	rjmp	.+56     	; 0x1498 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	fc 01       	movw	r30, r24
    146c:	e6 57       	subi	r30, 0x76	; 118
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	01 90       	ld	r0, Z+
    1472:	f0 81       	ld	r31, Z
    1474:	e0 2d       	mov	r30, r0
    1476:	10 82       	st	Z, r1
		ret = GPIO_OK;
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	fc 01       	movw	r30, r24
    1488:	e6 57       	subi	r30, 0x76	; 118
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	01 90       	ld	r0, Z+
    148e:	f0 81       	ld	r31, Z
    1490:	e0 2d       	mov	r30, r0
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1496:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1498:	89 81       	ldd	r24, Y+1	; 0x01
}
    149a:	28 96       	adiw	r28, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_changePortDir+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_changePortDir+0x8>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <GPIO_changePortDir+0x34>
    14d4:	2c 81       	ldd	r18, Y+4	; 0x04
    14d6:	3d 81       	ldd	r19, Y+5	; 0x05
    14d8:	21 30       	cpi	r18, 0x01	; 1
    14da:	31 05       	cpc	r19, r1
    14dc:	79 f0       	breq	.+30     	; 0x14fc <GPIO_changePortDir+0x50>
    14de:	1c c0       	rjmp	.+56     	; 0x1518 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	fc 01       	movw	r30, r24
    14ec:	ee 57       	subi	r30, 0x7E	; 126
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	01 90       	ld	r0, Z+
    14f2:	f0 81       	ld	r31, Z
    14f4:	e0 2d       	mov	r30, r0
    14f6:	10 82       	st	Z, r1
		ret = GPIO_OK;
    14f8:	19 82       	std	Y+1, r1	; 0x01
    14fa:	0e c0       	rjmp	.+28     	; 0x1518 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	fc 01       	movw	r30, r24
    1508:	ee 57       	subi	r30, 0x7E	; 126
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	01 90       	ld	r0, Z+
    150e:	f0 81       	ld	r31, Z
    1510:	e0 2d       	mov	r30, r0
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1516:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_writePortLogic+0x6>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <GPIO_writePortLogic+0x8>
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3d 83       	std	Y+5, r19	; 0x05
    1548:	2c 83       	std	Y+4, r18	; 0x04
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	31 f0       	breq	.+12     	; 0x155e <GPIO_writePortLogic+0x34>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	21 30       	cpi	r18, 0x01	; 1
    1558:	31 05       	cpc	r19, r1
    155a:	79 f0       	breq	.+30     	; 0x157a <GPIO_writePortLogic+0x50>
    155c:	1c c0       	rjmp	.+56     	; 0x1596 <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	fc 01       	movw	r30, r24
    156a:	e6 57       	subi	r30, 0x76	; 118
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	01 90       	ld	r0, Z+
    1570:	f0 81       	ld	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	10 82       	st	Z, r1
		ret = GPIO_OK;
    1576:	19 82       	std	Y+1, r1	; 0x01
    1578:	0e c0       	rjmp	.+28     	; 0x1596 <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	fc 01       	movw	r30, r24
    1586:	e6 57       	subi	r30, 0x76	; 118
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	01 90       	ld	r0, Z+
    158c:	f0 81       	ld	r31, Z
    158e:	e0 2d       	mov	r30, r0
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1594:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <GPIO_readPortLogic+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_readPortLogic+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	7c 83       	std	Y+4, r23	; 0x04
    15b8:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	fc 01       	movw	r30, r24
    15ca:	ee 56       	subi	r30, 0x6E	; 110
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	01 90       	ld	r0, Z+
    15d0:	f0 81       	ld	r31, Z
    15d2:	e0 2d       	mov	r30, r0
    15d4:	80 81       	ld	r24, Z
    15d6:	eb 81       	ldd	r30, Y+3	; 0x03
    15d8:	fc 81       	ldd	r31, Y+4	; 0x04
    15da:	80 83       	st	Z, r24
	ret = GPIO_OK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <GPIO_togglePortLogic+0x6>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	fc 01       	movw	r30, r24
    160a:	ee 57       	subi	r30, 0x7E	; 126
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	a0 81       	ld	r26, Z
    1610:	b1 81       	ldd	r27, Z+1	; 0x01
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	fc 01       	movw	r30, r24
    161e:	ee 57       	subi	r30, 0x7E	; 126
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	20 81       	ld	r18, Z
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	fc 01       	movw	r30, r24
    1636:	ee 57       	subi	r30, 0x7E	; 126
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	01 90       	ld	r0, Z+
    163c:	f0 81       	ld	r31, Z
    163e:	e0 2d       	mov	r30, r0
    1640:	80 81       	ld	r24, Z
    1642:	82 27       	eor	r24, r18
    1644:	8c 93       	st	X, r24
	ret = GPIO_OK;
    1646:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_set4msbValue+0x6>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	fc 01       	movw	r30, r24
    1674:	e6 57       	subi	r30, 0x76	; 118
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	a0 81       	ld	r26, Z
    167a:	b1 81       	ldd	r27, Z+1	; 0x01
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	fc 01       	movw	r30, r24
    1688:	e6 57       	subi	r30, 0x76	; 118
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	01 90       	ld	r0, Z+
    168e:	f0 81       	ld	r31, Z
    1690:	e0 2d       	mov	r30, r0
    1692:	80 81       	ld	r24, Z
    1694:	8f 70       	andi	r24, 0x0F	; 15
    1696:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	fc 01       	movw	r30, r24
    16a4:	e6 57       	subi	r30, 0x76	; 118
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	a0 81       	ld	r26, Z
    16aa:	b1 81       	ldd	r27, Z+1	; 0x01
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	fc 01       	movw	r30, r24
    16b8:	e6 57       	subi	r30, 0x76	; 118
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	01 90       	ld	r0, Z+
    16be:	f0 81       	ld	r31, Z
    16c0:	e0 2d       	mov	r30, r0
    16c2:	80 81       	ld	r24, Z
    16c4:	28 2f       	mov	r18, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	82 95       	swap	r24
    16ce:	92 95       	swap	r25
    16d0:	90 7f       	andi	r25, 0xF0	; 240
    16d2:	98 27       	eor	r25, r24
    16d4:	80 7f       	andi	r24, 0xF0	; 240
    16d6:	98 27       	eor	r25, r24
    16d8:	82 2b       	or	r24, r18
    16da:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    16dc:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	27 97       	sbiw	r28, 0x07	; 7
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	4b 83       	std	Y+3, r20	; 0x03
    1704:	5c 83       	std	Y+4, r21	; 0x04
    1706:	6d 83       	std	Y+5, r22	; 0x05
    1708:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	fc 01       	movw	r30, r24
    171a:	e6 57       	subi	r30, 0x76	; 118
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	01 90       	ld	r0, Z+
    1720:	f0 81       	ld	r31, Z
    1722:	e0 2d       	mov	r30, r0
    1724:	80 81       	ld	r24, Z
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	fc 01       	movw	r30, r24
    1732:	e6 57       	subi	r30, 0x76	; 118
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	01 90       	ld	r0, Z+
    1738:	f0 81       	ld	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	fc 01       	movw	r30, r24
    174a:	e6 57       	subi	r30, 0x76	; 118
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	a0 81       	ld	r26, Z
    1750:	b1 81       	ldd	r27, Z+1	; 0x01
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	fc 01       	movw	r30, r24
    175e:	e6 57       	subi	r30, 0x76	; 118
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	01 90       	ld	r0, Z+
    1764:	f0 81       	ld	r31, Z
    1766:	e0 2d       	mov	r30, r0
    1768:	90 81       	ld	r25, Z
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	89 2b       	or	r24, r25
    176e:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    1770:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
}
    1774:	27 96       	adiw	r28, 0x07	; 7
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	ce 59       	subi	r28, 0x9E	; 158
    1794:	d0 40       	sbci	r29, 0x00	; 0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	fe 01       	movw	r30, r28
    17a2:	e3 56       	subi	r30, 0x63	; 99
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    17aa:	fe 01       	movw	r30, r28
    17ac:	e0 58       	subi	r30, 0x80	; 128
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    17b4:	fe 01       	movw	r30, r28
    17b6:	e1 58       	subi	r30, 0x81	; 129
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    17be:	fe 01       	movw	r30, r28
    17c0:	e3 56       	subi	r30, 0x63	; 99
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	09 f4       	brne	.+2      	; 0x17ce <HLCD_init+0x48>
    17cc:	18 c7       	rjmp	.+3632   	; 0x25fe <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    17ce:	fe 01       	movw	r30, r28
    17d0:	e3 56       	subi	r30, 0x63	; 99
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	01 90       	ld	r0, Z+
    17d6:	f0 81       	ld	r31, Z
    17d8:	e0 2d       	mov	r30, r0
    17da:	81 81       	ldd	r24, Z+1	; 0x01
    17dc:	fe 01       	movw	r30, r28
    17de:	e3 56       	subi	r30, 0x63	; 99
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	01 90       	ld	r0, Z+
    17e4:	f0 81       	ld	r31, Z
    17e6:	e0 2d       	mov	r30, r0
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	fe 01       	movw	r30, r28
    17ec:	ef 57       	subi	r30, 0x7F	; 127
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 83       	st	Z, r24
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 57       	subi	r30, 0x7F	; 127
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	fe 01       	movw	r30, r28
    17fc:	ef 57       	subi	r30, 0x7F	; 127
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	82 83       	std	Z+2, r24	; 0x02
    1804:	fe 01       	movw	r30, r28
    1806:	ef 57       	subi	r30, 0x7F	; 127
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    180c:	fe 01       	movw	r30, r28
    180e:	e3 56       	subi	r30, 0x63	; 99
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	01 90       	ld	r0, Z+
    1814:	f0 81       	ld	r31, Z
    1816:	e0 2d       	mov	r30, r0
    1818:	81 81       	ldd	r24, Z+1	; 0x01
    181a:	fe 01       	movw	r30, r28
    181c:	e3 56       	subi	r30, 0x63	; 99
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	01 90       	ld	r0, Z+
    1822:	f0 81       	ld	r31, Z
    1824:	e0 2d       	mov	r30, r0
    1826:	94 81       	ldd	r25, Z+4	; 0x04
    1828:	fe 01       	movw	r30, r28
    182a:	eb 57       	subi	r30, 0x7B	; 123
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 83       	st	Z, r24
    1830:	fe 01       	movw	r30, r28
    1832:	eb 57       	subi	r30, 0x7B	; 123
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	fe 01       	movw	r30, r28
    183a:	eb 57       	subi	r30, 0x7B	; 123
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	82 83       	std	Z+2, r24	; 0x02
    1842:	fe 01       	movw	r30, r28
    1844:	eb 57       	subi	r30, 0x7B	; 123
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    184a:	fe 01       	movw	r30, r28
    184c:	e3 56       	subi	r30, 0x63	; 99
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	01 90       	ld	r0, Z+
    1852:	f0 81       	ld	r31, Z
    1854:	e0 2d       	mov	r30, r0
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	fe 01       	movw	r30, r28
    185a:	e3 56       	subi	r30, 0x63	; 99
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	95 81       	ldd	r25, Z+5	; 0x05
    1866:	fe 01       	movw	r30, r28
    1868:	e7 57       	subi	r30, 0x77	; 119
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 83       	st	Z, r24
    186e:	fe 01       	movw	r30, r28
    1870:	e7 57       	subi	r30, 0x77	; 119
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	fe 01       	movw	r30, r28
    1878:	e7 57       	subi	r30, 0x77	; 119
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	82 83       	std	Z+2, r24	; 0x02
    1880:	fe 01       	movw	r30, r28
    1882:	e7 57       	subi	r30, 0x77	; 119
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    1888:	ce 01       	movw	r24, r28
    188a:	8f 57       	subi	r24, 0x7F	; 127
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    1892:	fe 01       	movw	r30, r28
    1894:	e1 58       	subi	r30, 0x81	; 129
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    189a:	fe 01       	movw	r30, r28
    189c:	e1 58       	subi	r30, 0x81	; 129
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	51 f4       	brne	.+20     	; 0x18ba <HLCD_init+0x134>
    18a6:	ce 01       	movw	r24, r28
    18a8:	8b 57       	subi	r24, 0x7B	; 123
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e1 58       	subi	r30, 0x81	; 129
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 83       	st	Z, r24
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    18ba:	fe 01       	movw	r30, r28
    18bc:	e0 58       	subi	r30, 0x80	; 128
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    18c4:	fe 01       	movw	r30, r28
    18c6:	e1 58       	subi	r30, 0x81	; 129
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	88 23       	and	r24, r24
    18ce:	51 f4       	brne	.+20     	; 0x18e4 <HLCD_init+0x15e>
    18d0:	ce 01       	movw	r24, r28
    18d2:	87 57       	subi	r24, 0x77	; 119
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    18da:	fe 01       	movw	r30, r28
    18dc:	e1 58       	subi	r30, 0x81	; 129
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 83       	st	Z, r24
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    18e4:	fe 01       	movw	r30, r28
    18e6:	e0 58       	subi	r30, 0x80	; 128
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e3 56       	subi	r30, 0x63	; 99
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	01 90       	ld	r0, Z+
    18f6:	f0 81       	ld	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 23       	and	r24, r24
    18fe:	09 f0       	breq	.+2      	; 0x1902 <HLCD_init+0x17c>
    1900:	42 c4       	rjmp	.+2180   	; 0x2186 <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1902:	fe 01       	movw	r30, r28
    1904:	e3 56       	subi	r30, 0x63	; 99
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	01 90       	ld	r0, Z+
    190a:	f0 81       	ld	r31, Z
    190c:	e0 2d       	mov	r30, r0
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	fe 01       	movw	r30, r28
    1912:	e3 56       	subi	r30, 0x63	; 99
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	01 90       	ld	r0, Z+
    1918:	f0 81       	ld	r31, Z
    191a:	e0 2d       	mov	r30, r0
    191c:	92 85       	ldd	r25, Z+10	; 0x0a
    191e:	fe 01       	movw	r30, r28
    1920:	e3 57       	subi	r30, 0x73	; 115
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 83       	st	Z, r24
    1926:	fe 01       	movw	r30, r28
    1928:	e3 57       	subi	r30, 0x73	; 115
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	fe 01       	movw	r30, r28
    1930:	e3 57       	subi	r30, 0x73	; 115
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	82 83       	std	Z+2, r24	; 0x02
    1938:	fe 01       	movw	r30, r28
    193a:	e3 57       	subi	r30, 0x73	; 115
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1940:	fe 01       	movw	r30, r28
    1942:	e3 56       	subi	r30, 0x63	; 99
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	01 90       	ld	r0, Z+
    1948:	f0 81       	ld	r31, Z
    194a:	e0 2d       	mov	r30, r0
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	fe 01       	movw	r30, r28
    1950:	e3 56       	subi	r30, 0x63	; 99
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	01 90       	ld	r0, Z+
    1956:	f0 81       	ld	r31, Z
    1958:	e0 2d       	mov	r30, r0
    195a:	93 85       	ldd	r25, Z+11	; 0x0b
    195c:	fe 01       	movw	r30, r28
    195e:	ef 56       	subi	r30, 0x6F	; 111
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 83       	st	Z, r24
    1964:	fe 01       	movw	r30, r28
    1966:	ef 56       	subi	r30, 0x6F	; 111
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	fe 01       	movw	r30, r28
    196e:	ef 56       	subi	r30, 0x6F	; 111
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	fe 01       	movw	r30, r28
    1978:	ef 56       	subi	r30, 0x6F	; 111
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    197e:	fe 01       	movw	r30, r28
    1980:	e3 56       	subi	r30, 0x63	; 99
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	01 90       	ld	r0, Z+
    1986:	f0 81       	ld	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	fe 01       	movw	r30, r28
    198e:	e3 56       	subi	r30, 0x63	; 99
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	01 90       	ld	r0, Z+
    1994:	f0 81       	ld	r31, Z
    1996:	e0 2d       	mov	r30, r0
    1998:	94 85       	ldd	r25, Z+12	; 0x0c
    199a:	fe 01       	movw	r30, r28
    199c:	eb 56       	subi	r30, 0x6B	; 107
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 83       	st	Z, r24
    19a2:	fe 01       	movw	r30, r28
    19a4:	eb 56       	subi	r30, 0x6B	; 107
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	fe 01       	movw	r30, r28
    19ac:	eb 56       	subi	r30, 0x6B	; 107
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	82 83       	std	Z+2, r24	; 0x02
    19b4:	fe 01       	movw	r30, r28
    19b6:	eb 56       	subi	r30, 0x6B	; 107
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    19bc:	fe 01       	movw	r30, r28
    19be:	e3 56       	subi	r30, 0x63	; 99
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	01 90       	ld	r0, Z+
    19c4:	f0 81       	ld	r31, Z
    19c6:	e0 2d       	mov	r30, r0
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	fe 01       	movw	r30, r28
    19cc:	e3 56       	subi	r30, 0x63	; 99
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	01 90       	ld	r0, Z+
    19d2:	f0 81       	ld	r31, Z
    19d4:	e0 2d       	mov	r30, r0
    19d6:	95 85       	ldd	r25, Z+13	; 0x0d
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 56       	subi	r30, 0x67	; 103
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 83       	st	Z, r24
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 56       	subi	r30, 0x67	; 103
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	fe 01       	movw	r30, r28
    19ea:	e7 56       	subi	r30, 0x67	; 103
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	82 83       	std	Z+2, r24	; 0x02
    19f2:	fe 01       	movw	r30, r28
    19f4:	e7 56       	subi	r30, 0x67	; 103
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    19fa:	fe 01       	movw	r30, r28
    19fc:	e1 58       	subi	r30, 0x81	; 129
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	51 f4       	brne	.+20     	; 0x1a1a <HLCD_init+0x294>
    1a06:	ce 01       	movw	r24, r28
    1a08:	83 57       	subi	r24, 0x73	; 115
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    1a10:	fe 01       	movw	r30, r28
    1a12:	e1 58       	subi	r30, 0x81	; 129
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 83       	st	Z, r24
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e0 58       	subi	r30, 0x80	; 128
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    1a24:	fe 01       	movw	r30, r28
    1a26:	e1 58       	subi	r30, 0x81	; 129
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 23       	and	r24, r24
    1a2e:	51 f4       	brne	.+20     	; 0x1a44 <HLCD_init+0x2be>
    1a30:	ce 01       	movw	r24, r28
    1a32:	8f 56       	subi	r24, 0x6F	; 111
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 58       	subi	r30, 0x81	; 129
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 83       	st	Z, r24
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    1a44:	fe 01       	movw	r30, r28
    1a46:	e0 58       	subi	r30, 0x80	; 128
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e1 58       	subi	r30, 0x81	; 129
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	88 23       	and	r24, r24
    1a58:	51 f4       	brne	.+20     	; 0x1a6e <HLCD_init+0x2e8>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	8b 56       	subi	r24, 0x6B	; 107
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    1a64:	fe 01       	movw	r30, r28
    1a66:	e1 58       	subi	r30, 0x81	; 129
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 83       	st	Z, r24
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e0 58       	subi	r30, 0x80	; 128
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e1 58       	subi	r30, 0x81	; 129
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	51 f4       	brne	.+20     	; 0x1a98 <HLCD_init+0x312>
    1a84:	ce 01       	movw	r24, r28
    1a86:	87 56       	subi	r24, 0x67	; 103
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e1 58       	subi	r30, 0x81	; 129
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 83       	st	Z, r24
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e0 58       	subi	r30, 0x80	; 128
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 83       	st	Z, r24
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e5 58       	subi	r30, 0x85	; 133
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 ef       	ldi	r26, 0xF0	; 240
    1aae:	b1 e4       	ldi	r27, 0x41	; 65
    1ab0:	80 83       	st	Z, r24
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	a2 83       	std	Z+2, r26	; 0x02
    1ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	09 58       	subi	r16, 0x89	; 137
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e5 58       	subi	r30, 0x85	; 133
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a ef       	ldi	r20, 0xFA	; 250
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 83       	st	Z, r24
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	a2 83       	std	Z+2, r26	; 0x02
    1ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 58       	subi	r30, 0x89	; 137
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	44 f4       	brge	.+16     	; 0x1b14 <HLCD_init+0x38e>
		__ticks = 1;
    1b04:	fe 01       	movw	r30, r28
    1b06:	eb 58       	subi	r30, 0x8B	; 139
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	64 c0       	rjmp	.+200    	; 0x1bdc <HLCD_init+0x456>
	else if (__tmp > 65535)
    1b14:	fe 01       	movw	r30, r28
    1b16:	e9 58       	subi	r30, 0x89	; 137
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <HLCD_init+0x3ae>
    1b32:	43 c0       	rjmp	.+134    	; 0x1bba <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	fe 01       	movw	r30, r28
    1b36:	e5 58       	subi	r30, 0x85	; 133
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8e 01       	movw	r16, r28
    1b54:	0b 58       	subi	r16, 0x8B	; 139
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	f8 01       	movw	r30, r16
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	1f c0       	rjmp	.+62     	; 0x1baa <HLCD_init+0x424>
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 58       	subi	r30, 0x8D	; 141
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ed 58       	subi	r30, 0x8D	; 141
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <HLCD_init+0x3fe>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ed 58       	subi	r30, 0x8D	; 141
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	de 01       	movw	r26, r28
    1b94:	ab 58       	subi	r26, 0x8B	; 139
    1b96:	bf 4f       	sbci	r27, 0xFF	; 255
    1b98:	fe 01       	movw	r30, r28
    1b9a:	eb 58       	subi	r30, 0x8B	; 139
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	9c 93       	st	X, r25
    1ba8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	fe 01       	movw	r30, r28
    1bac:	eb 58       	subi	r30, 0x8B	; 139
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	d1 f6       	brne	.-76     	; 0x1b6c <HLCD_init+0x3e6>
    1bb8:	27 c0       	rjmp	.+78     	; 0x1c08 <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	8e 01       	movw	r16, r28
    1bbc:	0b 58       	subi	r16, 0x8B	; 139
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e9 58       	subi	r30, 0x89	; 137
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	de 01       	movw	r26, r28
    1bde:	af 58       	subi	r26, 0x8F	; 143
    1be0:	bf 4f       	sbci	r27, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	eb 58       	subi	r30, 0x8B	; 139
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	8d 93       	st	X+, r24
    1bee:	9c 93       	st	X, r25
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ef 58       	subi	r30, 0x8F	; 143
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <HLCD_init+0x474>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ef 58       	subi	r30, 0x8F	; 143
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e3 56       	subi	r30, 0x63	; 99
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	68 e2       	ldi	r22, 0x28	; 40
    1c14:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e3 59       	subi	r30, 0x93	; 147
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a8 e4       	ldi	r26, 0x48	; 72
    1c24:	b2 e4       	ldi	r27, 0x42	; 66
    1c26:	80 83       	st	Z, r24
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	a2 83       	std	Z+2, r26	; 0x02
    1c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	8e 01       	movw	r16, r28
    1c30:	07 59       	subi	r16, 0x97	; 151
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e3 59       	subi	r30, 0x93	; 147
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a ef       	ldi	r20, 0xFA	; 250
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	f8 01       	movw	r30, r16
    1c54:	80 83       	st	Z, r24
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	a2 83       	std	Z+2, r26	; 0x02
    1c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e7 59       	subi	r30, 0x97	; 151
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	44 f4       	brge	.+16     	; 0x1c8a <HLCD_init+0x504>
		__ticks = 1;
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 59       	subi	r30, 0x99	; 153
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	64 c0       	rjmp	.+200    	; 0x1d52 <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 59       	subi	r30, 0x97	; 151
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	0c f0       	brlt	.+2      	; 0x1caa <HLCD_init+0x524>
    1ca8:	43 c0       	rjmp	.+134    	; 0x1d30 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	fe 01       	movw	r30, r28
    1cac:	e3 59       	subi	r30, 0x93	; 147
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8e 01       	movw	r16, r28
    1cca:	09 59       	subi	r16, 0x99	; 153
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	f8 01       	movw	r30, r16
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	1f c0       	rjmp	.+62     	; 0x1d20 <HLCD_init+0x59a>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	eb 59       	subi	r30, 0x9B	; 155
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	88 ec       	ldi	r24, 0xC8	; 200
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 59       	subi	r30, 0x9B	; 155
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <HLCD_init+0x574>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	eb 59       	subi	r30, 0x9B	; 155
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	de 01       	movw	r26, r28
    1d0a:	a9 59       	subi	r26, 0x99	; 153
    1d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e9 59       	subi	r30, 0x99	; 153
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	11 96       	adiw	r26, 0x01	; 1
    1d1c:	9c 93       	st	X, r25
    1d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	fe 01       	movw	r30, r28
    1d22:	e9 59       	subi	r30, 0x99	; 153
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	d1 f6       	brne	.-76     	; 0x1ce2 <HLCD_init+0x55c>
    1d2e:	27 c0       	rjmp	.+78     	; 0x1d7e <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	8e 01       	movw	r16, r28
    1d32:	09 59       	subi	r16, 0x99	; 153
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 59       	subi	r30, 0x97	; 151
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	de 01       	movw	r26, r28
    1d54:	ad 59       	subi	r26, 0x9D	; 157
    1d56:	bf 4f       	sbci	r27, 0xFF	; 255
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 59       	subi	r30, 0x99	; 153
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	91 81       	ldd	r25, Z+1	; 0x01
    1d62:	8d 93       	st	X+, r24
    1d64:	9c 93       	st	X, r25
    1d66:	fe 01       	movw	r30, r28
    1d68:	ed 59       	subi	r30, 0x9D	; 157
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <HLCD_init+0x5ea>
    1d74:	fe 01       	movw	r30, r28
    1d76:	ed 59       	subi	r30, 0x9D	; 157
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e3 56       	subi	r30, 0x63	; 99
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	6f e0       	ldi	r22, 0x0F	; 15
    1d8a:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e1 5a       	subi	r30, 0xA1	; 161
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a8 e4       	ldi	r26, 0x48	; 72
    1d9a:	b2 e4       	ldi	r27, 0x42	; 66
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	8e 01       	movw	r16, r28
    1da6:	05 5a       	subi	r16, 0xA5	; 165
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	fe 01       	movw	r30, r28
    1dac:	e1 5a       	subi	r30, 0xA1	; 161
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	80 83       	st	Z, r24
    1dcc:	91 83       	std	Z+1, r25	; 0x01
    1dce:	a2 83       	std	Z+2, r26	; 0x02
    1dd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e5 5a       	subi	r30, 0xA5	; 165
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	44 f4       	brge	.+16     	; 0x1e00 <HLCD_init+0x67a>
		__ticks = 1;
    1df0:	fe 01       	movw	r30, r28
    1df2:	e7 5a       	subi	r30, 0xA7	; 167
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	64 c0       	rjmp	.+200    	; 0x1ec8 <HLCD_init+0x742>
	else if (__tmp > 65535)
    1e00:	fe 01       	movw	r30, r28
    1e02:	e5 5a       	subi	r30, 0xA5	; 165
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	0c f0       	brlt	.+2      	; 0x1e20 <HLCD_init+0x69a>
    1e1e:	43 c0       	rjmp	.+134    	; 0x1ea6 <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e20:	fe 01       	movw	r30, r28
    1e22:	e1 5a       	subi	r30, 0xA1	; 161
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8e 01       	movw	r16, r28
    1e40:	07 5a       	subi	r16, 0xA7	; 167
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	f8 01       	movw	r30, r16
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	1f c0       	rjmp	.+62     	; 0x1e96 <HLCD_init+0x710>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e9 5a       	subi	r30, 0xA9	; 169
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	88 ec       	ldi	r24, 0xC8	; 200
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	fe 01       	movw	r30, r28
    1e68:	e9 5a       	subi	r30, 0xA9	; 169
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <HLCD_init+0x6ea>
    1e74:	fe 01       	movw	r30, r28
    1e76:	e9 5a       	subi	r30, 0xA9	; 169
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	de 01       	movw	r26, r28
    1e80:	a7 5a       	subi	r26, 0xA7	; 167
    1e82:	bf 4f       	sbci	r27, 0xFF	; 255
    1e84:	fe 01       	movw	r30, r28
    1e86:	e7 5a       	subi	r30, 0xA7	; 167
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e96:	fe 01       	movw	r30, r28
    1e98:	e7 5a       	subi	r30, 0xA7	; 167
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	d1 f6       	brne	.-76     	; 0x1e58 <HLCD_init+0x6d2>
    1ea4:	27 c0       	rjmp	.+78     	; 0x1ef4 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	8e 01       	movw	r16, r28
    1ea8:	07 5a       	subi	r16, 0xA7	; 167
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	fe 01       	movw	r30, r28
    1eae:	e5 5a       	subi	r30, 0xA5	; 165
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	de 01       	movw	r26, r28
    1eca:	ab 5a       	subi	r26, 0xAB	; 171
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 5a       	subi	r30, 0xA7	; 167
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	8d 93       	st	X+, r24
    1eda:	9c 93       	st	X, r25
    1edc:	fe 01       	movw	r30, r28
    1ede:	eb 5a       	subi	r30, 0xAB	; 171
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <HLCD_init+0x760>
    1eea:	fe 01       	movw	r30, r28
    1eec:	eb 5a       	subi	r30, 0xAB	; 171
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e3 56       	subi	r30, 0x63	; 99
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    1f04:	fe 01       	movw	r30, r28
    1f06:	ef 5a       	subi	r30, 0xAF	; 175
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a8 e4       	ldi	r26, 0x48	; 72
    1f10:	b2 e4       	ldi	r27, 0x42	; 66
    1f12:	80 83       	st	Z, r24
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	a2 83       	std	Z+2, r26	; 0x02
    1f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	03 5b       	subi	r16, 0xB3	; 179
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	fe 01       	movw	r30, r28
    1f22:	ef 5a       	subi	r30, 0xAF	; 175
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a ef       	ldi	r20, 0xFA	; 250
    1f34:	54 e4       	ldi	r21, 0x44	; 68
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 83       	st	Z, r24
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	a2 83       	std	Z+2, r26	; 0x02
    1f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e3 5b       	subi	r30, 0xB3	; 179
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	44 f4       	brge	.+16     	; 0x1f76 <HLCD_init+0x7f0>
		__ticks = 1;
    1f66:	fe 01       	movw	r30, r28
    1f68:	e5 5b       	subi	r30, 0xB5	; 181
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
    1f74:	64 c0       	rjmp	.+200    	; 0x203e <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    1f76:	fe 01       	movw	r30, r28
    1f78:	e3 5b       	subi	r30, 0xB3	; 179
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	3f ef       	ldi	r19, 0xFF	; 255
    1f88:	4f e7       	ldi	r20, 0x7F	; 127
    1f8a:	57 e4       	ldi	r21, 0x47	; 71
    1f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	0c f0       	brlt	.+2      	; 0x1f96 <HLCD_init+0x810>
    1f94:	43 c0       	rjmp	.+134    	; 0x201c <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	fe 01       	movw	r30, r28
    1f98:	ef 5a       	subi	r30, 0xAF	; 175
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	05 5b       	subi	r16, 0xB5	; 181
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	1f c0       	rjmp	.+62     	; 0x200c <HLCD_init+0x886>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 5b       	subi	r30, 0xB7	; 183
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	88 ec       	ldi	r24, 0xC8	; 200
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e7 5b       	subi	r30, 0xB7	; 183
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <HLCD_init+0x860>
    1fea:	fe 01       	movw	r30, r28
    1fec:	e7 5b       	subi	r30, 0xB7	; 183
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	de 01       	movw	r26, r28
    1ff6:	a5 5b       	subi	r26, 0xB5	; 181
    1ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 5b       	subi	r30, 0xB5	; 181
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	11 96       	adiw	r26, 0x01	; 1
    2008:	9c 93       	st	X, r25
    200a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5b       	subi	r30, 0xB5	; 181
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	d1 f6       	brne	.-76     	; 0x1fce <HLCD_init+0x848>
    201a:	27 c0       	rjmp	.+78     	; 0x206a <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	8e 01       	movw	r16, r28
    201e:	05 5b       	subi	r16, 0xB5	; 181
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	fe 01       	movw	r30, r28
    2024:	e3 5b       	subi	r30, 0xB3	; 179
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	de 01       	movw	r26, r28
    2040:	a9 5b       	subi	r26, 0xB9	; 185
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5b       	subi	r30, 0xB5	; 181
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	8d 93       	st	X+, r24
    2050:	9c 93       	st	X, r25
    2052:	fe 01       	movw	r30, r28
    2054:	e9 5b       	subi	r30, 0xB9	; 185
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <HLCD_init+0x8d6>
    2060:	fe 01       	movw	r30, r28
    2062:	e9 5b       	subi	r30, 0xB9	; 185
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    206a:	fe 01       	movw	r30, r28
    206c:	e3 56       	subi	r30, 0x63	; 99
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	66 e0       	ldi	r22, 0x06	; 6
    2076:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    207a:	fe 01       	movw	r30, r28
    207c:	ed 5b       	subi	r30, 0xBD	; 189
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a8 e4       	ldi	r26, 0x48	; 72
    2086:	b2 e4       	ldi	r27, 0x42	; 66
    2088:	80 83       	st	Z, r24
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	a2 83       	std	Z+2, r26	; 0x02
    208e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	8e 01       	movw	r16, r28
    2092:	01 5c       	subi	r16, 0xC1	; 193
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	ed 5b       	subi	r30, 0xBD	; 189
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a ef       	ldi	r20, 0xFA	; 250
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	f8 01       	movw	r30, r16
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20be:	fe 01       	movw	r30, r28
    20c0:	ff 96       	adiw	r30, 0x3f	; 63
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <HLCD_init+0x95e>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9e af       	std	Y+62, r25	; 0x3e
    20e0:	8d af       	std	Y+61, r24	; 0x3d
    20e2:	46 c0       	rjmp	.+140    	; 0x2170 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    20e4:	fe 01       	movw	r30, r28
    20e6:	ff 96       	adiw	r30, 0x3f	; 63
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	64 f5       	brge	.+88     	; 0x2158 <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	fe 01       	movw	r30, r28
    2102:	ed 5b       	subi	r30, 0xBD	; 189
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e af       	std	Y+62, r25	; 0x3e
    212c:	8d af       	std	Y+61, r24	; 0x3d
    212e:	0f c0       	rjmp	.+30     	; 0x214e <HLCD_init+0x9c8>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c af       	std	Y+60, r25	; 0x3c
    2136:	8b af       	std	Y+59, r24	; 0x3b
    2138:	8b ad       	ldd	r24, Y+59	; 0x3b
    213a:	9c ad       	ldd	r25, Y+60	; 0x3c
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <HLCD_init+0x9b6>
    2140:	9c af       	std	Y+60, r25	; 0x3c
    2142:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d ad       	ldd	r24, Y+61	; 0x3d
    2146:	9e ad       	ldd	r25, Y+62	; 0x3e
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e af       	std	Y+62, r25	; 0x3e
    214c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2150:	9e ad       	ldd	r25, Y+62	; 0x3e
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <HLCD_init+0x9aa>
    2156:	58 c2       	rjmp	.+1200   	; 0x2608 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	fe 01       	movw	r30, r28
    215a:	ff 96       	adiw	r30, 0x3f	; 63
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9e af       	std	Y+62, r25	; 0x3e
    216e:	8d af       	std	Y+61, r24	; 0x3d
    2170:	8d ad       	ldd	r24, Y+61	; 0x3d
    2172:	9e ad       	ldd	r25, Y+62	; 0x3e
    2174:	9a af       	std	Y+58, r25	; 0x3a
    2176:	89 af       	std	Y+57, r24	; 0x39
    2178:	89 ad       	ldd	r24, Y+57	; 0x39
    217a:	9a ad       	ldd	r25, Y+58	; 0x3a
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <HLCD_init+0x9f6>
    2180:	9a af       	std	Y+58, r25	; 0x3a
    2182:	89 af       	std	Y+57, r24	; 0x39
    2184:	41 c2       	rjmp	.+1154   	; 0x2608 <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2186:	fe 01       	movw	r30, r28
    2188:	e3 56       	subi	r30, 0x63	; 99
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	01 90       	ld	r0, Z+
    218e:	f0 81       	ld	r31, Z
    2190:	e0 2d       	mov	r30, r0
    2192:	80 81       	ld	r24, Z
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	09 f0       	breq	.+2      	; 0x219a <HLCD_init+0xa14>
    2198:	2c c2       	rjmp	.+1112   	; 0x25f2 <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    219a:	fe 01       	movw	r30, r28
    219c:	e1 58       	subi	r30, 0x81	; 129
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <HLCD_init+0xa40>
    21a6:	fe 01       	movw	r30, r28
    21a8:	e3 56       	subi	r30, 0x63	; 99
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	01 90       	ld	r0, Z+
    21ae:	f0 81       	ld	r31, Z
    21b0:	e0 2d       	mov	r30, r0
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GPIO_initPort>
    21bc:	fe 01       	movw	r30, r28
    21be:	e1 58       	subi	r30, 0x81	; 129
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 83       	st	Z, r24
    21c4:	05 c0       	rjmp	.+10     	; 0x21d0 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    21c6:	fe 01       	movw	r30, r28
    21c8:	e0 58       	subi	r30, 0x80	; 128
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 83       	st	Z, r24
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e8       	ldi	r26, 0x80	; 128
    21d6:	bf e3       	ldi	r27, 0x3F	; 63
    21d8:	8d ab       	std	Y+53, r24	; 0x35
    21da:	9e ab       	std	Y+54, r25	; 0x36
    21dc:	af ab       	std	Y+55, r26	; 0x37
    21de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6d a9       	ldd	r22, Y+53	; 0x35
    21e2:	7e a9       	ldd	r23, Y+54	; 0x36
    21e4:	8f a9       	ldd	r24, Y+55	; 0x37
    21e6:	98 ad       	ldd	r25, Y+56	; 0x38
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	89 ab       	std	Y+49, r24	; 0x31
    21fa:	9a ab       	std	Y+50, r25	; 0x32
    21fc:	ab ab       	std	Y+51, r26	; 0x33
    21fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2200:	69 a9       	ldd	r22, Y+49	; 0x31
    2202:	7a a9       	ldd	r23, Y+50	; 0x32
    2204:	8b a9       	ldd	r24, Y+51	; 0x33
    2206:	9c a9       	ldd	r25, Y+52	; 0x34
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <HLCD_init+0xa9c>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    2222:	69 a9       	ldd	r22, Y+49	; 0x31
    2224:	7a a9       	ldd	r23, Y+50	; 0x32
    2226:	8b a9       	ldd	r24, Y+51	; 0x33
    2228:	9c a9       	ldd	r25, Y+52	; 0x34
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6d a9       	ldd	r22, Y+53	; 0x35
    223c:	7e a9       	ldd	r23, Y+54	; 0x36
    223e:	8f a9       	ldd	r24, Y+55	; 0x37
    2240:	98 ad       	ldd	r25, Y+56	; 0x38
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	98 ab       	std	Y+48, r25	; 0x30
    2260:	8f a7       	std	Y+47, r24	; 0x2f
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <HLCD_init+0xafc>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e a7       	std	Y+46, r25	; 0x2e
    226a:	8d a7       	std	Y+45, r24	; 0x2d
    226c:	8d a5       	ldd	r24, Y+45	; 0x2d
    226e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <HLCD_init+0xaea>
    2274:	9e a7       	std	Y+46, r25	; 0x2e
    2276:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8f a5       	ldd	r24, Y+47	; 0x2f
    227a:	98 a9       	ldd	r25, Y+48	; 0x30
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	98 ab       	std	Y+48, r25	; 0x30
    2280:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <HLCD_init+0xade>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	98 ab       	std	Y+48, r25	; 0x30
    229e:	8f a7       	std	Y+47, r24	; 0x2f
    22a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a2:	98 a9       	ldd	r25, Y+48	; 0x30
    22a4:	9c a7       	std	Y+44, r25	; 0x2c
    22a6:	8b a7       	std	Y+43, r24	; 0x2b
    22a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <HLCD_init+0xb26>
    22b0:	9c a7       	std	Y+44, r25	; 0x2c
    22b2:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    22b4:	fe 01       	movw	r30, r28
    22b6:	e1 58       	subi	r30, 0x81	; 129
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	88 23       	and	r24, r24
    22be:	69 f4       	brne	.+26     	; 0x22da <HLCD_init+0xb54>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e3 56       	subi	r30, 0x63	; 99
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	68 e3       	ldi	r22, 0x38	; 56
    22cc:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    22d0:	fe 01       	movw	r30, r28
    22d2:	e0 58       	subi	r30, 0x80	; 128
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 83       	st	Z, r24
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    22da:	fe 01       	movw	r30, r28
    22dc:	e0 58       	subi	r30, 0x80	; 128
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	80 83       	st	Z, r24
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	8f a3       	std	Y+39, r24	; 0x27
    22ee:	98 a7       	std	Y+40, r25	; 0x28
    22f0:	a9 a7       	std	Y+41, r26	; 0x29
    22f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6f a1       	ldd	r22, Y+39	; 0x27
    22f6:	78 a5       	ldd	r23, Y+40	; 0x28
    22f8:	89 a5       	ldd	r24, Y+41	; 0x29
    22fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8b a3       	std	Y+35, r24	; 0x23
    230e:	9c a3       	std	Y+36, r25	; 0x24
    2310:	ad a3       	std	Y+37, r26	; 0x25
    2312:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2314:	6b a1       	ldd	r22, Y+35	; 0x23
    2316:	7c a1       	ldd	r23, Y+36	; 0x24
    2318:	8d a1       	ldd	r24, Y+37	; 0x25
    231a:	9e a1       	ldd	r25, Y+38	; 0x26
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <HLCD_init+0xbb0>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9a a3       	std	Y+34, r25	; 0x22
    2332:	89 a3       	std	Y+33, r24	; 0x21
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6f a1       	ldd	r22, Y+39	; 0x27
    2350:	78 a5       	ldd	r23, Y+40	; 0x28
    2352:	89 a5       	ldd	r24, Y+41	; 0x29
    2354:	9a a5       	ldd	r25, Y+42	; 0x2a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <HLCD_init+0xc10>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	98 a3       	std	Y+32, r25	; 0x20
    237e:	8f 8f       	std	Y+31, r24	; 0x1f
    2380:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2382:	98 a1       	ldd	r25, Y+32	; 0x20
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <HLCD_init+0xbfe>
    2388:	98 a3       	std	Y+32, r25	; 0x20
    238a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	89 a1       	ldd	r24, Y+33	; 0x21
    238e:	9a a1       	ldd	r25, Y+34	; 0x22
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9a a3       	std	Y+34, r25	; 0x22
    2394:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <HLCD_init+0xbf2>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6b a1       	ldd	r22, Y+35	; 0x23
    23a2:	7c a1       	ldd	r23, Y+36	; 0x24
    23a4:	8d a1       	ldd	r24, Y+37	; 0x25
    23a6:	9e a1       	ldd	r25, Y+38	; 0x26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d
    23bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <HLCD_init+0xc3a>
    23c4:	9e 8f       	std	Y+30, r25	; 0x1e
    23c6:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    23c8:	fe 01       	movw	r30, r28
    23ca:	e0 58       	subi	r30, 0x80	; 128
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 81       	ld	r24, Z
    23d0:	88 23       	and	r24, r24
    23d2:	69 f4       	brne	.+26     	; 0x23ee <HLCD_init+0xc68>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e3 56       	subi	r30, 0x63	; 99
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	6e e0       	ldi	r22, 0x0E	; 14
    23e0:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    23e4:	fe 01       	movw	r30, r28
    23e6:	e0 58       	subi	r30, 0x80	; 128
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 83       	st	Z, r24
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    23ee:	fe 01       	movw	r30, r28
    23f0:	e0 58       	subi	r30, 0x80	; 128
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	80 83       	st	Z, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e8       	ldi	r26, 0x80	; 128
    23fe:	bf e3       	ldi	r27, 0x3F	; 63
    2400:	89 8f       	std	Y+25, r24	; 0x19
    2402:	9a 8f       	std	Y+26, r25	; 0x1a
    2404:	ab 8f       	std	Y+27, r26	; 0x1b
    2406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	69 8d       	ldd	r22, Y+25	; 0x19
    240a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a ef       	ldi	r20, 0xFA	; 250
    2416:	54 e4       	ldi	r21, 0x44	; 68
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8d 8b       	std	Y+21, r24	; 0x15
    2422:	9e 8b       	std	Y+22, r25	; 0x16
    2424:	af 8b       	std	Y+23, r26	; 0x17
    2426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <HLCD_init+0xcc4>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <HLCD_init+0xd42>
	else if (__tmp > 65535)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	69 8d       	ldd	r22, Y+25	; 0x19
    2464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <HLCD_init+0xd24>
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9a 8b       	std	Y+18, r25	; 0x12
    2492:	89 8b       	std	Y+17, r24	; 0x11
    2494:	89 89       	ldd	r24, Y+17	; 0x11
    2496:	9a 89       	ldd	r25, Y+18	; 0x12
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <HLCD_init+0xd12>
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <HLCD_init+0xd06>
    24b2:	14 c0       	rjmp	.+40     	; 0x24dc <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	98 8b       	std	Y+16, r25	; 0x10
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d2:	98 89       	ldd	r25, Y+16	; 0x10
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <HLCD_init+0xd4e>
    24d8:	98 8b       	std	Y+16, r25	; 0x10
    24da:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    24dc:	fe 01       	movw	r30, r28
    24de:	e0 58       	subi	r30, 0x80	; 128
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	88 23       	and	r24, r24
    24e6:	69 f4       	brne	.+26     	; 0x2502 <HLCD_init+0xd7c>
    24e8:	fe 01       	movw	r30, r28
    24ea:	e3 56       	subi	r30, 0x63	; 99
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    24f8:	fe 01       	movw	r30, r28
    24fa:	e0 58       	subi	r30, 0x80	; 128
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 83       	st	Z, r24
    2500:	05 c0       	rjmp	.+10     	; 0x250c <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    2502:	fe 01       	movw	r30, r28
    2504:	e0 58       	subi	r30, 0x80	; 128
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 83       	st	Z, r24
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8b 87       	std	Y+11, r24	; 0x0b
    2516:	9c 87       	std	Y+12, r25	; 0x0c
    2518:	ad 87       	std	Y+13, r26	; 0x0d
    251a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	a9 87       	std	Y+9, r26	; 0x09
    253a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <HLCD_init+0xdd8>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <HLCD_init+0xe56>
	else if (__tmp > 65535)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	0f c0       	rjmp	.+30     	; 0x25be <HLCD_init+0xe38>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <HLCD_init+0xe26>
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <HLCD_init+0xe1a>
    25c6:	20 c0       	rjmp	.+64     	; 0x2608 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <HLCD_init+0xe62>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	0b c0       	rjmp	.+22     	; 0x2608 <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    25f2:	fe 01       	movw	r30, r28
    25f4:	e0 58       	subi	r30, 0x80	; 128
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	80 83       	st	Z, r24
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    25fe:	fe 01       	movw	r30, r28
    2600:	e0 58       	subi	r30, 0x80	; 128
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	80 83       	st	Z, r24
	}

	return lcdRet;
    2608:	fe 01       	movw	r30, r28
    260a:	e0 58       	subi	r30, 0x80	; 128
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
}
    2610:	c2 56       	subi	r28, 0x62	; 98
    2612:	df 4f       	sbci	r29, 0xFF	; 255
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	08 95       	ret

00002628 <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	cd 59       	subi	r28, 0x9D	; 157
    2636:	d0 40       	sbci	r29, 0x00	; 0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	fe 01       	movw	r30, r28
    2644:	e5 56       	subi	r30, 0x65	; 101
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	fe 01       	movw	r30, r28
    264e:	e3 56       	subi	r30, 0x63	; 99
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2654:	fe 01       	movw	r30, r28
    2656:	e2 57       	subi	r30, 0x72	; 114
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    265e:	fe 01       	movw	r30, r28
    2660:	e3 57       	subi	r30, 0x73	; 115
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    2668:	fe 01       	movw	r30, r28
    266a:	e5 56       	subi	r30, 0x65	; 101
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	09 f4       	brne	.+2      	; 0x2678 <HLCD_sendCmd+0x50>
    2676:	2f c7       	rjmp	.+3678   	; 0x34d6 <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2678:	fe 01       	movw	r30, r28
    267a:	e5 56       	subi	r30, 0x65	; 101
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	01 90       	ld	r0, Z+
    2680:	f0 81       	ld	r31, Z
    2682:	e0 2d       	mov	r30, r0
    2684:	81 81       	ldd	r24, Z+1	; 0x01
    2686:	fe 01       	movw	r30, r28
    2688:	e5 56       	subi	r30, 0x65	; 101
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	01 90       	ld	r0, Z+
    268e:	f0 81       	ld	r31, Z
    2690:	e0 2d       	mov	r30, r0
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	fe 01       	movw	r30, r28
    2696:	e1 57       	subi	r30, 0x71	; 113
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 83       	st	Z, r24
    269c:	fe 01       	movw	r30, r28
    269e:	e1 57       	subi	r30, 0x71	; 113
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	fe 01       	movw	r30, r28
    26a6:	e1 57       	subi	r30, 0x71	; 113
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	82 83       	std	Z+2, r24	; 0x02
    26ae:	fe 01       	movw	r30, r28
    26b0:	e1 57       	subi	r30, 0x71	; 113
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    26b6:	fe 01       	movw	r30, r28
    26b8:	e5 56       	subi	r30, 0x65	; 101
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	01 90       	ld	r0, Z+
    26be:	f0 81       	ld	r31, Z
    26c0:	e0 2d       	mov	r30, r0
    26c2:	81 81       	ldd	r24, Z+1	; 0x01
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 56       	subi	r30, 0x65	; 101
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	01 90       	ld	r0, Z+
    26cc:	f0 81       	ld	r31, Z
    26ce:	e0 2d       	mov	r30, r0
    26d0:	94 81       	ldd	r25, Z+4	; 0x04
    26d2:	fe 01       	movw	r30, r28
    26d4:	ed 56       	subi	r30, 0x6D	; 109
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 83       	st	Z, r24
    26da:	fe 01       	movw	r30, r28
    26dc:	ed 56       	subi	r30, 0x6D	; 109
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	fe 01       	movw	r30, r28
    26e4:	ed 56       	subi	r30, 0x6D	; 109
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	82 83       	std	Z+2, r24	; 0x02
    26ec:	fe 01       	movw	r30, r28
    26ee:	ed 56       	subi	r30, 0x6D	; 109
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    26f4:	fe 01       	movw	r30, r28
    26f6:	e5 56       	subi	r30, 0x65	; 101
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	01 90       	ld	r0, Z+
    26fc:	f0 81       	ld	r31, Z
    26fe:	e0 2d       	mov	r30, r0
    2700:	81 81       	ldd	r24, Z+1	; 0x01
    2702:	fe 01       	movw	r30, r28
    2704:	e5 56       	subi	r30, 0x65	; 101
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	01 90       	ld	r0, Z+
    270a:	f0 81       	ld	r31, Z
    270c:	e0 2d       	mov	r30, r0
    270e:	95 81       	ldd	r25, Z+5	; 0x05
    2710:	fe 01       	movw	r30, r28
    2712:	e9 56       	subi	r30, 0x69	; 105
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 83       	st	Z, r24
    2718:	fe 01       	movw	r30, r28
    271a:	e9 56       	subi	r30, 0x69	; 105
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	fe 01       	movw	r30, r28
    2722:	e9 56       	subi	r30, 0x69	; 105
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	82 83       	std	Z+2, r24	; 0x02
    272a:	fe 01       	movw	r30, r28
    272c:	e9 56       	subi	r30, 0x69	; 105
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    2732:	ce 01       	movw	r24, r28
    2734:	81 57       	subi	r24, 0x71	; 113
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    273e:	fe 01       	movw	r30, r28
    2740:	e3 57       	subi	r30, 0x73	; 115
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    2746:	fe 01       	movw	r30, r28
    2748:	e3 57       	subi	r30, 0x73	; 115
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	88 23       	and	r24, r24
    2750:	59 f4       	brne	.+22     	; 0x2768 <HLCD_sendCmd+0x140>
    2752:	ce 01       	movw	r24, r28
    2754:	8d 56       	subi	r24, 0x6D	; 109
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    275e:	fe 01       	movw	r30, r28
    2760:	e3 57       	subi	r30, 0x73	; 115
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 83       	st	Z, r24
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    2768:	fe 01       	movw	r30, r28
    276a:	e2 57       	subi	r30, 0x72	; 114
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	80 83       	st	Z, r24
    2772:	fe 01       	movw	r30, r28
    2774:	e7 57       	subi	r30, 0x77	; 119
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 ef       	ldi	r26, 0xF0	; 240
    277e:	b1 e4       	ldi	r27, 0x41	; 65
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	8e 01       	movw	r16, r28
    278a:	0b 57       	subi	r16, 0x7B	; 123
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	fe 01       	movw	r30, r28
    2790:	e7 57       	subi	r30, 0x77	; 119
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a ef       	ldi	r20, 0xFA	; 250
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	f8 01       	movw	r30, r16
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b6:	fe 01       	movw	r30, r28
    27b8:	eb 57       	subi	r30, 0x7B	; 123
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	44 f4       	brge	.+16     	; 0x27e4 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    27d4:	fe 01       	movw	r30, r28
    27d6:	ed 57       	subi	r30, 0x7D	; 125
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	64 c0       	rjmp	.+200    	; 0x28ac <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    27e4:	fe 01       	movw	r30, r28
    27e6:	eb 57       	subi	r30, 0x7B	; 123
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	0c f0       	brlt	.+2      	; 0x2804 <HLCD_sendCmd+0x1dc>
    2802:	43 c0       	rjmp	.+134    	; 0x288a <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	fe 01       	movw	r30, r28
    2806:	e7 57       	subi	r30, 0x77	; 119
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	8e 01       	movw	r16, r28
    2824:	0d 57       	subi	r16, 0x7D	; 125
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	f8 01       	movw	r30, r16
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	1f c0       	rjmp	.+62     	; 0x287a <HLCD_sendCmd+0x252>
    283c:	fe 01       	movw	r30, r28
    283e:	ef 57       	subi	r30, 0x7F	; 127
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	88 ec       	ldi	r24, 0xC8	; 200
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
    284a:	fe 01       	movw	r30, r28
    284c:	ef 57       	subi	r30, 0x7F	; 127
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <HLCD_sendCmd+0x22c>
    2858:	fe 01       	movw	r30, r28
    285a:	ef 57       	subi	r30, 0x7F	; 127
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	de 01       	movw	r26, r28
    2864:	ad 57       	subi	r26, 0x7D	; 125
    2866:	bf 4f       	sbci	r27, 0xFF	; 255
    2868:	fe 01       	movw	r30, r28
    286a:	ed 57       	subi	r30, 0x7D	; 125
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	11 96       	adiw	r26, 0x01	; 1
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	fe 01       	movw	r30, r28
    287c:	ed 57       	subi	r30, 0x7D	; 125
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	d1 f6       	brne	.-76     	; 0x283c <HLCD_sendCmd+0x214>
    2888:	28 c0       	rjmp	.+80     	; 0x28da <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	8e 01       	movw	r16, r28
    288c:	0d 57       	subi	r16, 0x7D	; 125
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	eb 57       	subi	r30, 0x7B	; 123
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	de 01       	movw	r26, r28
    28ae:	a1 58       	subi	r26, 0x81	; 129
    28b0:	bf 4f       	sbci	r27, 0xFF	; 255
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 57       	subi	r30, 0x7D	; 125
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	9c 93       	st	X, r25
    28c0:	8e 93       	st	-X, r24
    28c2:	fe 01       	movw	r30, r28
    28c4:	e1 58       	subi	r30, 0x81	; 129
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <HLCD_sendCmd+0x2a4>
    28d0:	fe 01       	movw	r30, r28
    28d2:	e1 58       	subi	r30, 0x81	; 129
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 56       	subi	r30, 0x65	; 101
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	01 90       	ld	r0, Z+
    28e2:	f0 81       	ld	r31, Z
    28e4:	e0 2d       	mov	r30, r0
    28e6:	80 81       	ld	r24, Z
    28e8:	88 23       	and	r24, r24
    28ea:	09 f0       	breq	.+2      	; 0x28ee <HLCD_sendCmd+0x2c6>
    28ec:	3d c4       	rjmp	.+2170   	; 0x3168 <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    28ee:	fe 01       	movw	r30, r28
    28f0:	e3 57       	subi	r30, 0x73	; 115
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	88 23       	and	r24, r24
    28f8:	59 f4       	brne	.+22     	; 0x2910 <HLCD_sendCmd+0x2e8>
    28fa:	ce 01       	movw	r24, r28
    28fc:	89 56       	subi	r24, 0x69	; 105
    28fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    2906:	fe 01       	movw	r30, r28
    2908:	e3 57       	subi	r30, 0x73	; 115
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 83       	st	Z, r24
    290e:	05 c0       	rjmp	.+10     	; 0x291a <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    2910:	fe 01       	movw	r30, r28
    2912:	e2 57       	subi	r30, 0x72	; 114
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 83       	st	Z, r24
    291a:	fe 01       	movw	r30, r28
    291c:	e5 58       	subi	r30, 0x85	; 133
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a8 e4       	ldi	r26, 0x48	; 72
    2926:	b2 e4       	ldi	r27, 0x42	; 66
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	8e 01       	movw	r16, r28
    2932:	09 58       	subi	r16, 0x89	; 137
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e5 58       	subi	r30, 0x85	; 133
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a ef       	ldi	r20, 0xFA	; 250
    294a:	54 e4       	ldi	r21, 0x44	; 68
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	f8 01       	movw	r30, r16
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	a2 83       	std	Z+2, r26	; 0x02
    295c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    295e:	fe 01       	movw	r30, r28
    2960:	e9 58       	subi	r30, 0x89	; 137
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	44 f4       	brge	.+16     	; 0x298c <HLCD_sendCmd+0x364>
		__ticks = 1;
    297c:	fe 01       	movw	r30, r28
    297e:	eb 58       	subi	r30, 0x8B	; 139
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	64 c0       	rjmp	.+200    	; 0x2a54 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    298c:	fe 01       	movw	r30, r28
    298e:	e9 58       	subi	r30, 0x89	; 137
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <HLCD_sendCmd+0x384>
    29aa:	43 c0       	rjmp	.+134    	; 0x2a32 <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	fe 01       	movw	r30, r28
    29ae:	e5 58       	subi	r30, 0x85	; 133
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8e 01       	movw	r16, r28
    29cc:	0b 58       	subi	r16, 0x8B	; 139
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	f8 01       	movw	r30, r16
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	1f c0       	rjmp	.+62     	; 0x2a22 <HLCD_sendCmd+0x3fa>
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 58       	subi	r30, 0x8D	; 141
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	88 ec       	ldi	r24, 0xC8	; 200
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 58       	subi	r30, 0x8D	; 141
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <HLCD_sendCmd+0x3d4>
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 58       	subi	r30, 0x8D	; 141
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	de 01       	movw	r26, r28
    2a0c:	ab 58       	subi	r26, 0x8B	; 139
    2a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a10:	fe 01       	movw	r30, r28
    2a12:	eb 58       	subi	r30, 0x8B	; 139
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	fe 01       	movw	r30, r28
    2a24:	eb 58       	subi	r30, 0x8B	; 139
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	d1 f6       	brne	.-76     	; 0x29e4 <HLCD_sendCmd+0x3bc>
    2a30:	27 c0       	rjmp	.+78     	; 0x2a80 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	8e 01       	movw	r16, r28
    2a34:	0b 58       	subi	r16, 0x8B	; 139
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e9 58       	subi	r30, 0x89	; 137
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	f8 01       	movw	r30, r16
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	de 01       	movw	r26, r28
    2a56:	af 58       	subi	r26, 0x8F	; 143
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	eb 58       	subi	r30, 0x8B	; 139
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	8d 93       	st	X+, r24
    2a66:	9c 93       	st	X, r25
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 58       	subi	r30, 0x8F	; 143
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <HLCD_sendCmd+0x44a>
    2a76:	fe 01       	movw	r30, r28
    2a78:	ef 58       	subi	r30, 0x8F	; 143
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    2a80:	fe 01       	movw	r30, r28
    2a82:	e5 56       	subi	r30, 0x65	; 101
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	01 90       	ld	r0, Z+
    2a88:	f0 81       	ld	r31, Z
    2a8a:	e0 2d       	mov	r30, r0
    2a8c:	22 81       	ldd	r18, Z+2	; 0x02
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e3 56       	subi	r30, 0x63	; 99
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	98 2f       	mov	r25, r24
    2a98:	92 95       	swap	r25
    2a9a:	9f 70       	andi	r25, 0x0F	; 15
    2a9c:	82 2f       	mov	r24, r18
    2a9e:	69 2f       	mov	r22, r25
    2aa0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_set4msbValue>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 59       	subi	r30, 0x93	; 147
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a8 e4       	ldi	r26, 0x48	; 72
    2ab0:	b2 e4       	ldi	r27, 0x42	; 66
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	8e 01       	movw	r16, r28
    2abc:	07 59       	subi	r16, 0x97	; 151
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e3 59       	subi	r30, 0x93	; 147
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 59       	subi	r30, 0x97	; 151
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	44 f4       	brge	.+16     	; 0x2b16 <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 59       	subi	r30, 0x99	; 153
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
    2b14:	64 c0       	rjmp	.+200    	; 0x2bde <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 59       	subi	r30, 0x97	; 151
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <HLCD_sendCmd+0x50e>
    2b34:	43 c0       	rjmp	.+134    	; 0x2bbc <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 59       	subi	r30, 0x93	; 147
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8e 01       	movw	r16, r28
    2b56:	09 59       	subi	r16, 0x99	; 153
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	1f c0       	rjmp	.+62     	; 0x2bac <HLCD_sendCmd+0x584>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	eb 59       	subi	r30, 0x9B	; 155
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	eb 59       	subi	r30, 0x9B	; 155
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <HLCD_sendCmd+0x55e>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 59       	subi	r30, 0x9B	; 155
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	de 01       	movw	r26, r28
    2b96:	a9 59       	subi	r26, 0x99	; 153
    2b98:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e9 59       	subi	r30, 0x99	; 153
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 59       	subi	r30, 0x99	; 153
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	d1 f6       	brne	.-76     	; 0x2b6e <HLCD_sendCmd+0x546>
    2bba:	28 c0       	rjmp	.+80     	; 0x2c0c <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	09 59       	subi	r16, 0x99	; 153
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 59       	subi	r30, 0x97	; 151
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	f8 01       	movw	r30, r16
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	de 01       	movw	r26, r28
    2be0:	ad 59       	subi	r26, 0x9D	; 157
    2be2:	bf 4f       	sbci	r27, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	e9 59       	subi	r30, 0x99	; 153
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	9c 93       	st	X, r25
    2bf2:	8e 93       	st	-X, r24
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ed 59       	subi	r30, 0x9D	; 157
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <HLCD_sendCmd+0x5d6>
    2c02:	fe 01       	movw	r30, r28
    2c04:	ed 59       	subi	r30, 0x9D	; 157
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e3 57       	subi	r30, 0x73	; 115
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	88 23       	and	r24, r24
    2c16:	59 f4       	brne	.+22     	; 0x2c2e <HLCD_sendCmd+0x606>
    2c18:	ce 01       	movw	r24, r28
    2c1a:	89 56       	subi	r24, 0x69	; 105
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    2c24:	fe 01       	movw	r30, r28
    2c26:	e3 57       	subi	r30, 0x73	; 115
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 83       	st	Z, r24
    2c2c:	05 c0       	rjmp	.+10     	; 0x2c38 <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e2 57       	subi	r30, 0x72	; 114
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 83       	st	Z, r24
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e1 5a       	subi	r30, 0xA1	; 161
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a8 e4       	ldi	r26, 0x48	; 72
    2c44:	b2 e4       	ldi	r27, 0x42	; 66
    2c46:	80 83       	st	Z, r24
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	a2 83       	std	Z+2, r26	; 0x02
    2c4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	8e 01       	movw	r16, r28
    2c50:	05 5a       	subi	r16, 0xA5	; 165
    2c52:	1f 4f       	sbci	r17, 0xFF	; 255
    2c54:	fe 01       	movw	r30, r28
    2c56:	e1 5a       	subi	r30, 0xA1	; 161
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	f8 01       	movw	r30, r16
    2c74:	80 83       	st	Z, r24
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	a2 83       	std	Z+2, r26	; 0x02
    2c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e5 5a       	subi	r30, 0xA5	; 165
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	44 f4       	brge	.+16     	; 0x2caa <HLCD_sendCmd+0x682>
		__ticks = 1;
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e7 5a       	subi	r30, 0xA7	; 167
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	91 83       	std	Z+1, r25	; 0x01
    2ca6:	80 83       	st	Z, r24
    2ca8:	64 c0       	rjmp	.+200    	; 0x2d72 <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    2caa:	fe 01       	movw	r30, r28
    2cac:	e5 5a       	subi	r30, 0xA5	; 165
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	0c f0       	brlt	.+2      	; 0x2cca <HLCD_sendCmd+0x6a2>
    2cc8:	43 c0       	rjmp	.+134    	; 0x2d50 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e1 5a       	subi	r30, 0xA1	; 161
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8e 01       	movw	r16, r28
    2cea:	07 5a       	subi	r16, 0xA7	; 167
    2cec:	1f 4f       	sbci	r17, 0xFF	; 255
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	80 83       	st	Z, r24
    2d00:	1f c0       	rjmp	.+62     	; 0x2d40 <HLCD_sendCmd+0x718>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e9 5a       	subi	r30, 0xA9	; 169
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	88 ec       	ldi	r24, 0xC8	; 200
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 5a       	subi	r30, 0xA9	; 169
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <HLCD_sendCmd+0x6f2>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e9 5a       	subi	r30, 0xA9	; 169
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	de 01       	movw	r26, r28
    2d2a:	a7 5a       	subi	r26, 0xA7	; 167
    2d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e7 5a       	subi	r30, 0xA7	; 167
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	11 96       	adiw	r26, 0x01	; 1
    2d3c:	9c 93       	st	X, r25
    2d3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d40:	fe 01       	movw	r30, r28
    2d42:	e7 5a       	subi	r30, 0xA7	; 167
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	d1 f6       	brne	.-76     	; 0x2d02 <HLCD_sendCmd+0x6da>
    2d4e:	28 c0       	rjmp	.+80     	; 0x2da0 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	8e 01       	movw	r16, r28
    2d52:	07 5a       	subi	r16, 0xA7	; 167
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	fe 01       	movw	r30, r28
    2d58:	e5 5a       	subi	r30, 0xA5	; 165
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
    2d72:	de 01       	movw	r26, r28
    2d74:	ab 5a       	subi	r26, 0xAB	; 171
    2d76:	bf 4f       	sbci	r27, 0xFF	; 255
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e7 5a       	subi	r30, 0xA7	; 167
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	9c 93       	st	X, r25
    2d86:	8e 93       	st	-X, r24
    2d88:	fe 01       	movw	r30, r28
    2d8a:	eb 5a       	subi	r30, 0xAB	; 171
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <HLCD_sendCmd+0x76a>
    2d96:	fe 01       	movw	r30, r28
    2d98:	eb 5a       	subi	r30, 0xAB	; 171
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2da0:	fe 01       	movw	r30, r28
    2da2:	e3 57       	subi	r30, 0x73	; 115
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	88 23       	and	r24, r24
    2daa:	59 f4       	brne	.+22     	; 0x2dc2 <HLCD_sendCmd+0x79a>
    2dac:	ce 01       	movw	r24, r28
    2dae:	89 56       	subi	r24, 0x69	; 105
    2db0:	9f 4f       	sbci	r25, 0xFF	; 255
    2db2:	61 e0       	ldi	r22, 0x01	; 1
    2db4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 57       	subi	r30, 0x73	; 115
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 83       	st	Z, r24
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e2 57       	subi	r30, 0x72	; 114
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	80 83       	st	Z, r24
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ef 5a       	subi	r30, 0xAF	; 175
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	a8 e4       	ldi	r26, 0x48	; 72
    2dd8:	b2 e4       	ldi	r27, 0x42	; 66
    2dda:	80 83       	st	Z, r24
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	a2 83       	std	Z+2, r26	; 0x02
    2de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de2:	8e 01       	movw	r16, r28
    2de4:	03 5b       	subi	r16, 0xB3	; 179
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	ef 5a       	subi	r30, 0xAF	; 175
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	4a ef       	ldi	r20, 0xFA	; 250
    2dfc:	54 e4       	ldi	r21, 0x44	; 68
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e10:	fe 01       	movw	r30, r28
    2e12:	e3 5b       	subi	r30, 0xB3	; 179
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	44 f4       	brge	.+16     	; 0x2e3e <HLCD_sendCmd+0x816>
		__ticks = 1;
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e5 5b       	subi	r30, 0xB5	; 181
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	64 c0       	rjmp	.+200    	; 0x2f06 <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e3 5b       	subi	r30, 0xB3	; 179
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	0c f0       	brlt	.+2      	; 0x2e5e <HLCD_sendCmd+0x836>
    2e5c:	43 c0       	rjmp	.+134    	; 0x2ee4 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ef 5a       	subi	r30, 0xAF	; 175
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8e 01       	movw	r16, r28
    2e7e:	05 5b       	subi	r16, 0xB5	; 181
    2e80:	1f 4f       	sbci	r17, 0xFF	; 255
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
    2e94:	1f c0       	rjmp	.+62     	; 0x2ed4 <HLCD_sendCmd+0x8ac>
    2e96:	fe 01       	movw	r30, r28
    2e98:	e7 5b       	subi	r30, 0xB7	; 183
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	e7 5b       	subi	r30, 0xB7	; 183
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <HLCD_sendCmd+0x886>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e7 5b       	subi	r30, 0xB7	; 183
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	de 01       	movw	r26, r28
    2ebe:	a5 5b       	subi	r26, 0xB5	; 181
    2ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e5 5b       	subi	r30, 0xB5	; 181
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	11 96       	adiw	r26, 0x01	; 1
    2ed0:	9c 93       	st	X, r25
    2ed2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e5 5b       	subi	r30, 0xB5	; 181
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	d1 f6       	brne	.-76     	; 0x2e96 <HLCD_sendCmd+0x86e>
    2ee2:	27 c0       	rjmp	.+78     	; 0x2f32 <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	8e 01       	movw	r16, r28
    2ee6:	05 5b       	subi	r16, 0xB5	; 181
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	fe 01       	movw	r30, r28
    2eec:	e3 5b       	subi	r30, 0xB3	; 179
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	f8 01       	movw	r30, r16
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	de 01       	movw	r26, r28
    2f08:	a9 5b       	subi	r26, 0xB9	; 185
    2f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e5 5b       	subi	r30, 0xB5	; 181
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	8d 93       	st	X+, r24
    2f18:	9c 93       	st	X, r25
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e9 5b       	subi	r30, 0xB9	; 185
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <HLCD_sendCmd+0x8fc>
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e9 5b       	subi	r30, 0xB9	; 185
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    2f32:	fe 01       	movw	r30, r28
    2f34:	e5 56       	subi	r30, 0x65	; 101
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	01 90       	ld	r0, Z+
    2f3a:	f0 81       	ld	r31, Z
    2f3c:	e0 2d       	mov	r30, r0
    2f3e:	82 81       	ldd	r24, Z+2	; 0x02
    2f40:	fe 01       	movw	r30, r28
    2f42:	e3 56       	subi	r30, 0x63	; 99
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_set4msbValue>
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ed 5b       	subi	r30, 0xBD	; 189
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a8 e4       	ldi	r26, 0x48	; 72
    2f58:	b2 e4       	ldi	r27, 0x42	; 66
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	8e 01       	movw	r16, r28
    2f64:	01 5c       	subi	r16, 0xC1	; 193
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ed 5b       	subi	r30, 0xBD	; 189
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	f8 01       	movw	r30, r16
    2f88:	80 83       	st	Z, r24
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	a2 83       	std	Z+2, r26	; 0x02
    2f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f90:	fe 01       	movw	r30, r28
    2f92:	ff 96       	adiw	r30, 0x3f	; 63
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	93 81       	ldd	r25, Z+3	; 0x03
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <HLCD_sendCmd+0x98e>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9e af       	std	Y+62, r25	; 0x3e
    2fb2:	8d af       	std	Y+61, r24	; 0x3d
    2fb4:	46 c0       	rjmp	.+140    	; 0x3042 <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ff 96       	adiw	r30, 0x3f	; 63
    2fba:	60 81       	ld	r22, Z
    2fbc:	71 81       	ldd	r23, Z+1	; 0x01
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	3f ef       	ldi	r19, 0xFF	; 255
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	57 e4       	ldi	r21, 0x47	; 71
    2fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	64 f5       	brge	.+88     	; 0x302a <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ed 5b       	subi	r30, 0xBD	; 189
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e2       	ldi	r20, 0x20	; 32
    2fe6:	51 e4       	ldi	r21, 0x41	; 65
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e af       	std	Y+62, r25	; 0x3e
    2ffe:	8d af       	std	Y+61, r24	; 0x3d
    3000:	0f c0       	rjmp	.+30     	; 0x3020 <HLCD_sendCmd+0x9f8>
    3002:	88 ec       	ldi	r24, 0xC8	; 200
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9c af       	std	Y+60, r25	; 0x3c
    3008:	8b af       	std	Y+59, r24	; 0x3b
    300a:	8b ad       	ldd	r24, Y+59	; 0x3b
    300c:	9c ad       	ldd	r25, Y+60	; 0x3c
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <HLCD_sendCmd+0x9e6>
    3012:	9c af       	std	Y+60, r25	; 0x3c
    3014:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3016:	8d ad       	ldd	r24, Y+61	; 0x3d
    3018:	9e ad       	ldd	r25, Y+62	; 0x3e
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	9e af       	std	Y+62, r25	; 0x3e
    301e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3020:	8d ad       	ldd	r24, Y+61	; 0x3d
    3022:	9e ad       	ldd	r25, Y+62	; 0x3e
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	69 f7       	brne	.-38     	; 0x3002 <HLCD_sendCmd+0x9da>
    3028:	16 c0       	rjmp	.+44     	; 0x3056 <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302a:	fe 01       	movw	r30, r28
    302c:	ff 96       	adiw	r30, 0x3f	; 63
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9e af       	std	Y+62, r25	; 0x3e
    3040:	8d af       	std	Y+61, r24	; 0x3d
    3042:	8d ad       	ldd	r24, Y+61	; 0x3d
    3044:	9e ad       	ldd	r25, Y+62	; 0x3e
    3046:	9a af       	std	Y+58, r25	; 0x3a
    3048:	89 af       	std	Y+57, r24	; 0x39
    304a:	89 ad       	ldd	r24, Y+57	; 0x39
    304c:	9a ad       	ldd	r25, Y+58	; 0x3a
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <HLCD_sendCmd+0xa26>
    3052:	9a af       	std	Y+58, r25	; 0x3a
    3054:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3056:	fe 01       	movw	r30, r28
    3058:	e3 57       	subi	r30, 0x73	; 115
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	88 23       	and	r24, r24
    3060:	59 f4       	brne	.+22     	; 0x3078 <HLCD_sendCmd+0xa50>
    3062:	ce 01       	movw	r24, r28
    3064:	89 56       	subi	r24, 0x69	; 105
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    306e:	fe 01       	movw	r30, r28
    3070:	e3 57       	subi	r30, 0x73	; 115
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 83       	st	Z, r24
    3076:	05 c0       	rjmp	.+10     	; 0x3082 <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    3078:	fe 01       	movw	r30, r28
    307a:	e2 57       	subi	r30, 0x72	; 114
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	80 83       	st	Z, r24
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a8 e4       	ldi	r26, 0x48	; 72
    3088:	b2 e4       	ldi	r27, 0x42	; 66
    308a:	8d ab       	std	Y+53, r24	; 0x35
    308c:	9e ab       	std	Y+54, r25	; 0x36
    308e:	af ab       	std	Y+55, r26	; 0x37
    3090:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3092:	6d a9       	ldd	r22, Y+53	; 0x35
    3094:	7e a9       	ldd	r23, Y+54	; 0x36
    3096:	8f a9       	ldd	r24, Y+55	; 0x37
    3098:	98 ad       	ldd	r25, Y+56	; 0x38
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4a ef       	ldi	r20, 0xFA	; 250
    30a0:	54 e4       	ldi	r21, 0x44	; 68
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	89 ab       	std	Y+49, r24	; 0x31
    30ac:	9a ab       	std	Y+50, r25	; 0x32
    30ae:	ab ab       	std	Y+51, r26	; 0x33
    30b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30b2:	69 a9       	ldd	r22, Y+49	; 0x31
    30b4:	7a a9       	ldd	r23, Y+50	; 0x32
    30b6:	8b a9       	ldd	r24, Y+51	; 0x33
    30b8:	9c a9       	ldd	r25, Y+52	; 0x34
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c6:	88 23       	and	r24, r24
    30c8:	2c f4       	brge	.+10     	; 0x30d4 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	98 ab       	std	Y+48, r25	; 0x30
    30d0:	8f a7       	std	Y+47, r24	; 0x2f
    30d2:	3f c0       	rjmp	.+126    	; 0x3152 <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    30d4:	69 a9       	ldd	r22, Y+49	; 0x31
    30d6:	7a a9       	ldd	r23, Y+50	; 0x32
    30d8:	8b a9       	ldd	r24, Y+51	; 0x33
    30da:	9c a9       	ldd	r25, Y+52	; 0x34
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	57 e4       	ldi	r21, 0x47	; 71
    30e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	4c f5       	brge	.+82     	; 0x313e <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ec:	6d a9       	ldd	r22, Y+53	; 0x35
    30ee:	7e a9       	ldd	r23, Y+54	; 0x36
    30f0:	8f a9       	ldd	r24, Y+55	; 0x37
    30f2:	98 ad       	ldd	r25, Y+56	; 0x38
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	98 ab       	std	Y+48, r25	; 0x30
    3112:	8f a7       	std	Y+47, r24	; 0x2f
    3114:	0f c0       	rjmp	.+30     	; 0x3134 <HLCD_sendCmd+0xb0c>
    3116:	88 ec       	ldi	r24, 0xC8	; 200
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	9e a7       	std	Y+46, r25	; 0x2e
    311c:	8d a7       	std	Y+45, r24	; 0x2d
    311e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3120:	9e a5       	ldd	r25, Y+46	; 0x2e
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <HLCD_sendCmd+0xafa>
    3126:	9e a7       	std	Y+46, r25	; 0x2e
    3128:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312a:	8f a5       	ldd	r24, Y+47	; 0x2f
    312c:	98 a9       	ldd	r25, Y+48	; 0x30
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	98 ab       	std	Y+48, r25	; 0x30
    3132:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3134:	8f a5       	ldd	r24, Y+47	; 0x2f
    3136:	98 a9       	ldd	r25, Y+48	; 0x30
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	69 f7       	brne	.-38     	; 0x3116 <HLCD_sendCmd+0xaee>
    313c:	bb c1       	rjmp	.+886    	; 0x34b4 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313e:	69 a9       	ldd	r22, Y+49	; 0x31
    3140:	7a a9       	ldd	r23, Y+50	; 0x32
    3142:	8b a9       	ldd	r24, Y+51	; 0x33
    3144:	9c a9       	ldd	r25, Y+52	; 0x34
    3146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	98 ab       	std	Y+48, r25	; 0x30
    3150:	8f a7       	std	Y+47, r24	; 0x2f
    3152:	8f a5       	ldd	r24, Y+47	; 0x2f
    3154:	98 a9       	ldd	r25, Y+48	; 0x30
    3156:	9c a7       	std	Y+44, r25	; 0x2c
    3158:	8b a7       	std	Y+43, r24	; 0x2b
    315a:	8b a5       	ldd	r24, Y+43	; 0x2b
    315c:	9c a5       	ldd	r25, Y+44	; 0x2c
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <HLCD_sendCmd+0xb36>
    3162:	9c a7       	std	Y+44, r25	; 0x2c
    3164:	8b a7       	std	Y+43, r24	; 0x2b
    3166:	a6 c1       	rjmp	.+844    	; 0x34b4 <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    3168:	fe 01       	movw	r30, r28
    316a:	e5 56       	subi	r30, 0x65	; 101
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	01 90       	ld	r0, Z+
    3170:	f0 81       	ld	r31, Z
    3172:	e0 2d       	mov	r30, r0
    3174:	80 81       	ld	r24, Z
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	09 f0       	breq	.+2      	; 0x317c <HLCD_sendCmd+0xb54>
    317a:	97 c1       	rjmp	.+814    	; 0x34aa <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    317c:	fe 01       	movw	r30, r28
    317e:	e3 57       	subi	r30, 0x73	; 115
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	88 23       	and	r24, r24
    3186:	59 f4       	brne	.+22     	; 0x319e <HLCD_sendCmd+0xb76>
    3188:	ce 01       	movw	r24, r28
    318a:	89 56       	subi	r24, 0x69	; 105
    318c:	9f 4f       	sbci	r25, 0xFF	; 255
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3194:	fe 01       	movw	r30, r28
    3196:	e3 57       	subi	r30, 0x73	; 115
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 83       	st	Z, r24
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    319e:	fe 01       	movw	r30, r28
    31a0:	e2 57       	subi	r30, 0x72	; 114
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	80 83       	st	Z, r24
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a0 e8       	ldi	r26, 0x80	; 128
    31ae:	bf e3       	ldi	r27, 0x3F	; 63
    31b0:	8f a3       	std	Y+39, r24	; 0x27
    31b2:	98 a7       	std	Y+40, r25	; 0x28
    31b4:	a9 a7       	std	Y+41, r26	; 0x29
    31b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	6f a1       	ldd	r22, Y+39	; 0x27
    31ba:	78 a5       	ldd	r23, Y+40	; 0x28
    31bc:	89 a5       	ldd	r24, Y+41	; 0x29
    31be:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a ef       	ldi	r20, 0xFA	; 250
    31c6:	54 e4       	ldi	r21, 0x44	; 68
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	8b a3       	std	Y+35, r24	; 0x23
    31d2:	9c a3       	std	Y+36, r25	; 0x24
    31d4:	ad a3       	std	Y+37, r26	; 0x25
    31d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31d8:	6b a1       	ldd	r22, Y+35	; 0x23
    31da:	7c a1       	ldd	r23, Y+36	; 0x24
    31dc:	8d a1       	ldd	r24, Y+37	; 0x25
    31de:	9e a1       	ldd	r25, Y+38	; 0x26
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9a a3       	std	Y+34, r25	; 0x22
    31f6:	89 a3       	std	Y+33, r24	; 0x21
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    31fa:	6b a1       	ldd	r22, Y+35	; 0x23
    31fc:	7c a1       	ldd	r23, Y+36	; 0x24
    31fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3200:	9e a1       	ldd	r25, Y+38	; 0x26
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	6f a1       	ldd	r22, Y+39	; 0x27
    3214:	78 a5       	ldd	r23, Y+40	; 0x28
    3216:	89 a5       	ldd	r24, Y+41	; 0x29
    3218:	9a a5       	ldd	r25, Y+42	; 0x2a
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9a a3       	std	Y+34, r25	; 0x22
    3238:	89 a3       	std	Y+33, r24	; 0x21
    323a:	0f c0       	rjmp	.+30     	; 0x325a <HLCD_sendCmd+0xc32>
    323c:	88 ec       	ldi	r24, 0xC8	; 200
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	98 a3       	std	Y+32, r25	; 0x20
    3242:	8f 8f       	std	Y+31, r24	; 0x1f
    3244:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3246:	98 a1       	ldd	r25, Y+32	; 0x20
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <HLCD_sendCmd+0xc20>
    324c:	98 a3       	std	Y+32, r25	; 0x20
    324e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	89 a1       	ldd	r24, Y+33	; 0x21
    3252:	9a a1       	ldd	r25, Y+34	; 0x22
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9a a3       	std	Y+34, r25	; 0x22
    3258:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	89 a1       	ldd	r24, Y+33	; 0x21
    325c:	9a a1       	ldd	r25, Y+34	; 0x22
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <HLCD_sendCmd+0xc14>
    3262:	14 c0       	rjmp	.+40     	; 0x328c <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	6b a1       	ldd	r22, Y+35	; 0x23
    3266:	7c a1       	ldd	r23, Y+36	; 0x24
    3268:	8d a1       	ldd	r24, Y+37	; 0x25
    326a:	9e a1       	ldd	r25, Y+38	; 0x26
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9a a3       	std	Y+34, r25	; 0x22
    3276:	89 a3       	std	Y+33, r24	; 0x21
    3278:	89 a1       	ldd	r24, Y+33	; 0x21
    327a:	9a a1       	ldd	r25, Y+34	; 0x22
    327c:	9e 8f       	std	Y+30, r25	; 0x1e
    327e:	8d 8f       	std	Y+29, r24	; 0x1d
    3280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <HLCD_sendCmd+0xc5c>
    3288:	9e 8f       	std	Y+30, r25	; 0x1e
    328a:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    328c:	fe 01       	movw	r30, r28
    328e:	e5 56       	subi	r30, 0x65	; 101
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	01 90       	ld	r0, Z+
    3294:	f0 81       	ld	r31, Z
    3296:	e0 2d       	mov	r30, r0
    3298:	92 81       	ldd	r25, Z+2	; 0x02
    329a:	fe 01       	movw	r30, r28
    329c:	e3 56       	subi	r30, 0x63	; 99
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	89 2f       	mov	r24, r25
    32ac:	ba 01       	movw	r22, r20
    32ae:	a9 01       	movw	r20, r18
    32b0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_SetPortValue>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 e8       	ldi	r26, 0x80	; 128
    32ba:	bf e3       	ldi	r27, 0x3F	; 63
    32bc:	89 8f       	std	Y+25, r24	; 0x19
    32be:	9a 8f       	std	Y+26, r25	; 0x1a
    32c0:	ab 8f       	std	Y+27, r26	; 0x1b
    32c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	69 8d       	ldd	r22, Y+25	; 0x19
    32c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8d 8b       	std	Y+21, r24	; 0x15
    32de:	9e 8b       	std	Y+22, r25	; 0x16
    32e0:	af 8b       	std	Y+23, r26	; 0x17
    32e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <HLCD_sendCmd+0xcde>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9c 8b       	std	Y+20, r25	; 0x14
    3344:	8b 8b       	std	Y+19, r24	; 0x13
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <HLCD_sendCmd+0xd3e>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a 8b       	std	Y+18, r25	; 0x12
    334e:	89 8b       	std	Y+17, r24	; 0x11
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	9a 89       	ldd	r25, Y+18	; 0x12
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <HLCD_sendCmd+0xd2c>
    3358:	9a 8b       	std	Y+18, r25	; 0x12
    335a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9c 8b       	std	Y+20, r25	; 0x14
    3364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8b 89       	ldd	r24, Y+19	; 0x13
    3368:	9c 89       	ldd	r25, Y+20	; 0x14
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <HLCD_sendCmd+0xd20>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6d 89       	ldd	r22, Y+21	; 0x15
    3372:	7e 89       	ldd	r23, Y+22	; 0x16
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	98 8b       	std	Y+16, r25	; 0x10
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	98 89       	ldd	r25, Y+16	; 0x10
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <HLCD_sendCmd+0xd68>
    3394:	98 8b       	std	Y+16, r25	; 0x10
    3396:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3398:	fe 01       	movw	r30, r28
    339a:	e3 57       	subi	r30, 0x73	; 115
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	88 23       	and	r24, r24
    33a2:	59 f4       	brne	.+22     	; 0x33ba <HLCD_sendCmd+0xd92>
    33a4:	ce 01       	movw	r24, r28
    33a6:	89 56       	subi	r24, 0x69	; 105
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    33b0:	fe 01       	movw	r30, r28
    33b2:	e3 57       	subi	r30, 0x73	; 115
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 83       	st	Z, r24
    33b8:	05 c0       	rjmp	.+10     	; 0x33c4 <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    33ba:	fe 01       	movw	r30, r28
    33bc:	e2 57       	subi	r30, 0x72	; 114
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	80 83       	st	Z, r24
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e8       	ldi	r26, 0x80	; 128
    33ca:	bf e3       	ldi	r27, 0x3F	; 63
    33cc:	8b 87       	std	Y+11, r24	; 0x0b
    33ce:	9c 87       	std	Y+12, r25	; 0x0c
    33d0:	ad 87       	std	Y+13, r26	; 0x0d
    33d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33da:	9e 85       	ldd	r25, Y+14	; 0x0e
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a ef       	ldi	r20, 0xFA	; 250
    33e2:	54 e4       	ldi	r21, 0x44	; 68
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8f 83       	std	Y+7, r24	; 0x07
    33ee:	98 87       	std	Y+8, r25	; 0x08
    33f0:	a9 87       	std	Y+9, r26	; 0x09
    33f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <HLCD_sendCmd+0xdee>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	8d 83       	std	Y+5, r24	; 0x05
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    3416:	6f 81       	ldd	r22, Y+7	; 0x07
    3418:	78 85       	ldd	r23, Y+8	; 0x08
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	9a 85       	ldd	r25, Y+10	; 0x0a
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3430:	7c 85       	ldd	r23, Y+12	; 0x0c
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <HLCD_sendCmd+0xe4e>
    3458:	88 ec       	ldi	r24, 0xC8	; 200
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9c 83       	std	Y+4, r25	; 0x04
    345e:	8b 83       	std	Y+3, r24	; 0x03
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	9c 81       	ldd	r25, Y+4	; 0x04
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <HLCD_sendCmd+0xe3c>
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <HLCD_sendCmd+0xe30>
    347e:	1a c0       	rjmp	.+52     	; 0x34b4 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9e 83       	std	Y+6, r25	; 0x06
    3492:	8d 83       	std	Y+5, r24	; 0x05
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	9a 83       	std	Y+2, r25	; 0x02
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	9a 81       	ldd	r25, Y+2	; 0x02
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <HLCD_sendCmd+0xe78>
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	05 c0       	rjmp	.+10     	; 0x34b4 <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    34aa:	fe 01       	movw	r30, r28
    34ac:	e2 57       	subi	r30, 0x72	; 114
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    34b4:	fe 01       	movw	r30, r28
    34b6:	e3 57       	subi	r30, 0x73	; 115
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	88 23       	and	r24, r24
    34be:	29 f4       	brne	.+10     	; 0x34ca <HLCD_sendCmd+0xea2>
    34c0:	fe 01       	movw	r30, r28
    34c2:	e2 57       	subi	r30, 0x72	; 114
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	10 82       	st	Z, r1
    34c8:	0b c0       	rjmp	.+22     	; 0x34e0 <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    34ca:	fe 01       	movw	r30, r28
    34cc:	e2 57       	subi	r30, 0x72	; 114
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 83       	st	Z, r24
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    34d6:	fe 01       	movw	r30, r28
    34d8:	e2 57       	subi	r30, 0x72	; 114
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	80 83       	st	Z, r24
	}

	return lcdRet;
    34e0:	fe 01       	movw	r30, r28
    34e2:	e2 57       	subi	r30, 0x72	; 114
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
}
    34e8:	c3 56       	subi	r28, 0x63	; 99
    34ea:	df 4f       	sbci	r29, 0xFF	; 255
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	08 95       	ret

00003500 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	cd 59       	subi	r28, 0x9D	; 157
    350e:	d0 40       	sbci	r29, 0x00	; 0
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	fe 01       	movw	r30, r28
    351c:	e5 56       	subi	r30, 0x65	; 101
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
    3524:	fe 01       	movw	r30, r28
    3526:	e3 56       	subi	r30, 0x63	; 99
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    352c:	fe 01       	movw	r30, r28
    352e:	e2 57       	subi	r30, 0x72	; 114
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3536:	fe 01       	movw	r30, r28
    3538:	e3 57       	subi	r30, 0x73	; 115
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    3540:	fe 01       	movw	r30, r28
    3542:	e5 56       	subi	r30, 0x65	; 101
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 81       	ld	r24, Z
    3548:	91 81       	ldd	r25, Z+1	; 0x01
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	09 f4       	brne	.+2      	; 0x3550 <HLCD_displayChar+0x50>
    354e:	2f c7       	rjmp	.+3678   	; 0x43ae <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3550:	fe 01       	movw	r30, r28
    3552:	e5 56       	subi	r30, 0x65	; 101
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	01 90       	ld	r0, Z+
    3558:	f0 81       	ld	r31, Z
    355a:	e0 2d       	mov	r30, r0
    355c:	81 81       	ldd	r24, Z+1	; 0x01
    355e:	fe 01       	movw	r30, r28
    3560:	e5 56       	subi	r30, 0x65	; 101
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	01 90       	ld	r0, Z+
    3566:	f0 81       	ld	r31, Z
    3568:	e0 2d       	mov	r30, r0
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	fe 01       	movw	r30, r28
    356e:	e1 57       	subi	r30, 0x71	; 113
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 83       	st	Z, r24
    3574:	fe 01       	movw	r30, r28
    3576:	e1 57       	subi	r30, 0x71	; 113
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	fe 01       	movw	r30, r28
    357e:	e1 57       	subi	r30, 0x71	; 113
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	82 83       	std	Z+2, r24	; 0x02
    3586:	fe 01       	movw	r30, r28
    3588:	e1 57       	subi	r30, 0x71	; 113
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    358e:	fe 01       	movw	r30, r28
    3590:	e5 56       	subi	r30, 0x65	; 101
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	01 90       	ld	r0, Z+
    3596:	f0 81       	ld	r31, Z
    3598:	e0 2d       	mov	r30, r0
    359a:	81 81       	ldd	r24, Z+1	; 0x01
    359c:	fe 01       	movw	r30, r28
    359e:	e5 56       	subi	r30, 0x65	; 101
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	01 90       	ld	r0, Z+
    35a4:	f0 81       	ld	r31, Z
    35a6:	e0 2d       	mov	r30, r0
    35a8:	94 81       	ldd	r25, Z+4	; 0x04
    35aa:	fe 01       	movw	r30, r28
    35ac:	ed 56       	subi	r30, 0x6D	; 109
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 83       	st	Z, r24
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 56       	subi	r30, 0x6D	; 109
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	fe 01       	movw	r30, r28
    35bc:	ed 56       	subi	r30, 0x6D	; 109
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	82 83       	std	Z+2, r24	; 0x02
    35c4:	fe 01       	movw	r30, r28
    35c6:	ed 56       	subi	r30, 0x6D	; 109
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    35cc:	fe 01       	movw	r30, r28
    35ce:	e5 56       	subi	r30, 0x65	; 101
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	01 90       	ld	r0, Z+
    35d4:	f0 81       	ld	r31, Z
    35d6:	e0 2d       	mov	r30, r0
    35d8:	81 81       	ldd	r24, Z+1	; 0x01
    35da:	fe 01       	movw	r30, r28
    35dc:	e5 56       	subi	r30, 0x65	; 101
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	01 90       	ld	r0, Z+
    35e2:	f0 81       	ld	r31, Z
    35e4:	e0 2d       	mov	r30, r0
    35e6:	95 81       	ldd	r25, Z+5	; 0x05
    35e8:	fe 01       	movw	r30, r28
    35ea:	e9 56       	subi	r30, 0x69	; 105
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 83       	st	Z, r24
    35f0:	fe 01       	movw	r30, r28
    35f2:	e9 56       	subi	r30, 0x69	; 105
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	fe 01       	movw	r30, r28
    35fa:	e9 56       	subi	r30, 0x69	; 105
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	82 83       	std	Z+2, r24	; 0x02
    3602:	fe 01       	movw	r30, r28
    3604:	e9 56       	subi	r30, 0x69	; 105
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    360a:	ce 01       	movw	r24, r28
    360c:	81 57       	subi	r24, 0x71	; 113
    360e:	9f 4f       	sbci	r25, 0xFF	; 255
    3610:	61 e0       	ldi	r22, 0x01	; 1
    3612:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3616:	fe 01       	movw	r30, r28
    3618:	e3 57       	subi	r30, 0x73	; 115
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    361e:	fe 01       	movw	r30, r28
    3620:	e3 57       	subi	r30, 0x73	; 115
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	88 23       	and	r24, r24
    3628:	59 f4       	brne	.+22     	; 0x3640 <HLCD_displayChar+0x140>
    362a:	ce 01       	movw	r24, r28
    362c:	8d 56       	subi	r24, 0x6D	; 109
    362e:	9f 4f       	sbci	r25, 0xFF	; 255
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3636:	fe 01       	movw	r30, r28
    3638:	e3 57       	subi	r30, 0x73	; 115
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 83       	st	Z, r24
    363e:	05 c0       	rjmp	.+10     	; 0x364a <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    3640:	fe 01       	movw	r30, r28
    3642:	e2 57       	subi	r30, 0x72	; 114
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 83       	st	Z, r24
    364a:	fe 01       	movw	r30, r28
    364c:	e7 57       	subi	r30, 0x77	; 119
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a0 ef       	ldi	r26, 0xF0	; 240
    3656:	b1 e4       	ldi	r27, 0x41	; 65
    3658:	80 83       	st	Z, r24
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	a2 83       	std	Z+2, r26	; 0x02
    365e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3660:	8e 01       	movw	r16, r28
    3662:	0b 57       	subi	r16, 0x7B	; 123
    3664:	1f 4f       	sbci	r17, 0xFF	; 255
    3666:	fe 01       	movw	r30, r28
    3668:	e7 57       	subi	r30, 0x77	; 119
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a ef       	ldi	r20, 0xFA	; 250
    367a:	54 e4       	ldi	r21, 0x44	; 68
    367c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	f8 01       	movw	r30, r16
    3686:	80 83       	st	Z, r24
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	a2 83       	std	Z+2, r26	; 0x02
    368c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    368e:	fe 01       	movw	r30, r28
    3690:	eb 57       	subi	r30, 0x7B	; 123
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e8       	ldi	r20, 0x80	; 128
    36a2:	5f e3       	ldi	r21, 0x3F	; 63
    36a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36a8:	88 23       	and	r24, r24
    36aa:	44 f4       	brge	.+16     	; 0x36bc <HLCD_displayChar+0x1bc>
		__ticks = 1;
    36ac:	fe 01       	movw	r30, r28
    36ae:	ed 57       	subi	r30, 0x7D	; 125
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	64 c0       	rjmp	.+200    	; 0x3784 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    36bc:	fe 01       	movw	r30, r28
    36be:	eb 57       	subi	r30, 0x7B	; 123
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	3f ef       	ldi	r19, 0xFF	; 255
    36ce:	4f e7       	ldi	r20, 0x7F	; 127
    36d0:	57 e4       	ldi	r21, 0x47	; 71
    36d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d6:	18 16       	cp	r1, r24
    36d8:	0c f0       	brlt	.+2      	; 0x36dc <HLCD_displayChar+0x1dc>
    36da:	43 c0       	rjmp	.+134    	; 0x3762 <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	fe 01       	movw	r30, r28
    36de:	e7 57       	subi	r30, 0x77	; 119
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e2       	ldi	r20, 0x20	; 32
    36f0:	51 e4       	ldi	r21, 0x41	; 65
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	8e 01       	movw	r16, r28
    36fc:	0d 57       	subi	r16, 0x7D	; 125
    36fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	f8 01       	movw	r30, r16
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
    3712:	1f c0       	rjmp	.+62     	; 0x3752 <HLCD_displayChar+0x252>
    3714:	fe 01       	movw	r30, r28
    3716:	ef 57       	subi	r30, 0x7F	; 127
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	88 ec       	ldi	r24, 0xC8	; 200
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	fe 01       	movw	r30, r28
    3724:	ef 57       	subi	r30, 0x7F	; 127
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <HLCD_displayChar+0x22c>
    3730:	fe 01       	movw	r30, r28
    3732:	ef 57       	subi	r30, 0x7F	; 127
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373a:	de 01       	movw	r26, r28
    373c:	ad 57       	subi	r26, 0x7D	; 125
    373e:	bf 4f       	sbci	r27, 0xFF	; 255
    3740:	fe 01       	movw	r30, r28
    3742:	ed 57       	subi	r30, 0x7D	; 125
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	11 96       	adiw	r26, 0x01	; 1
    374e:	9c 93       	st	X, r25
    3750:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	fe 01       	movw	r30, r28
    3754:	ed 57       	subi	r30, 0x7D	; 125
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	d1 f6       	brne	.-76     	; 0x3714 <HLCD_displayChar+0x214>
    3760:	28 c0       	rjmp	.+80     	; 0x37b2 <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3762:	8e 01       	movw	r16, r28
    3764:	0d 57       	subi	r16, 0x7D	; 125
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	eb 57       	subi	r30, 0x7B	; 123
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	f8 01       	movw	r30, r16
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
    3784:	de 01       	movw	r26, r28
    3786:	a1 58       	subi	r26, 0x81	; 129
    3788:	bf 4f       	sbci	r27, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	ed 57       	subi	r30, 0x7D	; 125
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	11 96       	adiw	r26, 0x01	; 1
    3796:	9c 93       	st	X, r25
    3798:	8e 93       	st	-X, r24
    379a:	fe 01       	movw	r30, r28
    379c:	e1 58       	subi	r30, 0x81	; 129
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <HLCD_displayChar+0x2a4>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e1 58       	subi	r30, 0x81	; 129
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    37b2:	fe 01       	movw	r30, r28
    37b4:	e5 56       	subi	r30, 0x65	; 101
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	01 90       	ld	r0, Z+
    37ba:	f0 81       	ld	r31, Z
    37bc:	e0 2d       	mov	r30, r0
    37be:	80 81       	ld	r24, Z
    37c0:	88 23       	and	r24, r24
    37c2:	09 f0       	breq	.+2      	; 0x37c6 <HLCD_displayChar+0x2c6>
    37c4:	3d c4       	rjmp	.+2170   	; 0x4040 <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    37c6:	fe 01       	movw	r30, r28
    37c8:	e3 57       	subi	r30, 0x73	; 115
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	88 23       	and	r24, r24
    37d0:	59 f4       	brne	.+22     	; 0x37e8 <HLCD_displayChar+0x2e8>
    37d2:	ce 01       	movw	r24, r28
    37d4:	89 56       	subi	r24, 0x69	; 105
    37d6:	9f 4f       	sbci	r25, 0xFF	; 255
    37d8:	61 e0       	ldi	r22, 0x01	; 1
    37da:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    37de:	fe 01       	movw	r30, r28
    37e0:	e3 57       	subi	r30, 0x73	; 115
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 83       	st	Z, r24
    37e6:	05 c0       	rjmp	.+10     	; 0x37f2 <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    37e8:	fe 01       	movw	r30, r28
    37ea:	e2 57       	subi	r30, 0x72	; 114
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	80 83       	st	Z, r24
    37f2:	fe 01       	movw	r30, r28
    37f4:	e5 58       	subi	r30, 0x85	; 133
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	a0 ef       	ldi	r26, 0xF0	; 240
    37fe:	b1 e4       	ldi	r27, 0x41	; 65
    3800:	80 83       	st	Z, r24
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	a2 83       	std	Z+2, r26	; 0x02
    3806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3808:	8e 01       	movw	r16, r28
    380a:	09 58       	subi	r16, 0x89	; 137
    380c:	1f 4f       	sbci	r17, 0xFF	; 255
    380e:	fe 01       	movw	r30, r28
    3810:	e5 58       	subi	r30, 0x85	; 133
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	60 81       	ld	r22, Z
    3816:	71 81       	ldd	r23, Z+1	; 0x01
    3818:	82 81       	ldd	r24, Z+2	; 0x02
    381a:	93 81       	ldd	r25, Z+3	; 0x03
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	f8 01       	movw	r30, r16
    382e:	80 83       	st	Z, r24
    3830:	91 83       	std	Z+1, r25	; 0x01
    3832:	a2 83       	std	Z+2, r26	; 0x02
    3834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3836:	fe 01       	movw	r30, r28
    3838:	e9 58       	subi	r30, 0x89	; 137
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	60 81       	ld	r22, Z
    383e:	71 81       	ldd	r23, Z+1	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e8       	ldi	r20, 0x80	; 128
    384a:	5f e3       	ldi	r21, 0x3F	; 63
    384c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3850:	88 23       	and	r24, r24
    3852:	44 f4       	brge	.+16     	; 0x3864 <HLCD_displayChar+0x364>
		__ticks = 1;
    3854:	fe 01       	movw	r30, r28
    3856:	eb 58       	subi	r30, 0x8B	; 139
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	80 83       	st	Z, r24
    3862:	64 c0       	rjmp	.+200    	; 0x392c <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    3864:	fe 01       	movw	r30, r28
    3866:	e9 58       	subi	r30, 0x89	; 137
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	60 81       	ld	r22, Z
    386c:	71 81       	ldd	r23, Z+1	; 0x01
    386e:	82 81       	ldd	r24, Z+2	; 0x02
    3870:	93 81       	ldd	r25, Z+3	; 0x03
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	3f ef       	ldi	r19, 0xFF	; 255
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	57 e4       	ldi	r21, 0x47	; 71
    387a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387e:	18 16       	cp	r1, r24
    3880:	0c f0       	brlt	.+2      	; 0x3884 <HLCD_displayChar+0x384>
    3882:	43 c0       	rjmp	.+134    	; 0x390a <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3884:	fe 01       	movw	r30, r28
    3886:	e5 58       	subi	r30, 0x85	; 133
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e2       	ldi	r20, 0x20	; 32
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	8e 01       	movw	r16, r28
    38a4:	0b 58       	subi	r16, 0x8B	; 139
    38a6:	1f 4f       	sbci	r17, 0xFF	; 255
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	80 83       	st	Z, r24
    38ba:	1f c0       	rjmp	.+62     	; 0x38fa <HLCD_displayChar+0x3fa>
    38bc:	fe 01       	movw	r30, r28
    38be:	ed 58       	subi	r30, 0x8D	; 141
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	88 ec       	ldi	r24, 0xC8	; 200
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	91 83       	std	Z+1, r25	; 0x01
    38c8:	80 83       	st	Z, r24
    38ca:	fe 01       	movw	r30, r28
    38cc:	ed 58       	subi	r30, 0x8D	; 141
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 81       	ld	r24, Z
    38d2:	91 81       	ldd	r25, Z+1	; 0x01
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <HLCD_displayChar+0x3d4>
    38d8:	fe 01       	movw	r30, r28
    38da:	ed 58       	subi	r30, 0x8D	; 141
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	de 01       	movw	r26, r28
    38e4:	ab 58       	subi	r26, 0x8B	; 139
    38e6:	bf 4f       	sbci	r27, 0xFF	; 255
    38e8:	fe 01       	movw	r30, r28
    38ea:	eb 58       	subi	r30, 0x8B	; 139
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	91 81       	ldd	r25, Z+1	; 0x01
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	11 96       	adiw	r26, 0x01	; 1
    38f6:	9c 93       	st	X, r25
    38f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fa:	fe 01       	movw	r30, r28
    38fc:	eb 58       	subi	r30, 0x8B	; 139
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	80 81       	ld	r24, Z
    3902:	91 81       	ldd	r25, Z+1	; 0x01
    3904:	00 97       	sbiw	r24, 0x00	; 0
    3906:	d1 f6       	brne	.-76     	; 0x38bc <HLCD_displayChar+0x3bc>
    3908:	27 c0       	rjmp	.+78     	; 0x3958 <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390a:	8e 01       	movw	r16, r28
    390c:	0b 58       	subi	r16, 0x8B	; 139
    390e:	1f 4f       	sbci	r17, 0xFF	; 255
    3910:	fe 01       	movw	r30, r28
    3912:	e9 58       	subi	r30, 0x89	; 137
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	f8 01       	movw	r30, r16
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	80 83       	st	Z, r24
    392c:	de 01       	movw	r26, r28
    392e:	af 58       	subi	r26, 0x8F	; 143
    3930:	bf 4f       	sbci	r27, 0xFF	; 255
    3932:	fe 01       	movw	r30, r28
    3934:	eb 58       	subi	r30, 0x8B	; 139
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	8d 93       	st	X+, r24
    393e:	9c 93       	st	X, r25
    3940:	fe 01       	movw	r30, r28
    3942:	ef 58       	subi	r30, 0x8F	; 143
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	80 81       	ld	r24, Z
    3948:	91 81       	ldd	r25, Z+1	; 0x01
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <HLCD_displayChar+0x44a>
    394e:	fe 01       	movw	r30, r28
    3950:	ef 58       	subi	r30, 0x8F	; 143
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	91 83       	std	Z+1, r25	; 0x01
    3956:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    3958:	fe 01       	movw	r30, r28
    395a:	e5 56       	subi	r30, 0x65	; 101
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	01 90       	ld	r0, Z+
    3960:	f0 81       	ld	r31, Z
    3962:	e0 2d       	mov	r30, r0
    3964:	22 81       	ldd	r18, Z+2	; 0x02
    3966:	fe 01       	movw	r30, r28
    3968:	e3 56       	subi	r30, 0x63	; 99
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	80 81       	ld	r24, Z
    396e:	98 2f       	mov	r25, r24
    3970:	92 95       	swap	r25
    3972:	9f 70       	andi	r25, 0x0F	; 15
    3974:	82 2f       	mov	r24, r18
    3976:	69 2f       	mov	r22, r25
    3978:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_set4msbValue>
    397c:	fe 01       	movw	r30, r28
    397e:	e3 59       	subi	r30, 0x93	; 147
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 ef       	ldi	r26, 0xF0	; 240
    3988:	b1 e4       	ldi	r27, 0x41	; 65
    398a:	80 83       	st	Z, r24
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	a2 83       	std	Z+2, r26	; 0x02
    3990:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3992:	8e 01       	movw	r16, r28
    3994:	07 59       	subi	r16, 0x97	; 151
    3996:	1f 4f       	sbci	r17, 0xFF	; 255
    3998:	fe 01       	movw	r30, r28
    399a:	e3 59       	subi	r30, 0x93	; 147
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	60 81       	ld	r22, Z
    39a0:	71 81       	ldd	r23, Z+1	; 0x01
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	4a ef       	ldi	r20, 0xFA	; 250
    39ac:	54 e4       	ldi	r21, 0x44	; 68
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	f8 01       	movw	r30, r16
    39b8:	80 83       	st	Z, r24
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	a2 83       	std	Z+2, r26	; 0x02
    39be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39c0:	fe 01       	movw	r30, r28
    39c2:	e7 59       	subi	r30, 0x97	; 151
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	60 81       	ld	r22, Z
    39c8:	71 81       	ldd	r23, Z+1	; 0x01
    39ca:	82 81       	ldd	r24, Z+2	; 0x02
    39cc:	93 81       	ldd	r25, Z+3	; 0x03
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	44 f4       	brge	.+16     	; 0x39ee <HLCD_displayChar+0x4ee>
		__ticks = 1;
    39de:	fe 01       	movw	r30, r28
    39e0:	e9 59       	subi	r30, 0x99	; 153
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	80 83       	st	Z, r24
    39ec:	64 c0       	rjmp	.+200    	; 0x3ab6 <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    39ee:	fe 01       	movw	r30, r28
    39f0:	e7 59       	subi	r30, 0x97	; 151
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	60 81       	ld	r22, Z
    39f6:	71 81       	ldd	r23, Z+1	; 0x01
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	3f ef       	ldi	r19, 0xFF	; 255
    3a00:	4f e7       	ldi	r20, 0x7F	; 127
    3a02:	57 e4       	ldi	r21, 0x47	; 71
    3a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a08:	18 16       	cp	r1, r24
    3a0a:	0c f0       	brlt	.+2      	; 0x3a0e <HLCD_displayChar+0x50e>
    3a0c:	43 c0       	rjmp	.+134    	; 0x3a94 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e3 59       	subi	r30, 0x93	; 147
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	60 81       	ld	r22, Z
    3a16:	71 81       	ldd	r23, Z+1	; 0x01
    3a18:	82 81       	ldd	r24, Z+2	; 0x02
    3a1a:	93 81       	ldd	r25, Z+3	; 0x03
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e2       	ldi	r20, 0x20	; 32
    3a22:	51 e4       	ldi	r21, 0x41	; 65
    3a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	8e 01       	movw	r16, r28
    3a2e:	09 59       	subi	r16, 0x99	; 153
    3a30:	1f 4f       	sbci	r17, 0xFF	; 255
    3a32:	bc 01       	movw	r22, r24
    3a34:	cd 01       	movw	r24, r26
    3a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	f8 01       	movw	r30, r16
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	80 83       	st	Z, r24
    3a44:	1f c0       	rjmp	.+62     	; 0x3a84 <HLCD_displayChar+0x584>
    3a46:	fe 01       	movw	r30, r28
    3a48:	eb 59       	subi	r30, 0x9B	; 155
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	88 ec       	ldi	r24, 0xC8	; 200
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	91 83       	std	Z+1, r25	; 0x01
    3a52:	80 83       	st	Z, r24
    3a54:	fe 01       	movw	r30, r28
    3a56:	eb 59       	subi	r30, 0x9B	; 155
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	91 81       	ldd	r25, Z+1	; 0x01
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <HLCD_displayChar+0x55e>
    3a62:	fe 01       	movw	r30, r28
    3a64:	eb 59       	subi	r30, 0x9B	; 155
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	de 01       	movw	r26, r28
    3a6e:	a9 59       	subi	r26, 0x99	; 153
    3a70:	bf 4f       	sbci	r27, 0xFF	; 255
    3a72:	fe 01       	movw	r30, r28
    3a74:	e9 59       	subi	r30, 0x99	; 153
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	11 96       	adiw	r26, 0x01	; 1
    3a80:	9c 93       	st	X, r25
    3a82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a84:	fe 01       	movw	r30, r28
    3a86:	e9 59       	subi	r30, 0x99	; 153
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	d1 f6       	brne	.-76     	; 0x3a46 <HLCD_displayChar+0x546>
    3a92:	28 c0       	rjmp	.+80     	; 0x3ae4 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a94:	8e 01       	movw	r16, r28
    3a96:	09 59       	subi	r16, 0x99	; 153
    3a98:	1f 4f       	sbci	r17, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e7 59       	subi	r30, 0x97	; 151
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	f8 01       	movw	r30, r16
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	80 83       	st	Z, r24
    3ab6:	de 01       	movw	r26, r28
    3ab8:	ad 59       	subi	r26, 0x9D	; 157
    3aba:	bf 4f       	sbci	r27, 0xFF	; 255
    3abc:	fe 01       	movw	r30, r28
    3abe:	e9 59       	subi	r30, 0x99	; 153
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	91 81       	ldd	r25, Z+1	; 0x01
    3ac6:	11 96       	adiw	r26, 0x01	; 1
    3ac8:	9c 93       	st	X, r25
    3aca:	8e 93       	st	-X, r24
    3acc:	fe 01       	movw	r30, r28
    3ace:	ed 59       	subi	r30, 0x9D	; 157
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <HLCD_displayChar+0x5d6>
    3ada:	fe 01       	movw	r30, r28
    3adc:	ed 59       	subi	r30, 0x9D	; 157
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e3 57       	subi	r30, 0x73	; 115
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	88 23       	and	r24, r24
    3aee:	59 f4       	brne	.+22     	; 0x3b06 <HLCD_displayChar+0x606>
    3af0:	ce 01       	movw	r24, r28
    3af2:	89 56       	subi	r24, 0x69	; 105
    3af4:	9f 4f       	sbci	r25, 0xFF	; 255
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3afc:	fe 01       	movw	r30, r28
    3afe:	e3 57       	subi	r30, 0x73	; 115
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 83       	st	Z, r24
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    3b06:	fe 01       	movw	r30, r28
    3b08:	e2 57       	subi	r30, 0x72	; 114
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	80 83       	st	Z, r24
    3b10:	fe 01       	movw	r30, r28
    3b12:	e1 5a       	subi	r30, 0xA1	; 161
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a0 ef       	ldi	r26, 0xF0	; 240
    3b1c:	b1 e4       	ldi	r27, 0x41	; 65
    3b1e:	80 83       	st	Z, r24
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	a2 83       	std	Z+2, r26	; 0x02
    3b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	8e 01       	movw	r16, r28
    3b28:	05 5a       	subi	r16, 0xA5	; 165
    3b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e1 5a       	subi	r30, 0xA1	; 161
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a ef       	ldi	r20, 0xFA	; 250
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b54:	fe 01       	movw	r30, r28
    3b56:	e5 5a       	subi	r30, 0xA5	; 165
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e8       	ldi	r20, 0x80	; 128
    3b68:	5f e3       	ldi	r21, 0x3F	; 63
    3b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b6e:	88 23       	and	r24, r24
    3b70:	44 f4       	brge	.+16     	; 0x3b82 <HLCD_displayChar+0x682>
		__ticks = 1;
    3b72:	fe 01       	movw	r30, r28
    3b74:	e7 5a       	subi	r30, 0xA7	; 167
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
    3b80:	64 c0       	rjmp	.+200    	; 0x3c4a <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    3b82:	fe 01       	movw	r30, r28
    3b84:	e5 5a       	subi	r30, 0xA5	; 165
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	60 81       	ld	r22, Z
    3b8a:	71 81       	ldd	r23, Z+1	; 0x01
    3b8c:	82 81       	ldd	r24, Z+2	; 0x02
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	3f ef       	ldi	r19, 0xFF	; 255
    3b94:	4f e7       	ldi	r20, 0x7F	; 127
    3b96:	57 e4       	ldi	r21, 0x47	; 71
    3b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b9c:	18 16       	cp	r1, r24
    3b9e:	0c f0       	brlt	.+2      	; 0x3ba2 <HLCD_displayChar+0x6a2>
    3ba0:	43 c0       	rjmp	.+134    	; 0x3c28 <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e1 5a       	subi	r30, 0xA1	; 161
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	82 81       	ldd	r24, Z+2	; 0x02
    3bae:	93 81       	ldd	r25, Z+3	; 0x03
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e2       	ldi	r20, 0x20	; 32
    3bb6:	51 e4       	ldi	r21, 0x41	; 65
    3bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	8e 01       	movw	r16, r28
    3bc2:	07 5a       	subi	r16, 0xA7	; 167
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	91 83       	std	Z+1, r25	; 0x01
    3bd6:	80 83       	st	Z, r24
    3bd8:	1f c0       	rjmp	.+62     	; 0x3c18 <HLCD_displayChar+0x718>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 5a       	subi	r30, 0xA9	; 169
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	88 ec       	ldi	r24, 0xC8	; 200
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	91 83       	std	Z+1, r25	; 0x01
    3be6:	80 83       	st	Z, r24
    3be8:	fe 01       	movw	r30, r28
    3bea:	e9 5a       	subi	r30, 0xA9	; 169
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	80 81       	ld	r24, Z
    3bf0:	91 81       	ldd	r25, Z+1	; 0x01
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <HLCD_displayChar+0x6f2>
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e9 5a       	subi	r30, 0xA9	; 169
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	de 01       	movw	r26, r28
    3c02:	a7 5a       	subi	r26, 0xA7	; 167
    3c04:	bf 4f       	sbci	r27, 0xFF	; 255
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 5a       	subi	r30, 0xA7	; 167
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	11 96       	adiw	r26, 0x01	; 1
    3c14:	9c 93       	st	X, r25
    3c16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e7 5a       	subi	r30, 0xA7	; 167
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	d1 f6       	brne	.-76     	; 0x3bda <HLCD_displayChar+0x6da>
    3c26:	28 c0       	rjmp	.+80     	; 0x3c78 <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c28:	8e 01       	movw	r16, r28
    3c2a:	07 5a       	subi	r16, 0xA7	; 167
    3c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e5 5a       	subi	r30, 0xA5	; 165
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	60 81       	ld	r22, Z
    3c36:	71 81       	ldd	r23, Z+1	; 0x01
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	93 81       	ldd	r25, Z+3	; 0x03
    3c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	f8 01       	movw	r30, r16
    3c46:	91 83       	std	Z+1, r25	; 0x01
    3c48:	80 83       	st	Z, r24
    3c4a:	de 01       	movw	r26, r28
    3c4c:	ab 5a       	subi	r26, 0xAB	; 171
    3c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c50:	fe 01       	movw	r30, r28
    3c52:	e7 5a       	subi	r30, 0xA7	; 167
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	11 96       	adiw	r26, 0x01	; 1
    3c5c:	9c 93       	st	X, r25
    3c5e:	8e 93       	st	-X, r24
    3c60:	fe 01       	movw	r30, r28
    3c62:	eb 5a       	subi	r30, 0xAB	; 171
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <HLCD_displayChar+0x76a>
    3c6e:	fe 01       	movw	r30, r28
    3c70:	eb 5a       	subi	r30, 0xAB	; 171
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	91 83       	std	Z+1, r25	; 0x01
    3c76:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e3 57       	subi	r30, 0x73	; 115
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	80 81       	ld	r24, Z
    3c80:	88 23       	and	r24, r24
    3c82:	59 f4       	brne	.+22     	; 0x3c9a <HLCD_displayChar+0x79a>
    3c84:	ce 01       	movw	r24, r28
    3c86:	89 56       	subi	r24, 0x69	; 105
    3c88:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8a:	61 e0       	ldi	r22, 0x01	; 1
    3c8c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3c90:	fe 01       	movw	r30, r28
    3c92:	e3 57       	subi	r30, 0x73	; 115
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 83       	st	Z, r24
    3c98:	05 c0       	rjmp	.+10     	; 0x3ca4 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e2 57       	subi	r30, 0x72	; 114
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	80 83       	st	Z, r24
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ef 5a       	subi	r30, 0xAF	; 175
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	a0 ef       	ldi	r26, 0xF0	; 240
    3cb0:	b1 e4       	ldi	r27, 0x41	; 65
    3cb2:	80 83       	st	Z, r24
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	a2 83       	std	Z+2, r26	; 0x02
    3cb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cba:	8e 01       	movw	r16, r28
    3cbc:	03 5b       	subi	r16, 0xB3	; 179
    3cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	ef 5a       	subi	r30, 0xAF	; 175
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	60 81       	ld	r22, Z
    3cc8:	71 81       	ldd	r23, Z+1	; 0x01
    3cca:	82 81       	ldd	r24, Z+2	; 0x02
    3ccc:	93 81       	ldd	r25, Z+3	; 0x03
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	4a ef       	ldi	r20, 0xFA	; 250
    3cd4:	54 e4       	ldi	r21, 0x44	; 68
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	f8 01       	movw	r30, r16
    3ce0:	80 83       	st	Z, r24
    3ce2:	91 83       	std	Z+1, r25	; 0x01
    3ce4:	a2 83       	std	Z+2, r26	; 0x02
    3ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e3 5b       	subi	r30, 0xB3	; 179
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	60 81       	ld	r22, Z
    3cf0:	71 81       	ldd	r23, Z+1	; 0x01
    3cf2:	82 81       	ldd	r24, Z+2	; 0x02
    3cf4:	93 81       	ldd	r25, Z+3	; 0x03
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e8       	ldi	r20, 0x80	; 128
    3cfc:	5f e3       	ldi	r21, 0x3F	; 63
    3cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d02:	88 23       	and	r24, r24
    3d04:	44 f4       	brge	.+16     	; 0x3d16 <HLCD_displayChar+0x816>
		__ticks = 1;
    3d06:	fe 01       	movw	r30, r28
    3d08:	e5 5b       	subi	r30, 0xB5	; 181
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	80 83       	st	Z, r24
    3d14:	64 c0       	rjmp	.+200    	; 0x3dde <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    3d16:	fe 01       	movw	r30, r28
    3d18:	e3 5b       	subi	r30, 0xB3	; 179
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	60 81       	ld	r22, Z
    3d1e:	71 81       	ldd	r23, Z+1	; 0x01
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	3f ef       	ldi	r19, 0xFF	; 255
    3d28:	4f e7       	ldi	r20, 0x7F	; 127
    3d2a:	57 e4       	ldi	r21, 0x47	; 71
    3d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	0c f0       	brlt	.+2      	; 0x3d36 <HLCD_displayChar+0x836>
    3d34:	43 c0       	rjmp	.+134    	; 0x3dbc <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d36:	fe 01       	movw	r30, r28
    3d38:	ef 5a       	subi	r30, 0xAF	; 175
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e2       	ldi	r20, 0x20	; 32
    3d4a:	51 e4       	ldi	r21, 0x41	; 65
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	8e 01       	movw	r16, r28
    3d56:	05 5b       	subi	r16, 0xB5	; 181
    3d58:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5a:	bc 01       	movw	r22, r24
    3d5c:	cd 01       	movw	r24, r26
    3d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	f8 01       	movw	r30, r16
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	80 83       	st	Z, r24
    3d6c:	1f c0       	rjmp	.+62     	; 0x3dac <HLCD_displayChar+0x8ac>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 5b       	subi	r30, 0xB7	; 183
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	88 ec       	ldi	r24, 0xC8	; 200
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e7 5b       	subi	r30, 0xB7	; 183
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f1 f7       	brne	.-4      	; 0x3d86 <HLCD_displayChar+0x886>
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e7 5b       	subi	r30, 0xB7	; 183
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	91 83       	std	Z+1, r25	; 0x01
    3d92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d94:	de 01       	movw	r26, r28
    3d96:	a5 5b       	subi	r26, 0xB5	; 181
    3d98:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e5 5b       	subi	r30, 0xB5	; 181
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	80 81       	ld	r24, Z
    3da2:	91 81       	ldd	r25, Z+1	; 0x01
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	11 96       	adiw	r26, 0x01	; 1
    3da8:	9c 93       	st	X, r25
    3daa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dac:	fe 01       	movw	r30, r28
    3dae:	e5 5b       	subi	r30, 0xB5	; 181
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	80 81       	ld	r24, Z
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	00 97       	sbiw	r24, 0x00	; 0
    3db8:	d1 f6       	brne	.-76     	; 0x3d6e <HLCD_displayChar+0x86e>
    3dba:	27 c0       	rjmp	.+78     	; 0x3e0a <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	05 5b       	subi	r16, 0xB5	; 181
    3dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e3 5b       	subi	r30, 0xB3	; 179
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	60 81       	ld	r22, Z
    3dca:	71 81       	ldd	r23, Z+1	; 0x01
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	f8 01       	movw	r30, r16
    3dda:	91 83       	std	Z+1, r25	; 0x01
    3ddc:	80 83       	st	Z, r24
    3dde:	de 01       	movw	r26, r28
    3de0:	a9 5b       	subi	r26, 0xB9	; 185
    3de2:	bf 4f       	sbci	r27, 0xFF	; 255
    3de4:	fe 01       	movw	r30, r28
    3de6:	e5 5b       	subi	r30, 0xB5	; 181
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 81       	ld	r24, Z
    3dec:	91 81       	ldd	r25, Z+1	; 0x01
    3dee:	8d 93       	st	X+, r24
    3df0:	9c 93       	st	X, r25
    3df2:	fe 01       	movw	r30, r28
    3df4:	e9 5b       	subi	r30, 0xB9	; 185
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <HLCD_displayChar+0x8fc>
    3e00:	fe 01       	movw	r30, r28
    3e02:	e9 5b       	subi	r30, 0xB9	; 185
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e5 56       	subi	r30, 0x65	; 101
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	01 90       	ld	r0, Z+
    3e12:	f0 81       	ld	r31, Z
    3e14:	e0 2d       	mov	r30, r0
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e3 56       	subi	r30, 0x63	; 99
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	60 81       	ld	r22, Z
    3e20:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_set4msbValue>
    3e24:	fe 01       	movw	r30, r28
    3e26:	ed 5b       	subi	r30, 0xBD	; 189
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	a0 ef       	ldi	r26, 0xF0	; 240
    3e30:	b1 e4       	ldi	r27, 0x41	; 65
    3e32:	80 83       	st	Z, r24
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	a2 83       	std	Z+2, r26	; 0x02
    3e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e3a:	8e 01       	movw	r16, r28
    3e3c:	01 5c       	subi	r16, 0xC1	; 193
    3e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e40:	fe 01       	movw	r30, r28
    3e42:	ed 5b       	subi	r30, 0xBD	; 189
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	60 81       	ld	r22, Z
    3e48:	71 81       	ldd	r23, Z+1	; 0x01
    3e4a:	82 81       	ldd	r24, Z+2	; 0x02
    3e4c:	93 81       	ldd	r25, Z+3	; 0x03
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	4a ef       	ldi	r20, 0xFA	; 250
    3e54:	54 e4       	ldi	r21, 0x44	; 68
    3e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	f8 01       	movw	r30, r16
    3e60:	80 83       	st	Z, r24
    3e62:	91 83       	std	Z+1, r25	; 0x01
    3e64:	a2 83       	std	Z+2, r26	; 0x02
    3e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ff 96       	adiw	r30, 0x3f	; 63
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e8       	ldi	r20, 0x80	; 128
    3e7a:	5f e3       	ldi	r21, 0x3F	; 63
    3e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e80:	88 23       	and	r24, r24
    3e82:	2c f4       	brge	.+10     	; 0x3e8e <HLCD_displayChar+0x98e>
		__ticks = 1;
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	9e af       	std	Y+62, r25	; 0x3e
    3e8a:	8d af       	std	Y+61, r24	; 0x3d
    3e8c:	46 c0       	rjmp	.+140    	; 0x3f1a <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    3e8e:	fe 01       	movw	r30, r28
    3e90:	ff 96       	adiw	r30, 0x3f	; 63
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	3f ef       	ldi	r19, 0xFF	; 255
    3e9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ea0:	57 e4       	ldi	r21, 0x47	; 71
    3ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea6:	18 16       	cp	r1, r24
    3ea8:	64 f5       	brge	.+88     	; 0x3f02 <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eaa:	fe 01       	movw	r30, r28
    3eac:	ed 5b       	subi	r30, 0xBD	; 189
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e2       	ldi	r20, 0x20	; 32
    3ebe:	51 e4       	ldi	r21, 0x41	; 65
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9e af       	std	Y+62, r25	; 0x3e
    3ed6:	8d af       	std	Y+61, r24	; 0x3d
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <HLCD_displayChar+0x9f8>
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	9c af       	std	Y+60, r25	; 0x3c
    3ee0:	8b af       	std	Y+59, r24	; 0x3b
    3ee2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ee4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <HLCD_displayChar+0x9e6>
    3eea:	9c af       	std	Y+60, r25	; 0x3c
    3eec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9e af       	std	Y+62, r25	; 0x3e
    3ef6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3efa:	9e ad       	ldd	r25, Y+62	; 0x3e
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	69 f7       	brne	.-38     	; 0x3eda <HLCD_displayChar+0x9da>
    3f00:	16 c0       	rjmp	.+44     	; 0x3f2e <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	fe 01       	movw	r30, r28
    3f04:	ff 96       	adiw	r30, 0x3f	; 63
    3f06:	60 81       	ld	r22, Z
    3f08:	71 81       	ldd	r23, Z+1	; 0x01
    3f0a:	82 81       	ldd	r24, Z+2	; 0x02
    3f0c:	93 81       	ldd	r25, Z+3	; 0x03
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	9e af       	std	Y+62, r25	; 0x3e
    3f18:	8d af       	std	Y+61, r24	; 0x3d
    3f1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f1e:	9a af       	std	Y+58, r25	; 0x3a
    3f20:	89 af       	std	Y+57, r24	; 0x39
    3f22:	89 ad       	ldd	r24, Y+57	; 0x39
    3f24:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <HLCD_displayChar+0xa26>
    3f2a:	9a af       	std	Y+58, r25	; 0x3a
    3f2c:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e3 57       	subi	r30, 0x73	; 115
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	88 23       	and	r24, r24
    3f38:	59 f4       	brne	.+22     	; 0x3f50 <HLCD_displayChar+0xa50>
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	89 56       	subi	r24, 0x69	; 105
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    3f46:	fe 01       	movw	r30, r28
    3f48:	e3 57       	subi	r30, 0x73	; 115
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 83       	st	Z, r24
    3f4e:	05 c0       	rjmp	.+10     	; 0x3f5a <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    3f50:	fe 01       	movw	r30, r28
    3f52:	e2 57       	subi	r30, 0x72	; 114
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	80 83       	st	Z, r24
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	a0 ef       	ldi	r26, 0xF0	; 240
    3f60:	b1 e4       	ldi	r27, 0x41	; 65
    3f62:	8d ab       	std	Y+53, r24	; 0x35
    3f64:	9e ab       	std	Y+54, r25	; 0x36
    3f66:	af ab       	std	Y+55, r26	; 0x37
    3f68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f6c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3f70:	98 ad       	ldd	r25, Y+56	; 0x38
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	4a ef       	ldi	r20, 0xFA	; 250
    3f78:	54 e4       	ldi	r21, 0x44	; 68
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	89 ab       	std	Y+49, r24	; 0x31
    3f84:	9a ab       	std	Y+50, r25	; 0x32
    3f86:	ab ab       	std	Y+51, r26	; 0x33
    3f88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f90:	9c a9       	ldd	r25, Y+52	; 0x34
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e8       	ldi	r20, 0x80	; 128
    3f98:	5f e3       	ldi	r21, 0x3F	; 63
    3f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f9e:	88 23       	and	r24, r24
    3fa0:	2c f4       	brge	.+10     	; 0x3fac <HLCD_displayChar+0xaac>
		__ticks = 1;
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	98 ab       	std	Y+48, r25	; 0x30
    3fa8:	8f a7       	std	Y+47, r24	; 0x2f
    3faa:	3f c0       	rjmp	.+126    	; 0x402a <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    3fac:	69 a9       	ldd	r22, Y+49	; 0x31
    3fae:	7a a9       	ldd	r23, Y+50	; 0x32
    3fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	3f ef       	ldi	r19, 0xFF	; 255
    3fb8:	4f e7       	ldi	r20, 0x7F	; 127
    3fba:	57 e4       	ldi	r21, 0x47	; 71
    3fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fc0:	18 16       	cp	r1, r24
    3fc2:	4c f5       	brge	.+82     	; 0x4016 <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    3fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    3fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    3fca:	98 ad       	ldd	r25, Y+56	; 0x38
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	98 ab       	std	Y+48, r25	; 0x30
    3fea:	8f a7       	std	Y+47, r24	; 0x2f
    3fec:	0f c0       	rjmp	.+30     	; 0x400c <HLCD_displayChar+0xb0c>
    3fee:	88 ec       	ldi	r24, 0xC8	; 200
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	9e a7       	std	Y+46, r25	; 0x2e
    3ff4:	8d a7       	std	Y+45, r24	; 0x2d
    3ff6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ff8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <HLCD_displayChar+0xafa>
    3ffe:	9e a7       	std	Y+46, r25	; 0x2e
    4000:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	8f a5       	ldd	r24, Y+47	; 0x2f
    4004:	98 a9       	ldd	r25, Y+48	; 0x30
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	98 ab       	std	Y+48, r25	; 0x30
    400a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400c:	8f a5       	ldd	r24, Y+47	; 0x2f
    400e:	98 a9       	ldd	r25, Y+48	; 0x30
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	69 f7       	brne	.-38     	; 0x3fee <HLCD_displayChar+0xaee>
    4014:	bb c1       	rjmp	.+886    	; 0x438c <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	69 a9       	ldd	r22, Y+49	; 0x31
    4018:	7a a9       	ldd	r23, Y+50	; 0x32
    401a:	8b a9       	ldd	r24, Y+51	; 0x33
    401c:	9c a9       	ldd	r25, Y+52	; 0x34
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	98 ab       	std	Y+48, r25	; 0x30
    4028:	8f a7       	std	Y+47, r24	; 0x2f
    402a:	8f a5       	ldd	r24, Y+47	; 0x2f
    402c:	98 a9       	ldd	r25, Y+48	; 0x30
    402e:	9c a7       	std	Y+44, r25	; 0x2c
    4030:	8b a7       	std	Y+43, r24	; 0x2b
    4032:	8b a5       	ldd	r24, Y+43	; 0x2b
    4034:	9c a5       	ldd	r25, Y+44	; 0x2c
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	f1 f7       	brne	.-4      	; 0x4036 <HLCD_displayChar+0xb36>
    403a:	9c a7       	std	Y+44, r25	; 0x2c
    403c:	8b a7       	std	Y+43, r24	; 0x2b
    403e:	a6 c1       	rjmp	.+844    	; 0x438c <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4040:	fe 01       	movw	r30, r28
    4042:	e5 56       	subi	r30, 0x65	; 101
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	01 90       	ld	r0, Z+
    4048:	f0 81       	ld	r31, Z
    404a:	e0 2d       	mov	r30, r0
    404c:	80 81       	ld	r24, Z
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	09 f0       	breq	.+2      	; 0x4054 <HLCD_displayChar+0xb54>
    4052:	97 c1       	rjmp	.+814    	; 0x4382 <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4054:	fe 01       	movw	r30, r28
    4056:	e3 57       	subi	r30, 0x73	; 115
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	80 81       	ld	r24, Z
    405c:	88 23       	and	r24, r24
    405e:	59 f4       	brne	.+22     	; 0x4076 <HLCD_displayChar+0xb76>
    4060:	ce 01       	movw	r24, r28
    4062:	89 56       	subi	r24, 0x69	; 105
    4064:	9f 4f       	sbci	r25, 0xFF	; 255
    4066:	61 e0       	ldi	r22, 0x01	; 1
    4068:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    406c:	fe 01       	movw	r30, r28
    406e:	e3 57       	subi	r30, 0x73	; 115
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 83       	st	Z, r24
    4074:	05 c0       	rjmp	.+10     	; 0x4080 <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    4076:	fe 01       	movw	r30, r28
    4078:	e2 57       	subi	r30, 0x72	; 114
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	80 83       	st	Z, r24
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e8       	ldi	r26, 0x80	; 128
    4086:	bf e3       	ldi	r27, 0x3F	; 63
    4088:	8f a3       	std	Y+39, r24	; 0x27
    408a:	98 a7       	std	Y+40, r25	; 0x28
    408c:	a9 a7       	std	Y+41, r26	; 0x29
    408e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4090:	6f a1       	ldd	r22, Y+39	; 0x27
    4092:	78 a5       	ldd	r23, Y+40	; 0x28
    4094:	89 a5       	ldd	r24, Y+41	; 0x29
    4096:	9a a5       	ldd	r25, Y+42	; 0x2a
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	4a ef       	ldi	r20, 0xFA	; 250
    409e:	54 e4       	ldi	r21, 0x44	; 68
    40a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	8b a3       	std	Y+35, r24	; 0x23
    40aa:	9c a3       	std	Y+36, r25	; 0x24
    40ac:	ad a3       	std	Y+37, r26	; 0x25
    40ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40b0:	6b a1       	ldd	r22, Y+35	; 0x23
    40b2:	7c a1       	ldd	r23, Y+36	; 0x24
    40b4:	8d a1       	ldd	r24, Y+37	; 0x25
    40b6:	9e a1       	ldd	r25, Y+38	; 0x26
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e8       	ldi	r20, 0x80	; 128
    40be:	5f e3       	ldi	r21, 0x3F	; 63
    40c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40c4:	88 23       	and	r24, r24
    40c6:	2c f4       	brge	.+10     	; 0x40d2 <HLCD_displayChar+0xbd2>
		__ticks = 1;
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	9a a3       	std	Y+34, r25	; 0x22
    40ce:	89 a3       	std	Y+33, r24	; 0x21
    40d0:	3f c0       	rjmp	.+126    	; 0x4150 <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    40d2:	6b a1       	ldd	r22, Y+35	; 0x23
    40d4:	7c a1       	ldd	r23, Y+36	; 0x24
    40d6:	8d a1       	ldd	r24, Y+37	; 0x25
    40d8:	9e a1       	ldd	r25, Y+38	; 0x26
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	3f ef       	ldi	r19, 0xFF	; 255
    40de:	4f e7       	ldi	r20, 0x7F	; 127
    40e0:	57 e4       	ldi	r21, 0x47	; 71
    40e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40e6:	18 16       	cp	r1, r24
    40e8:	4c f5       	brge	.+82     	; 0x413c <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ea:	6f a1       	ldd	r22, Y+39	; 0x27
    40ec:	78 a5       	ldd	r23, Y+40	; 0x28
    40ee:	89 a5       	ldd	r24, Y+41	; 0x29
    40f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e2       	ldi	r20, 0x20	; 32
    40f8:	51 e4       	ldi	r21, 0x41	; 65
    40fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	9a a3       	std	Y+34, r25	; 0x22
    4110:	89 a3       	std	Y+33, r24	; 0x21
    4112:	0f c0       	rjmp	.+30     	; 0x4132 <HLCD_displayChar+0xc32>
    4114:	88 ec       	ldi	r24, 0xC8	; 200
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	98 a3       	std	Y+32, r25	; 0x20
    411a:	8f 8f       	std	Y+31, r24	; 0x1f
    411c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    411e:	98 a1       	ldd	r25, Y+32	; 0x20
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	f1 f7       	brne	.-4      	; 0x4120 <HLCD_displayChar+0xc20>
    4124:	98 a3       	std	Y+32, r25	; 0x20
    4126:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4128:	89 a1       	ldd	r24, Y+33	; 0x21
    412a:	9a a1       	ldd	r25, Y+34	; 0x22
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	9a a3       	std	Y+34, r25	; 0x22
    4130:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4132:	89 a1       	ldd	r24, Y+33	; 0x21
    4134:	9a a1       	ldd	r25, Y+34	; 0x22
    4136:	00 97       	sbiw	r24, 0x00	; 0
    4138:	69 f7       	brne	.-38     	; 0x4114 <HLCD_displayChar+0xc14>
    413a:	14 c0       	rjmp	.+40     	; 0x4164 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413c:	6b a1       	ldd	r22, Y+35	; 0x23
    413e:	7c a1       	ldd	r23, Y+36	; 0x24
    4140:	8d a1       	ldd	r24, Y+37	; 0x25
    4142:	9e a1       	ldd	r25, Y+38	; 0x26
    4144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	9a a3       	std	Y+34, r25	; 0x22
    414e:	89 a3       	std	Y+33, r24	; 0x21
    4150:	89 a1       	ldd	r24, Y+33	; 0x21
    4152:	9a a1       	ldd	r25, Y+34	; 0x22
    4154:	9e 8f       	std	Y+30, r25	; 0x1e
    4156:	8d 8f       	std	Y+29, r24	; 0x1d
    4158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    415a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <HLCD_displayChar+0xc5c>
    4160:	9e 8f       	std	Y+30, r25	; 0x1e
    4162:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    4164:	fe 01       	movw	r30, r28
    4166:	e5 56       	subi	r30, 0x65	; 101
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	01 90       	ld	r0, Z+
    416c:	f0 81       	ld	r31, Z
    416e:	e0 2d       	mov	r30, r0
    4170:	92 81       	ldd	r25, Z+2	; 0x02
    4172:	fe 01       	movw	r30, r28
    4174:	e3 56       	subi	r30, 0x63	; 99
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e0       	ldi	r20, 0x00	; 0
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	89 2f       	mov	r24, r25
    4184:	ba 01       	movw	r22, r20
    4186:	a9 01       	movw	r20, r18
    4188:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_SetPortValue>
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	a0 e8       	ldi	r26, 0x80	; 128
    4192:	bf e3       	ldi	r27, 0x3F	; 63
    4194:	89 8f       	std	Y+25, r24	; 0x19
    4196:	9a 8f       	std	Y+26, r25	; 0x1a
    4198:	ab 8f       	std	Y+27, r26	; 0x1b
    419a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419c:	69 8d       	ldd	r22, Y+25	; 0x19
    419e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	4a ef       	ldi	r20, 0xFA	; 250
    41aa:	54 e4       	ldi	r21, 0x44	; 68
    41ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	8d 8b       	std	Y+21, r24	; 0x15
    41b6:	9e 8b       	std	Y+22, r25	; 0x16
    41b8:	af 8b       	std	Y+23, r26	; 0x17
    41ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41bc:	6d 89       	ldd	r22, Y+21	; 0x15
    41be:	7e 89       	ldd	r23, Y+22	; 0x16
    41c0:	8f 89       	ldd	r24, Y+23	; 0x17
    41c2:	98 8d       	ldd	r25, Y+24	; 0x18
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	40 e8       	ldi	r20, 0x80	; 128
    41ca:	5f e3       	ldi	r21, 0x3F	; 63
    41cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41d0:	88 23       	and	r24, r24
    41d2:	2c f4       	brge	.+10     	; 0x41de <HLCD_displayChar+0xcde>
		__ticks = 1;
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9c 8b       	std	Y+20, r25	; 0x14
    41da:	8b 8b       	std	Y+19, r24	; 0x13
    41dc:	3f c0       	rjmp	.+126    	; 0x425c <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    41de:	6d 89       	ldd	r22, Y+21	; 0x15
    41e0:	7e 89       	ldd	r23, Y+22	; 0x16
    41e2:	8f 89       	ldd	r24, Y+23	; 0x17
    41e4:	98 8d       	ldd	r25, Y+24	; 0x18
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	3f ef       	ldi	r19, 0xFF	; 255
    41ea:	4f e7       	ldi	r20, 0x7F	; 127
    41ec:	57 e4       	ldi	r21, 0x47	; 71
    41ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41f2:	18 16       	cp	r1, r24
    41f4:	4c f5       	brge	.+82     	; 0x4248 <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f6:	69 8d       	ldd	r22, Y+25	; 0x19
    41f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e2       	ldi	r20, 0x20	; 32
    4204:	51 e4       	ldi	r21, 0x41	; 65
    4206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	bc 01       	movw	r22, r24
    4210:	cd 01       	movw	r24, r26
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9c 8b       	std	Y+20, r25	; 0x14
    421c:	8b 8b       	std	Y+19, r24	; 0x13
    421e:	0f c0       	rjmp	.+30     	; 0x423e <HLCD_displayChar+0xd3e>
    4220:	88 ec       	ldi	r24, 0xC8	; 200
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	9a 8b       	std	Y+18, r25	; 0x12
    4226:	89 8b       	std	Y+17, r24	; 0x11
    4228:	89 89       	ldd	r24, Y+17	; 0x11
    422a:	9a 89       	ldd	r25, Y+18	; 0x12
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	f1 f7       	brne	.-4      	; 0x422c <HLCD_displayChar+0xd2c>
    4230:	9a 8b       	std	Y+18, r25	; 0x12
    4232:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4234:	8b 89       	ldd	r24, Y+19	; 0x13
    4236:	9c 89       	ldd	r25, Y+20	; 0x14
    4238:	01 97       	sbiw	r24, 0x01	; 1
    423a:	9c 8b       	std	Y+20, r25	; 0x14
    423c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423e:	8b 89       	ldd	r24, Y+19	; 0x13
    4240:	9c 89       	ldd	r25, Y+20	; 0x14
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	69 f7       	brne	.-38     	; 0x4220 <HLCD_displayChar+0xd20>
    4246:	14 c0       	rjmp	.+40     	; 0x4270 <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4248:	6d 89       	ldd	r22, Y+21	; 0x15
    424a:	7e 89       	ldd	r23, Y+22	; 0x16
    424c:	8f 89       	ldd	r24, Y+23	; 0x17
    424e:	98 8d       	ldd	r25, Y+24	; 0x18
    4250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	9c 8b       	std	Y+20, r25	; 0x14
    425a:	8b 8b       	std	Y+19, r24	; 0x13
    425c:	8b 89       	ldd	r24, Y+19	; 0x13
    425e:	9c 89       	ldd	r25, Y+20	; 0x14
    4260:	98 8b       	std	Y+16, r25	; 0x10
    4262:	8f 87       	std	Y+15, r24	; 0x0f
    4264:	8f 85       	ldd	r24, Y+15	; 0x0f
    4266:	98 89       	ldd	r25, Y+16	; 0x10
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	f1 f7       	brne	.-4      	; 0x4268 <HLCD_displayChar+0xd68>
    426c:	98 8b       	std	Y+16, r25	; 0x10
    426e:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4270:	fe 01       	movw	r30, r28
    4272:	e3 57       	subi	r30, 0x73	; 115
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	80 81       	ld	r24, Z
    4278:	88 23       	and	r24, r24
    427a:	59 f4       	brne	.+22     	; 0x4292 <HLCD_displayChar+0xd92>
    427c:	ce 01       	movw	r24, r28
    427e:	89 56       	subi	r24, 0x69	; 105
    4280:	9f 4f       	sbci	r25, 0xFF	; 255
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    4288:	fe 01       	movw	r30, r28
    428a:	e3 57       	subi	r30, 0x73	; 115
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	80 83       	st	Z, r24
    4290:	05 c0       	rjmp	.+10     	; 0x429c <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    4292:	fe 01       	movw	r30, r28
    4294:	e2 57       	subi	r30, 0x72	; 114
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	80 83       	st	Z, r24
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a0 e8       	ldi	r26, 0x80	; 128
    42a2:	bf e3       	ldi	r27, 0x3F	; 63
    42a4:	8b 87       	std	Y+11, r24	; 0x0b
    42a6:	9c 87       	std	Y+12, r25	; 0x0c
    42a8:	ad 87       	std	Y+13, r26	; 0x0d
    42aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    42ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    42b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4a ef       	ldi	r20, 0xFA	; 250
    42ba:	54 e4       	ldi	r21, 0x44	; 68
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	8f 83       	std	Y+7, r24	; 0x07
    42c6:	98 87       	std	Y+8, r25	; 0x08
    42c8:	a9 87       	std	Y+9, r26	; 0x09
    42ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e8       	ldi	r20, 0x80	; 128
    42da:	5f e3       	ldi	r21, 0x3F	; 63
    42dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42e0:	88 23       	and	r24, r24
    42e2:	2c f4       	brge	.+10     	; 0x42ee <HLCD_displayChar+0xdee>
		__ticks = 1;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	8d 83       	std	Y+5, r24	; 0x05
    42ec:	3f c0       	rjmp	.+126    	; 0x436c <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    42ee:	6f 81       	ldd	r22, Y+7	; 0x07
    42f0:	78 85       	ldd	r23, Y+8	; 0x08
    42f2:	89 85       	ldd	r24, Y+9	; 0x09
    42f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	3f ef       	ldi	r19, 0xFF	; 255
    42fa:	4f e7       	ldi	r20, 0x7F	; 127
    42fc:	57 e4       	ldi	r21, 0x47	; 71
    42fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4302:	18 16       	cp	r1, r24
    4304:	4c f5       	brge	.+82     	; 0x4358 <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4306:	6b 85       	ldd	r22, Y+11	; 0x0b
    4308:	7c 85       	ldd	r23, Y+12	; 0x0c
    430a:	8d 85       	ldd	r24, Y+13	; 0x0d
    430c:	9e 85       	ldd	r25, Y+14	; 0x0e
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e2       	ldi	r20, 0x20	; 32
    4314:	51 e4       	ldi	r21, 0x41	; 65
    4316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	bc 01       	movw	r22, r24
    4320:	cd 01       	movw	r24, r26
    4322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
    432e:	0f c0       	rjmp	.+30     	; 0x434e <HLCD_displayChar+0xe4e>
    4330:	88 ec       	ldi	r24, 0xC8	; 200
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	9c 83       	std	Y+4, r25	; 0x04
    4336:	8b 83       	std	Y+3, r24	; 0x03
    4338:	8b 81       	ldd	r24, Y+3	; 0x03
    433a:	9c 81       	ldd	r25, Y+4	; 0x04
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <HLCD_displayChar+0xe3c>
    4340:	9c 83       	std	Y+4, r25	; 0x04
    4342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4344:	8d 81       	ldd	r24, Y+5	; 0x05
    4346:	9e 81       	ldd	r25, Y+6	; 0x06
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	9e 83       	std	Y+6, r25	; 0x06
    434c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434e:	8d 81       	ldd	r24, Y+5	; 0x05
    4350:	9e 81       	ldd	r25, Y+6	; 0x06
    4352:	00 97       	sbiw	r24, 0x00	; 0
    4354:	69 f7       	brne	.-38     	; 0x4330 <HLCD_displayChar+0xe30>
    4356:	1a c0       	rjmp	.+52     	; 0x438c <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4358:	6f 81       	ldd	r22, Y+7	; 0x07
    435a:	78 85       	ldd	r23, Y+8	; 0x08
    435c:	89 85       	ldd	r24, Y+9	; 0x09
    435e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	8d 83       	std	Y+5, r24	; 0x05
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	89 83       	std	Y+1, r24	; 0x01
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	9a 81       	ldd	r25, Y+2	; 0x02
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	f1 f7       	brne	.-4      	; 0x4378 <HLCD_displayChar+0xe78>
    437c:	9a 83       	std	Y+2, r25	; 0x02
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	05 c0       	rjmp	.+10     	; 0x438c <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4382:	fe 01       	movw	r30, r28
    4384:	e2 57       	subi	r30, 0x72	; 114
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	83 e0       	ldi	r24, 0x03	; 3
    438a:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    438c:	fe 01       	movw	r30, r28
    438e:	e3 57       	subi	r30, 0x73	; 115
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	80 81       	ld	r24, Z
    4394:	88 23       	and	r24, r24
    4396:	29 f4       	brne	.+10     	; 0x43a2 <HLCD_displayChar+0xea2>
    4398:	fe 01       	movw	r30, r28
    439a:	e2 57       	subi	r30, 0x72	; 114
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	10 82       	st	Z, r1
    43a0:	0b c0       	rjmp	.+22     	; 0x43b8 <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    43a2:	fe 01       	movw	r30, r28
    43a4:	e2 57       	subi	r30, 0x72	; 114
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	80 83       	st	Z, r24
    43ac:	05 c0       	rjmp	.+10     	; 0x43b8 <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    43ae:	fe 01       	movw	r30, r28
    43b0:	e2 57       	subi	r30, 0x72	; 114
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	80 83       	st	Z, r24
	}

	return lcdRet;
    43b8:	fe 01       	movw	r30, r28
    43ba:	e2 57       	subi	r30, 0x72	; 114
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
}
    43c0:	c3 56       	subi	r28, 0x63	; 99
    43c2:	df 4f       	sbci	r29, 0xFF	; 255
    43c4:	0f b6       	in	r0, 0x3f	; 63
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	cf 91       	pop	r28
    43d0:	df 91       	pop	r29
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	00 d0       	rcall	.+0      	; 0x43de <HLCD_displayString+0x6>
    43de:	00 d0       	rcall	.+0      	; 0x43e0 <HLCD_displayString+0x8>
    43e0:	00 d0       	rcall	.+0      	; 0x43e2 <HLCD_displayString+0xa>
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	9c 83       	std	Y+4, r25	; 0x04
    43e8:	8b 83       	std	Y+3, r24	; 0x03
    43ea:	7e 83       	std	Y+6, r23	; 0x06
    43ec:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    43f2:	8b 81       	ldd	r24, Y+3	; 0x03
    43f4:	9c 81       	ldd	r25, Y+4	; 0x04
    43f6:	00 97       	sbiw	r24, 0x00	; 0
    43f8:	69 f1       	breq	.+90     	; 0x4454 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    43fa:	eb 81       	ldd	r30, Y+3	; 0x03
    43fc:	fc 81       	ldd	r31, Y+4	; 0x04
    43fe:	80 81       	ld	r24, Z
    4400:	88 23       	and	r24, r24
    4402:	51 f1       	breq	.+84     	; 0x4458 <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4404:	eb 81       	ldd	r30, Y+3	; 0x03
    4406:	fc 81       	ldd	r31, Y+4	; 0x04
    4408:	80 81       	ld	r24, Z
    440a:	81 30       	cpi	r24, 0x01	; 1
    440c:	01 f5       	brne	.+64     	; 0x444e <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    440e:	19 82       	std	Y+1, r1	; 0x01
    4410:	12 c0       	rjmp	.+36     	; 0x4436 <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	28 2f       	mov	r18, r24
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	8d 81       	ldd	r24, Y+5	; 0x05
    441a:	9e 81       	ldd	r25, Y+6	; 0x06
    441c:	fc 01       	movw	r30, r24
    441e:	e2 0f       	add	r30, r18
    4420:	f3 1f       	adc	r31, r19
    4422:	20 81       	ld	r18, Z
    4424:	8b 81       	ldd	r24, Y+3	; 0x03
    4426:	9c 81       	ldd	r25, Y+4	; 0x04
    4428:	62 2f       	mov	r22, r18
    442a:	0e 94 80 1a 	call	0x3500	; 0x3500 <HLCD_displayChar>
    442e:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	8f 5f       	subi	r24, 0xFF	; 255
    4434:	89 83       	std	Y+1, r24	; 0x01
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	28 2f       	mov	r18, r24
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	8d 81       	ldd	r24, Y+5	; 0x05
    443e:	9e 81       	ldd	r25, Y+6	; 0x06
    4440:	fc 01       	movw	r30, r24
    4442:	e2 0f       	add	r30, r18
    4444:	f3 1f       	adc	r31, r19
    4446:	80 81       	ld	r24, Z
    4448:	88 23       	and	r24, r24
    444a:	19 f7       	brne	.-58     	; 0x4412 <HLCD_displayString+0x3a>
    444c:	05 c0       	rjmp	.+10     	; 0x4458 <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    444e:	83 e0       	ldi	r24, 0x03	; 3
    4450:	8a 83       	std	Y+2, r24	; 0x02
    4452:	02 c0       	rjmp	.+4      	; 0x4458 <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    4458:	8a 81       	ldd	r24, Y+2	; 0x02
}
    445a:	26 96       	adiw	r28, 0x06	; 6
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	de bf       	out	0x3e, r29	; 62
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	cd bf       	out	0x3d, r28	; 61
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	6b 97       	sbiw	r28, 0x1b	; 27
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	9f 8b       	std	Y+23, r25	; 0x17
    4482:	8e 8b       	std	Y+22, r24	; 0x16
    4484:	48 8f       	std	Y+24, r20	; 0x18
    4486:	59 8f       	std	Y+25, r21	; 0x19
    4488:	6a 8f       	std	Y+26, r22	; 0x1a
    448a:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4490:	8e 89       	ldd	r24, Y+22	; 0x16
    4492:	9f 89       	ldd	r25, Y+23	; 0x17
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	01 f1       	breq	.+64     	; 0x44d8 <HLCD_displayNumber+0x6c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4498:	ee 89       	ldd	r30, Y+22	; 0x16
    449a:	ff 89       	ldd	r31, Y+23	; 0x17
    449c:	80 81       	ld	r24, Z
    449e:	88 23       	and	r24, r24
    44a0:	e9 f0       	breq	.+58     	; 0x44dc <HLCD_displayNumber+0x70>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    44a2:	ee 89       	ldd	r30, Y+22	; 0x16
    44a4:	ff 89       	ldd	r31, Y+23	; 0x17
    44a6:	80 81       	ld	r24, Z
    44a8:	81 30       	cpi	r24, 0x01	; 1
    44aa:	99 f4       	brne	.+38     	; 0x44d2 <HLCD_displayNumber+0x66>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    44ac:	88 8d       	ldd	r24, Y+24	; 0x18
    44ae:	99 8d       	ldd	r25, Y+25	; 0x19
    44b0:	9e 01       	movw	r18, r28
    44b2:	2e 5f       	subi	r18, 0xFE	; 254
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	b9 01       	movw	r22, r18
    44b8:	4a e0       	ldi	r20, 0x0A	; 10
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    44c0:	8e 89       	ldd	r24, Y+22	; 0x16
    44c2:	9f 89       	ldd	r25, Y+23	; 0x17
    44c4:	9e 01       	movw	r18, r28
    44c6:	2e 5f       	subi	r18, 0xFE	; 254
    44c8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ca:	b9 01       	movw	r22, r18
    44cc:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <HLCD_displayString>
    44d0:	05 c0       	rjmp	.+10     	; 0x44dc <HLCD_displayNumber+0x70>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    44d2:	83 e0       	ldi	r24, 0x03	; 3
    44d4:	89 83       	std	Y+1, r24	; 0x01
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <HLCD_displayNumber+0x70>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    44d8:	82 e0       	ldi	r24, 0x02	; 2
    44da:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    44de:	6b 96       	adiw	r28, 0x1b	; 27
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	cf 91       	pop	r28
    44ec:	df 91       	pop	r29
    44ee:	08 95       	ret

000044f0 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    44f0:	df 93       	push	r29
    44f2:	cf 93       	push	r28
    44f4:	00 d0       	rcall	.+0      	; 0x44f6 <HLCD_changeCursorPosation+0x6>
    44f6:	00 d0       	rcall	.+0      	; 0x44f8 <HLCD_changeCursorPosation+0x8>
    44f8:	0f 92       	push	r0
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	9b 83       	std	Y+3, r25	; 0x03
    4500:	8a 83       	std	Y+2, r24	; 0x02
    4502:	6c 83       	std	Y+4, r22	; 0x04
    4504:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    450a:	8a 81       	ldd	r24, Y+2	; 0x02
    450c:	9b 81       	ldd	r25, Y+3	; 0x03
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	91 f1       	breq	.+100    	; 0x4576 <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4512:	ea 81       	ldd	r30, Y+2	; 0x02
    4514:	fb 81       	ldd	r31, Y+3	; 0x03
    4516:	80 81       	ld	r24, Z
    4518:	88 23       	and	r24, r24
    451a:	79 f1       	breq	.+94     	; 0x457a <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    451c:	ea 81       	ldd	r30, Y+2	; 0x02
    451e:	fb 81       	ldd	r31, Y+3	; 0x03
    4520:	80 81       	ld	r24, Z
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	29 f5       	brne	.+74     	; 0x4570 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    4526:	8c 81       	ldd	r24, Y+4	; 0x04
    4528:	88 23       	and	r24, r24
    452a:	71 f4       	brne	.+28     	; 0x4548 <HLCD_changeCursorPosation+0x58>
    452c:	8d 81       	ldd	r24, Y+5	; 0x05
    452e:	80 31       	cpi	r24, 0x10	; 16
    4530:	58 f4       	brcc	.+22     	; 0x4548 <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    4532:	8d 81       	ldd	r24, Y+5	; 0x05
    4534:	8f 70       	andi	r24, 0x0F	; 15
    4536:	80 68       	ori	r24, 0x80	; 128
    4538:	28 2f       	mov	r18, r24
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
    453c:	9b 81       	ldd	r25, Y+3	; 0x03
    453e:	62 2f       	mov	r22, r18
    4540:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	19 c0       	rjmp	.+50     	; 0x457a <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    4548:	8c 81       	ldd	r24, Y+4	; 0x04
    454a:	81 30       	cpi	r24, 0x01	; 1
    454c:	71 f4       	brne	.+28     	; 0x456a <HLCD_changeCursorPosation+0x7a>
    454e:	8d 81       	ldd	r24, Y+5	; 0x05
    4550:	80 31       	cpi	r24, 0x10	; 16
    4552:	58 f4       	brcc	.+22     	; 0x456a <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    4554:	8d 81       	ldd	r24, Y+5	; 0x05
    4556:	8f 70       	andi	r24, 0x0F	; 15
    4558:	80 6c       	ori	r24, 0xC0	; 192
    455a:	28 2f       	mov	r18, r24
    455c:	8a 81       	ldd	r24, Y+2	; 0x02
    455e:	9b 81       	ldd	r25, Y+3	; 0x03
    4560:	62 2f       	mov	r22, r18
    4562:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    4566:	89 83       	std	Y+1, r24	; 0x01
    4568:	08 c0       	rjmp	.+16     	; 0x457a <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    456a:	84 e0       	ldi	r24, 0x04	; 4
    456c:	89 83       	std	Y+1, r24	; 0x01
    456e:	05 c0       	rjmp	.+10     	; 0x457a <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4570:	83 e0       	ldi	r24, 0x03	; 3
    4572:	89 83       	std	Y+1, r24	; 0x01
    4574:	02 c0       	rjmp	.+4      	; 0x457a <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4576:	82 e0       	ldi	r24, 0x02	; 2
    4578:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    457a:	89 81       	ldd	r24, Y+1	; 0x01
}
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	00 d0       	rcall	.+0      	; 0x4592 <HLCD_shiftDisplay+0x6>
    4592:	00 d0       	rcall	.+0      	; 0x4594 <HLCD_shiftDisplay+0x8>
    4594:	00 d0       	rcall	.+0      	; 0x4596 <HLCD_shiftDisplay+0xa>
    4596:	cd b7       	in	r28, 0x3d	; 61
    4598:	de b7       	in	r29, 0x3e	; 62
    459a:	9c 83       	std	Y+4, r25	; 0x04
    459c:	8b 83       	std	Y+3, r24	; 0x03
    459e:	6d 83       	std	Y+5, r22	; 0x05
    45a0:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    45a6:	8b 81       	ldd	r24, Y+3	; 0x03
    45a8:	9c 81       	ldd	r25, Y+4	; 0x04
    45aa:	00 97       	sbiw	r24, 0x00	; 0
    45ac:	31 f1       	breq	.+76     	; 0x45fa <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    45ae:	8e 81       	ldd	r24, Y+6	; 0x06
    45b0:	8c 31       	cpi	r24, 0x1C	; 28
    45b2:	19 f0       	breq	.+6      	; 0x45ba <HLCD_shiftDisplay+0x2e>
    45b4:	8e 81       	ldd	r24, Y+6	; 0x06
    45b6:	88 31       	cpi	r24, 0x18	; 24
    45b8:	e9 f4       	brne	.+58     	; 0x45f4 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    45ba:	eb 81       	ldd	r30, Y+3	; 0x03
    45bc:	fc 81       	ldd	r31, Y+4	; 0x04
    45be:	80 81       	ld	r24, Z
    45c0:	88 23       	and	r24, r24
    45c2:	e9 f0       	breq	.+58     	; 0x45fe <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    45c4:	eb 81       	ldd	r30, Y+3	; 0x03
    45c6:	fc 81       	ldd	r31, Y+4	; 0x04
    45c8:	80 81       	ld	r24, Z
    45ca:	81 30       	cpi	r24, 0x01	; 1
    45cc:	81 f4       	brne	.+32     	; 0x45ee <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    45ce:	19 82       	std	Y+1, r1	; 0x01
    45d0:	09 c0       	rjmp	.+18     	; 0x45e4 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	9c 81       	ldd	r25, Y+4	; 0x04
    45d6:	6e 81       	ldd	r22, Y+6	; 0x06
    45d8:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    45dc:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	8f 5f       	subi	r24, 0xFF	; 255
    45e2:	89 83       	std	Y+1, r24	; 0x01
    45e4:	99 81       	ldd	r25, Y+1	; 0x01
    45e6:	8d 81       	ldd	r24, Y+5	; 0x05
    45e8:	98 17       	cp	r25, r24
    45ea:	98 f3       	brcs	.-26     	; 0x45d2 <HLCD_shiftDisplay+0x46>
    45ec:	08 c0       	rjmp	.+16     	; 0x45fe <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    45ee:	83 e0       	ldi	r24, 0x03	; 3
    45f0:	8a 83       	std	Y+2, r24	; 0x02
    45f2:	05 c0       	rjmp	.+10     	; 0x45fe <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    45f4:	84 e0       	ldi	r24, 0x04	; 4
    45f6:	8a 83       	std	Y+2, r24	; 0x02
    45f8:	02 c0       	rjmp	.+4      	; 0x45fe <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    45fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4600:	26 96       	adiw	r28, 0x06	; 6
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	cf 91       	pop	r28
    460e:	df 91       	pop	r29
    4610:	08 95       	ret

00004612 <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    4612:	df 93       	push	r29
    4614:	cf 93       	push	r28
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
    461a:	27 97       	sbiw	r28, 0x07	; 7
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	f8 94       	cli
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	9c 83       	std	Y+4, r25	; 0x04
    4628:	8b 83       	std	Y+3, r24	; 0x03
    462a:	7e 83       	std	Y+6, r23	; 0x06
    462c:	6d 83       	std	Y+5, r22	; 0x05
    462e:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	9c 81       	ldd	r25, Y+4	; 0x04
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	09 f4       	brne	.+2      	; 0x463e <HLCD_createNewCustomChar+0x2c>
    463c:	4f c0       	rjmp	.+158    	; 0x46dc <HLCD_createNewCustomChar+0xca>
    463e:	8d 81       	ldd	r24, Y+5	; 0x05
    4640:	9e 81       	ldd	r25, Y+6	; 0x06
    4642:	00 97       	sbiw	r24, 0x00	; 0
    4644:	09 f4       	brne	.+2      	; 0x4648 <HLCD_createNewCustomChar+0x36>
    4646:	4a c0       	rjmp	.+148    	; 0x46dc <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    4648:	8f 81       	ldd	r24, Y+7	; 0x07
    464a:	88 30       	cpi	r24, 0x08	; 8
    464c:	08 f0       	brcs	.+2      	; 0x4650 <HLCD_createNewCustomChar+0x3e>
    464e:	43 c0       	rjmp	.+134    	; 0x46d6 <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4650:	eb 81       	ldd	r30, Y+3	; 0x03
    4652:	fc 81       	ldd	r31, Y+4	; 0x04
    4654:	80 81       	ld	r24, Z
    4656:	88 23       	and	r24, r24
    4658:	09 f4       	brne	.+2      	; 0x465c <HLCD_createNewCustomChar+0x4a>
    465a:	42 c0       	rjmp	.+132    	; 0x46e0 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    465c:	eb 81       	ldd	r30, Y+3	; 0x03
    465e:	fc 81       	ldd	r31, Y+4	; 0x04
    4660:	80 81       	ld	r24, Z
    4662:	81 30       	cpi	r24, 0x01	; 1
    4664:	a9 f5       	brne	.+106    	; 0x46d0 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    4666:	8f 81       	ldd	r24, Y+7	; 0x07
    4668:	88 2f       	mov	r24, r24
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	88 0f       	add	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	88 0f       	add	r24, r24
    4672:	99 1f       	adc	r25, r25
    4674:	88 0f       	add	r24, r24
    4676:	99 1f       	adc	r25, r25
    4678:	80 64       	ori	r24, 0x40	; 64
    467a:	28 2f       	mov	r18, r24
    467c:	8b 81       	ldd	r24, Y+3	; 0x03
    467e:	9c 81       	ldd	r25, Y+4	; 0x04
    4680:	62 2f       	mov	r22, r18
    4682:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    4686:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    4688:	8a 81       	ldd	r24, Y+2	; 0x02
    468a:	88 23       	and	r24, r24
    468c:	d1 f4       	brne	.+52     	; 0x46c2 <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    468e:	19 82       	std	Y+1, r1	; 0x01
    4690:	15 c0       	rjmp	.+42     	; 0x46bc <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	28 2f       	mov	r18, r24
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	8d 81       	ldd	r24, Y+5	; 0x05
    469a:	9e 81       	ldd	r25, Y+6	; 0x06
    469c:	fc 01       	movw	r30, r24
    469e:	e2 0f       	add	r30, r18
    46a0:	f3 1f       	adc	r31, r19
    46a2:	20 81       	ld	r18, Z
    46a4:	8b 81       	ldd	r24, Y+3	; 0x03
    46a6:	9c 81       	ldd	r25, Y+4	; 0x04
    46a8:	62 2f       	mov	r22, r18
    46aa:	0e 94 80 1a 	call	0x3500	; 0x3500 <HLCD_displayChar>
    46ae:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    46b0:	8a 81       	ldd	r24, Y+2	; 0x02
    46b2:	88 23       	and	r24, r24
    46b4:	31 f4       	brne	.+12     	; 0x46c2 <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	8f 5f       	subi	r24, 0xFF	; 255
    46ba:	89 83       	std	Y+1, r24	; 0x01
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	88 30       	cpi	r24, 0x08	; 8
    46c0:	40 f3       	brcs	.-48     	; 0x4692 <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    46c2:	8b 81       	ldd	r24, Y+3	; 0x03
    46c4:	9c 81       	ldd	r25, Y+4	; 0x04
    46c6:	60 e8       	ldi	r22, 0x80	; 128
    46c8:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    46cc:	8a 83       	std	Y+2, r24	; 0x02
    46ce:	08 c0       	rjmp	.+16     	; 0x46e0 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	8a 83       	std	Y+2, r24	; 0x02
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    46d6:	84 e0       	ldi	r24, 0x04	; 4
    46d8:	8a 83       	std	Y+2, r24	; 0x02
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    46e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    46e2:	27 96       	adiw	r28, 0x07	; 7
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	cf 91       	pop	r28
    46f0:	df 91       	pop	r29
    46f2:	08 95       	ret

000046f4 <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    46f4:	df 93       	push	r29
    46f6:	cf 93       	push	r28
    46f8:	00 d0       	rcall	.+0      	; 0x46fa <HLCD_Clr+0x6>
    46fa:	0f 92       	push	r0
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
    4700:	9b 83       	std	Y+3, r25	; 0x03
    4702:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	9b 81       	ldd	r25, Y+3	; 0x03
    470c:	61 e0       	ldi	r22, 0x01	; 1
    470e:	0e 94 14 13 	call	0x2628	; 0x2628 <HLCD_sendCmd>
    4712:	89 83       	std	Y+1, r24	; 0x01
	if(lcdRet == HLCD_OK)
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	88 23       	and	r24, r24
    4718:	39 f4       	brne	.+14     	; 0x4728 <HLCD_Clr+0x34>
	lcdRet = HLCD_changeCursorPosation(ST_ptrLcdCfgInstance,0,0);
    471a:	8a 81       	ldd	r24, Y+2	; 0x02
    471c:	9b 81       	ldd	r25, Y+3	; 0x03
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	0e 94 78 22 	call	0x44f0	; 0x44f0 <HLCD_changeCursorPosation>
    4726:	89 83       	std	Y+1, r24	; 0x01
	else /* Do Nohting */;

	return lcdRet;
    4728:	89 81       	ldd	r24, Y+1	; 0x01
}
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <HKP_init>:

static ST_GPIO_cfg_t arrOfRows[KEYPAD_ROWS_SIZE];
static ST_GPIO_cfg_t arrOfColumns[KEYPAD_COLUMNS_SIZE];


EN_HKP_systemStatus_t HKP_init(ST_HKP_cfg_t const *ST_ptrKeypadInstance) {
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	2e 97       	sbiw	r28, 0x0e	; 14
    4740:	0f b6       	in	r0, 0x3f	; 63
    4742:	f8 94       	cli
    4744:	de bf       	out	0x3e, r29	; 62
    4746:	0f be       	out	0x3f, r0	; 63
    4748:	cd bf       	out	0x3d, r28	; 61
    474a:	9e 87       	std	Y+14, r25	; 0x0e
    474c:	8d 87       	std	Y+13, r24	; 0x0d

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	8b 83       	std	Y+3, r24	; 0x03
	if (PTR_NULL != ST_ptrKeypadInstance) {
    4756:	8d 85       	ldd	r24, Y+13	; 0x0d
    4758:	9e 85       	ldd	r25, Y+14	; 0x0e
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	09 f4       	brne	.+2      	; 0x4760 <HKP_init+0x2a>
    475e:	88 c0       	rjmp	.+272    	; 0x4870 <HKP_init+0x13a>
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    4760:	1a 82       	std	Y+2, r1	; 0x02
    4762:	3b c0       	rjmp	.+118    	; 0x47da <HKP_init+0xa4>
			{
					.pinDirection = GPIO_OUTPUT,
					.logicOnPin = GPIO_HIGH,
					.portName = ST_ptrKeypadInstance->arrOfRowPorts[Rowscounter],
					.pinNumber = ST_ptrKeypadInstance->arrOfRowPins[Rowscounter]
			};
    4764:	8a 81       	ldd	r24, Y+2	; 0x02
    4766:	28 2f       	mov	r18, r24
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	8d 85       	ldd	r24, Y+13	; 0x0d
    476c:	9e 85       	ldd	r25, Y+14	; 0x0e
    476e:	82 0f       	add	r24, r18
    4770:	93 1f       	adc	r25, r19
    4772:	fc 01       	movw	r30, r24
    4774:	34 96       	adiw	r30, 0x04	; 4
    4776:	40 81       	ld	r20, Z
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4780:	9e 85       	ldd	r25, Y+14	; 0x0e
    4782:	fc 01       	movw	r30, r24
    4784:	e2 0f       	add	r30, r18
    4786:	f3 1f       	adc	r31, r19
    4788:	80 81       	ld	r24, Z
    478a:	4d 83       	std	Y+5, r20	; 0x05
    478c:	8e 83       	std	Y+6, r24	; 0x06
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	8f 83       	std	Y+7, r24	; 0x07
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	88 87       	std	Y+8, r24	; 0x08
			gpioRet = GPIO_initPin(&tempStructForRowPin);
    4796:	ce 01       	movw	r24, r28
    4798:	05 96       	adiw	r24, 0x05	; 5
    479a:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    479e:	8b 83       	std	Y+3, r24	; 0x03
			if (gpioRet == GPIO_OK)
    47a0:	8b 81       	ldd	r24, Y+3	; 0x03
    47a2:	88 23       	and	r24, r24
    47a4:	b9 f4       	brne	.+46     	; 0x47d4 <HKP_init+0x9e>
			{
				arrOfRows[Rowscounter] = tempStructForRowPin;
    47a6:	8a 81       	ldd	r24, Y+2	; 0x02
    47a8:	88 2f       	mov	r24, r24
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	fc 01       	movw	r30, r24
    47b6:	e8 52       	subi	r30, 0x28	; 40
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	9e 81       	ldd	r25, Y+6	; 0x06
    47be:	af 81       	ldd	r26, Y+7	; 0x07
    47c0:	b8 85       	ldd	r27, Y+8	; 0x08
    47c2:	80 83       	st	Z, r24
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	a2 83       	std	Z+2, r26	; 0x02
    47c8:	b3 83       	std	Z+3, r27	; 0x03
				kpRet = HKP_OK;
    47ca:	1c 82       	std	Y+4, r1	; 0x04

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	8f 5f       	subi	r24, 0xFF	; 255
    47d0:	8a 83       	std	Y+2, r24	; 0x02
    47d2:	03 c0       	rjmp	.+6      	; 0x47da <HKP_init+0xa4>
				arrOfRows[Rowscounter] = tempStructForRowPin;
				kpRet = HKP_OK;
			}
			else
			{
				kpRet = HKP_NOK;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	8c 83       	std	Y+4, r24	; 0x04
    47d8:	03 c0       	rjmp	.+6      	; 0x47e0 <HKP_init+0xaa>

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	84 30       	cpi	r24, 0x04	; 4
    47de:	10 f2       	brcs	.-124    	; 0x4764 <HKP_init+0x2e>
			{
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
    47e0:	8b 81       	ldd	r24, Y+3	; 0x03
    47e2:	88 23       	and	r24, r24
    47e4:	09 f0       	breq	.+2      	; 0x47e8 <HKP_init+0xb2>
    47e6:	41 c0       	rjmp	.+130    	; 0x486a <HKP_init+0x134>
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    47e8:	19 82       	std	Y+1, r1	; 0x01
    47ea:	3b c0       	rjmp	.+118    	; 0x4862 <HKP_init+0x12c>
				{
						.pinDirection = GPIO_INPUT,
						.logicOnPin = GPIO_HIGH,
						.portName = ST_ptrKeypadInstance->arrOfColumnPorts[Colscounter],
						.pinNumber = ST_ptrKeypadInstance->arrOfColumnPins[Colscounter]
				};
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	28 2f       	mov	r18, r24
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f6:	82 0f       	add	r24, r18
    47f8:	93 1f       	adc	r25, r19
    47fa:	fc 01       	movw	r30, r24
    47fc:	3c 96       	adiw	r30, 0x0c	; 12
    47fe:	40 81       	ld	r20, Z
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	28 2f       	mov	r18, r24
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	8d 85       	ldd	r24, Y+13	; 0x0d
    4808:	9e 85       	ldd	r25, Y+14	; 0x0e
    480a:	82 0f       	add	r24, r18
    480c:	93 1f       	adc	r25, r19
    480e:	fc 01       	movw	r30, r24
    4810:	38 96       	adiw	r30, 0x08	; 8
    4812:	80 81       	ld	r24, Z
    4814:	49 87       	std	Y+9, r20	; 0x09
    4816:	8a 87       	std	Y+10, r24	; 0x0a
    4818:	1b 86       	std	Y+11, r1	; 0x0b
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	8c 87       	std	Y+12, r24	; 0x0c
				gpioRet = GPIO_initPin(&tempStructForColPin);
    481e:	ce 01       	movw	r24, r28
    4820:	09 96       	adiw	r24, 0x09	; 9
    4822:	0e 94 2f 08 	call	0x105e	; 0x105e <GPIO_initPin>
    4826:	8b 83       	std	Y+3, r24	; 0x03
				if (gpioRet == GPIO_OK)
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	88 23       	and	r24, r24
    482c:	b9 f4       	brne	.+46     	; 0x485c <HKP_init+0x126>
				{
					arrOfColumns[Colscounter] = tempStructForColPin;
    482e:	89 81       	ldd	r24, Y+1	; 0x01
    4830:	88 2f       	mov	r24, r24
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	88 0f       	add	r24, r24
    4836:	99 1f       	adc	r25, r25
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	fc 01       	movw	r30, r24
    483e:	e8 51       	subi	r30, 0x18	; 24
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	ab 85       	ldd	r26, Y+11	; 0x0b
    4848:	bc 85       	ldd	r27, Y+12	; 0x0c
    484a:	80 83       	st	Z, r24
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	a2 83       	std	Z+2, r26	; 0x02
    4850:	b3 83       	std	Z+3, r27	; 0x03
					kpRet = HKP_OK;
    4852:	1c 82       	std	Y+4, r1	; 0x04
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	8f 5f       	subi	r24, 0xFF	; 255
    4858:	89 83       	std	Y+1, r24	; 0x01
    485a:	03 c0       	rjmp	.+6      	; 0x4862 <HKP_init+0x12c>
					arrOfColumns[Colscounter] = tempStructForColPin;
					kpRet = HKP_OK;
				}
				else
				{
					kpRet = HKP_NOK;
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	8c 83       	std	Y+4, r24	; 0x04
    4860:	09 c0       	rjmp	.+18     	; 0x4874 <HKP_init+0x13e>
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	84 30       	cpi	r24, 0x04	; 4
    4866:	10 f2       	brcs	.-124    	; 0x47ec <HKP_init+0xb6>
    4868:	05 c0       	rjmp	.+10     	; 0x4874 <HKP_init+0x13e>

			}
		}
		else
		{
			kpRet = HKP_NOK;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	8c 83       	std	Y+4, r24	; 0x04
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <HKP_init+0x13e>
		}

	}
	else
	{
		kpRet = HKP_PTR_NULL;
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    4874:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4876:	2e 96       	adiw	r28, 0x0e	; 14
    4878:	0f b6       	in	r0, 0x3f	; 63
    487a:	f8 94       	cli
    487c:	de bf       	out	0x3e, r29	; 62
    487e:	0f be       	out	0x3f, r0	; 63
    4880:	cd bf       	out	0x3d, r28	; 61
    4882:	cf 91       	pop	r28
    4884:	df 91       	pop	r29
    4886:	08 95       	ret

00004888 <HKP_scanningForPressedBtn>:


EN_HKP_systemStatus_t
HKP_scanningForPressedBtn(uint8_t *pressedBtnVal) {
    4888:	df 93       	push	r29
    488a:	cf 93       	push	r28
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	27 97       	sbiw	r28, 0x07	; 7
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	9f 83       	std	Y+7, r25	; 0x07
    489e:	8e 83       	std	Y+6, r24	; 0x06

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
    48a8:	8e 81       	ldd	r24, Y+6	; 0x06
    48aa:	9f 81       	ldd	r25, Y+7	; 0x07
    48ac:	00 97       	sbiw	r24, 0x00	; 0
    48ae:	09 f4       	brne	.+2      	; 0x48b2 <HKP_scanningForPressedBtn+0x2a>
    48b0:	69 c0       	rjmp	.+210    	; 0x4984 <HKP_scanningForPressedBtn+0xfc>
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    48b2:	1a 82       	std	Y+2, r1	; 0x02
    48b4:	62 c0       	rjmp	.+196    	; 0x497a <HKP_scanningForPressedBtn+0xf2>

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);
    48b6:	8a 81       	ldd	r24, Y+2	; 0x02
    48b8:	88 2f       	mov	r24, r24
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	88 0f       	add	r24, r24
    48be:	99 1f       	adc	r25, r25
    48c0:	88 0f       	add	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	88 52       	subi	r24, 0x28	; 40
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    48ce:	8b 83       	std	Y+3, r24	; 0x03

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    48d0:	19 82       	std	Y+1, r1	; 0x01
    48d2:	3f c0       	rjmp	.+126    	; 0x4952 <HKP_scanningForPressedBtn+0xca>

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	88 2f       	mov	r24, r24
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	88 51       	subi	r24, 0x18	; 24
    48e4:	9f 4f       	sbci	r25, 0xFF	; 255
    48e6:	9e 01       	movw	r18, r28
    48e8:	2b 5f       	subi	r18, 0xFB	; 251
    48ea:	3f 4f       	sbci	r19, 0xFF	; 255
    48ec:	b9 01       	movw	r22, r18
    48ee:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_readPinLogic>
    48f2:	8b 83       	std	Y+3, r24	; 0x03

				if (valOfPressedBtn == GPIO_LOW) {
    48f4:	8d 81       	ldd	r24, Y+5	; 0x05
    48f6:	88 23       	and	r24, r24
    48f8:	49 f5       	brne	.+82     	; 0x494c <HKP_scanningForPressedBtn+0xc4>
    48fa:	10 c0       	rjmp	.+32     	; 0x491c <HKP_scanningForPressedBtn+0x94>
					while(valOfPressedBtn == GPIO_LOW)
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	88 2f       	mov	r24, r24
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	88 0f       	add	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	88 0f       	add	r24, r24
    4908:	99 1f       	adc	r25, r25
    490a:	88 51       	subi	r24, 0x18	; 24
    490c:	9f 4f       	sbci	r25, 0xFF	; 255
    490e:	9e 01       	movw	r18, r28
    4910:	2b 5f       	subi	r18, 0xFB	; 251
    4912:	3f 4f       	sbci	r19, 0xFF	; 255
    4914:	b9 01       	movw	r22, r18
    4916:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_readPinLogic>
    491a:	8b 83       	std	Y+3, r24	; 0x03
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);

				if (valOfPressedBtn == GPIO_LOW) {
					while(valOfPressedBtn == GPIO_LOW)
    491c:	8d 81       	ldd	r24, Y+5	; 0x05
    491e:	88 23       	and	r24, r24
    4920:	69 f3       	breq	.-38     	; 0x48fc <HKP_scanningForPressedBtn+0x74>
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
					}
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	48 2f       	mov	r20, r24
    4926:	50 e0       	ldi	r21, 0x00	; 0
    4928:	89 81       	ldd	r24, Y+1	; 0x01
    492a:	28 2f       	mov	r18, r24
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	ca 01       	movw	r24, r20
    4930:	88 0f       	add	r24, r24
    4932:	99 1f       	adc	r25, r25
    4934:	88 0f       	add	r24, r24
    4936:	99 1f       	adc	r25, r25
    4938:	82 0f       	add	r24, r18
    493a:	93 1f       	adc	r25, r19
    493c:	fc 01       	movw	r30, r24
    493e:	e6 56       	subi	r30, 0x66	; 102
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	80 81       	ld	r24, Z
    4944:	ee 81       	ldd	r30, Y+6	; 0x06
    4946:	ff 81       	ldd	r31, Y+7	; 0x07
    4948:	80 83       	st	Z, r24
    494a:	07 c0       	rjmp	.+14     	; 0x495a <HKP_scanningForPressedBtn+0xd2>

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    494c:	89 81       	ldd	r24, Y+1	; 0x01
    494e:	8f 5f       	subi	r24, 0xFF	; 255
    4950:	89 83       	std	Y+1, r24	; 0x01
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	84 30       	cpi	r24, 0x04	; 4
    4956:	08 f4       	brcc	.+2      	; 0x495a <HKP_scanningForPressedBtn+0xd2>
    4958:	bd cf       	rjmp	.-134    	; 0x48d4 <HKP_scanningForPressedBtn+0x4c>
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
					break;
				}
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
    495a:	8a 81       	ldd	r24, Y+2	; 0x02
    495c:	88 2f       	mov	r24, r24
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	88 0f       	add	r24, r24
    4962:	99 1f       	adc	r25, r25
    4964:	88 0f       	add	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	88 52       	subi	r24, 0x28	; 40
    496a:	9f 4f       	sbci	r25, 0xFF	; 255
    496c:	61 e0       	ldi	r22, 0x01	; 1
    496e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePinLogic>
    4972:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    4974:	8a 81       	ldd	r24, Y+2	; 0x02
    4976:	8f 5f       	subi	r24, 0xFF	; 255
    4978:	8a 83       	std	Y+2, r24	; 0x02
    497a:	8a 81       	ldd	r24, Y+2	; 0x02
    497c:	84 30       	cpi	r24, 0x04	; 4
    497e:	08 f4       	brcc	.+2      	; 0x4982 <HKP_scanningForPressedBtn+0xfa>
    4980:	9a cf       	rjmp	.-204    	; 0x48b6 <HKP_scanningForPressedBtn+0x2e>
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <HKP_scanningForPressedBtn+0x100>
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
		}
	} else {
		kpRet = HKP_PTR_NULL;
    4984:	82 e0       	ldi	r24, 0x02	; 2
    4986:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    4988:	8c 81       	ldd	r24, Y+4	; 0x04
}
    498a:	27 96       	adiw	r28, 0x07	; 7
    498c:	0f b6       	in	r0, 0x3f	; 63
    498e:	f8 94       	cli
    4990:	de bf       	out	0x3e, r29	; 62
    4992:	0f be       	out	0x3f, r0	; 63
    4994:	cd bf       	out	0x3d, r28	; 61
    4996:	cf 91       	pop	r28
    4998:	df 91       	pop	r29
    499a:	08 95       	ret

0000499c <appInit>:
/*************************************************************************/

#include "app.h"

void appInit(void)
{
    499c:	df 93       	push	r29
    499e:	cf 93       	push	r28
    49a0:	cd b7       	in	r28, 0x3d	; 61
    49a2:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
    49a4:	8a ea       	ldi	r24, 0xAA	; 170
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <HLCD_init>
	HKP_init(&myKeypad);
    49ac:	88 eb       	ldi	r24, 0xB8	; 184
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 9b 23 	call	0x4736	; 0x4736 <HKP_init>
}
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <appMain>:
void appMain(void)
{
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		CALC_interface();
    49c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CALC_interface>
    49c6:	fd cf       	rjmp	.-6      	; 0x49c2 <appMain+0x8>

000049c8 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    49c8:	df 93       	push	r29
    49ca:	cf 93       	push	r28
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
	appInit();
    49d0:	0e 94 ce 24 	call	0x499c	; 0x499c <appInit>
	appMain();
    49d4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <appMain>
}
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <__mulsi3>:
    49de:	62 9f       	mul	r22, r18
    49e0:	d0 01       	movw	r26, r0
    49e2:	73 9f       	mul	r23, r19
    49e4:	f0 01       	movw	r30, r0
    49e6:	82 9f       	mul	r24, r18
    49e8:	e0 0d       	add	r30, r0
    49ea:	f1 1d       	adc	r31, r1
    49ec:	64 9f       	mul	r22, r20
    49ee:	e0 0d       	add	r30, r0
    49f0:	f1 1d       	adc	r31, r1
    49f2:	92 9f       	mul	r25, r18
    49f4:	f0 0d       	add	r31, r0
    49f6:	83 9f       	mul	r24, r19
    49f8:	f0 0d       	add	r31, r0
    49fa:	74 9f       	mul	r23, r20
    49fc:	f0 0d       	add	r31, r0
    49fe:	65 9f       	mul	r22, r21
    4a00:	f0 0d       	add	r31, r0
    4a02:	99 27       	eor	r25, r25
    4a04:	72 9f       	mul	r23, r18
    4a06:	b0 0d       	add	r27, r0
    4a08:	e1 1d       	adc	r30, r1
    4a0a:	f9 1f       	adc	r31, r25
    4a0c:	63 9f       	mul	r22, r19
    4a0e:	b0 0d       	add	r27, r0
    4a10:	e1 1d       	adc	r30, r1
    4a12:	f9 1f       	adc	r31, r25
    4a14:	bd 01       	movw	r22, r26
    4a16:	cf 01       	movw	r24, r30
    4a18:	11 24       	eor	r1, r1
    4a1a:	08 95       	ret

00004a1c <__udivmodsi4>:
    4a1c:	a1 e2       	ldi	r26, 0x21	; 33
    4a1e:	1a 2e       	mov	r1, r26
    4a20:	aa 1b       	sub	r26, r26
    4a22:	bb 1b       	sub	r27, r27
    4a24:	fd 01       	movw	r30, r26
    4a26:	0d c0       	rjmp	.+26     	; 0x4a42 <__udivmodsi4_ep>

00004a28 <__udivmodsi4_loop>:
    4a28:	aa 1f       	adc	r26, r26
    4a2a:	bb 1f       	adc	r27, r27
    4a2c:	ee 1f       	adc	r30, r30
    4a2e:	ff 1f       	adc	r31, r31
    4a30:	a2 17       	cp	r26, r18
    4a32:	b3 07       	cpc	r27, r19
    4a34:	e4 07       	cpc	r30, r20
    4a36:	f5 07       	cpc	r31, r21
    4a38:	20 f0       	brcs	.+8      	; 0x4a42 <__udivmodsi4_ep>
    4a3a:	a2 1b       	sub	r26, r18
    4a3c:	b3 0b       	sbc	r27, r19
    4a3e:	e4 0b       	sbc	r30, r20
    4a40:	f5 0b       	sbc	r31, r21

00004a42 <__udivmodsi4_ep>:
    4a42:	66 1f       	adc	r22, r22
    4a44:	77 1f       	adc	r23, r23
    4a46:	88 1f       	adc	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	1a 94       	dec	r1
    4a4c:	69 f7       	brne	.-38     	; 0x4a28 <__udivmodsi4_loop>
    4a4e:	60 95       	com	r22
    4a50:	70 95       	com	r23
    4a52:	80 95       	com	r24
    4a54:	90 95       	com	r25
    4a56:	9b 01       	movw	r18, r22
    4a58:	ac 01       	movw	r20, r24
    4a5a:	bd 01       	movw	r22, r26
    4a5c:	cf 01       	movw	r24, r30
    4a5e:	08 95       	ret

00004a60 <__prologue_saves__>:
    4a60:	2f 92       	push	r2
    4a62:	3f 92       	push	r3
    4a64:	4f 92       	push	r4
    4a66:	5f 92       	push	r5
    4a68:	6f 92       	push	r6
    4a6a:	7f 92       	push	r7
    4a6c:	8f 92       	push	r8
    4a6e:	9f 92       	push	r9
    4a70:	af 92       	push	r10
    4a72:	bf 92       	push	r11
    4a74:	cf 92       	push	r12
    4a76:	df 92       	push	r13
    4a78:	ef 92       	push	r14
    4a7a:	ff 92       	push	r15
    4a7c:	0f 93       	push	r16
    4a7e:	1f 93       	push	r17
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
    4a84:	cd b7       	in	r28, 0x3d	; 61
    4a86:	de b7       	in	r29, 0x3e	; 62
    4a88:	ca 1b       	sub	r28, r26
    4a8a:	db 0b       	sbc	r29, r27
    4a8c:	0f b6       	in	r0, 0x3f	; 63
    4a8e:	f8 94       	cli
    4a90:	de bf       	out	0x3e, r29	; 62
    4a92:	0f be       	out	0x3f, r0	; 63
    4a94:	cd bf       	out	0x3d, r28	; 61
    4a96:	09 94       	ijmp

00004a98 <__epilogue_restores__>:
    4a98:	2a 88       	ldd	r2, Y+18	; 0x12
    4a9a:	39 88       	ldd	r3, Y+17	; 0x11
    4a9c:	48 88       	ldd	r4, Y+16	; 0x10
    4a9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aaa:	b9 84       	ldd	r11, Y+9	; 0x09
    4aac:	c8 84       	ldd	r12, Y+8	; 0x08
    4aae:	df 80       	ldd	r13, Y+7	; 0x07
    4ab0:	ee 80       	ldd	r14, Y+6	; 0x06
    4ab2:	fd 80       	ldd	r15, Y+5	; 0x05
    4ab4:	0c 81       	ldd	r16, Y+4	; 0x04
    4ab6:	1b 81       	ldd	r17, Y+3	; 0x03
    4ab8:	aa 81       	ldd	r26, Y+2	; 0x02
    4aba:	b9 81       	ldd	r27, Y+1	; 0x01
    4abc:	ce 0f       	add	r28, r30
    4abe:	d1 1d       	adc	r29, r1
    4ac0:	0f b6       	in	r0, 0x3f	; 63
    4ac2:	f8 94       	cli
    4ac4:	de bf       	out	0x3e, r29	; 62
    4ac6:	0f be       	out	0x3f, r0	; 63
    4ac8:	cd bf       	out	0x3d, r28	; 61
    4aca:	ed 01       	movw	r28, r26
    4acc:	08 95       	ret

00004ace <atoi>:
    4ace:	fc 01       	movw	r30, r24
    4ad0:	88 27       	eor	r24, r24
    4ad2:	99 27       	eor	r25, r25
    4ad4:	e8 94       	clt
    4ad6:	21 91       	ld	r18, Z+
    4ad8:	20 32       	cpi	r18, 0x20	; 32
    4ada:	e9 f3       	breq	.-6      	; 0x4ad6 <atoi+0x8>
    4adc:	29 30       	cpi	r18, 0x09	; 9
    4ade:	10 f0       	brcs	.+4      	; 0x4ae4 <atoi+0x16>
    4ae0:	2e 30       	cpi	r18, 0x0E	; 14
    4ae2:	c8 f3       	brcs	.-14     	; 0x4ad6 <atoi+0x8>
    4ae4:	2b 32       	cpi	r18, 0x2B	; 43
    4ae6:	41 f0       	breq	.+16     	; 0x4af8 <atoi+0x2a>
    4ae8:	2d 32       	cpi	r18, 0x2D	; 45
    4aea:	39 f4       	brne	.+14     	; 0x4afa <atoi+0x2c>
    4aec:	68 94       	set
    4aee:	04 c0       	rjmp	.+8      	; 0x4af8 <atoi+0x2a>
    4af0:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__mulhi_const_10>
    4af4:	82 0f       	add	r24, r18
    4af6:	91 1d       	adc	r25, r1
    4af8:	21 91       	ld	r18, Z+
    4afa:	20 53       	subi	r18, 0x30	; 48
    4afc:	2a 30       	cpi	r18, 0x0A	; 10
    4afe:	c0 f3       	brcs	.-16     	; 0x4af0 <atoi+0x22>
    4b00:	1e f4       	brtc	.+6      	; 0x4b08 <atoi+0x3a>
    4b02:	90 95       	com	r25
    4b04:	81 95       	neg	r24
    4b06:	9f 4f       	sbci	r25, 0xFF	; 255
    4b08:	08 95       	ret

00004b0a <memset>:
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <memset+0x6>
    4b0e:	6d 93       	st	X+, r22
    4b10:	41 50       	subi	r20, 0x01	; 1
    4b12:	50 40       	sbci	r21, 0x00	; 0
    4b14:	e0 f7       	brcc	.-8      	; 0x4b0e <memset+0x4>
    4b16:	08 95       	ret

00004b18 <itoa>:
    4b18:	fb 01       	movw	r30, r22
    4b1a:	9f 01       	movw	r18, r30
    4b1c:	e8 94       	clt
    4b1e:	42 30       	cpi	r20, 0x02	; 2
    4b20:	c4 f0       	brlt	.+48     	; 0x4b52 <itoa+0x3a>
    4b22:	45 32       	cpi	r20, 0x25	; 37
    4b24:	b4 f4       	brge	.+44     	; 0x4b52 <itoa+0x3a>
    4b26:	4a 30       	cpi	r20, 0x0A	; 10
    4b28:	29 f4       	brne	.+10     	; 0x4b34 <itoa+0x1c>
    4b2a:	97 fb       	bst	r25, 7
    4b2c:	1e f4       	brtc	.+6      	; 0x4b34 <itoa+0x1c>
    4b2e:	90 95       	com	r25
    4b30:	81 95       	neg	r24
    4b32:	9f 4f       	sbci	r25, 0xFF	; 255
    4b34:	64 2f       	mov	r22, r20
    4b36:	77 27       	eor	r23, r23
    4b38:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__udivmodhi4>
    4b3c:	80 5d       	subi	r24, 0xD0	; 208
    4b3e:	8a 33       	cpi	r24, 0x3A	; 58
    4b40:	0c f0       	brlt	.+2      	; 0x4b44 <itoa+0x2c>
    4b42:	89 5d       	subi	r24, 0xD9	; 217
    4b44:	81 93       	st	Z+, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	00 97       	sbiw	r24, 0x00	; 0
    4b4a:	a1 f7       	brne	.-24     	; 0x4b34 <itoa+0x1c>
    4b4c:	16 f4       	brtc	.+4      	; 0x4b52 <itoa+0x3a>
    4b4e:	5d e2       	ldi	r21, 0x2D	; 45
    4b50:	51 93       	st	Z+, r21
    4b52:	10 82       	st	Z, r1
    4b54:	c9 01       	movw	r24, r18
    4b56:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <strrev>

00004b5a <__mulhi_const_10>:
    4b5a:	7a e0       	ldi	r23, 0x0A	; 10
    4b5c:	97 9f       	mul	r25, r23
    4b5e:	90 2d       	mov	r25, r0
    4b60:	87 9f       	mul	r24, r23
    4b62:	80 2d       	mov	r24, r0
    4b64:	91 0d       	add	r25, r1
    4b66:	11 24       	eor	r1, r1
    4b68:	08 95       	ret

00004b6a <strrev>:
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	67 2f       	mov	r22, r23
    4b70:	71 91       	ld	r23, Z+
    4b72:	77 23       	and	r23, r23
    4b74:	e1 f7       	brne	.-8      	; 0x4b6e <strrev+0x4>
    4b76:	32 97       	sbiw	r30, 0x02	; 2
    4b78:	04 c0       	rjmp	.+8      	; 0x4b82 <strrev+0x18>
    4b7a:	7c 91       	ld	r23, X
    4b7c:	6d 93       	st	X+, r22
    4b7e:	70 83       	st	Z, r23
    4b80:	62 91       	ld	r22, -Z
    4b82:	ae 17       	cp	r26, r30
    4b84:	bf 07       	cpc	r27, r31
    4b86:	c8 f3       	brcs	.-14     	; 0x4b7a <strrev+0x10>
    4b88:	08 95       	ret

00004b8a <__udivmodhi4>:
    4b8a:	aa 1b       	sub	r26, r26
    4b8c:	bb 1b       	sub	r27, r27
    4b8e:	51 e1       	ldi	r21, 0x11	; 17
    4b90:	07 c0       	rjmp	.+14     	; 0x4ba0 <__udivmodhi4_ep>

00004b92 <__udivmodhi4_loop>:
    4b92:	aa 1f       	adc	r26, r26
    4b94:	bb 1f       	adc	r27, r27
    4b96:	a6 17       	cp	r26, r22
    4b98:	b7 07       	cpc	r27, r23
    4b9a:	10 f0       	brcs	.+4      	; 0x4ba0 <__udivmodhi4_ep>
    4b9c:	a6 1b       	sub	r26, r22
    4b9e:	b7 0b       	sbc	r27, r23

00004ba0 <__udivmodhi4_ep>:
    4ba0:	88 1f       	adc	r24, r24
    4ba2:	99 1f       	adc	r25, r25
    4ba4:	5a 95       	dec	r21
    4ba6:	a9 f7       	brne	.-22     	; 0x4b92 <__udivmodhi4_loop>
    4ba8:	80 95       	com	r24
    4baa:	90 95       	com	r25
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	08 95       	ret

00004bb2 <_exit>:
    4bb2:	f8 94       	cli

00004bb4 <__stop_program>:
    4bb4:	ff cf       	rjmp	.-2      	; 0x4bb4 <__stop_program>
