
13_Lec_7_Lab_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00004b0c  00004ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080019e  0080019e  00004cde  2**0
                  ALLOC
  3 .stab         0000462c  00000000  00000000  00004ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f92  00000000  00000000  0000930c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000c29e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000c41e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000e600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000f770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010774  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00010bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 24 	call	0x49fa	; 0x49fa <main>
      8a:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <GPIO_initPin+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	b1 f0       	breq	.+44     	; 0xd1e <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     cf2:	ea 81       	ldd	r30, Y+2	; 0x02
     cf4:	fb 81       	ldd	r31, Y+3	; 0x03
     cf6:	22 81       	ldd	r18, Z+2	; 0x02
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	62 2f       	mov	r22, r18
     cfe:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_changePinDir>
     d02:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 23       	and	r24, r24
     d08:	61 f4       	brne	.+24     	; 0xd22 <GPIO_initPin+0x4c>
			ret =
     d0a:	ea 81       	ldd	r30, Y+2	; 0x02
     d0c:	fb 81       	ldd	r31, Y+3	; 0x03
     d0e:	23 81       	ldd	r18, Z+3	; 0x03
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	62 2f       	mov	r22, r18
     d16:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <GPIO_changePinDir+0x6>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <GPIO_changePinDir+0x8>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <GPIO_changePinDir+0xa>
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9b 83       	std	Y+3, r25	; 0x03
     d40:	8a 83       	std	Y+2, r24	; 0x02
     d42:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	9b 81       	ldd	r25, Y+3	; 0x03
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	09 f4       	brne	.+2      	; 0xd52 <GPIO_changePinDir+0x22>
     d50:	68 c0       	rjmp	.+208    	; 0xe22 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	3e 83       	std	Y+6, r19	; 0x06
     d5a:	2d 83       	std	Y+5, r18	; 0x05
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	31 f0       	breq	.+12     	; 0xd70 <GPIO_changePinDir+0x40>
     d64:	2d 81       	ldd	r18, Y+5	; 0x05
     d66:	3e 81       	ldd	r19, Y+6	; 0x06
     d68:	21 30       	cpi	r18, 0x01	; 1
     d6a:	31 05       	cpc	r19, r1
     d6c:	71 f1       	breq	.+92     	; 0xdca <GPIO_changePinDir+0x9a>
     d6e:	5b c0       	rjmp	.+182    	; 0xe26 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     d70:	ea 81       	ldd	r30, Y+2	; 0x02
     d72:	fb 81       	ldd	r31, Y+3	; 0x03
     d74:	80 81       	ld	r24, Z
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	fc 01       	movw	r30, r24
     d80:	e8 59       	subi	r30, 0x98	; 152
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	a0 81       	ld	r26, Z
     d86:	b1 81       	ldd	r27, Z+1	; 0x01
     d88:	ea 81       	ldd	r30, Y+2	; 0x02
     d8a:	fb 81       	ldd	r31, Y+3	; 0x03
     d8c:	80 81       	ld	r24, Z
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	fc 01       	movw	r30, r24
     d98:	e8 59       	subi	r30, 0x98	; 152
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	01 90       	ld	r0, Z+
     d9e:	f0 81       	ld	r31, Z
     da0:	e0 2d       	mov	r30, r0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	ea 81       	ldd	r30, Y+2	; 0x02
     da8:	fb 81       	ldd	r31, Y+3	; 0x03
     daa:	81 81       	ldd	r24, Z+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <GPIO_changePinDir+0x8c>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <GPIO_changePinDir+0x88>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     dc6:	19 82       	std	Y+1, r1	; 0x01
     dc8:	2e c0       	rjmp	.+92     	; 0xe26 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     dca:	ea 81       	ldd	r30, Y+2	; 0x02
     dcc:	fb 81       	ldd	r31, Y+3	; 0x03
     dce:	80 81       	ld	r24, Z
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	fc 01       	movw	r30, r24
     dda:	e8 59       	subi	r30, 0x98	; 152
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	a0 81       	ld	r26, Z
     de0:	b1 81       	ldd	r27, Z+1	; 0x01
     de2:	ea 81       	ldd	r30, Y+2	; 0x02
     de4:	fb 81       	ldd	r31, Y+3	; 0x03
     de6:	80 81       	ld	r24, Z
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	fc 01       	movw	r30, r24
     df2:	e8 59       	subi	r30, 0x98	; 152
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	01 90       	ld	r0, Z+
     df8:	f0 81       	ld	r31, Z
     dfa:	e0 2d       	mov	r30, r0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	ea 81       	ldd	r30, Y+2	; 0x02
     e02:	fb 81       	ldd	r31, Y+3	; 0x03
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_changePinDir+0xe6>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_changePinDir+0xe2>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e26:	89 81       	ldd	r24, Y+1	; 0x01
}
     e28:	26 96       	adiw	r28, 0x06	; 6
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <GPIO_writePinLogic+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <GPIO_writePinLogic+0x8>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <GPIO_writePinLogic+0xa>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	9b 81       	ldd	r25, Y+3	; 0x03
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	09 f4       	brne	.+2      	; 0xe5c <GPIO_writePinLogic+0x22>
     e5a:	68 c0       	rjmp	.+208    	; 0xf2c <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	3e 83       	std	Y+6, r19	; 0x06
     e64:	2d 83       	std	Y+5, r18	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	31 f0       	breq	.+12     	; 0xe7a <GPIO_writePinLogic+0x40>
     e6e:	2d 81       	ldd	r18, Y+5	; 0x05
     e70:	3e 81       	ldd	r19, Y+6	; 0x06
     e72:	21 30       	cpi	r18, 0x01	; 1
     e74:	31 05       	cpc	r19, r1
     e76:	71 f1       	breq	.+92     	; 0xed4 <GPIO_writePinLogic+0x9a>
     e78:	5b c0       	rjmp	.+182    	; 0xf30 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	fc 01       	movw	r30, r24
     e8a:	e0 59       	subi	r30, 0x90	; 144
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	a0 81       	ld	r26, Z
     e90:	b1 81       	ldd	r27, Z+1	; 0x01
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	80 81       	ld	r24, Z
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	fc 01       	movw	r30, r24
     ea2:	e0 59       	subi	r30, 0x90	; 144
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	01 90       	ld	r0, Z+
     ea8:	f0 81       	ld	r31, Z
     eaa:	e0 2d       	mov	r30, r0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	ea 81       	ldd	r30, Y+2	; 0x02
     eb2:	fb 81       	ldd	r31, Y+3	; 0x03
     eb4:	81 81       	ldd	r24, Z+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_writePinLogic+0x8c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_writePinLogic+0x88>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     ed0:	19 82       	std	Y+1, r1	; 0x01
     ed2:	2e c0       	rjmp	.+92     	; 0xf30 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     ed4:	ea 81       	ldd	r30, Y+2	; 0x02
     ed6:	fb 81       	ldd	r31, Y+3	; 0x03
     ed8:	80 81       	ld	r24, Z
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	fc 01       	movw	r30, r24
     ee4:	e0 59       	subi	r30, 0x90	; 144
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	a0 81       	ld	r26, Z
     eea:	b1 81       	ldd	r27, Z+1	; 0x01
     eec:	ea 81       	ldd	r30, Y+2	; 0x02
     eee:	fb 81       	ldd	r31, Y+3	; 0x03
     ef0:	80 81       	ld	r24, Z
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	fc 01       	movw	r30, r24
     efc:	e0 59       	subi	r30, 0x90	; 144
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	01 90       	ld	r0, Z+
     f02:	f0 81       	ld	r31, Z
     f04:	e0 2d       	mov	r30, r0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_writePinLogic+0xe6>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_writePinLogic+0xe2>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
}
     f32:	26 96       	adiw	r28, 0x06	; 6
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_readPinLogic+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_readPinLogic+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9b 83       	std	Y+3, r25	; 0x03
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	7d 83       	std	Y+5, r23	; 0x05
     f58:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	11 f1       	breq	.+68     	; 0xfaa <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	fc 01       	movw	r30, r24
     f76:	e8 58       	subi	r30, 0x88	; 136
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	01 90       	ld	r0, Z+
     f7c:	f0 81       	ld	r31, Z
     f7e:	e0 2d       	mov	r30, r0
     f80:	80 81       	ld	r24, Z
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	ea 81       	ldd	r30, Y+2	; 0x02
     f88:	fb 81       	ldd	r31, Y+3	; 0x03
     f8a:	81 81       	ldd	r24, Z+1	; 0x01
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a9 01       	movw	r20, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_readPinLogic+0x54>
     f94:	55 95       	asr	r21
     f96:	47 95       	ror	r20
     f98:	8a 95       	dec	r24
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_readPinLogic+0x50>
     f9c:	ca 01       	movw	r24, r20
     f9e:	81 70       	andi	r24, 0x01	; 1
     fa0:	ec 81       	ldd	r30, Y+4	; 0x04
     fa2:	fd 81       	ldd	r31, Y+5	; 0x05
     fa4:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <GPIO_togglePinLogic+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	61 f1       	breq	.+88     	; 0x1034 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     fdc:	ea 81       	ldd	r30, Y+2	; 0x02
     fde:	fb 81       	ldd	r31, Y+3	; 0x03
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	fc 01       	movw	r30, r24
     fec:	e0 59       	subi	r30, 0x90	; 144
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	a0 81       	ld	r26, Z
     ff2:	b1 81       	ldd	r27, Z+1	; 0x01
     ff4:	ea 81       	ldd	r30, Y+2	; 0x02
     ff6:	fb 81       	ldd	r31, Y+3	; 0x03
     ff8:	80 81       	ld	r24, Z
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e0 59       	subi	r30, 0x90	; 144
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	01 90       	ld	r0, Z+
    100a:	f0 81       	ld	r31, Z
    100c:	e0 2d       	mov	r30, r0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	ea 81       	ldd	r30, Y+2	; 0x02
    1014:	fb 81       	ldd	r31, Y+3	; 0x03
    1016:	81 81       	ldd	r24, Z+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_togglePinLogic+0x68>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_togglePinLogic+0x64>
    102c:	84 27       	eor	r24, r20
    102e:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	28 97       	sbiw	r28, 0x08	; 8
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
    105e:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	38 87       	std	Y+8, r19	; 0x08
    106c:	2f 83       	std	Y+7, r18	; 0x07
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	98 85       	ldd	r25, Y+8	; 0x08
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	31 f0       	breq	.+12     	; 0x1082 <GPIO_initPort+0x3c>
    1076:	2f 81       	ldd	r18, Y+7	; 0x07
    1078:	38 85       	ldd	r19, Y+8	; 0x08
    107a:	21 30       	cpi	r18, 0x01	; 1
    107c:	31 05       	cpc	r19, r1
    107e:	79 f0       	breq	.+30     	; 0x109e <GPIO_initPort+0x58>
    1080:	1c c0       	rjmp	.+56     	; 0x10ba <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	fc 01       	movw	r30, r24
    108e:	e8 59       	subi	r30, 0x98	; 152
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	01 90       	ld	r0, Z+
    1094:	f0 81       	ld	r31, Z
    1096:	e0 2d       	mov	r30, r0
    1098:	10 82       	st	Z, r1
		ret = GPIO_OK;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e8 59       	subi	r30, 0x98	; 152
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	80 83       	st	Z, r24
		ret = GPIO_OK;
    10b8:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3e 83       	std	Y+6, r19	; 0x06
    10c2:	2d 83       	std	Y+5, r18	; 0x05
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <GPIO_initPort+0x92>
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	21 30       	cpi	r18, 0x01	; 1
    10d2:	31 05       	cpc	r19, r1
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <GPIO_initPort+0xae>
    10d6:	1c c0       	rjmp	.+56     	; 0x1110 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	e0 59       	subi	r30, 0x90	; 144
    10e6:	fe 4f       	sbci	r31, 0xFE	; 254
    10e8:	01 90       	ld	r0, Z+
    10ea:	f0 81       	ld	r31, Z
    10ec:	e0 2d       	mov	r30, r0
    10ee:	10 82       	st	Z, r1
		ret = GPIO_OK;
    10f0:	19 82       	std	Y+1, r1	; 0x01
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	fc 01       	movw	r30, r24
    1100:	e0 59       	subi	r30, 0x90	; 144
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	01 90       	ld	r0, Z+
    1106:	f0 81       	ld	r31, Z
    1108:	e0 2d       	mov	r30, r0
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	80 83       	st	Z, r24
		ret = GPIO_OK;
    110e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
}
    1112:	28 96       	adiw	r28, 0x08	; 8
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <GPIO_changePortDir+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <GPIO_changePortDir+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3d 83       	std	Y+5, r19	; 0x05
    1142:	2c 83       	std	Y+4, r18	; 0x04
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <GPIO_changePortDir+0x34>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	79 f0       	breq	.+30     	; 0x1174 <GPIO_changePortDir+0x50>
    1156:	1c c0       	rjmp	.+56     	; 0x1190 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	fc 01       	movw	r30, r24
    1164:	e8 59       	subi	r30, 0x98	; 152
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	01 90       	ld	r0, Z+
    116a:	f0 81       	ld	r31, Z
    116c:	e0 2d       	mov	r30, r0
    116e:	10 82       	st	Z, r1
		ret = GPIO_OK;
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	fc 01       	movw	r30, r24
    1180:	e8 59       	subi	r30, 0x98	; 152
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	01 90       	ld	r0, Z+
    1186:	f0 81       	ld	r31, Z
    1188:	e0 2d       	mov	r30, r0
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	80 83       	st	Z, r24
		ret = GPIO_OK;
    118e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <GPIO_writePortLogic+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <GPIO_writePortLogic+0x8>
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3d 83       	std	Y+5, r19	; 0x05
    11c0:	2c 83       	std	Y+4, r18	; 0x04
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <GPIO_writePortLogic+0x34>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	21 30       	cpi	r18, 0x01	; 1
    11d0:	31 05       	cpc	r19, r1
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <GPIO_writePortLogic+0x50>
    11d4:	1c c0       	rjmp	.+56     	; 0x120e <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	fc 01       	movw	r30, r24
    11e2:	e0 59       	subi	r30, 0x90	; 144
    11e4:	fe 4f       	sbci	r31, 0xFE	; 254
    11e6:	01 90       	ld	r0, Z+
    11e8:	f0 81       	ld	r31, Z
    11ea:	e0 2d       	mov	r30, r0
    11ec:	10 82       	st	Z, r1
		ret = GPIO_OK;
    11ee:	19 82       	std	Y+1, r1	; 0x01
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	fc 01       	movw	r30, r24
    11fe:	e0 59       	subi	r30, 0x90	; 144
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	01 90       	ld	r0, Z+
    1204:	f0 81       	ld	r31, Z
    1206:	e0 2d       	mov	r30, r0
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	80 83       	st	Z, r24
		ret = GPIO_OK;
    120c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <GPIO_readPortLogic+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <GPIO_readPortLogic+0x8>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	7c 83       	std	Y+4, r23	; 0x04
    1230:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	fc 01       	movw	r30, r24
    1242:	e8 58       	subi	r30, 0x88	; 136
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	01 90       	ld	r0, Z+
    1248:	f0 81       	ld	r31, Z
    124a:	e0 2d       	mov	r30, r0
    124c:	80 81       	ld	r24, Z
    124e:	eb 81       	ldd	r30, Y+3	; 0x03
    1250:	fc 81       	ldd	r31, Y+4	; 0x04
    1252:	80 83       	st	Z, r24
	ret = GPIO_OK;
    1254:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <GPIO_togglePortLogic+0x6>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	e8 59       	subi	r30, 0x98	; 152
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	a0 81       	ld	r26, Z
    1288:	b1 81       	ldd	r27, Z+1	; 0x01
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	fc 01       	movw	r30, r24
    1296:	e8 59       	subi	r30, 0x98	; 152
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	01 90       	ld	r0, Z+
    129c:	f0 81       	ld	r31, Z
    129e:	e0 2d       	mov	r30, r0
    12a0:	20 81       	ld	r18, Z
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	fc 01       	movw	r30, r24
    12ae:	e8 59       	subi	r30, 0x98	; 152
    12b0:	fe 4f       	sbci	r31, 0xFE	; 254
    12b2:	01 90       	ld	r0, Z+
    12b4:	f0 81       	ld	r31, Z
    12b6:	e0 2d       	mov	r30, r0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 27       	eor	r24, r18
    12bc:	8c 93       	st	X, r24
	ret = GPIO_OK;
    12be:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GPIO_set4msbValue+0x6>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	fc 01       	movw	r30, r24
    12ec:	e0 59       	subi	r30, 0x90	; 144
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	a0 81       	ld	r26, Z
    12f2:	b1 81       	ldd	r27, Z+1	; 0x01
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	fc 01       	movw	r30, r24
    1300:	e0 59       	subi	r30, 0x90	; 144
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	01 90       	ld	r0, Z+
    1306:	f0 81       	ld	r31, Z
    1308:	e0 2d       	mov	r30, r0
    130a:	80 81       	ld	r24, Z
    130c:	8f 70       	andi	r24, 0x0F	; 15
    130e:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	fc 01       	movw	r30, r24
    131c:	e0 59       	subi	r30, 0x90	; 144
    131e:	fe 4f       	sbci	r31, 0xFE	; 254
    1320:	a0 81       	ld	r26, Z
    1322:	b1 81       	ldd	r27, Z+1	; 0x01
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	fc 01       	movw	r30, r24
    1330:	e0 59       	subi	r30, 0x90	; 144
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	01 90       	ld	r0, Z+
    1336:	f0 81       	ld	r31, Z
    1338:	e0 2d       	mov	r30, r0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	82 95       	swap	r24
    1346:	92 95       	swap	r25
    1348:	90 7f       	andi	r25, 0xF0	; 240
    134a:	98 27       	eor	r25, r24
    134c:	80 7f       	andi	r24, 0xF0	; 240
    134e:	98 27       	eor	r25, r24
    1350:	82 2b       	or	r24, r18
    1352:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    1354:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	27 97       	sbiw	r28, 0x07	; 7
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	8a 83       	std	Y+2, r24	; 0x02
    137a:	4b 83       	std	Y+3, r20	; 0x03
    137c:	5c 83       	std	Y+4, r21	; 0x04
    137e:	6d 83       	std	Y+5, r22	; 0x05
    1380:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	fc 01       	movw	r30, r24
    1392:	e0 59       	subi	r30, 0x90	; 144
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	01 90       	ld	r0, Z+
    1398:	f0 81       	ld	r31, Z
    139a:	e0 2d       	mov	r30, r0
    139c:	80 81       	ld	r24, Z
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	fc 01       	movw	r30, r24
    13aa:	e0 59       	subi	r30, 0x90	; 144
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	01 90       	ld	r0, Z+
    13b0:	f0 81       	ld	r31, Z
    13b2:	e0 2d       	mov	r30, r0
    13b4:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	e0 59       	subi	r30, 0x90	; 144
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	a0 81       	ld	r26, Z
    13c8:	b1 81       	ldd	r27, Z+1	; 0x01
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	fc 01       	movw	r30, r24
    13d6:	e0 59       	subi	r30, 0x90	; 144
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	90 81       	ld	r25, Z
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	89 2b       	or	r24, r25
    13e6:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	27 96       	adiw	r28, 0x07	; 7
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <MADC_init>:


static void(*ptrCallbackHandler)(void) = PTR_NULL;

EN_MADC_systeamState_t MADC_init(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <MADC_init+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <MADC_init+0x8>
    1406:	0f 92       	push	r0
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9d 83       	std	Y+5, r25	; 0x05
    140e:	8c 83       	std	Y+4, r24	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	8b 83       	std	Y+3, r24	; 0x03

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	09 f4       	brne	.+2      	; 0x141e <MADC_init+0x20>
    141c:	67 c0       	rjmp	.+206    	; 0x14ec <MADC_init+0xee>
	{
		uint8_t ADMUX_REG_TEMP = 0;
    141e:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t ADCSRA_REG_TEMP = 0;
    1420:	19 82       	std	Y+1, r1	; 0x01

		// disable adc
		MADC_disable();
    1422:	a6 e2       	ldi	r26, 0x26	; 38
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e6 e2       	ldi	r30, 0x26	; 38
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8f 77       	andi	r24, 0x7F	; 127
    142e:	8c 93       	st	X, r24

		// select vref
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0x3F)   | (ST_ptrAdcCfgInstance_t->referenceSource << REFS0_BIT ));
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	2f 73       	andi	r18, 0x3F	; 63
    1436:	ec 81       	ldd	r30, Y+4	; 0x04
    1438:	fd 81       	ldd	r31, Y+5	; 0x05
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	00 24       	eor	r0, r0
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	07 94       	ror	r0
    1448:	96 95       	lsr	r25
    144a:	87 95       	ror	r24
    144c:	07 94       	ror	r0
    144e:	98 2f       	mov	r25, r24
    1450:	80 2d       	mov	r24, r0
    1452:	82 2b       	or	r24, r18
    1454:	8a 83       	std	Y+2, r24	; 0x02
		// select adjust result
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xDF)   | (ST_ptrAdcCfgInstance_t->resultAdjust << ADLAR_BIT));
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	2f 7d       	andi	r18, 0xDF	; 223
    145c:	ec 81       	ldd	r30, Y+4	; 0x04
    145e:	fd 81       	ldd	r31, Y+5	; 0x05
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	82 95       	swap	r24
    146c:	92 95       	swap	r25
    146e:	90 7f       	andi	r25, 0xF0	; 240
    1470:	98 27       	eor	r25, r24
    1472:	80 7f       	andi	r24, 0xF0	; 240
    1474:	98 27       	eor	r25, r24
    1476:	82 2b       	or	r24, r18
    1478:	8a 83       	std	Y+2, r24	; 0x02
		// select adc channel
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xE0)   | (ST_ptrAdcCfgInstance_t->channelSelection));
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	98 2f       	mov	r25, r24
    147e:	90 7e       	andi	r25, 0xE0	; 224
    1480:	ec 81       	ldd	r30, Y+4	; 0x04
    1482:	fd 81       	ldd	r31, Y+5	; 0x05
    1484:	84 81       	ldd	r24, Z+4	; 0x04
    1486:	89 2b       	or	r24, r25
    1488:	8a 83       	std	Y+2, r24	; 0x02
		// select prescaler
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF8) | (ST_ptrAdcCfgInstance_t->prescalerDivision));
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	98 2f       	mov	r25, r24
    148e:	98 7f       	andi	r25, 0xF8	; 248
    1490:	ec 81       	ldd	r30, Y+4	; 0x04
    1492:	fd 81       	ldd	r31, Y+5	; 0x05
    1494:	85 81       	ldd	r24, Z+5	; 0x05
    1496:	89 2b       	or	r24, r25
    1498:	89 83       	std	Y+1, r24	; 0x01
		// enable or disable interrupt
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF7) | (ST_ptrAdcCfgInstance_t->triggerSource << ADIE_BIT));
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	27 7f       	andi	r18, 0xF7	; 247
    14a0:	ec 81       	ldd	r30, Y+4	; 0x04
    14a2:	fd 81       	ldd	r31, Y+5	; 0x05
    14a4:	86 81       	ldd	r24, Z+6	; 0x06
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	82 2b       	or	r24, r18
    14b8:	89 83       	std	Y+1, r24	; 0x01

		// assign the values in registers
		ADMUX_REG	 = ADMUX_REG_TEMP;
    14ba:	e7 e2       	ldi	r30, 0x27	; 39
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 83       	st	Z, r24
		ADCSRA_REG 	 = ADCSRA_REG_TEMP;
    14c2:	e6 e2       	ldi	r30, 0x26	; 38
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	80 83       	st	Z, r24

		// set pointer of isr callback

		ptrCallbackHandler = ST_ptrAdcCfgInstance_t->MADC_setCallback;
    14ca:	ec 81       	ldd	r30, Y+4	; 0x04
    14cc:	fd 81       	ldd	r31, Y+5	; 0x05
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	90 93 9f 01 	sts	0x019F, r25
    14d6:	80 93 9e 01 	sts	0x019E, r24

		// enable adc
		MADC_enable();
    14da:	a6 e2       	ldi	r26, 0x26	; 38
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e6 e2       	ldi	r30, 0x26	; 38
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    14e8:	1b 82       	std	Y+3, r1	; 0x03
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <MADC_init+0xf2>

	}
	else
	{
		adcRet = MADC_PTR_NULL;
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	8b 83       	std	Y+3, r24	; 0x03
	}
	return adcRet;
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <MADC_deinit>:
EN_MADC_systeamState_t MADC_deinit(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <MADC_deinit+0x6>
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	9b 81       	ldd	r25, Y+3	; 0x03
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	81 f0       	breq	.+32     	; 0x153e <MADC_deinit+0x3c>
	{
		// disable adc interrupt
		MADC_interruptDisable();
    151e:	a6 e2       	ldi	r26, 0x26	; 38
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e6 e2       	ldi	r30, 0x26	; 38
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	87 7f       	andi	r24, 0xF7	; 247
    152a:	8c 93       	st	X, r24
		// disable adc
		MADC_disable();
    152c:	a6 e2       	ldi	r26, 0x26	; 38
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e6 e2       	ldi	r30, 0x26	; 38
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8f 77       	andi	r24, 0x7F	; 127
    1538:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <MADC_deinit+0x40>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <MADC_startConversion>:

EN_MADC_systeamState_t MADC_startConversion(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <MADC_startConversion+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	9b 83       	std	Y+3, r25	; 0x03
    155e:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	49 f0       	breq	.+18     	; 0x157e <MADC_startConversion+0x2e>
	{
		// start conversion
		SET_BIT(ADCSRA_REG,ADSC_BIT);
    156c:	a6 e2       	ldi	r26, 0x26	; 38
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e6 e2       	ldi	r30, 0x26	; 38
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 64       	ori	r24, 0x40	; 64
    1578:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <MADC_startConversion+0x32>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <MADC_getConversionResult>:

EN_MADC_systeamState_t MADC_getConversionResult(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t, Uint16_t *_ConversionResult)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	27 97       	sbiw	r28, 0x07	; 7
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	9b 83       	std	Y+3, r25	; 0x03
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	7d 83       	std	Y+5, r23	; 0x05
    15aa:	6c 83       	std	Y+4, r22	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	89 83       	std	Y+1, r24	; 0x01

	if( (PTR_NULL != ST_ptrAdcCfgInstance_t) && (PTR_NULL != _ConversionResult) )
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	09 f4       	brne	.+2      	; 0x15ba <MADC_getConversionResult+0x2a>
    15b8:	5b c0       	rjmp	.+182    	; 0x1670 <MADC_getConversionResult+0xe0>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <MADC_getConversionResult+0x34>
    15c2:	56 c0       	rjmp	.+172    	; 0x1670 <MADC_getConversionResult+0xe0>
	{
		// polling on adc flag
		while(GET_BIT(ADCSRA_REG,ADIF_BIT) != 1);
    15c4:	e6 e2       	ldi	r30, 0x26	; 38
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	82 95       	swap	r24
    15cc:	8f 70       	andi	r24, 0x0F	; 15
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	90 70       	andi	r25, 0x00	; 0
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	a9 f3       	breq	.-22     	; 0x15c4 <MADC_getConversionResult+0x34>
		// clear adc flag
		SET_BIT(ADCSRA_REG,ADIF_BIT);
    15da:	a6 e2       	ldi	r26, 0x26	; 38
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e6 e2       	ldi	r30, 0x26	; 38
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 61       	ori	r24, 0x10	; 16
    15e6:	8c 93       	st	X, r24

		switch(ST_ptrAdcCfgInstance_t->resultAdjust)
    15e8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ea:	fb 81       	ldd	r31, Y+3	; 0x03
    15ec:	83 81       	ldd	r24, Z+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3f 83       	std	Y+7, r19	; 0x07
    15f4:	2e 83       	std	Y+6, r18	; 0x06
    15f6:	8e 81       	ldd	r24, Y+6	; 0x06
    15f8:	9f 81       	ldd	r25, Y+7	; 0x07
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	31 f0       	breq	.+12     	; 0x160a <MADC_getConversionResult+0x7a>
    15fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1600:	3f 81       	ldd	r19, Y+7	; 0x07
    1602:	21 30       	cpi	r18, 0x01	; 1
    1604:	31 05       	cpc	r19, r1
    1606:	a9 f0       	breq	.+42     	; 0x1632 <MADC_getConversionResult+0xa2>
    1608:	30 c0       	rjmp	.+96     	; 0x166a <MADC_getConversionResult+0xda>
		{
		case MADC_RIGHT_ADJUST  : *_ConversionResult = (Uint16_t)(ADCL_REG + (ADCH_REG << 8)); adcRet = MADC_OK;  break;
    160a:	e4 e2       	ldi	r30, 0x24	; 36
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	e5 e2       	ldi	r30, 0x25	; 37
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	98 2f       	mov	r25, r24
    1620:	88 27       	eor	r24, r24
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	ec 81       	ldd	r30, Y+4	; 0x04
    1628:	fd 81       	ldd	r31, Y+5	; 0x05
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	21 c0       	rjmp	.+66     	; 0x1674 <MADC_getConversionResult+0xe4>
		case MADC_LEFT_ADJUST	:  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); adcRet = MADC_OK; break;
    1632:	e4 e2       	ldi	r30, 0x24	; 36
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	e5 e2       	ldi	r30, 0x25	; 37
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	98 2f       	mov	r25, r24
    1648:	88 27       	eor	r24, r24
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	08 2e       	mov	r0, r24
    1650:	89 2f       	mov	r24, r25
    1652:	00 0c       	add	r0, r0
    1654:	88 1f       	adc	r24, r24
    1656:	99 0b       	sbc	r25, r25
    1658:	00 0c       	add	r0, r0
    165a:	88 1f       	adc	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	ec 81       	ldd	r30, Y+4	; 0x04
    1660:	fd 81       	ldd	r31, Y+5	; 0x05
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <MADC_getConversionResult+0xe4>
		default 				: adcRet = MADC_NOK; break;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <MADC_getConversionResult+0xe4>
		}
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	27 96       	adiw	r28, 0x07	; 7
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <__vector_16>:


ISR(ADC_INT)
{
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptrCallbackHandler)
    16b2:	80 91 9e 01 	lds	r24, 0x019E
    16b6:	90 91 9f 01 	lds	r25, 0x019F
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <__vector_16+0x40>
	{
		ptrCallbackHandler();
    16be:	e0 91 9e 01 	lds	r30, 0x019E
    16c2:	f0 91 9f 01 	lds	r31, 0x019F
    16c6:	09 95       	icall
	}
	else /*Do Nothing */;
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/led/led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	28 97       	sbiw	r28, 0x08	; 8
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    170e:	8f 81       	ldd	r24, Y+7	; 0x07
    1710:	98 85       	ldd	r25, Y+8	; 0x08
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	d9 f0       	breq	.+54     	; 0x174c <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1716:	ef 81       	ldd	r30, Y+7	; 0x07
    1718:	f8 85       	ldd	r31, Y+8	; 0x08
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	ef 81       	ldd	r30, Y+7	; 0x07
    171e:	f8 85       	ldd	r31, Y+8	; 0x08
    1720:	92 81       	ldd	r25, Z+2	; 0x02
    1722:	ef 81       	ldd	r30, Y+7	; 0x07
    1724:	f8 85       	ldd	r31, Y+8	; 0x08
    1726:	20 81       	ld	r18, Z
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    1732:	ce 01       	movw	r24, r28
    1734:	03 96       	adiw	r24, 0x03	; 3
    1736:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    173a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 23       	and	r24, r24
    1740:	11 f4       	brne	.+4      	; 0x1746 <LED_init+0x58>
      ledRet = LED_OK;
    1742:	1a 82       	std	Y+2, r1	; 0x02
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1752:	28 96       	adiw	r28, 0x08	; 8
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	28 97       	sbiw	r28, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	98 87       	std	Y+8, r25	; 0x08
    177a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	e1 f0       	breq	.+56     	; 0x17c4 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    178c:	ef 81       	ldd	r30, Y+7	; 0x07
    178e:	f8 85       	ldd	r31, Y+8	; 0x08
    1790:	81 81       	ldd	r24, Z+1	; 0x01
    1792:	ef 81       	ldd	r30, Y+7	; 0x07
    1794:	f8 85       	ldd	r31, Y+8	; 0x08
    1796:	92 81       	ldd	r25, Z+2	; 0x02
    1798:	ef 81       	ldd	r30, Y+7	; 0x07
    179a:	f8 85       	ldd	r31, Y+8	; 0x08
    179c:	20 81       	ld	r18, Z
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    17a8:	ce 01       	movw	r24, r28
    17aa:	03 96       	adiw	r24, 0x03	; 3
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    17b2:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 23       	and	r24, r24
    17b8:	11 f4       	brne	.+4      	; 0x17be <LED_turnOn+0x5a>
      ledRet = LED_OK;
    17ba:	1a 82       	std	Y+2, r1	; 0x02
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ca:	28 96       	adiw	r28, 0x08	; 8
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	28 97       	sbiw	r28, 0x08	; 8
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	98 87       	std	Y+8, r25	; 0x08
    17f2:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    17fc:	8f 81       	ldd	r24, Y+7	; 0x07
    17fe:	98 85       	ldd	r25, Y+8	; 0x08
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	e1 f0       	breq	.+56     	; 0x183c <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1804:	ef 81       	ldd	r30, Y+7	; 0x07
    1806:	f8 85       	ldd	r31, Y+8	; 0x08
    1808:	81 81       	ldd	r24, Z+1	; 0x01
    180a:	ef 81       	ldd	r30, Y+7	; 0x07
    180c:	f8 85       	ldd	r31, Y+8	; 0x08
    180e:	92 81       	ldd	r25, Z+2	; 0x02
    1810:	ef 81       	ldd	r30, Y+7	; 0x07
    1812:	f8 85       	ldd	r31, Y+8	; 0x08
    1814:	20 81       	ld	r18, Z
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    1820:	ce 01       	movw	r24, r28
    1822:	03 96       	adiw	r24, 0x03	; 3
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    182a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 23       	and	r24, r24
    1830:	11 f4       	brne	.+4      	; 0x1836 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    1832:	1a 82       	std	Y+2, r1	; 0x02
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1842:	28 96       	adiw	r28, 0x08	; 8
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	28 97       	sbiw	r28, 0x08	; 8
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	98 87       	std	Y+8, r25	; 0x08
    186a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1874:	8f 81       	ldd	r24, Y+7	; 0x07
    1876:	98 85       	ldd	r25, Y+8	; 0x08
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	d9 f0       	breq	.+54     	; 0x18b2 <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    187c:	ef 81       	ldd	r30, Y+7	; 0x07
    187e:	f8 85       	ldd	r31, Y+8	; 0x08
    1880:	81 81       	ldd	r24, Z+1	; 0x01
    1882:	ef 81       	ldd	r30, Y+7	; 0x07
    1884:	f8 85       	ldd	r31, Y+8	; 0x08
    1886:	92 81       	ldd	r25, Z+2	; 0x02
    1888:	ef 81       	ldd	r30, Y+7	; 0x07
    188a:	f8 85       	ldd	r31, Y+8	; 0x08
    188c:	20 81       	ld	r18, Z
    188e:	8b 83       	std	Y+3, r24	; 0x03
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    1898:	ce 01       	movw	r24, r28
    189a:	03 96       	adiw	r24, 0x03	; 3
    189c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <GPIO_togglePinLogic>
    18a0:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 23       	and	r24, r24
    18a6:	11 f4       	brne	.+4      	; 0x18ac <LED_toggle+0x58>
      ledRet = LED_OK;
    18a8:	1a 82       	std	Y+2, r1	; 0x02
    18aa:	05 c0       	rjmp	.+10     	; 0x18b6 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	8a 83       	std	Y+2, r24	; 0x02
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 96       	adiw	r28, 0x08	; 8
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	ce 59       	subi	r28, 0x9E	; 158
    18d8:	d0 40       	sbci	r29, 0x00	; 0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	fe 01       	movw	r30, r28
    18e6:	e3 56       	subi	r30, 0x63	; 99
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    18ee:	fe 01       	movw	r30, r28
    18f0:	e0 58       	subi	r30, 0x80	; 128
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 58       	subi	r30, 0x81	; 129
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    1902:	fe 01       	movw	r30, r28
    1904:	e3 56       	subi	r30, 0x63	; 99
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <HLCD_init+0x48>
    1910:	18 c7       	rjmp	.+3632   	; 0x2742 <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    1912:	fe 01       	movw	r30, r28
    1914:	e3 56       	subi	r30, 0x63	; 99
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	01 90       	ld	r0, Z+
    191a:	f0 81       	ld	r31, Z
    191c:	e0 2d       	mov	r30, r0
    191e:	81 81       	ldd	r24, Z+1	; 0x01
    1920:	fe 01       	movw	r30, r28
    1922:	e3 56       	subi	r30, 0x63	; 99
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	01 90       	ld	r0, Z+
    1928:	f0 81       	ld	r31, Z
    192a:	e0 2d       	mov	r30, r0
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	fe 01       	movw	r30, r28
    1930:	ef 57       	subi	r30, 0x7F	; 127
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 83       	st	Z, r24
    1936:	fe 01       	movw	r30, r28
    1938:	ef 57       	subi	r30, 0x7F	; 127
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	fe 01       	movw	r30, r28
    1940:	ef 57       	subi	r30, 0x7F	; 127
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	82 83       	std	Z+2, r24	; 0x02
    1948:	fe 01       	movw	r30, r28
    194a:	ef 57       	subi	r30, 0x7F	; 127
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    1950:	fe 01       	movw	r30, r28
    1952:	e3 56       	subi	r30, 0x63	; 99
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	01 90       	ld	r0, Z+
    1958:	f0 81       	ld	r31, Z
    195a:	e0 2d       	mov	r30, r0
    195c:	81 81       	ldd	r24, Z+1	; 0x01
    195e:	fe 01       	movw	r30, r28
    1960:	e3 56       	subi	r30, 0x63	; 99
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	01 90       	ld	r0, Z+
    1966:	f0 81       	ld	r31, Z
    1968:	e0 2d       	mov	r30, r0
    196a:	94 81       	ldd	r25, Z+4	; 0x04
    196c:	fe 01       	movw	r30, r28
    196e:	eb 57       	subi	r30, 0x7B	; 123
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 83       	st	Z, r24
    1974:	fe 01       	movw	r30, r28
    1976:	eb 57       	subi	r30, 0x7B	; 123
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	fe 01       	movw	r30, r28
    197e:	eb 57       	subi	r30, 0x7B	; 123
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	82 83       	std	Z+2, r24	; 0x02
    1986:	fe 01       	movw	r30, r28
    1988:	eb 57       	subi	r30, 0x7B	; 123
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    198e:	fe 01       	movw	r30, r28
    1990:	e3 56       	subi	r30, 0x63	; 99
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	01 90       	ld	r0, Z+
    1996:	f0 81       	ld	r31, Z
    1998:	e0 2d       	mov	r30, r0
    199a:	81 81       	ldd	r24, Z+1	; 0x01
    199c:	fe 01       	movw	r30, r28
    199e:	e3 56       	subi	r30, 0x63	; 99
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	01 90       	ld	r0, Z+
    19a4:	f0 81       	ld	r31, Z
    19a6:	e0 2d       	mov	r30, r0
    19a8:	95 81       	ldd	r25, Z+5	; 0x05
    19aa:	fe 01       	movw	r30, r28
    19ac:	e7 57       	subi	r30, 0x77	; 119
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 83       	st	Z, r24
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 57       	subi	r30, 0x77	; 119
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	fe 01       	movw	r30, r28
    19bc:	e7 57       	subi	r30, 0x77	; 119
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	82 83       	std	Z+2, r24	; 0x02
    19c4:	fe 01       	movw	r30, r28
    19c6:	e7 57       	subi	r30, 0x77	; 119
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    19cc:	ce 01       	movw	r24, r28
    19ce:	8f 57       	subi	r24, 0x7F	; 127
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e1 58       	subi	r30, 0x81	; 129
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    19de:	fe 01       	movw	r30, r28
    19e0:	e1 58       	subi	r30, 0x81	; 129
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	88 23       	and	r24, r24
    19e8:	51 f4       	brne	.+20     	; 0x19fe <HLCD_init+0x134>
    19ea:	ce 01       	movw	r24, r28
    19ec:	8b 57       	subi	r24, 0x7B	; 123
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    19f4:	fe 01       	movw	r30, r28
    19f6:	e1 58       	subi	r30, 0x81	; 129
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 83       	st	Z, r24
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    19fe:	fe 01       	movw	r30, r28
    1a00:	e0 58       	subi	r30, 0x80	; 128
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e1 58       	subi	r30, 0x81	; 129
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 23       	and	r24, r24
    1a12:	51 f4       	brne	.+20     	; 0x1a28 <HLCD_init+0x15e>
    1a14:	ce 01       	movw	r24, r28
    1a16:	87 57       	subi	r24, 0x77	; 119
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e1 58       	subi	r30, 0x81	; 129
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 83       	st	Z, r24
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e0 58       	subi	r30, 0x80	; 128
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e3 56       	subi	r30, 0x63	; 99
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	01 90       	ld	r0, Z+
    1a3a:	f0 81       	ld	r31, Z
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 23       	and	r24, r24
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <HLCD_init+0x17c>
    1a44:	42 c4       	rjmp	.+2180   	; 0x22ca <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1a46:	fe 01       	movw	r30, r28
    1a48:	e3 56       	subi	r30, 0x63	; 99
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	f0 81       	ld	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	fe 01       	movw	r30, r28
    1a56:	e3 56       	subi	r30, 0x63	; 99
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	f0 81       	ld	r31, Z
    1a5e:	e0 2d       	mov	r30, r0
    1a60:	92 85       	ldd	r25, Z+10	; 0x0a
    1a62:	fe 01       	movw	r30, r28
    1a64:	e3 57       	subi	r30, 0x73	; 115
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 83       	st	Z, r24
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e3 57       	subi	r30, 0x73	; 115
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	fe 01       	movw	r30, r28
    1a74:	e3 57       	subi	r30, 0x73	; 115
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	82 83       	std	Z+2, r24	; 0x02
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e3 57       	subi	r30, 0x73	; 115
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1a84:	fe 01       	movw	r30, r28
    1a86:	e3 56       	subi	r30, 0x63	; 99
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	01 90       	ld	r0, Z+
    1a8c:	f0 81       	ld	r31, Z
    1a8e:	e0 2d       	mov	r30, r0
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	fe 01       	movw	r30, r28
    1a94:	e3 56       	subi	r30, 0x63	; 99
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	01 90       	ld	r0, Z+
    1a9a:	f0 81       	ld	r31, Z
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ef 56       	subi	r30, 0x6F	; 111
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 83       	st	Z, r24
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ef 56       	subi	r30, 0x6F	; 111
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ef 56       	subi	r30, 0x6F	; 111
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	82 83       	std	Z+2, r24	; 0x02
    1aba:	fe 01       	movw	r30, r28
    1abc:	ef 56       	subi	r30, 0x6F	; 111
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e3 56       	subi	r30, 0x63	; 99
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	01 90       	ld	r0, Z+
    1aca:	f0 81       	ld	r31, Z
    1acc:	e0 2d       	mov	r30, r0
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e3 56       	subi	r30, 0x63	; 99
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	f0 81       	ld	r31, Z
    1ada:	e0 2d       	mov	r30, r0
    1adc:	94 85       	ldd	r25, Z+12	; 0x0c
    1ade:	fe 01       	movw	r30, r28
    1ae0:	eb 56       	subi	r30, 0x6B	; 107
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	eb 56       	subi	r30, 0x6B	; 107
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	fe 01       	movw	r30, r28
    1af0:	eb 56       	subi	r30, 0x6B	; 107
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	82 83       	std	Z+2, r24	; 0x02
    1af8:	fe 01       	movw	r30, r28
    1afa:	eb 56       	subi	r30, 0x6B	; 107
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1b00:	fe 01       	movw	r30, r28
    1b02:	e3 56       	subi	r30, 0x63	; 99
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	01 90       	ld	r0, Z+
    1b08:	f0 81       	ld	r31, Z
    1b0a:	e0 2d       	mov	r30, r0
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e3 56       	subi	r30, 0x63	; 99
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	01 90       	ld	r0, Z+
    1b16:	f0 81       	ld	r31, Z
    1b18:	e0 2d       	mov	r30, r0
    1b1a:	95 85       	ldd	r25, Z+13	; 0x0d
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 56       	subi	r30, 0x67	; 103
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 83       	st	Z, r24
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 56       	subi	r30, 0x67	; 103
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e7 56       	subi	r30, 0x67	; 103
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	82 83       	std	Z+2, r24	; 0x02
    1b36:	fe 01       	movw	r30, r28
    1b38:	e7 56       	subi	r30, 0x67	; 103
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e1 58       	subi	r30, 0x81	; 129
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	88 23       	and	r24, r24
    1b48:	51 f4       	brne	.+20     	; 0x1b5e <HLCD_init+0x294>
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	83 57       	subi	r24, 0x73	; 115
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    1b54:	fe 01       	movw	r30, r28
    1b56:	e1 58       	subi	r30, 0x81	; 129
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 83       	st	Z, r24
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e0 58       	subi	r30, 0x80	; 128
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e1 58       	subi	r30, 0x81	; 129
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 23       	and	r24, r24
    1b72:	51 f4       	brne	.+20     	; 0x1b88 <HLCD_init+0x2be>
    1b74:	ce 01       	movw	r24, r28
    1b76:	8f 56       	subi	r24, 0x6F	; 111
    1b78:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e1 58       	subi	r30, 0x81	; 129
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 83       	st	Z, r24
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e0 58       	subi	r30, 0x80	; 128
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    1b92:	fe 01       	movw	r30, r28
    1b94:	e1 58       	subi	r30, 0x81	; 129
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	51 f4       	brne	.+20     	; 0x1bb2 <HLCD_init+0x2e8>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	8b 56       	subi	r24, 0x6B	; 107
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e1 58       	subi	r30, 0x81	; 129
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 83       	st	Z, r24
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e0 58       	subi	r30, 0x80	; 128
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e1 58       	subi	r30, 0x81	; 129
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 23       	and	r24, r24
    1bc6:	51 f4       	brne	.+20     	; 0x1bdc <HLCD_init+0x312>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	87 56       	subi	r24, 0x67	; 103
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_initPin>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e1 58       	subi	r30, 0x81	; 129
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 83       	st	Z, r24
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e0 58       	subi	r30, 0x80	; 128
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
    1be6:	fe 01       	movw	r30, r28
    1be8:	e5 58       	subi	r30, 0x85	; 133
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 ef       	ldi	r26, 0xF0	; 240
    1bf2:	b1 e4       	ldi	r27, 0x41	; 65
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	a2 83       	std	Z+2, r26	; 0x02
    1bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	09 58       	subi	r16, 0x89	; 137
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 58       	subi	r30, 0x85	; 133
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	f8 01       	movw	r30, r16
    1c22:	80 83       	st	Z, r24
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	a2 83       	std	Z+2, r26	; 0x02
    1c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e9 58       	subi	r30, 0x89	; 137
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	44 f4       	brge	.+16     	; 0x1c58 <HLCD_init+0x38e>
		__ticks = 1;
    1c48:	fe 01       	movw	r30, r28
    1c4a:	eb 58       	subi	r30, 0x8B	; 139
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	64 c0       	rjmp	.+200    	; 0x1d20 <HLCD_init+0x456>
	else if (__tmp > 65535)
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e9 58       	subi	r30, 0x89	; 137
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <HLCD_init+0x3ae>
    1c76:	43 c0       	rjmp	.+134    	; 0x1cfe <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 58       	subi	r30, 0x85	; 133
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8e 01       	movw	r16, r28
    1c98:	0b 58       	subi	r16, 0x8B	; 139
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	f8 01       	movw	r30, r16
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	1f c0       	rjmp	.+62     	; 0x1cee <HLCD_init+0x424>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ed 58       	subi	r30, 0x8D	; 141
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 58       	subi	r30, 0x8D	; 141
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <HLCD_init+0x3fe>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 58       	subi	r30, 0x8D	; 141
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	de 01       	movw	r26, r28
    1cd8:	ab 58       	subi	r26, 0x8B	; 139
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	eb 58       	subi	r30, 0x8B	; 139
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 58       	subi	r30, 0x8B	; 139
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	d1 f6       	brne	.-76     	; 0x1cb0 <HLCD_init+0x3e6>
    1cfc:	27 c0       	rjmp	.+78     	; 0x1d4c <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0b 58       	subi	r16, 0x8B	; 139
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	fe 01       	movw	r30, r28
    1d06:	e9 58       	subi	r30, 0x89	; 137
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
    1d20:	de 01       	movw	r26, r28
    1d22:	af 58       	subi	r26, 0x8F	; 143
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	eb 58       	subi	r30, 0x8B	; 139
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	8d 93       	st	X+, r24
    1d32:	9c 93       	st	X, r25
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 58       	subi	r30, 0x8F	; 143
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <HLCD_init+0x474>
    1d42:	fe 01       	movw	r30, r28
    1d44:	ef 58       	subi	r30, 0x8F	; 143
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e3 56       	subi	r30, 0x63	; 99
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	68 e2       	ldi	r22, 0x28	; 40
    1d58:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e3 59       	subi	r30, 0x93	; 147
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a8 e4       	ldi	r26, 0x48	; 72
    1d68:	b2 e4       	ldi	r27, 0x42	; 66
    1d6a:	80 83       	st	Z, r24
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	a2 83       	std	Z+2, r26	; 0x02
    1d70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	8e 01       	movw	r16, r28
    1d74:	07 59       	subi	r16, 0x97	; 151
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e3 59       	subi	r30, 0x93	; 147
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 59       	subi	r30, 0x97	; 151
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	44 f4       	brge	.+16     	; 0x1dce <HLCD_init+0x504>
		__ticks = 1;
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e9 59       	subi	r30, 0x99	; 153
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	64 c0       	rjmp	.+200    	; 0x1e96 <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e7 59       	subi	r30, 0x97	; 151
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <HLCD_init+0x524>
    1dec:	43 c0       	rjmp	.+134    	; 0x1e74 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	fe 01       	movw	r30, r28
    1df0:	e3 59       	subi	r30, 0x93	; 147
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	09 59       	subi	r16, 0x99	; 153
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	1f c0       	rjmp	.+62     	; 0x1e64 <HLCD_init+0x59a>
    1e26:	fe 01       	movw	r30, r28
    1e28:	eb 59       	subi	r30, 0x9B	; 155
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	fe 01       	movw	r30, r28
    1e36:	eb 59       	subi	r30, 0x9B	; 155
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <HLCD_init+0x574>
    1e42:	fe 01       	movw	r30, r28
    1e44:	eb 59       	subi	r30, 0x9B	; 155
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	de 01       	movw	r26, r28
    1e4e:	a9 59       	subi	r26, 0x99	; 153
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e9 59       	subi	r30, 0x99	; 153
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	fe 01       	movw	r30, r28
    1e66:	e9 59       	subi	r30, 0x99	; 153
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	d1 f6       	brne	.-76     	; 0x1e26 <HLCD_init+0x55c>
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	8e 01       	movw	r16, r28
    1e76:	09 59       	subi	r16, 0x99	; 153
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 59       	subi	r30, 0x97	; 151
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	f8 01       	movw	r30, r16
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	de 01       	movw	r26, r28
    1e98:	ad 59       	subi	r26, 0x9D	; 157
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e9 59       	subi	r30, 0x99	; 153
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	8d 93       	st	X+, r24
    1ea8:	9c 93       	st	X, r25
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ed 59       	subi	r30, 0x9D	; 157
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <HLCD_init+0x5ea>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ed 59       	subi	r30, 0x9D	; 157
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e3 56       	subi	r30, 0x63	; 99
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	6f e0       	ldi	r22, 0x0F	; 15
    1ece:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e1 5a       	subi	r30, 0xA1	; 161
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a8 e4       	ldi	r26, 0x48	; 72
    1ede:	b2 e4       	ldi	r27, 0x42	; 66
    1ee0:	80 83       	st	Z, r24
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	a2 83       	std	Z+2, r26	; 0x02
    1ee6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	8e 01       	movw	r16, r28
    1eea:	05 5a       	subi	r16, 0xA5	; 165
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e1 5a       	subi	r30, 0xA1	; 161
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a ef       	ldi	r20, 0xFA	; 250
    1f02:	54 e4       	ldi	r21, 0x44	; 68
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f16:	fe 01       	movw	r30, r28
    1f18:	e5 5a       	subi	r30, 0xA5	; 165
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	44 f4       	brge	.+16     	; 0x1f44 <HLCD_init+0x67a>
		__ticks = 1;
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 5a       	subi	r30, 0xA7	; 167
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	64 c0       	rjmp	.+200    	; 0x200c <HLCD_init+0x742>
	else if (__tmp > 65535)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e5 5a       	subi	r30, 0xA5	; 165
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <HLCD_init+0x69a>
    1f62:	43 c0       	rjmp	.+134    	; 0x1fea <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	fe 01       	movw	r30, r28
    1f66:	e1 5a       	subi	r30, 0xA1	; 161
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8e 01       	movw	r16, r28
    1f84:	07 5a       	subi	r16, 0xA7	; 167
    1f86:	1f 4f       	sbci	r17, 0xFF	; 255
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	f8 01       	movw	r30, r16
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	1f c0       	rjmp	.+62     	; 0x1fda <HLCD_init+0x710>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e9 5a       	subi	r30, 0xA9	; 169
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 5a       	subi	r30, 0xA9	; 169
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <HLCD_init+0x6ea>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 5a       	subi	r30, 0xA9	; 169
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	de 01       	movw	r26, r28
    1fc4:	a7 5a       	subi	r26, 0xA7	; 167
    1fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e7 5a       	subi	r30, 0xA7	; 167
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	11 96       	adiw	r26, 0x01	; 1
    1fd6:	9c 93       	st	X, r25
    1fd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5a       	subi	r30, 0xA7	; 167
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	d1 f6       	brne	.-76     	; 0x1f9c <HLCD_init+0x6d2>
    1fe8:	27 c0       	rjmp	.+78     	; 0x2038 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	8e 01       	movw	r16, r28
    1fec:	07 5a       	subi	r16, 0xA7	; 167
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e5 5a       	subi	r30, 0xA5	; 165
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
    200c:	de 01       	movw	r26, r28
    200e:	ab 5a       	subi	r26, 0xAB	; 171
    2010:	bf 4f       	sbci	r27, 0xFF	; 255
    2012:	fe 01       	movw	r30, r28
    2014:	e7 5a       	subi	r30, 0xA7	; 167
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	8d 93       	st	X+, r24
    201e:	9c 93       	st	X, r25
    2020:	fe 01       	movw	r30, r28
    2022:	eb 5a       	subi	r30, 0xAB	; 171
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <HLCD_init+0x760>
    202e:	fe 01       	movw	r30, r28
    2030:	eb 5a       	subi	r30, 0xAB	; 171
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    2038:	fe 01       	movw	r30, r28
    203a:	e3 56       	subi	r30, 0x63	; 99
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    2048:	fe 01       	movw	r30, r28
    204a:	ef 5a       	subi	r30, 0xAF	; 175
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a8 e4       	ldi	r26, 0x48	; 72
    2054:	b2 e4       	ldi	r27, 0x42	; 66
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	8e 01       	movw	r16, r28
    2060:	03 5b       	subi	r16, 0xB3	; 179
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	fe 01       	movw	r30, r28
    2066:	ef 5a       	subi	r30, 0xAF	; 175
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a ef       	ldi	r20, 0xFA	; 250
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208c:	fe 01       	movw	r30, r28
    208e:	e3 5b       	subi	r30, 0xB3	; 179
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	44 f4       	brge	.+16     	; 0x20ba <HLCD_init+0x7f0>
		__ticks = 1;
    20aa:	fe 01       	movw	r30, r28
    20ac:	e5 5b       	subi	r30, 0xB5	; 181
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	64 c0       	rjmp	.+200    	; 0x2182 <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    20ba:	fe 01       	movw	r30, r28
    20bc:	e3 5b       	subi	r30, 0xB3	; 179
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	0c f0       	brlt	.+2      	; 0x20da <HLCD_init+0x810>
    20d8:	43 c0       	rjmp	.+134    	; 0x2160 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 5a       	subi	r30, 0xAF	; 175
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 01       	movw	r16, r28
    20fa:	05 5b       	subi	r16, 0xB5	; 181
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	1f c0       	rjmp	.+62     	; 0x2150 <HLCD_init+0x886>
    2112:	fe 01       	movw	r30, r28
    2114:	e7 5b       	subi	r30, 0xB7	; 183
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5b       	subi	r30, 0xB7	; 183
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <HLCD_init+0x860>
    212e:	fe 01       	movw	r30, r28
    2130:	e7 5b       	subi	r30, 0xB7	; 183
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	de 01       	movw	r26, r28
    213a:	a5 5b       	subi	r26, 0xB5	; 181
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e5 5b       	subi	r30, 0xB5	; 181
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	fe 01       	movw	r30, r28
    2152:	e5 5b       	subi	r30, 0xB5	; 181
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	d1 f6       	brne	.-76     	; 0x2112 <HLCD_init+0x848>
    215e:	27 c0       	rjmp	.+78     	; 0x21ae <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	8e 01       	movw	r16, r28
    2162:	05 5b       	subi	r16, 0xB5	; 181
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	e3 5b       	subi	r30, 0xB3	; 179
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	de 01       	movw	r26, r28
    2184:	a9 5b       	subi	r26, 0xB9	; 185
    2186:	bf 4f       	sbci	r27, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	e5 5b       	subi	r30, 0xB5	; 181
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	8d 93       	st	X+, r24
    2194:	9c 93       	st	X, r25
    2196:	fe 01       	movw	r30, r28
    2198:	e9 5b       	subi	r30, 0xB9	; 185
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <HLCD_init+0x8d6>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e9 5b       	subi	r30, 0xB9	; 185
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    21ae:	fe 01       	movw	r30, r28
    21b0:	e3 56       	subi	r30, 0x63	; 99
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	66 e0       	ldi	r22, 0x06	; 6
    21ba:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    21be:	fe 01       	movw	r30, r28
    21c0:	ed 5b       	subi	r30, 0xBD	; 189
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a8 e4       	ldi	r26, 0x48	; 72
    21ca:	b2 e4       	ldi	r27, 0x42	; 66
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	a2 83       	std	Z+2, r26	; 0x02
    21d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	8e 01       	movw	r16, r28
    21d6:	01 5c       	subi	r16, 0xC1	; 193
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 5b       	subi	r30, 0xBD	; 189
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	a2 83       	std	Z+2, r26	; 0x02
    2200:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2202:	fe 01       	movw	r30, r28
    2204:	ff 96       	adiw	r30, 0x3f	; 63
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <HLCD_init+0x95e>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	46 c0       	rjmp	.+140    	; 0x22b4 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    2228:	fe 01       	movw	r30, r28
    222a:	ff 96       	adiw	r30, 0x3f	; 63
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	64 f5       	brge	.+88     	; 0x229c <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	fe 01       	movw	r30, r28
    2246:	ed 5b       	subi	r30, 0xBD	; 189
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e af       	std	Y+62, r25	; 0x3e
    2270:	8d af       	std	Y+61, r24	; 0x3d
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <HLCD_init+0x9c8>
    2274:	88 ec       	ldi	r24, 0xC8	; 200
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c af       	std	Y+60, r25	; 0x3c
    227a:	8b af       	std	Y+59, r24	; 0x3b
    227c:	8b ad       	ldd	r24, Y+59	; 0x3b
    227e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <HLCD_init+0x9b6>
    2284:	9c af       	std	Y+60, r25	; 0x3c
    2286:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d ad       	ldd	r24, Y+61	; 0x3d
    228a:	9e ad       	ldd	r25, Y+62	; 0x3e
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e af       	std	Y+62, r25	; 0x3e
    2290:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d ad       	ldd	r24, Y+61	; 0x3d
    2294:	9e ad       	ldd	r25, Y+62	; 0x3e
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <HLCD_init+0x9aa>
    229a:	58 c2       	rjmp	.+1200   	; 0x274c <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	fe 01       	movw	r30, r28
    229e:	ff 96       	adiw	r30, 0x3f	; 63
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e af       	std	Y+62, r25	; 0x3e
    22b2:	8d af       	std	Y+61, r24	; 0x3d
    22b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b8:	9a af       	std	Y+58, r25	; 0x3a
    22ba:	89 af       	std	Y+57, r24	; 0x39
    22bc:	89 ad       	ldd	r24, Y+57	; 0x39
    22be:	9a ad       	ldd	r25, Y+58	; 0x3a
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <HLCD_init+0x9f6>
    22c4:	9a af       	std	Y+58, r25	; 0x3a
    22c6:	89 af       	std	Y+57, r24	; 0x39
    22c8:	41 c2       	rjmp	.+1154   	; 0x274c <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    22ca:	fe 01       	movw	r30, r28
    22cc:	e3 56       	subi	r30, 0x63	; 99
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	01 90       	ld	r0, Z+
    22d2:	f0 81       	ld	r31, Z
    22d4:	e0 2d       	mov	r30, r0
    22d6:	80 81       	ld	r24, Z
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	09 f0       	breq	.+2      	; 0x22de <HLCD_init+0xa14>
    22dc:	2c c2       	rjmp	.+1112   	; 0x2736 <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    22de:	fe 01       	movw	r30, r28
    22e0:	e1 58       	subi	r30, 0x81	; 129
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 81       	ld	r24, Z
    22e6:	88 23       	and	r24, r24
    22e8:	81 f4       	brne	.+32     	; 0x230a <HLCD_init+0xa40>
    22ea:	fe 01       	movw	r30, r28
    22ec:	e3 56       	subi	r30, 0x63	; 99
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	01 90       	ld	r0, Z+
    22f2:	f0 81       	ld	r31, Z
    22f4:	e0 2d       	mov	r30, r0
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_initPort>
    2300:	fe 01       	movw	r30, r28
    2302:	e1 58       	subi	r30, 0x81	; 129
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 83       	st	Z, r24
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    230a:	fe 01       	movw	r30, r28
    230c:	e0 58       	subi	r30, 0x80	; 128
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	80 83       	st	Z, r24
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	8d ab       	std	Y+53, r24	; 0x35
    231e:	9e ab       	std	Y+54, r25	; 0x36
    2320:	af ab       	std	Y+55, r26	; 0x37
    2322:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6d a9       	ldd	r22, Y+53	; 0x35
    2326:	7e a9       	ldd	r23, Y+54	; 0x36
    2328:	8f a9       	ldd	r24, Y+55	; 0x37
    232a:	98 ad       	ldd	r25, Y+56	; 0x38
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a ef       	ldi	r20, 0xFA	; 250
    2332:	54 e4       	ldi	r21, 0x44	; 68
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	89 ab       	std	Y+49, r24	; 0x31
    233e:	9a ab       	std	Y+50, r25	; 0x32
    2340:	ab ab       	std	Y+51, r26	; 0x33
    2342:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2344:	69 a9       	ldd	r22, Y+49	; 0x31
    2346:	7a a9       	ldd	r23, Y+50	; 0x32
    2348:	8b a9       	ldd	r24, Y+51	; 0x33
    234a:	9c a9       	ldd	r25, Y+52	; 0x34
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <HLCD_init+0xa9c>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6d a9       	ldd	r22, Y+53	; 0x35
    2380:	7e a9       	ldd	r23, Y+54	; 0x36
    2382:	8f a9       	ldd	r24, Y+55	; 0x37
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <HLCD_init+0xafc>
    23a8:	88 ec       	ldi	r24, 0xC8	; 200
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9e a7       	std	Y+46, r25	; 0x2e
    23ae:	8d a7       	std	Y+45, r24	; 0x2d
    23b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <HLCD_init+0xaea>
    23b8:	9e a7       	std	Y+46, r25	; 0x2e
    23ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23be:	98 a9       	ldd	r25, Y+48	; 0x30
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	98 ab       	std	Y+48, r25	; 0x30
    23c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <HLCD_init+0xade>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	98 ab       	std	Y+48, r25	; 0x30
    23e2:	8f a7       	std	Y+47, r24	; 0x2f
    23e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e6:	98 a9       	ldd	r25, Y+48	; 0x30
    23e8:	9c a7       	std	Y+44, r25	; 0x2c
    23ea:	8b a7       	std	Y+43, r24	; 0x2b
    23ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <HLCD_init+0xb26>
    23f4:	9c a7       	std	Y+44, r25	; 0x2c
    23f6:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    23f8:	fe 01       	movw	r30, r28
    23fa:	e1 58       	subi	r30, 0x81	; 129
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	88 23       	and	r24, r24
    2402:	69 f4       	brne	.+26     	; 0x241e <HLCD_init+0xb54>
    2404:	fe 01       	movw	r30, r28
    2406:	e3 56       	subi	r30, 0x63	; 99
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	68 e3       	ldi	r22, 0x38	; 56
    2410:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    2414:	fe 01       	movw	r30, r28
    2416:	e0 58       	subi	r30, 0x80	; 128
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 83       	st	Z, r24
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    241e:	fe 01       	movw	r30, r28
    2420:	e0 58       	subi	r30, 0x80	; 128
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	80 83       	st	Z, r24
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e8       	ldi	r26, 0x80	; 128
    242e:	bf e3       	ldi	r27, 0x3F	; 63
    2430:	8f a3       	std	Y+39, r24	; 0x27
    2432:	98 a7       	std	Y+40, r25	; 0x28
    2434:	a9 a7       	std	Y+41, r26	; 0x29
    2436:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2438:	6f a1       	ldd	r22, Y+39	; 0x27
    243a:	78 a5       	ldd	r23, Y+40	; 0x28
    243c:	89 a5       	ldd	r24, Y+41	; 0x29
    243e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4a ef       	ldi	r20, 0xFA	; 250
    2446:	54 e4       	ldi	r21, 0x44	; 68
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	8b a3       	std	Y+35, r24	; 0x23
    2452:	9c a3       	std	Y+36, r25	; 0x24
    2454:	ad a3       	std	Y+37, r26	; 0x25
    2456:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2458:	6b a1       	ldd	r22, Y+35	; 0x23
    245a:	7c a1       	ldd	r23, Y+36	; 0x24
    245c:	8d a1       	ldd	r24, Y+37	; 0x25
    245e:	9e a1       	ldd	r25, Y+38	; 0x26
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	2c f4       	brge	.+10     	; 0x247a <HLCD_init+0xbb0>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9a a3       	std	Y+34, r25	; 0x22
    2476:	89 a3       	std	Y+33, r24	; 0x21
    2478:	3f c0       	rjmp	.+126    	; 0x24f8 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    247a:	6b a1       	ldd	r22, Y+35	; 0x23
    247c:	7c a1       	ldd	r23, Y+36	; 0x24
    247e:	8d a1       	ldd	r24, Y+37	; 0x25
    2480:	9e a1       	ldd	r25, Y+38	; 0x26
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	3f ef       	ldi	r19, 0xFF	; 255
    2486:	4f e7       	ldi	r20, 0x7F	; 127
    2488:	57 e4       	ldi	r21, 0x47	; 71
    248a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248e:	18 16       	cp	r1, r24
    2490:	4c f5       	brge	.+82     	; 0x24e4 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e2       	ldi	r20, 0x20	; 32
    24a0:	51 e4       	ldi	r21, 0x41	; 65
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <HLCD_init+0xc10>
    24bc:	88 ec       	ldi	r24, 0xC8	; 200
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	98 a3       	std	Y+32, r25	; 0x20
    24c2:	8f 8f       	std	Y+31, r24	; 0x1f
    24c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c6:	98 a1       	ldd	r25, Y+32	; 0x20
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <HLCD_init+0xbfe>
    24cc:	98 a3       	std	Y+32, r25	; 0x20
    24ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d0:	89 a1       	ldd	r24, Y+33	; 0x21
    24d2:	9a a1       	ldd	r25, Y+34	; 0x22
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	9a a3       	std	Y+34, r25	; 0x22
    24d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24da:	89 a1       	ldd	r24, Y+33	; 0x21
    24dc:	9a a1       	ldd	r25, Y+34	; 0x22
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	69 f7       	brne	.-38     	; 0x24bc <HLCD_init+0xbf2>
    24e2:	14 c0       	rjmp	.+40     	; 0x250c <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	6b a1       	ldd	r22, Y+35	; 0x23
    24e6:	7c a1       	ldd	r23, Y+36	; 0x24
    24e8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ea:	9e a1       	ldd	r25, Y+38	; 0x26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
    24f8:	89 a1       	ldd	r24, Y+33	; 0x21
    24fa:	9a a1       	ldd	r25, Y+34	; 0x22
    24fc:	9e 8f       	std	Y+30, r25	; 0x1e
    24fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2500:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2502:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <HLCD_init+0xc3a>
    2508:	9e 8f       	std	Y+30, r25	; 0x1e
    250a:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    250c:	fe 01       	movw	r30, r28
    250e:	e0 58       	subi	r30, 0x80	; 128
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	69 f4       	brne	.+26     	; 0x2532 <HLCD_init+0xc68>
    2518:	fe 01       	movw	r30, r28
    251a:	e3 56       	subi	r30, 0x63	; 99
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	6e e0       	ldi	r22, 0x0E	; 14
    2524:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    2528:	fe 01       	movw	r30, r28
    252a:	e0 58       	subi	r30, 0x80	; 128
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 83       	st	Z, r24
    2530:	05 c0       	rjmp	.+10     	; 0x253c <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    2532:	fe 01       	movw	r30, r28
    2534:	e0 58       	subi	r30, 0x80	; 128
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 83       	st	Z, r24
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	89 8f       	std	Y+25, r24	; 0x19
    2546:	9a 8f       	std	Y+26, r25	; 0x1a
    2548:	ab 8f       	std	Y+27, r26	; 0x1b
    254a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	69 8d       	ldd	r22, Y+25	; 0x19
    254e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8d 8b       	std	Y+21, r24	; 0x15
    2566:	9e 8b       	std	Y+22, r25	; 0x16
    2568:	af 8b       	std	Y+23, r26	; 0x17
    256a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    256c:	6d 89       	ldd	r22, Y+21	; 0x15
    256e:	7e 89       	ldd	r23, Y+22	; 0x16
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	98 8d       	ldd	r25, Y+24	; 0x18
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <HLCD_init+0xcc4>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
    258c:	3f c0       	rjmp	.+126    	; 0x260c <HLCD_init+0xd42>
	else if (__tmp > 65535)
    258e:	6d 89       	ldd	r22, Y+21	; 0x15
    2590:	7e 89       	ldd	r23, Y+22	; 0x16
    2592:	8f 89       	ldd	r24, Y+23	; 0x17
    2594:	98 8d       	ldd	r25, Y+24	; 0x18
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	69 8d       	ldd	r22, Y+25	; 0x19
    25a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9c 8b       	std	Y+20, r25	; 0x14
    25cc:	8b 8b       	std	Y+19, r24	; 0x13
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <HLCD_init+0xd24>
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9a 8b       	std	Y+18, r25	; 0x12
    25d6:	89 8b       	std	Y+17, r24	; 0x11
    25d8:	89 89       	ldd	r24, Y+17	; 0x11
    25da:	9a 89       	ldd	r25, Y+18	; 0x12
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <HLCD_init+0xd12>
    25e0:	9a 8b       	std	Y+18, r25	; 0x12
    25e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <HLCD_init+0xd06>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6d 89       	ldd	r22, Y+21	; 0x15
    25fa:	7e 89       	ldd	r23, Y+22	; 0x16
    25fc:	8f 89       	ldd	r24, Y+23	; 0x17
    25fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9c 8b       	std	Y+20, r25	; 0x14
    260a:	8b 8b       	std	Y+19, r24	; 0x13
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	98 8b       	std	Y+16, r25	; 0x10
    2612:	8f 87       	std	Y+15, r24	; 0x0f
    2614:	8f 85       	ldd	r24, Y+15	; 0x0f
    2616:	98 89       	ldd	r25, Y+16	; 0x10
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <HLCD_init+0xd4e>
    261c:	98 8b       	std	Y+16, r25	; 0x10
    261e:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    2620:	fe 01       	movw	r30, r28
    2622:	e0 58       	subi	r30, 0x80	; 128
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	88 23       	and	r24, r24
    262a:	69 f4       	brne	.+26     	; 0x2646 <HLCD_init+0xd7c>
    262c:	fe 01       	movw	r30, r28
    262e:	e3 56       	subi	r30, 0x63	; 99
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    263c:	fe 01       	movw	r30, r28
    263e:	e0 58       	subi	r30, 0x80	; 128
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 83       	st	Z, r24
    2644:	05 c0       	rjmp	.+10     	; 0x2650 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    2646:	fe 01       	movw	r30, r28
    2648:	e0 58       	subi	r30, 0x80	; 128
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	80 83       	st	Z, r24
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	8b 87       	std	Y+11, r24	; 0x0b
    265a:	9c 87       	std	Y+12, r25	; 0x0c
    265c:	ad 87       	std	Y+13, r26	; 0x0d
    265e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	98 87       	std	Y+8, r25	; 0x08
    267c:	a9 87       	std	Y+9, r26	; 0x09
    267e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <HLCD_init+0xdd8>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <HLCD_init+0xe38>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <HLCD_init+0xe26>
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <HLCD_init+0xe1a>
    270a:	20 c0       	rjmp	.+64     	; 0x274c <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <HLCD_init+0xe62>
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	0b c0       	rjmp	.+22     	; 0x274c <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    2736:	fe 01       	movw	r30, r28
    2738:	e0 58       	subi	r30, 0x80	; 128
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	80 83       	st	Z, r24
    2740:	05 c0       	rjmp	.+10     	; 0x274c <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    2742:	fe 01       	movw	r30, r28
    2744:	e0 58       	subi	r30, 0x80	; 128
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	80 83       	st	Z, r24
	}

	return lcdRet;
    274c:	fe 01       	movw	r30, r28
    274e:	e0 58       	subi	r30, 0x80	; 128
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
}
    2754:	c2 56       	subi	r28, 0x62	; 98
    2756:	df 4f       	sbci	r29, 0xFF	; 255
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	08 95       	ret

0000276c <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	cd 59       	subi	r28, 0x9D	; 157
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	fe 01       	movw	r30, r28
    2788:	e5 56       	subi	r30, 0x65	; 101
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	fe 01       	movw	r30, r28
    2792:	e3 56       	subi	r30, 0x63	; 99
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2798:	fe 01       	movw	r30, r28
    279a:	e2 57       	subi	r30, 0x72	; 114
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    27a2:	fe 01       	movw	r30, r28
    27a4:	e3 57       	subi	r30, 0x73	; 115
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    27ac:	fe 01       	movw	r30, r28
    27ae:	e5 56       	subi	r30, 0x65	; 101
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	09 f4       	brne	.+2      	; 0x27bc <HLCD_sendCmd+0x50>
    27ba:	2f c7       	rjmp	.+3678   	; 0x361a <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    27bc:	fe 01       	movw	r30, r28
    27be:	e5 56       	subi	r30, 0x65	; 101
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	01 90       	ld	r0, Z+
    27c4:	f0 81       	ld	r31, Z
    27c6:	e0 2d       	mov	r30, r0
    27c8:	81 81       	ldd	r24, Z+1	; 0x01
    27ca:	fe 01       	movw	r30, r28
    27cc:	e5 56       	subi	r30, 0x65	; 101
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	01 90       	ld	r0, Z+
    27d2:	f0 81       	ld	r31, Z
    27d4:	e0 2d       	mov	r30, r0
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	fe 01       	movw	r30, r28
    27da:	e1 57       	subi	r30, 0x71	; 113
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 83       	st	Z, r24
    27e0:	fe 01       	movw	r30, r28
    27e2:	e1 57       	subi	r30, 0x71	; 113
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	fe 01       	movw	r30, r28
    27ea:	e1 57       	subi	r30, 0x71	; 113
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	82 83       	std	Z+2, r24	; 0x02
    27f2:	fe 01       	movw	r30, r28
    27f4:	e1 57       	subi	r30, 0x71	; 113
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    27fa:	fe 01       	movw	r30, r28
    27fc:	e5 56       	subi	r30, 0x65	; 101
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	01 90       	ld	r0, Z+
    2802:	f0 81       	ld	r31, Z
    2804:	e0 2d       	mov	r30, r0
    2806:	81 81       	ldd	r24, Z+1	; 0x01
    2808:	fe 01       	movw	r30, r28
    280a:	e5 56       	subi	r30, 0x65	; 101
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	01 90       	ld	r0, Z+
    2810:	f0 81       	ld	r31, Z
    2812:	e0 2d       	mov	r30, r0
    2814:	94 81       	ldd	r25, Z+4	; 0x04
    2816:	fe 01       	movw	r30, r28
    2818:	ed 56       	subi	r30, 0x6D	; 109
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 83       	st	Z, r24
    281e:	fe 01       	movw	r30, r28
    2820:	ed 56       	subi	r30, 0x6D	; 109
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	fe 01       	movw	r30, r28
    2828:	ed 56       	subi	r30, 0x6D	; 109
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	82 83       	std	Z+2, r24	; 0x02
    2830:	fe 01       	movw	r30, r28
    2832:	ed 56       	subi	r30, 0x6D	; 109
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2838:	fe 01       	movw	r30, r28
    283a:	e5 56       	subi	r30, 0x65	; 101
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	01 90       	ld	r0, Z+
    2840:	f0 81       	ld	r31, Z
    2842:	e0 2d       	mov	r30, r0
    2844:	81 81       	ldd	r24, Z+1	; 0x01
    2846:	fe 01       	movw	r30, r28
    2848:	e5 56       	subi	r30, 0x65	; 101
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	01 90       	ld	r0, Z+
    284e:	f0 81       	ld	r31, Z
    2850:	e0 2d       	mov	r30, r0
    2852:	95 81       	ldd	r25, Z+5	; 0x05
    2854:	fe 01       	movw	r30, r28
    2856:	e9 56       	subi	r30, 0x69	; 105
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 83       	st	Z, r24
    285c:	fe 01       	movw	r30, r28
    285e:	e9 56       	subi	r30, 0x69	; 105
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	fe 01       	movw	r30, r28
    2866:	e9 56       	subi	r30, 0x69	; 105
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	82 83       	std	Z+2, r24	; 0x02
    286e:	fe 01       	movw	r30, r28
    2870:	e9 56       	subi	r30, 0x69	; 105
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    2876:	ce 01       	movw	r24, r28
    2878:	81 57       	subi	r24, 0x71	; 113
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    2882:	fe 01       	movw	r30, r28
    2884:	e3 57       	subi	r30, 0x73	; 115
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    288a:	fe 01       	movw	r30, r28
    288c:	e3 57       	subi	r30, 0x73	; 115
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 81       	ld	r24, Z
    2892:	88 23       	and	r24, r24
    2894:	59 f4       	brne	.+22     	; 0x28ac <HLCD_sendCmd+0x140>
    2896:	ce 01       	movw	r24, r28
    2898:	8d 56       	subi	r24, 0x6D	; 109
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 57       	subi	r30, 0x73	; 115
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 83       	st	Z, r24
    28aa:	05 c0       	rjmp	.+10     	; 0x28b6 <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    28ac:	fe 01       	movw	r30, r28
    28ae:	e2 57       	subi	r30, 0x72	; 114
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	80 83       	st	Z, r24
    28b6:	fe 01       	movw	r30, r28
    28b8:	e7 57       	subi	r30, 0x77	; 119
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 ef       	ldi	r26, 0xF0	; 240
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	8e 01       	movw	r16, r28
    28ce:	0b 57       	subi	r16, 0x7B	; 123
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	e7 57       	subi	r30, 0x77	; 119
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a ef       	ldi	r20, 0xFA	; 250
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 83       	st	Z, r24
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	a2 83       	std	Z+2, r26	; 0x02
    28f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fa:	fe 01       	movw	r30, r28
    28fc:	eb 57       	subi	r30, 0x7B	; 123
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	44 f4       	brge	.+16     	; 0x2928 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    2918:	fe 01       	movw	r30, r28
    291a:	ed 57       	subi	r30, 0x7D	; 125
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	64 c0       	rjmp	.+200    	; 0x29f0 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    2928:	fe 01       	movw	r30, r28
    292a:	eb 57       	subi	r30, 0x7B	; 123
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	0c f0       	brlt	.+2      	; 0x2948 <HLCD_sendCmd+0x1dc>
    2946:	43 c0       	rjmp	.+134    	; 0x29ce <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	fe 01       	movw	r30, r28
    294a:	e7 57       	subi	r30, 0x77	; 119
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8e 01       	movw	r16, r28
    2968:	0d 57       	subi	r16, 0x7D	; 125
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	f8 01       	movw	r30, r16
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
    297e:	1f c0       	rjmp	.+62     	; 0x29be <HLCD_sendCmd+0x252>
    2980:	fe 01       	movw	r30, r28
    2982:	ef 57       	subi	r30, 0x7F	; 127
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
    298e:	fe 01       	movw	r30, r28
    2990:	ef 57       	subi	r30, 0x7F	; 127
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <HLCD_sendCmd+0x22c>
    299c:	fe 01       	movw	r30, r28
    299e:	ef 57       	subi	r30, 0x7F	; 127
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	de 01       	movw	r26, r28
    29a8:	ad 57       	subi	r26, 0x7D	; 125
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	ed 57       	subi	r30, 0x7D	; 125
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	11 96       	adiw	r26, 0x01	; 1
    29ba:	9c 93       	st	X, r25
    29bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 57       	subi	r30, 0x7D	; 125
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	d1 f6       	brne	.-76     	; 0x2980 <HLCD_sendCmd+0x214>
    29cc:	28 c0       	rjmp	.+80     	; 0x2a1e <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	8e 01       	movw	r16, r28
    29d0:	0d 57       	subi	r16, 0x7D	; 125
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	eb 57       	subi	r30, 0x7B	; 123
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
    29f0:	de 01       	movw	r26, r28
    29f2:	a1 58       	subi	r26, 0x81	; 129
    29f4:	bf 4f       	sbci	r27, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	ed 57       	subi	r30, 0x7D	; 125
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	11 96       	adiw	r26, 0x01	; 1
    2a02:	9c 93       	st	X, r25
    2a04:	8e 93       	st	-X, r24
    2a06:	fe 01       	movw	r30, r28
    2a08:	e1 58       	subi	r30, 0x81	; 129
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <HLCD_sendCmd+0x2a4>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e1 58       	subi	r30, 0x81	; 129
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e5 56       	subi	r30, 0x65	; 101
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	01 90       	ld	r0, Z+
    2a26:	f0 81       	ld	r31, Z
    2a28:	e0 2d       	mov	r30, r0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <HLCD_sendCmd+0x2c6>
    2a30:	3d c4       	rjmp	.+2170   	; 0x32ac <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2a32:	fe 01       	movw	r30, r28
    2a34:	e3 57       	subi	r30, 0x73	; 115
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	88 23       	and	r24, r24
    2a3c:	59 f4       	brne	.+22     	; 0x2a54 <HLCD_sendCmd+0x2e8>
    2a3e:	ce 01       	movw	r24, r28
    2a40:	89 56       	subi	r24, 0x69	; 105
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e3 57       	subi	r30, 0x73	; 115
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 83       	st	Z, r24
    2a52:	05 c0       	rjmp	.+10     	; 0x2a5e <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    2a54:	fe 01       	movw	r30, r28
    2a56:	e2 57       	subi	r30, 0x72	; 114
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	80 83       	st	Z, r24
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e5 58       	subi	r30, 0x85	; 133
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a8 e4       	ldi	r26, 0x48	; 72
    2a6a:	b2 e4       	ldi	r27, 0x42	; 66
    2a6c:	80 83       	st	Z, r24
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	a2 83       	std	Z+2, r26	; 0x02
    2a72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a74:	8e 01       	movw	r16, r28
    2a76:	09 58       	subi	r16, 0x89	; 137
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 58       	subi	r30, 0x85	; 133
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4a ef       	ldi	r20, 0xFA	; 250
    2a8e:	54 e4       	ldi	r21, 0x44	; 68
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	f8 01       	movw	r30, r16
    2a9a:	80 83       	st	Z, r24
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	a2 83       	std	Z+2, r26	; 0x02
    2aa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e9 58       	subi	r30, 0x89	; 137
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	44 f4       	brge	.+16     	; 0x2ad0 <HLCD_sendCmd+0x364>
		__ticks = 1;
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	eb 58       	subi	r30, 0x8B	; 139
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	80 83       	st	Z, r24
    2ace:	64 c0       	rjmp	.+200    	; 0x2b98 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e9 58       	subi	r30, 0x89	; 137
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	3f ef       	ldi	r19, 0xFF	; 255
    2ae2:	4f e7       	ldi	r20, 0x7F	; 127
    2ae4:	57 e4       	ldi	r21, 0x47	; 71
    2ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aea:	18 16       	cp	r1, r24
    2aec:	0c f0       	brlt	.+2      	; 0x2af0 <HLCD_sendCmd+0x384>
    2aee:	43 c0       	rjmp	.+134    	; 0x2b76 <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	fe 01       	movw	r30, r28
    2af2:	e5 58       	subi	r30, 0x85	; 133
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8e 01       	movw	r16, r28
    2b10:	0b 58       	subi	r16, 0x8B	; 139
    2b12:	1f 4f       	sbci	r17, 0xFF	; 255
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	f8 01       	movw	r30, r16
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
    2b26:	1f c0       	rjmp	.+62     	; 0x2b66 <HLCD_sendCmd+0x3fa>
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ed 58       	subi	r30, 0x8D	; 141
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	88 ec       	ldi	r24, 0xC8	; 200
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	80 83       	st	Z, r24
    2b36:	fe 01       	movw	r30, r28
    2b38:	ed 58       	subi	r30, 0x8D	; 141
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <HLCD_sendCmd+0x3d4>
    2b44:	fe 01       	movw	r30, r28
    2b46:	ed 58       	subi	r30, 0x8D	; 141
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	de 01       	movw	r26, r28
    2b50:	ab 58       	subi	r26, 0x8B	; 139
    2b52:	bf 4f       	sbci	r27, 0xFF	; 255
    2b54:	fe 01       	movw	r30, r28
    2b56:	eb 58       	subi	r30, 0x8B	; 139
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	11 96       	adiw	r26, 0x01	; 1
    2b62:	9c 93       	st	X, r25
    2b64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	fe 01       	movw	r30, r28
    2b68:	eb 58       	subi	r30, 0x8B	; 139
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	d1 f6       	brne	.-76     	; 0x2b28 <HLCD_sendCmd+0x3bc>
    2b74:	27 c0       	rjmp	.+78     	; 0x2bc4 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	8e 01       	movw	r16, r28
    2b78:	0b 58       	subi	r16, 0x8B	; 139
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e9 58       	subi	r30, 0x89	; 137
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	f8 01       	movw	r30, r16
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	80 83       	st	Z, r24
    2b98:	de 01       	movw	r26, r28
    2b9a:	af 58       	subi	r26, 0x8F	; 143
    2b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	eb 58       	subi	r30, 0x8B	; 139
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	8d 93       	st	X+, r24
    2baa:	9c 93       	st	X, r25
    2bac:	fe 01       	movw	r30, r28
    2bae:	ef 58       	subi	r30, 0x8F	; 143
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <HLCD_sendCmd+0x44a>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ef 58       	subi	r30, 0x8F	; 143
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e5 56       	subi	r30, 0x65	; 101
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	01 90       	ld	r0, Z+
    2bcc:	f0 81       	ld	r31, Z
    2bce:	e0 2d       	mov	r30, r0
    2bd0:	22 81       	ldd	r18, Z+2	; 0x02
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e3 56       	subi	r30, 0x63	; 99
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	98 2f       	mov	r25, r24
    2bdc:	92 95       	swap	r25
    2bde:	9f 70       	andi	r25, 0x0F	; 15
    2be0:	82 2f       	mov	r24, r18
    2be2:	69 2f       	mov	r22, r25
    2be4:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_set4msbValue>
    2be8:	fe 01       	movw	r30, r28
    2bea:	e3 59       	subi	r30, 0x93	; 147
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a8 e4       	ldi	r26, 0x48	; 72
    2bf4:	b2 e4       	ldi	r27, 0x42	; 66
    2bf6:	80 83       	st	Z, r24
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	a2 83       	std	Z+2, r26	; 0x02
    2bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	8e 01       	movw	r16, r28
    2c00:	07 59       	subi	r16, 0x97	; 151
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	e3 59       	subi	r30, 0x93	; 147
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a ef       	ldi	r20, 0xFA	; 250
    2c18:	54 e4       	ldi	r21, 0x44	; 68
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	f8 01       	movw	r30, r16
    2c24:	80 83       	st	Z, r24
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	a2 83       	std	Z+2, r26	; 0x02
    2c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e7 59       	subi	r30, 0x97	; 151
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	44 f4       	brge	.+16     	; 0x2c5a <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e9 59       	subi	r30, 0x99	; 153
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	64 c0       	rjmp	.+200    	; 0x2d22 <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e7 59       	subi	r30, 0x97	; 151
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	0c f0       	brlt	.+2      	; 0x2c7a <HLCD_sendCmd+0x50e>
    2c78:	43 c0       	rjmp	.+134    	; 0x2d00 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e3 59       	subi	r30, 0x93	; 147
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e2       	ldi	r20, 0x20	; 32
    2c8e:	51 e4       	ldi	r21, 0x41	; 65
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8e 01       	movw	r16, r28
    2c9a:	09 59       	subi	r16, 0x99	; 153
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	f8 01       	movw	r30, r16
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
    2cb0:	1f c0       	rjmp	.+62     	; 0x2cf0 <HLCD_sendCmd+0x584>
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	eb 59       	subi	r30, 0x9B	; 155
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	88 ec       	ldi	r24, 0xC8	; 200
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	eb 59       	subi	r30, 0x9B	; 155
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	91 81       	ldd	r25, Z+1	; 0x01
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <HLCD_sendCmd+0x55e>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	eb 59       	subi	r30, 0x9B	; 155
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	de 01       	movw	r26, r28
    2cda:	a9 59       	subi	r26, 0x99	; 153
    2cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 59       	subi	r30, 0x99	; 153
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	11 96       	adiw	r26, 0x01	; 1
    2cec:	9c 93       	st	X, r25
    2cee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e9 59       	subi	r30, 0x99	; 153
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	d1 f6       	brne	.-76     	; 0x2cb2 <HLCD_sendCmd+0x546>
    2cfe:	28 c0       	rjmp	.+80     	; 0x2d50 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	8e 01       	movw	r16, r28
    2d02:	09 59       	subi	r16, 0x99	; 153
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	e7 59       	subi	r30, 0x97	; 151
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
    2d22:	de 01       	movw	r26, r28
    2d24:	ad 59       	subi	r26, 0x9D	; 157
    2d26:	bf 4f       	sbci	r27, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e9 59       	subi	r30, 0x99	; 153
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	11 96       	adiw	r26, 0x01	; 1
    2d34:	9c 93       	st	X, r25
    2d36:	8e 93       	st	-X, r24
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ed 59       	subi	r30, 0x9D	; 157
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <HLCD_sendCmd+0x5d6>
    2d46:	fe 01       	movw	r30, r28
    2d48:	ed 59       	subi	r30, 0x9D	; 157
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    2d50:	fe 01       	movw	r30, r28
    2d52:	e3 57       	subi	r30, 0x73	; 115
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	88 23       	and	r24, r24
    2d5a:	59 f4       	brne	.+22     	; 0x2d72 <HLCD_sendCmd+0x606>
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	89 56       	subi	r24, 0x69	; 105
    2d60:	9f 4f       	sbci	r25, 0xFF	; 255
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e3 57       	subi	r30, 0x73	; 115
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 83       	st	Z, r24
    2d70:	05 c0       	rjmp	.+10     	; 0x2d7c <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    2d72:	fe 01       	movw	r30, r28
    2d74:	e2 57       	subi	r30, 0x72	; 114
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 83       	st	Z, r24
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e1 5a       	subi	r30, 0xA1	; 161
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a8 e4       	ldi	r26, 0x48	; 72
    2d88:	b2 e4       	ldi	r27, 0x42	; 66
    2d8a:	80 83       	st	Z, r24
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	a2 83       	std	Z+2, r26	; 0x02
    2d90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	8e 01       	movw	r16, r28
    2d94:	05 5a       	subi	r16, 0xA5	; 165
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e1 5a       	subi	r30, 0xA1	; 161
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	60 81       	ld	r22, Z
    2da0:	71 81       	ldd	r23, Z+1	; 0x01
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	93 81       	ldd	r25, Z+3	; 0x03
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a ef       	ldi	r20, 0xFA	; 250
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	f8 01       	movw	r30, r16
    2db8:	80 83       	st	Z, r24
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	a2 83       	std	Z+2, r26	; 0x02
    2dbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e5 5a       	subi	r30, 0xA5	; 165
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	44 f4       	brge	.+16     	; 0x2dee <HLCD_sendCmd+0x682>
		__ticks = 1;
    2dde:	fe 01       	movw	r30, r28
    2de0:	e7 5a       	subi	r30, 0xA7	; 167
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
    2dec:	64 c0       	rjmp	.+200    	; 0x2eb6 <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    2dee:	fe 01       	movw	r30, r28
    2df0:	e5 5a       	subi	r30, 0xA5	; 165
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	3f ef       	ldi	r19, 0xFF	; 255
    2e00:	4f e7       	ldi	r20, 0x7F	; 127
    2e02:	57 e4       	ldi	r21, 0x47	; 71
    2e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e08:	18 16       	cp	r1, r24
    2e0a:	0c f0       	brlt	.+2      	; 0x2e0e <HLCD_sendCmd+0x6a2>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e1 5a       	subi	r30, 0xA1	; 161
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	8e 01       	movw	r16, r28
    2e2e:	07 5a       	subi	r16, 0xA7	; 167
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	f8 01       	movw	r30, r16
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
    2e44:	1f c0       	rjmp	.+62     	; 0x2e84 <HLCD_sendCmd+0x718>
    2e46:	fe 01       	movw	r30, r28
    2e48:	e9 5a       	subi	r30, 0xA9	; 169
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	80 83       	st	Z, r24
    2e54:	fe 01       	movw	r30, r28
    2e56:	e9 5a       	subi	r30, 0xA9	; 169
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <HLCD_sendCmd+0x6f2>
    2e62:	fe 01       	movw	r30, r28
    2e64:	e9 5a       	subi	r30, 0xA9	; 169
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	de 01       	movw	r26, r28
    2e6e:	a7 5a       	subi	r26, 0xA7	; 167
    2e70:	bf 4f       	sbci	r27, 0xFF	; 255
    2e72:	fe 01       	movw	r30, r28
    2e74:	e7 5a       	subi	r30, 0xA7	; 167
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	11 96       	adiw	r26, 0x01	; 1
    2e80:	9c 93       	st	X, r25
    2e82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e84:	fe 01       	movw	r30, r28
    2e86:	e7 5a       	subi	r30, 0xA7	; 167
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	d1 f6       	brne	.-76     	; 0x2e46 <HLCD_sendCmd+0x6da>
    2e92:	28 c0       	rjmp	.+80     	; 0x2ee4 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	8e 01       	movw	r16, r28
    2e96:	07 5a       	subi	r16, 0xA7	; 167
    2e98:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 5a       	subi	r30, 0xA5	; 165
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
    2eb6:	de 01       	movw	r26, r28
    2eb8:	ab 5a       	subi	r26, 0xAB	; 171
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 5a       	subi	r30, 0xA7	; 167
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	9c 93       	st	X, r25
    2eca:	8e 93       	st	-X, r24
    2ecc:	fe 01       	movw	r30, r28
    2ece:	eb 5a       	subi	r30, 0xAB	; 171
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <HLCD_sendCmd+0x76a>
    2eda:	fe 01       	movw	r30, r28
    2edc:	eb 5a       	subi	r30, 0xAB	; 171
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e3 57       	subi	r30, 0x73	; 115
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	88 23       	and	r24, r24
    2eee:	59 f4       	brne	.+22     	; 0x2f06 <HLCD_sendCmd+0x79a>
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	89 56       	subi	r24, 0x69	; 105
    2ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef6:	61 e0       	ldi	r22, 0x01	; 1
    2ef8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    2efc:	fe 01       	movw	r30, r28
    2efe:	e3 57       	subi	r30, 0x73	; 115
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 83       	st	Z, r24
    2f04:	05 c0       	rjmp	.+10     	; 0x2f10 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    2f06:	fe 01       	movw	r30, r28
    2f08:	e2 57       	subi	r30, 0x72	; 114
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	80 83       	st	Z, r24
    2f10:	fe 01       	movw	r30, r28
    2f12:	ef 5a       	subi	r30, 0xAF	; 175
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	a8 e4       	ldi	r26, 0x48	; 72
    2f1c:	b2 e4       	ldi	r27, 0x42	; 66
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	8e 01       	movw	r16, r28
    2f28:	03 5b       	subi	r16, 0xB3	; 179
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ef 5a       	subi	r30, 0xAF	; 175
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e3 5b       	subi	r30, 0xB3	; 179
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	44 f4       	brge	.+16     	; 0x2f82 <HLCD_sendCmd+0x816>
		__ticks = 1;
    2f72:	fe 01       	movw	r30, r28
    2f74:	e5 5b       	subi	r30, 0xB5	; 181
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	64 c0       	rjmp	.+200    	; 0x304a <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    2f82:	fe 01       	movw	r30, r28
    2f84:	e3 5b       	subi	r30, 0xB3	; 179
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	57 e4       	ldi	r21, 0x47	; 71
    2f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9c:	18 16       	cp	r1, r24
    2f9e:	0c f0       	brlt	.+2      	; 0x2fa2 <HLCD_sendCmd+0x836>
    2fa0:	43 c0       	rjmp	.+134    	; 0x3028 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ef 5a       	subi	r30, 0xAF	; 175
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	05 5b       	subi	r16, 0xB5	; 181
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <HLCD_sendCmd+0x8ac>
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 5b       	subi	r30, 0xB7	; 183
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e7 5b       	subi	r30, 0xB7	; 183
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <HLCD_sendCmd+0x886>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e7 5b       	subi	r30, 0xB7	; 183
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	de 01       	movw	r26, r28
    3002:	a5 5b       	subi	r26, 0xB5	; 181
    3004:	bf 4f       	sbci	r27, 0xFF	; 255
    3006:	fe 01       	movw	r30, r28
    3008:	e5 5b       	subi	r30, 0xB5	; 181
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	11 96       	adiw	r26, 0x01	; 1
    3014:	9c 93       	st	X, r25
    3016:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	fe 01       	movw	r30, r28
    301a:	e5 5b       	subi	r30, 0xB5	; 181
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	d1 f6       	brne	.-76     	; 0x2fda <HLCD_sendCmd+0x86e>
    3026:	27 c0       	rjmp	.+78     	; 0x3076 <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	8e 01       	movw	r16, r28
    302a:	05 5b       	subi	r16, 0xB5	; 181
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e3 5b       	subi	r30, 0xB3	; 179
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	f8 01       	movw	r30, r16
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
    304a:	de 01       	movw	r26, r28
    304c:	a9 5b       	subi	r26, 0xB9	; 185
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e5 5b       	subi	r30, 0xB5	; 181
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	8d 93       	st	X+, r24
    305c:	9c 93       	st	X, r25
    305e:	fe 01       	movw	r30, r28
    3060:	e9 5b       	subi	r30, 0xB9	; 185
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <HLCD_sendCmd+0x8fc>
    306c:	fe 01       	movw	r30, r28
    306e:	e9 5b       	subi	r30, 0xB9	; 185
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    3076:	fe 01       	movw	r30, r28
    3078:	e5 56       	subi	r30, 0x65	; 101
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	01 90       	ld	r0, Z+
    307e:	f0 81       	ld	r31, Z
    3080:	e0 2d       	mov	r30, r0
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	fe 01       	movw	r30, r28
    3086:	e3 56       	subi	r30, 0x63	; 99
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_set4msbValue>
    3090:	fe 01       	movw	r30, r28
    3092:	ed 5b       	subi	r30, 0xBD	; 189
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a8 e4       	ldi	r26, 0x48	; 72
    309c:	b2 e4       	ldi	r27, 0x42	; 66
    309e:	80 83       	st	Z, r24
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	a2 83       	std	Z+2, r26	; 0x02
    30a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	8e 01       	movw	r16, r28
    30a8:	01 5c       	subi	r16, 0xC1	; 193
    30aa:	1f 4f       	sbci	r17, 0xFF	; 255
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 5b       	subi	r30, 0xBD	; 189
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a ef       	ldi	r20, 0xFA	; 250
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 83       	st	Z, r24
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	a2 83       	std	Z+2, r26	; 0x02
    30d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d4:	fe 01       	movw	r30, r28
    30d6:	ff 96       	adiw	r30, 0x3f	; 63
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5f e3       	ldi	r21, 0x3F	; 63
    30e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ec:	88 23       	and	r24, r24
    30ee:	2c f4       	brge	.+10     	; 0x30fa <HLCD_sendCmd+0x98e>
		__ticks = 1;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9e af       	std	Y+62, r25	; 0x3e
    30f6:	8d af       	std	Y+61, r24	; 0x3d
    30f8:	46 c0       	rjmp	.+140    	; 0x3186 <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ff 96       	adiw	r30, 0x3f	; 63
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	64 f5       	brge	.+88     	; 0x316e <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3116:	fe 01       	movw	r30, r28
    3118:	ed 5b       	subi	r30, 0xBD	; 189
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e2       	ldi	r20, 0x20	; 32
    312a:	51 e4       	ldi	r21, 0x41	; 65
    312c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	9e af       	std	Y+62, r25	; 0x3e
    3142:	8d af       	std	Y+61, r24	; 0x3d
    3144:	0f c0       	rjmp	.+30     	; 0x3164 <HLCD_sendCmd+0x9f8>
    3146:	88 ec       	ldi	r24, 0xC8	; 200
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9c af       	std	Y+60, r25	; 0x3c
    314c:	8b af       	std	Y+59, r24	; 0x3b
    314e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3150:	9c ad       	ldd	r25, Y+60	; 0x3c
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <HLCD_sendCmd+0x9e6>
    3156:	9c af       	std	Y+60, r25	; 0x3c
    3158:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315a:	8d ad       	ldd	r24, Y+61	; 0x3d
    315c:	9e ad       	ldd	r25, Y+62	; 0x3e
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	9e af       	std	Y+62, r25	; 0x3e
    3162:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3164:	8d ad       	ldd	r24, Y+61	; 0x3d
    3166:	9e ad       	ldd	r25, Y+62	; 0x3e
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	69 f7       	brne	.-38     	; 0x3146 <HLCD_sendCmd+0x9da>
    316c:	16 c0       	rjmp	.+44     	; 0x319a <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316e:	fe 01       	movw	r30, r28
    3170:	ff 96       	adiw	r30, 0x3f	; 63
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9e af       	std	Y+62, r25	; 0x3e
    3184:	8d af       	std	Y+61, r24	; 0x3d
    3186:	8d ad       	ldd	r24, Y+61	; 0x3d
    3188:	9e ad       	ldd	r25, Y+62	; 0x3e
    318a:	9a af       	std	Y+58, r25	; 0x3a
    318c:	89 af       	std	Y+57, r24	; 0x39
    318e:	89 ad       	ldd	r24, Y+57	; 0x39
    3190:	9a ad       	ldd	r25, Y+58	; 0x3a
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <HLCD_sendCmd+0xa26>
    3196:	9a af       	std	Y+58, r25	; 0x3a
    3198:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    319a:	fe 01       	movw	r30, r28
    319c:	e3 57       	subi	r30, 0x73	; 115
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	88 23       	and	r24, r24
    31a4:	59 f4       	brne	.+22     	; 0x31bc <HLCD_sendCmd+0xa50>
    31a6:	ce 01       	movw	r24, r28
    31a8:	89 56       	subi	r24, 0x69	; 105
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    31b2:	fe 01       	movw	r30, r28
    31b4:	e3 57       	subi	r30, 0x73	; 115
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 83       	st	Z, r24
    31ba:	05 c0       	rjmp	.+10     	; 0x31c6 <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    31bc:	fe 01       	movw	r30, r28
    31be:	e2 57       	subi	r30, 0x72	; 114
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	80 83       	st	Z, r24
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a8 e4       	ldi	r26, 0x48	; 72
    31cc:	b2 e4       	ldi	r27, 0x42	; 66
    31ce:	8d ab       	std	Y+53, r24	; 0x35
    31d0:	9e ab       	std	Y+54, r25	; 0x36
    31d2:	af ab       	std	Y+55, r26	; 0x37
    31d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d6:	6d a9       	ldd	r22, Y+53	; 0x35
    31d8:	7e a9       	ldd	r23, Y+54	; 0x36
    31da:	8f a9       	ldd	r24, Y+55	; 0x37
    31dc:	98 ad       	ldd	r25, Y+56	; 0x38
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	4a ef       	ldi	r20, 0xFA	; 250
    31e4:	54 e4       	ldi	r21, 0x44	; 68
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	89 ab       	std	Y+49, r24	; 0x31
    31f0:	9a ab       	std	Y+50, r25	; 0x32
    31f2:	ab ab       	std	Y+51, r26	; 0x33
    31f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31f6:	69 a9       	ldd	r22, Y+49	; 0x31
    31f8:	7a a9       	ldd	r23, Y+50	; 0x32
    31fa:	8b a9       	ldd	r24, Y+51	; 0x33
    31fc:	9c a9       	ldd	r25, Y+52	; 0x34
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e8       	ldi	r20, 0x80	; 128
    3204:	5f e3       	ldi	r21, 0x3F	; 63
    3206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320a:	88 23       	and	r24, r24
    320c:	2c f4       	brge	.+10     	; 0x3218 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	98 ab       	std	Y+48, r25	; 0x30
    3214:	8f a7       	std	Y+47, r24	; 0x2f
    3216:	3f c0       	rjmp	.+126    	; 0x3296 <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    3218:	69 a9       	ldd	r22, Y+49	; 0x31
    321a:	7a a9       	ldd	r23, Y+50	; 0x32
    321c:	8b a9       	ldd	r24, Y+51	; 0x33
    321e:	9c a9       	ldd	r25, Y+52	; 0x34
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	3f ef       	ldi	r19, 0xFF	; 255
    3224:	4f e7       	ldi	r20, 0x7F	; 127
    3226:	57 e4       	ldi	r21, 0x47	; 71
    3228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322c:	18 16       	cp	r1, r24
    322e:	4c f5       	brge	.+82     	; 0x3282 <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3230:	6d a9       	ldd	r22, Y+53	; 0x35
    3232:	7e a9       	ldd	r23, Y+54	; 0x36
    3234:	8f a9       	ldd	r24, Y+55	; 0x37
    3236:	98 ad       	ldd	r25, Y+56	; 0x38
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	98 ab       	std	Y+48, r25	; 0x30
    3256:	8f a7       	std	Y+47, r24	; 0x2f
    3258:	0f c0       	rjmp	.+30     	; 0x3278 <HLCD_sendCmd+0xb0c>
    325a:	88 ec       	ldi	r24, 0xC8	; 200
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	9e a7       	std	Y+46, r25	; 0x2e
    3260:	8d a7       	std	Y+45, r24	; 0x2d
    3262:	8d a5       	ldd	r24, Y+45	; 0x2d
    3264:	9e a5       	ldd	r25, Y+46	; 0x2e
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <HLCD_sendCmd+0xafa>
    326a:	9e a7       	std	Y+46, r25	; 0x2e
    326c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3270:	98 a9       	ldd	r25, Y+48	; 0x30
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	98 ab       	std	Y+48, r25	; 0x30
    3276:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3278:	8f a5       	ldd	r24, Y+47	; 0x2f
    327a:	98 a9       	ldd	r25, Y+48	; 0x30
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	69 f7       	brne	.-38     	; 0x325a <HLCD_sendCmd+0xaee>
    3280:	bb c1       	rjmp	.+886    	; 0x35f8 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	69 a9       	ldd	r22, Y+49	; 0x31
    3284:	7a a9       	ldd	r23, Y+50	; 0x32
    3286:	8b a9       	ldd	r24, Y+51	; 0x33
    3288:	9c a9       	ldd	r25, Y+52	; 0x34
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	98 ab       	std	Y+48, r25	; 0x30
    3294:	8f a7       	std	Y+47, r24	; 0x2f
    3296:	8f a5       	ldd	r24, Y+47	; 0x2f
    3298:	98 a9       	ldd	r25, Y+48	; 0x30
    329a:	9c a7       	std	Y+44, r25	; 0x2c
    329c:	8b a7       	std	Y+43, r24	; 0x2b
    329e:	8b a5       	ldd	r24, Y+43	; 0x2b
    32a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <HLCD_sendCmd+0xb36>
    32a6:	9c a7       	std	Y+44, r25	; 0x2c
    32a8:	8b a7       	std	Y+43, r24	; 0x2b
    32aa:	a6 c1       	rjmp	.+844    	; 0x35f8 <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e5 56       	subi	r30, 0x65	; 101
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	01 90       	ld	r0, Z+
    32b4:	f0 81       	ld	r31, Z
    32b6:	e0 2d       	mov	r30, r0
    32b8:	80 81       	ld	r24, Z
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	09 f0       	breq	.+2      	; 0x32c0 <HLCD_sendCmd+0xb54>
    32be:	97 c1       	rjmp	.+814    	; 0x35ee <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    32c0:	fe 01       	movw	r30, r28
    32c2:	e3 57       	subi	r30, 0x73	; 115
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	88 23       	and	r24, r24
    32ca:	59 f4       	brne	.+22     	; 0x32e2 <HLCD_sendCmd+0xb76>
    32cc:	ce 01       	movw	r24, r28
    32ce:	89 56       	subi	r24, 0x69	; 105
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    32d8:	fe 01       	movw	r30, r28
    32da:	e3 57       	subi	r30, 0x73	; 115
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 83       	st	Z, r24
    32e0:	05 c0       	rjmp	.+10     	; 0x32ec <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    32e2:	fe 01       	movw	r30, r28
    32e4:	e2 57       	subi	r30, 0x72	; 114
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	80 83       	st	Z, r24
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e8       	ldi	r26, 0x80	; 128
    32f2:	bf e3       	ldi	r27, 0x3F	; 63
    32f4:	8f a3       	std	Y+39, r24	; 0x27
    32f6:	98 a7       	std	Y+40, r25	; 0x28
    32f8:	a9 a7       	std	Y+41, r26	; 0x29
    32fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	6f a1       	ldd	r22, Y+39	; 0x27
    32fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3300:	89 a5       	ldd	r24, Y+41	; 0x29
    3302:	9a a5       	ldd	r25, Y+42	; 0x2a
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a ef       	ldi	r20, 0xFA	; 250
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	8b a3       	std	Y+35, r24	; 0x23
    3316:	9c a3       	std	Y+36, r25	; 0x24
    3318:	ad a3       	std	Y+37, r26	; 0x25
    331a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    331c:	6b a1       	ldd	r22, Y+35	; 0x23
    331e:	7c a1       	ldd	r23, Y+36	; 0x24
    3320:	8d a1       	ldd	r24, Y+37	; 0x25
    3322:	9e a1       	ldd	r25, Y+38	; 0x26
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9a a3       	std	Y+34, r25	; 0x22
    333a:	89 a3       	std	Y+33, r24	; 0x21
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    333e:	6b a1       	ldd	r22, Y+35	; 0x23
    3340:	7c a1       	ldd	r23, Y+36	; 0x24
    3342:	8d a1       	ldd	r24, Y+37	; 0x25
    3344:	9e a1       	ldd	r25, Y+38	; 0x26
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	6f a1       	ldd	r22, Y+39	; 0x27
    3358:	78 a5       	ldd	r23, Y+40	; 0x28
    335a:	89 a5       	ldd	r24, Y+41	; 0x29
    335c:	9a a5       	ldd	r25, Y+42	; 0x2a
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9a a3       	std	Y+34, r25	; 0x22
    337c:	89 a3       	std	Y+33, r24	; 0x21
    337e:	0f c0       	rjmp	.+30     	; 0x339e <HLCD_sendCmd+0xc32>
    3380:	88 ec       	ldi	r24, 0xC8	; 200
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	98 a3       	std	Y+32, r25	; 0x20
    3386:	8f 8f       	std	Y+31, r24	; 0x1f
    3388:	8f 8d       	ldd	r24, Y+31	; 0x1f
    338a:	98 a1       	ldd	r25, Y+32	; 0x20
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <HLCD_sendCmd+0xc20>
    3390:	98 a3       	std	Y+32, r25	; 0x20
    3392:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	89 a1       	ldd	r24, Y+33	; 0x21
    3396:	9a a1       	ldd	r25, Y+34	; 0x22
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	9a a3       	std	Y+34, r25	; 0x22
    339c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	89 a1       	ldd	r24, Y+33	; 0x21
    33a0:	9a a1       	ldd	r25, Y+34	; 0x22
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <HLCD_sendCmd+0xc14>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	6b a1       	ldd	r22, Y+35	; 0x23
    33aa:	7c a1       	ldd	r23, Y+36	; 0x24
    33ac:	8d a1       	ldd	r24, Y+37	; 0x25
    33ae:	9e a1       	ldd	r25, Y+38	; 0x26
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9a a3       	std	Y+34, r25	; 0x22
    33ba:	89 a3       	std	Y+33, r24	; 0x21
    33bc:	89 a1       	ldd	r24, Y+33	; 0x21
    33be:	9a a1       	ldd	r25, Y+34	; 0x22
    33c0:	9e 8f       	std	Y+30, r25	; 0x1e
    33c2:	8d 8f       	std	Y+29, r24	; 0x1d
    33c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <HLCD_sendCmd+0xc5c>
    33cc:	9e 8f       	std	Y+30, r25	; 0x1e
    33ce:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    33d0:	fe 01       	movw	r30, r28
    33d2:	e5 56       	subi	r30, 0x65	; 101
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	01 90       	ld	r0, Z+
    33d8:	f0 81       	ld	r31, Z
    33da:	e0 2d       	mov	r30, r0
    33dc:	92 81       	ldd	r25, Z+2	; 0x02
    33de:	fe 01       	movw	r30, r28
    33e0:	e3 56       	subi	r30, 0x63	; 99
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	89 2f       	mov	r24, r25
    33f0:	ba 01       	movw	r22, r20
    33f2:	a9 01       	movw	r20, r18
    33f4:	0e 94 b2 09 	call	0x1364	; 0x1364 <GPIO_SetPortValue>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a0 e8       	ldi	r26, 0x80	; 128
    33fe:	bf e3       	ldi	r27, 0x3F	; 63
    3400:	89 8f       	std	Y+25, r24	; 0x19
    3402:	9a 8f       	std	Y+26, r25	; 0x1a
    3404:	ab 8f       	std	Y+27, r26	; 0x1b
    3406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	69 8d       	ldd	r22, Y+25	; 0x19
    340a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    340c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    340e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	4a ef       	ldi	r20, 0xFA	; 250
    3416:	54 e4       	ldi	r21, 0x44	; 68
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	8d 8b       	std	Y+21, r24	; 0x15
    3422:	9e 8b       	std	Y+22, r25	; 0x16
    3424:	af 8b       	std	Y+23, r26	; 0x17
    3426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3428:	6d 89       	ldd	r22, Y+21	; 0x15
    342a:	7e 89       	ldd	r23, Y+22	; 0x16
    342c:	8f 89       	ldd	r24, Y+23	; 0x17
    342e:	98 8d       	ldd	r25, Y+24	; 0x18
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <HLCD_sendCmd+0xcde>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9c 8b       	std	Y+20, r25	; 0x14
    3446:	8b 8b       	std	Y+19, r24	; 0x13
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    344a:	6d 89       	ldd	r22, Y+21	; 0x15
    344c:	7e 89       	ldd	r23, Y+22	; 0x16
    344e:	8f 89       	ldd	r24, Y+23	; 0x17
    3450:	98 8d       	ldd	r25, Y+24	; 0x18
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	69 8d       	ldd	r22, Y+25	; 0x19
    3464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e2       	ldi	r20, 0x20	; 32
    3470:	51 e4       	ldi	r21, 0x41	; 65
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9c 8b       	std	Y+20, r25	; 0x14
    3488:	8b 8b       	std	Y+19, r24	; 0x13
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <HLCD_sendCmd+0xd3e>
    348c:	88 ec       	ldi	r24, 0xC8	; 200
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9a 8b       	std	Y+18, r25	; 0x12
    3492:	89 8b       	std	Y+17, r24	; 0x11
    3494:	89 89       	ldd	r24, Y+17	; 0x11
    3496:	9a 89       	ldd	r25, Y+18	; 0x12
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <HLCD_sendCmd+0xd2c>
    349c:	9a 8b       	std	Y+18, r25	; 0x12
    349e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	8b 89       	ldd	r24, Y+19	; 0x13
    34a2:	9c 89       	ldd	r25, Y+20	; 0x14
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9c 8b       	std	Y+20, r25	; 0x14
    34a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	8b 89       	ldd	r24, Y+19	; 0x13
    34ac:	9c 89       	ldd	r25, Y+20	; 0x14
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	69 f7       	brne	.-38     	; 0x348c <HLCD_sendCmd+0xd20>
    34b2:	14 c0       	rjmp	.+40     	; 0x34dc <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	6d 89       	ldd	r22, Y+21	; 0x15
    34b6:	7e 89       	ldd	r23, Y+22	; 0x16
    34b8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ba:	98 8d       	ldd	r25, Y+24	; 0x18
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9c 8b       	std	Y+20, r25	; 0x14
    34c6:	8b 8b       	std	Y+19, r24	; 0x13
    34c8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ca:	9c 89       	ldd	r25, Y+20	; 0x14
    34cc:	98 8b       	std	Y+16, r25	; 0x10
    34ce:	8f 87       	std	Y+15, r24	; 0x0f
    34d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d2:	98 89       	ldd	r25, Y+16	; 0x10
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <HLCD_sendCmd+0xd68>
    34d8:	98 8b       	std	Y+16, r25	; 0x10
    34da:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    34dc:	fe 01       	movw	r30, r28
    34de:	e3 57       	subi	r30, 0x73	; 115
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	88 23       	and	r24, r24
    34e6:	59 f4       	brne	.+22     	; 0x34fe <HLCD_sendCmd+0xd92>
    34e8:	ce 01       	movw	r24, r28
    34ea:	89 56       	subi	r24, 0x69	; 105
    34ec:	9f 4f       	sbci	r25, 0xFF	; 255
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    34f4:	fe 01       	movw	r30, r28
    34f6:	e3 57       	subi	r30, 0x73	; 115
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 83       	st	Z, r24
    34fc:	05 c0       	rjmp	.+10     	; 0x3508 <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    34fe:	fe 01       	movw	r30, r28
    3500:	e2 57       	subi	r30, 0x72	; 114
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	80 83       	st	Z, r24
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	a0 e8       	ldi	r26, 0x80	; 128
    350e:	bf e3       	ldi	r27, 0x3F	; 63
    3510:	8b 87       	std	Y+11, r24	; 0x0b
    3512:	9c 87       	std	Y+12, r25	; 0x0c
    3514:	ad 87       	std	Y+13, r26	; 0x0d
    3516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3518:	6b 85       	ldd	r22, Y+11	; 0x0b
    351a:	7c 85       	ldd	r23, Y+12	; 0x0c
    351c:	8d 85       	ldd	r24, Y+13	; 0x0d
    351e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4a ef       	ldi	r20, 0xFA	; 250
    3526:	54 e4       	ldi	r21, 0x44	; 68
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	8f 83       	std	Y+7, r24	; 0x07
    3532:	98 87       	std	Y+8, r25	; 0x08
    3534:	a9 87       	std	Y+9, r26	; 0x09
    3536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3538:	6f 81       	ldd	r22, Y+7	; 0x07
    353a:	78 85       	ldd	r23, Y+8	; 0x08
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	2c f4       	brge	.+10     	; 0x355a <HLCD_sendCmd+0xdee>
		__ticks = 1;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9e 83       	std	Y+6, r25	; 0x06
    3556:	8d 83       	std	Y+5, r24	; 0x05
    3558:	3f c0       	rjmp	.+126    	; 0x35d8 <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	3f ef       	ldi	r19, 0xFF	; 255
    3566:	4f e7       	ldi	r20, 0x7F	; 127
    3568:	57 e4       	ldi	r21, 0x47	; 71
    356a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    356e:	18 16       	cp	r1, r24
    3570:	4c f5       	brge	.+82     	; 0x35c4 <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3572:	6b 85       	ldd	r22, Y+11	; 0x0b
    3574:	7c 85       	ldd	r23, Y+12	; 0x0c
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e2       	ldi	r20, 0x20	; 32
    3580:	51 e4       	ldi	r21, 0x41	; 65
    3582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	bc 01       	movw	r22, r24
    358c:	cd 01       	movw	r24, r26
    358e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	9e 83       	std	Y+6, r25	; 0x06
    3598:	8d 83       	std	Y+5, r24	; 0x05
    359a:	0f c0       	rjmp	.+30     	; 0x35ba <HLCD_sendCmd+0xe4e>
    359c:	88 ec       	ldi	r24, 0xC8	; 200
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	9c 83       	std	Y+4, r25	; 0x04
    35a2:	8b 83       	std	Y+3, r24	; 0x03
    35a4:	8b 81       	ldd	r24, Y+3	; 0x03
    35a6:	9c 81       	ldd	r25, Y+4	; 0x04
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <HLCD_sendCmd+0xe3c>
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	9e 83       	std	Y+6, r25	; 0x06
    35b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ba:	8d 81       	ldd	r24, Y+5	; 0x05
    35bc:	9e 81       	ldd	r25, Y+6	; 0x06
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	69 f7       	brne	.-38     	; 0x359c <HLCD_sendCmd+0xe30>
    35c2:	1a c0       	rjmp	.+52     	; 0x35f8 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	9a 83       	std	Y+2, r25	; 0x02
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <HLCD_sendCmd+0xe78>
    35e8:	9a 83       	std	Y+2, r25	; 0x02
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	05 c0       	rjmp	.+10     	; 0x35f8 <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    35ee:	fe 01       	movw	r30, r28
    35f0:	e2 57       	subi	r30, 0x72	; 114
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	83 e0       	ldi	r24, 0x03	; 3
    35f6:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    35f8:	fe 01       	movw	r30, r28
    35fa:	e3 57       	subi	r30, 0x73	; 115
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	88 23       	and	r24, r24
    3602:	29 f4       	brne	.+10     	; 0x360e <HLCD_sendCmd+0xea2>
    3604:	fe 01       	movw	r30, r28
    3606:	e2 57       	subi	r30, 0x72	; 114
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	10 82       	st	Z, r1
    360c:	0b c0       	rjmp	.+22     	; 0x3624 <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    360e:	fe 01       	movw	r30, r28
    3610:	e2 57       	subi	r30, 0x72	; 114
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	80 83       	st	Z, r24
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    361a:	fe 01       	movw	r30, r28
    361c:	e2 57       	subi	r30, 0x72	; 114
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	80 83       	st	Z, r24
	}

	return lcdRet;
    3624:	fe 01       	movw	r30, r28
    3626:	e2 57       	subi	r30, 0x72	; 114
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
}
    362c:	c3 56       	subi	r28, 0x63	; 99
    362e:	df 4f       	sbci	r29, 0xFF	; 255
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	08 95       	ret

00003644 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	cd 59       	subi	r28, 0x9D	; 157
    3652:	d0 40       	sbci	r29, 0x00	; 0
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	fe 01       	movw	r30, r28
    3660:	e5 56       	subi	r30, 0x65	; 101
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	fe 01       	movw	r30, r28
    366a:	e3 56       	subi	r30, 0x63	; 99
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    3670:	fe 01       	movw	r30, r28
    3672:	e2 57       	subi	r30, 0x72	; 114
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    367a:	fe 01       	movw	r30, r28
    367c:	e3 57       	subi	r30, 0x73	; 115
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    3684:	fe 01       	movw	r30, r28
    3686:	e5 56       	subi	r30, 0x65	; 101
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	09 f4       	brne	.+2      	; 0x3694 <HLCD_displayChar+0x50>
    3692:	2f c7       	rjmp	.+3678   	; 0x44f2 <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3694:	fe 01       	movw	r30, r28
    3696:	e5 56       	subi	r30, 0x65	; 101
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	01 90       	ld	r0, Z+
    369c:	f0 81       	ld	r31, Z
    369e:	e0 2d       	mov	r30, r0
    36a0:	81 81       	ldd	r24, Z+1	; 0x01
    36a2:	fe 01       	movw	r30, r28
    36a4:	e5 56       	subi	r30, 0x65	; 101
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	01 90       	ld	r0, Z+
    36aa:	f0 81       	ld	r31, Z
    36ac:	e0 2d       	mov	r30, r0
    36ae:	93 81       	ldd	r25, Z+3	; 0x03
    36b0:	fe 01       	movw	r30, r28
    36b2:	e1 57       	subi	r30, 0x71	; 113
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 83       	st	Z, r24
    36b8:	fe 01       	movw	r30, r28
    36ba:	e1 57       	subi	r30, 0x71	; 113
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	fe 01       	movw	r30, r28
    36c2:	e1 57       	subi	r30, 0x71	; 113
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	82 83       	std	Z+2, r24	; 0x02
    36ca:	fe 01       	movw	r30, r28
    36cc:	e1 57       	subi	r30, 0x71	; 113
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    36d2:	fe 01       	movw	r30, r28
    36d4:	e5 56       	subi	r30, 0x65	; 101
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	01 90       	ld	r0, Z+
    36da:	f0 81       	ld	r31, Z
    36dc:	e0 2d       	mov	r30, r0
    36de:	81 81       	ldd	r24, Z+1	; 0x01
    36e0:	fe 01       	movw	r30, r28
    36e2:	e5 56       	subi	r30, 0x65	; 101
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	01 90       	ld	r0, Z+
    36e8:	f0 81       	ld	r31, Z
    36ea:	e0 2d       	mov	r30, r0
    36ec:	94 81       	ldd	r25, Z+4	; 0x04
    36ee:	fe 01       	movw	r30, r28
    36f0:	ed 56       	subi	r30, 0x6D	; 109
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 83       	st	Z, r24
    36f6:	fe 01       	movw	r30, r28
    36f8:	ed 56       	subi	r30, 0x6D	; 109
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	fe 01       	movw	r30, r28
    3700:	ed 56       	subi	r30, 0x6D	; 109
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	82 83       	std	Z+2, r24	; 0x02
    3708:	fe 01       	movw	r30, r28
    370a:	ed 56       	subi	r30, 0x6D	; 109
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3710:	fe 01       	movw	r30, r28
    3712:	e5 56       	subi	r30, 0x65	; 101
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	01 90       	ld	r0, Z+
    3718:	f0 81       	ld	r31, Z
    371a:	e0 2d       	mov	r30, r0
    371c:	81 81       	ldd	r24, Z+1	; 0x01
    371e:	fe 01       	movw	r30, r28
    3720:	e5 56       	subi	r30, 0x65	; 101
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	01 90       	ld	r0, Z+
    3726:	f0 81       	ld	r31, Z
    3728:	e0 2d       	mov	r30, r0
    372a:	95 81       	ldd	r25, Z+5	; 0x05
    372c:	fe 01       	movw	r30, r28
    372e:	e9 56       	subi	r30, 0x69	; 105
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	80 83       	st	Z, r24
    3734:	fe 01       	movw	r30, r28
    3736:	e9 56       	subi	r30, 0x69	; 105
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	fe 01       	movw	r30, r28
    373e:	e9 56       	subi	r30, 0x69	; 105
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	82 83       	std	Z+2, r24	; 0x02
    3746:	fe 01       	movw	r30, r28
    3748:	e9 56       	subi	r30, 0x69	; 105
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    374e:	ce 01       	movw	r24, r28
    3750:	81 57       	subi	r24, 0x71	; 113
    3752:	9f 4f       	sbci	r25, 0xFF	; 255
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    375a:	fe 01       	movw	r30, r28
    375c:	e3 57       	subi	r30, 0x73	; 115
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    3762:	fe 01       	movw	r30, r28
    3764:	e3 57       	subi	r30, 0x73	; 115
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	88 23       	and	r24, r24
    376c:	59 f4       	brne	.+22     	; 0x3784 <HLCD_displayChar+0x140>
    376e:	ce 01       	movw	r24, r28
    3770:	8d 56       	subi	r24, 0x6D	; 109
    3772:	9f 4f       	sbci	r25, 0xFF	; 255
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    377a:	fe 01       	movw	r30, r28
    377c:	e3 57       	subi	r30, 0x73	; 115
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 83       	st	Z, r24
    3782:	05 c0       	rjmp	.+10     	; 0x378e <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    3784:	fe 01       	movw	r30, r28
    3786:	e2 57       	subi	r30, 0x72	; 114
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	80 83       	st	Z, r24
    378e:	fe 01       	movw	r30, r28
    3790:	e7 57       	subi	r30, 0x77	; 119
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	a0 ef       	ldi	r26, 0xF0	; 240
    379a:	b1 e4       	ldi	r27, 0x41	; 65
    379c:	80 83       	st	Z, r24
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	a2 83       	std	Z+2, r26	; 0x02
    37a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	8e 01       	movw	r16, r28
    37a6:	0b 57       	subi	r16, 0x7B	; 123
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
    37aa:	fe 01       	movw	r30, r28
    37ac:	e7 57       	subi	r30, 0x77	; 119
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	4a ef       	ldi	r20, 0xFA	; 250
    37be:	54 e4       	ldi	r21, 0x44	; 68
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	a2 83       	std	Z+2, r26	; 0x02
    37d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37d2:	fe 01       	movw	r30, r28
    37d4:	eb 57       	subi	r30, 0x7B	; 123
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e8       	ldi	r20, 0x80	; 128
    37e6:	5f e3       	ldi	r21, 0x3F	; 63
    37e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ec:	88 23       	and	r24, r24
    37ee:	44 f4       	brge	.+16     	; 0x3800 <HLCD_displayChar+0x1bc>
		__ticks = 1;
    37f0:	fe 01       	movw	r30, r28
    37f2:	ed 57       	subi	r30, 0x7D	; 125
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
    37fe:	64 c0       	rjmp	.+200    	; 0x38c8 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    3800:	fe 01       	movw	r30, r28
    3802:	eb 57       	subi	r30, 0x7B	; 123
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	0c f0       	brlt	.+2      	; 0x3820 <HLCD_displayChar+0x1dc>
    381e:	43 c0       	rjmp	.+134    	; 0x38a6 <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	fe 01       	movw	r30, r28
    3822:	e7 57       	subi	r30, 0x77	; 119
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e2       	ldi	r20, 0x20	; 32
    3834:	51 e4       	ldi	r21, 0x41	; 65
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8e 01       	movw	r16, r28
    3840:	0d 57       	subi	r16, 0x7D	; 125
    3842:	1f 4f       	sbci	r17, 0xFF	; 255
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	f8 01       	movw	r30, r16
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	1f c0       	rjmp	.+62     	; 0x3896 <HLCD_displayChar+0x252>
    3858:	fe 01       	movw	r30, r28
    385a:	ef 57       	subi	r30, 0x7F	; 127
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	88 ec       	ldi	r24, 0xC8	; 200
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
    3866:	fe 01       	movw	r30, r28
    3868:	ef 57       	subi	r30, 0x7F	; 127
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <HLCD_displayChar+0x22c>
    3874:	fe 01       	movw	r30, r28
    3876:	ef 57       	subi	r30, 0x7F	; 127
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387e:	de 01       	movw	r26, r28
    3880:	ad 57       	subi	r26, 0x7D	; 125
    3882:	bf 4f       	sbci	r27, 0xFF	; 255
    3884:	fe 01       	movw	r30, r28
    3886:	ed 57       	subi	r30, 0x7D	; 125
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	11 96       	adiw	r26, 0x01	; 1
    3892:	9c 93       	st	X, r25
    3894:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	fe 01       	movw	r30, r28
    3898:	ed 57       	subi	r30, 0x7D	; 125
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	d1 f6       	brne	.-76     	; 0x3858 <HLCD_displayChar+0x214>
    38a4:	28 c0       	rjmp	.+80     	; 0x38f6 <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	8e 01       	movw	r16, r28
    38a8:	0d 57       	subi	r16, 0x7D	; 125
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	fe 01       	movw	r30, r28
    38ae:	eb 57       	subi	r30, 0x7B	; 123
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	f8 01       	movw	r30, r16
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	de 01       	movw	r26, r28
    38ca:	a1 58       	subi	r26, 0x81	; 129
    38cc:	bf 4f       	sbci	r27, 0xFF	; 255
    38ce:	fe 01       	movw	r30, r28
    38d0:	ed 57       	subi	r30, 0x7D	; 125
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	11 96       	adiw	r26, 0x01	; 1
    38da:	9c 93       	st	X, r25
    38dc:	8e 93       	st	-X, r24
    38de:	fe 01       	movw	r30, r28
    38e0:	e1 58       	subi	r30, 0x81	; 129
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <HLCD_displayChar+0x2a4>
    38ec:	fe 01       	movw	r30, r28
    38ee:	e1 58       	subi	r30, 0x81	; 129
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    38f6:	fe 01       	movw	r30, r28
    38f8:	e5 56       	subi	r30, 0x65	; 101
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	01 90       	ld	r0, Z+
    38fe:	f0 81       	ld	r31, Z
    3900:	e0 2d       	mov	r30, r0
    3902:	80 81       	ld	r24, Z
    3904:	88 23       	and	r24, r24
    3906:	09 f0       	breq	.+2      	; 0x390a <HLCD_displayChar+0x2c6>
    3908:	3d c4       	rjmp	.+2170   	; 0x4184 <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    390a:	fe 01       	movw	r30, r28
    390c:	e3 57       	subi	r30, 0x73	; 115
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	88 23       	and	r24, r24
    3914:	59 f4       	brne	.+22     	; 0x392c <HLCD_displayChar+0x2e8>
    3916:	ce 01       	movw	r24, r28
    3918:	89 56       	subi	r24, 0x69	; 105
    391a:	9f 4f       	sbci	r25, 0xFF	; 255
    391c:	61 e0       	ldi	r22, 0x01	; 1
    391e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    3922:	fe 01       	movw	r30, r28
    3924:	e3 57       	subi	r30, 0x73	; 115
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 83       	st	Z, r24
    392a:	05 c0       	rjmp	.+10     	; 0x3936 <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    392c:	fe 01       	movw	r30, r28
    392e:	e2 57       	subi	r30, 0x72	; 114
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	80 83       	st	Z, r24
    3936:	fe 01       	movw	r30, r28
    3938:	e5 58       	subi	r30, 0x85	; 133
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a0 ef       	ldi	r26, 0xF0	; 240
    3942:	b1 e4       	ldi	r27, 0x41	; 65
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394c:	8e 01       	movw	r16, r28
    394e:	09 58       	subi	r16, 0x89	; 137
    3950:	1f 4f       	sbci	r17, 0xFF	; 255
    3952:	fe 01       	movw	r30, r28
    3954:	e5 58       	subi	r30, 0x85	; 133
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a ef       	ldi	r20, 0xFA	; 250
    3966:	54 e4       	ldi	r21, 0x44	; 68
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	f8 01       	movw	r30, r16
    3972:	80 83       	st	Z, r24
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	a2 83       	std	Z+2, r26	; 0x02
    3978:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    397a:	fe 01       	movw	r30, r28
    397c:	e9 58       	subi	r30, 0x89	; 137
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e8       	ldi	r20, 0x80	; 128
    398e:	5f e3       	ldi	r21, 0x3F	; 63
    3990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3994:	88 23       	and	r24, r24
    3996:	44 f4       	brge	.+16     	; 0x39a8 <HLCD_displayChar+0x364>
		__ticks = 1;
    3998:	fe 01       	movw	r30, r28
    399a:	eb 58       	subi	r30, 0x8B	; 139
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	80 83       	st	Z, r24
    39a6:	64 c0       	rjmp	.+200    	; 0x3a70 <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    39a8:	fe 01       	movw	r30, r28
    39aa:	e9 58       	subi	r30, 0x89	; 137
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	3f ef       	ldi	r19, 0xFF	; 255
    39ba:	4f e7       	ldi	r20, 0x7F	; 127
    39bc:	57 e4       	ldi	r21, 0x47	; 71
    39be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39c2:	18 16       	cp	r1, r24
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <HLCD_displayChar+0x384>
    39c6:	43 c0       	rjmp	.+134    	; 0x3a4e <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c8:	fe 01       	movw	r30, r28
    39ca:	e5 58       	subi	r30, 0x85	; 133
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e2       	ldi	r20, 0x20	; 32
    39dc:	51 e4       	ldi	r21, 0x41	; 65
    39de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	8e 01       	movw	r16, r28
    39e8:	0b 58       	subi	r16, 0x8B	; 139
    39ea:	1f 4f       	sbci	r17, 0xFF	; 255
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	f8 01       	movw	r30, r16
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
    39fe:	1f c0       	rjmp	.+62     	; 0x3a3e <HLCD_displayChar+0x3fa>
    3a00:	fe 01       	movw	r30, r28
    3a02:	ed 58       	subi	r30, 0x8D	; 141
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	88 ec       	ldi	r24, 0xC8	; 200
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ed 58       	subi	r30, 0x8D	; 141
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <HLCD_displayChar+0x3d4>
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	ed 58       	subi	r30, 0x8D	; 141
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	de 01       	movw	r26, r28
    3a28:	ab 58       	subi	r26, 0x8B	; 139
    3a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	eb 58       	subi	r30, 0x8B	; 139
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	11 96       	adiw	r26, 0x01	; 1
    3a3a:	9c 93       	st	X, r25
    3a3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3e:	fe 01       	movw	r30, r28
    3a40:	eb 58       	subi	r30, 0x8B	; 139
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	91 81       	ldd	r25, Z+1	; 0x01
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	d1 f6       	brne	.-76     	; 0x3a00 <HLCD_displayChar+0x3bc>
    3a4c:	27 c0       	rjmp	.+78     	; 0x3a9c <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4e:	8e 01       	movw	r16, r28
    3a50:	0b 58       	subi	r16, 0x8B	; 139
    3a52:	1f 4f       	sbci	r17, 0xFF	; 255
    3a54:	fe 01       	movw	r30, r28
    3a56:	e9 58       	subi	r30, 0x89	; 137
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	60 81       	ld	r22, Z
    3a5c:	71 81       	ldd	r23, Z+1	; 0x01
    3a5e:	82 81       	ldd	r24, Z+2	; 0x02
    3a60:	93 81       	ldd	r25, Z+3	; 0x03
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	80 83       	st	Z, r24
    3a70:	de 01       	movw	r26, r28
    3a72:	af 58       	subi	r26, 0x8F	; 143
    3a74:	bf 4f       	sbci	r27, 0xFF	; 255
    3a76:	fe 01       	movw	r30, r28
    3a78:	eb 58       	subi	r30, 0x8B	; 139
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	80 81       	ld	r24, Z
    3a7e:	91 81       	ldd	r25, Z+1	; 0x01
    3a80:	8d 93       	st	X+, r24
    3a82:	9c 93       	st	X, r25
    3a84:	fe 01       	movw	r30, r28
    3a86:	ef 58       	subi	r30, 0x8F	; 143
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <HLCD_displayChar+0x44a>
    3a92:	fe 01       	movw	r30, r28
    3a94:	ef 58       	subi	r30, 0x8F	; 143
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	e5 56       	subi	r30, 0x65	; 101
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	01 90       	ld	r0, Z+
    3aa4:	f0 81       	ld	r31, Z
    3aa6:	e0 2d       	mov	r30, r0
    3aa8:	22 81       	ldd	r18, Z+2	; 0x02
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e3 56       	subi	r30, 0x63	; 99
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	92 95       	swap	r25
    3ab6:	9f 70       	andi	r25, 0x0F	; 15
    3ab8:	82 2f       	mov	r24, r18
    3aba:	69 2f       	mov	r22, r25
    3abc:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_set4msbValue>
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e3 59       	subi	r30, 0x93	; 147
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	a0 ef       	ldi	r26, 0xF0	; 240
    3acc:	b1 e4       	ldi	r27, 0x41	; 65
    3ace:	80 83       	st	Z, r24
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	a2 83       	std	Z+2, r26	; 0x02
    3ad4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad6:	8e 01       	movw	r16, r28
    3ad8:	07 59       	subi	r16, 0x97	; 151
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	fe 01       	movw	r30, r28
    3ade:	e3 59       	subi	r30, 0x93	; 147
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	60 81       	ld	r22, Z
    3ae4:	71 81       	ldd	r23, Z+1	; 0x01
    3ae6:	82 81       	ldd	r24, Z+2	; 0x02
    3ae8:	93 81       	ldd	r25, Z+3	; 0x03
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	4a ef       	ldi	r20, 0xFA	; 250
    3af0:	54 e4       	ldi	r21, 0x44	; 68
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	f8 01       	movw	r30, r16
    3afc:	80 83       	st	Z, r24
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	a2 83       	std	Z+2, r26	; 0x02
    3b02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b04:	fe 01       	movw	r30, r28
    3b06:	e7 59       	subi	r30, 0x97	; 151
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	60 81       	ld	r22, Z
    3b0c:	71 81       	ldd	r23, Z+1	; 0x01
    3b0e:	82 81       	ldd	r24, Z+2	; 0x02
    3b10:	93 81       	ldd	r25, Z+3	; 0x03
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e8       	ldi	r20, 0x80	; 128
    3b18:	5f e3       	ldi	r21, 0x3F	; 63
    3b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b1e:	88 23       	and	r24, r24
    3b20:	44 f4       	brge	.+16     	; 0x3b32 <HLCD_displayChar+0x4ee>
		__ticks = 1;
    3b22:	fe 01       	movw	r30, r28
    3b24:	e9 59       	subi	r30, 0x99	; 153
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
    3b30:	64 c0       	rjmp	.+200    	; 0x3bfa <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    3b32:	fe 01       	movw	r30, r28
    3b34:	e7 59       	subi	r30, 0x97	; 151
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	4f e7       	ldi	r20, 0x7F	; 127
    3b46:	57 e4       	ldi	r21, 0x47	; 71
    3b48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b4c:	18 16       	cp	r1, r24
    3b4e:	0c f0       	brlt	.+2      	; 0x3b52 <HLCD_displayChar+0x50e>
    3b50:	43 c0       	rjmp	.+134    	; 0x3bd8 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b52:	fe 01       	movw	r30, r28
    3b54:	e3 59       	subi	r30, 0x93	; 147
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	60 81       	ld	r22, Z
    3b5a:	71 81       	ldd	r23, Z+1	; 0x01
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e2       	ldi	r20, 0x20	; 32
    3b66:	51 e4       	ldi	r21, 0x41	; 65
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8e 01       	movw	r16, r28
    3b72:	09 59       	subi	r16, 0x99	; 153
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	f8 01       	movw	r30, r16
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	1f c0       	rjmp	.+62     	; 0x3bc8 <HLCD_displayChar+0x584>
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	eb 59       	subi	r30, 0x9B	; 155
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	88 ec       	ldi	r24, 0xC8	; 200
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	91 83       	std	Z+1, r25	; 0x01
    3b96:	80 83       	st	Z, r24
    3b98:	fe 01       	movw	r30, r28
    3b9a:	eb 59       	subi	r30, 0x9B	; 155
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 81       	ld	r24, Z
    3ba0:	91 81       	ldd	r25, Z+1	; 0x01
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	f1 f7       	brne	.-4      	; 0x3ba2 <HLCD_displayChar+0x55e>
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	eb 59       	subi	r30, 0x9B	; 155
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	91 83       	std	Z+1, r25	; 0x01
    3bae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb0:	de 01       	movw	r26, r28
    3bb2:	a9 59       	subi	r26, 0x99	; 153
    3bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e9 59       	subi	r30, 0x99	; 153
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	11 96       	adiw	r26, 0x01	; 1
    3bc4:	9c 93       	st	X, r25
    3bc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e9 59       	subi	r30, 0x99	; 153
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	80 81       	ld	r24, Z
    3bd0:	91 81       	ldd	r25, Z+1	; 0x01
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	d1 f6       	brne	.-76     	; 0x3b8a <HLCD_displayChar+0x546>
    3bd6:	28 c0       	rjmp	.+80     	; 0x3c28 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd8:	8e 01       	movw	r16, r28
    3bda:	09 59       	subi	r16, 0x99	; 153
    3bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bde:	fe 01       	movw	r30, r28
    3be0:	e7 59       	subi	r30, 0x97	; 151
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
    3bfa:	de 01       	movw	r26, r28
    3bfc:	ad 59       	subi	r26, 0x9D	; 157
    3bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    3c00:	fe 01       	movw	r30, r28
    3c02:	e9 59       	subi	r30, 0x99	; 153
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	11 96       	adiw	r26, 0x01	; 1
    3c0c:	9c 93       	st	X, r25
    3c0e:	8e 93       	st	-X, r24
    3c10:	fe 01       	movw	r30, r28
    3c12:	ed 59       	subi	r30, 0x9D	; 157
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <HLCD_displayChar+0x5d6>
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ed 59       	subi	r30, 0x9D	; 157
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e3 57       	subi	r30, 0x73	; 115
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	88 23       	and	r24, r24
    3c32:	59 f4       	brne	.+22     	; 0x3c4a <HLCD_displayChar+0x606>
    3c34:	ce 01       	movw	r24, r28
    3c36:	89 56       	subi	r24, 0x69	; 105
    3c38:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    3c40:	fe 01       	movw	r30, r28
    3c42:	e3 57       	subi	r30, 0x73	; 115
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 83       	st	Z, r24
    3c48:	05 c0       	rjmp	.+10     	; 0x3c54 <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e2 57       	subi	r30, 0x72	; 114
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	80 83       	st	Z, r24
    3c54:	fe 01       	movw	r30, r28
    3c56:	e1 5a       	subi	r30, 0xA1	; 161
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 ef       	ldi	r26, 0xF0	; 240
    3c60:	b1 e4       	ldi	r27, 0x41	; 65
    3c62:	80 83       	st	Z, r24
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	a2 83       	std	Z+2, r26	; 0x02
    3c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6a:	8e 01       	movw	r16, r28
    3c6c:	05 5a       	subi	r16, 0xA5	; 165
    3c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c70:	fe 01       	movw	r30, r28
    3c72:	e1 5a       	subi	r30, 0xA1	; 161
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	60 81       	ld	r22, Z
    3c78:	71 81       	ldd	r23, Z+1	; 0x01
    3c7a:	82 81       	ldd	r24, Z+2	; 0x02
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	4a ef       	ldi	r20, 0xFA	; 250
    3c84:	54 e4       	ldi	r21, 0x44	; 68
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	f8 01       	movw	r30, r16
    3c90:	80 83       	st	Z, r24
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	a2 83       	std	Z+2, r26	; 0x02
    3c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e5 5a       	subi	r30, 0xA5	; 165
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	60 81       	ld	r22, Z
    3ca0:	71 81       	ldd	r23, Z+1	; 0x01
    3ca2:	82 81       	ldd	r24, Z+2	; 0x02
    3ca4:	93 81       	ldd	r25, Z+3	; 0x03
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e8       	ldi	r20, 0x80	; 128
    3cac:	5f e3       	ldi	r21, 0x3F	; 63
    3cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb2:	88 23       	and	r24, r24
    3cb4:	44 f4       	brge	.+16     	; 0x3cc6 <HLCD_displayChar+0x682>
		__ticks = 1;
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e7 5a       	subi	r30, 0xA7	; 167
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    3cc4:	64 c0       	rjmp	.+200    	; 0x3d8e <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e5 5a       	subi	r30, 0xA5	; 165
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	60 81       	ld	r22, Z
    3cce:	71 81       	ldd	r23, Z+1	; 0x01
    3cd0:	82 81       	ldd	r24, Z+2	; 0x02
    3cd2:	93 81       	ldd	r25, Z+3	; 0x03
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
    3cd8:	4f e7       	ldi	r20, 0x7F	; 127
    3cda:	57 e4       	ldi	r21, 0x47	; 71
    3cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	0c f0       	brlt	.+2      	; 0x3ce6 <HLCD_displayChar+0x6a2>
    3ce4:	43 c0       	rjmp	.+134    	; 0x3d6c <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e1 5a       	subi	r30, 0xA1	; 161
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	60 81       	ld	r22, Z
    3cee:	71 81       	ldd	r23, Z+1	; 0x01
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e2       	ldi	r20, 0x20	; 32
    3cfa:	51 e4       	ldi	r21, 0x41	; 65
    3cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	8e 01       	movw	r16, r28
    3d06:	07 5a       	subi	r16, 0xA7	; 167
    3d08:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	f8 01       	movw	r30, r16
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	80 83       	st	Z, r24
    3d1c:	1f c0       	rjmp	.+62     	; 0x3d5c <HLCD_displayChar+0x718>
    3d1e:	fe 01       	movw	r30, r28
    3d20:	e9 5a       	subi	r30, 0xA9	; 169
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	88 ec       	ldi	r24, 0xC8	; 200
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	80 83       	st	Z, r24
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e9 5a       	subi	r30, 0xA9	; 169
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	01 97       	sbiw	r24, 0x01	; 1
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <HLCD_displayChar+0x6f2>
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e9 5a       	subi	r30, 0xA9	; 169
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	91 83       	std	Z+1, r25	; 0x01
    3d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d44:	de 01       	movw	r26, r28
    3d46:	a7 5a       	subi	r26, 0xA7	; 167
    3d48:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e7 5a       	subi	r30, 0xA7	; 167
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	80 81       	ld	r24, Z
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	11 96       	adiw	r26, 0x01	; 1
    3d58:	9c 93       	st	X, r25
    3d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	e7 5a       	subi	r30, 0xA7	; 167
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	d1 f6       	brne	.-76     	; 0x3d1e <HLCD_displayChar+0x6da>
    3d6a:	28 c0       	rjmp	.+80     	; 0x3dbc <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	8e 01       	movw	r16, r28
    3d6e:	07 5a       	subi	r16, 0xA7	; 167
    3d70:	1f 4f       	sbci	r17, 0xFF	; 255
    3d72:	fe 01       	movw	r30, r28
    3d74:	e5 5a       	subi	r30, 0xA5	; 165
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	60 81       	ld	r22, Z
    3d7a:	71 81       	ldd	r23, Z+1	; 0x01
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	f8 01       	movw	r30, r16
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	80 83       	st	Z, r24
    3d8e:	de 01       	movw	r26, r28
    3d90:	ab 5a       	subi	r26, 0xAB	; 171
    3d92:	bf 4f       	sbci	r27, 0xFF	; 255
    3d94:	fe 01       	movw	r30, r28
    3d96:	e7 5a       	subi	r30, 0xA7	; 167
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	80 81       	ld	r24, Z
    3d9c:	91 81       	ldd	r25, Z+1	; 0x01
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	9c 93       	st	X, r25
    3da2:	8e 93       	st	-X, r24
    3da4:	fe 01       	movw	r30, r28
    3da6:	eb 5a       	subi	r30, 0xAB	; 171
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <HLCD_displayChar+0x76a>
    3db2:	fe 01       	movw	r30, r28
    3db4:	eb 5a       	subi	r30, 0xAB	; 171
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e3 57       	subi	r30, 0x73	; 115
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 81       	ld	r24, Z
    3dc4:	88 23       	and	r24, r24
    3dc6:	59 f4       	brne	.+22     	; 0x3dde <HLCD_displayChar+0x79a>
    3dc8:	ce 01       	movw	r24, r28
    3dca:	89 56       	subi	r24, 0x69	; 105
    3dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e3 57       	subi	r30, 0x73	; 115
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	80 83       	st	Z, r24
    3ddc:	05 c0       	rjmp	.+10     	; 0x3de8 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    3dde:	fe 01       	movw	r30, r28
    3de0:	e2 57       	subi	r30, 0x72	; 114
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	80 83       	st	Z, r24
    3de8:	fe 01       	movw	r30, r28
    3dea:	ef 5a       	subi	r30, 0xAF	; 175
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a0 ef       	ldi	r26, 0xF0	; 240
    3df4:	b1 e4       	ldi	r27, 0x41	; 65
    3df6:	80 83       	st	Z, r24
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	a2 83       	std	Z+2, r26	; 0x02
    3dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfe:	8e 01       	movw	r16, r28
    3e00:	03 5b       	subi	r16, 0xB3	; 179
    3e02:	1f 4f       	sbci	r17, 0xFF	; 255
    3e04:	fe 01       	movw	r30, r28
    3e06:	ef 5a       	subi	r30, 0xAF	; 175
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	4a ef       	ldi	r20, 0xFA	; 250
    3e18:	54 e4       	ldi	r21, 0x44	; 68
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	f8 01       	movw	r30, r16
    3e24:	80 83       	st	Z, r24
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	a2 83       	std	Z+2, r26	; 0x02
    3e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e3 5b       	subi	r30, 0xB3	; 179
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	60 81       	ld	r22, Z
    3e34:	71 81       	ldd	r23, Z+1	; 0x01
    3e36:	82 81       	ldd	r24, Z+2	; 0x02
    3e38:	93 81       	ldd	r25, Z+3	; 0x03
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e8       	ldi	r20, 0x80	; 128
    3e40:	5f e3       	ldi	r21, 0x3F	; 63
    3e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e46:	88 23       	and	r24, r24
    3e48:	44 f4       	brge	.+16     	; 0x3e5a <HLCD_displayChar+0x816>
		__ticks = 1;
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e5 5b       	subi	r30, 0xB5	; 181
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	91 83       	std	Z+1, r25	; 0x01
    3e56:	80 83       	st	Z, r24
    3e58:	64 c0       	rjmp	.+200    	; 0x3f22 <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e3 5b       	subi	r30, 0xB3	; 179
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	3f ef       	ldi	r19, 0xFF	; 255
    3e6c:	4f e7       	ldi	r20, 0x7F	; 127
    3e6e:	57 e4       	ldi	r21, 0x47	; 71
    3e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e74:	18 16       	cp	r1, r24
    3e76:	0c f0       	brlt	.+2      	; 0x3e7a <HLCD_displayChar+0x836>
    3e78:	43 c0       	rjmp	.+134    	; 0x3f00 <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	ef 5a       	subi	r30, 0xAF	; 175
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	60 81       	ld	r22, Z
    3e82:	71 81       	ldd	r23, Z+1	; 0x01
    3e84:	82 81       	ldd	r24, Z+2	; 0x02
    3e86:	93 81       	ldd	r25, Z+3	; 0x03
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	8e 01       	movw	r16, r28
    3e9a:	05 5b       	subi	r16, 0xB5	; 181
    3e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	cd 01       	movw	r24, r26
    3ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	f8 01       	movw	r30, r16
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	1f c0       	rjmp	.+62     	; 0x3ef0 <HLCD_displayChar+0x8ac>
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e7 5b       	subi	r30, 0xB7	; 183
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	88 ec       	ldi	r24, 0xC8	; 200
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e7 5b       	subi	r30, 0xB7	; 183
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <HLCD_displayChar+0x886>
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e7 5b       	subi	r30, 0xB7	; 183
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed8:	de 01       	movw	r26, r28
    3eda:	a5 5b       	subi	r26, 0xB5	; 181
    3edc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e5 5b       	subi	r30, 0xB5	; 181
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	80 81       	ld	r24, Z
    3ee6:	91 81       	ldd	r25, Z+1	; 0x01
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	11 96       	adiw	r26, 0x01	; 1
    3eec:	9c 93       	st	X, r25
    3eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e5 5b       	subi	r30, 0xB5	; 181
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	d1 f6       	brne	.-76     	; 0x3eb2 <HLCD_displayChar+0x86e>
    3efe:	27 c0       	rjmp	.+78     	; 0x3f4e <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	8e 01       	movw	r16, r28
    3f02:	05 5b       	subi	r16, 0xB5	; 181
    3f04:	1f 4f       	sbci	r17, 0xFF	; 255
    3f06:	fe 01       	movw	r30, r28
    3f08:	e3 5b       	subi	r30, 0xB3	; 179
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	60 81       	ld	r22, Z
    3f0e:	71 81       	ldd	r23, Z+1	; 0x01
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	93 81       	ldd	r25, Z+3	; 0x03
    3f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	91 83       	std	Z+1, r25	; 0x01
    3f20:	80 83       	st	Z, r24
    3f22:	de 01       	movw	r26, r28
    3f24:	a9 5b       	subi	r26, 0xB9	; 185
    3f26:	bf 4f       	sbci	r27, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e5 5b       	subi	r30, 0xB5	; 181
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	8d 93       	st	X+, r24
    3f34:	9c 93       	st	X, r25
    3f36:	fe 01       	movw	r30, r28
    3f38:	e9 5b       	subi	r30, 0xB9	; 185
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <HLCD_displayChar+0x8fc>
    3f44:	fe 01       	movw	r30, r28
    3f46:	e9 5b       	subi	r30, 0xB9	; 185
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e5 56       	subi	r30, 0x65	; 101
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	01 90       	ld	r0, Z+
    3f56:	f0 81       	ld	r31, Z
    3f58:	e0 2d       	mov	r30, r0
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e3 56       	subi	r30, 0x63	; 99
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	60 81       	ld	r22, Z
    3f64:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_set4msbValue>
    3f68:	fe 01       	movw	r30, r28
    3f6a:	ed 5b       	subi	r30, 0xBD	; 189
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	a0 ef       	ldi	r26, 0xF0	; 240
    3f74:	b1 e4       	ldi	r27, 0x41	; 65
    3f76:	80 83       	st	Z, r24
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	a2 83       	std	Z+2, r26	; 0x02
    3f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f7e:	8e 01       	movw	r16, r28
    3f80:	01 5c       	subi	r16, 0xC1	; 193
    3f82:	1f 4f       	sbci	r17, 0xFF	; 255
    3f84:	fe 01       	movw	r30, r28
    3f86:	ed 5b       	subi	r30, 0xBD	; 189
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	82 81       	ldd	r24, Z+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	4a ef       	ldi	r20, 0xFA	; 250
    3f98:	54 e4       	ldi	r21, 0x44	; 68
    3f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	f8 01       	movw	r30, r16
    3fa4:	80 83       	st	Z, r24
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	a2 83       	std	Z+2, r26	; 0x02
    3faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fac:	fe 01       	movw	r30, r28
    3fae:	ff 96       	adiw	r30, 0x3f	; 63
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e8       	ldi	r20, 0x80	; 128
    3fbe:	5f e3       	ldi	r21, 0x3F	; 63
    3fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fc4:	88 23       	and	r24, r24
    3fc6:	2c f4       	brge	.+10     	; 0x3fd2 <HLCD_displayChar+0x98e>
		__ticks = 1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	9e af       	std	Y+62, r25	; 0x3e
    3fce:	8d af       	std	Y+61, r24	; 0x3d
    3fd0:	46 c0       	rjmp	.+140    	; 0x405e <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ff 96       	adiw	r30, 0x3f	; 63
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3f ef       	ldi	r19, 0xFF	; 255
    3fe2:	4f e7       	ldi	r20, 0x7F	; 127
    3fe4:	57 e4       	ldi	r21, 0x47	; 71
    3fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fea:	18 16       	cp	r1, r24
    3fec:	64 f5       	brge	.+88     	; 0x4046 <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fee:	fe 01       	movw	r30, r28
    3ff0:	ed 5b       	subi	r30, 0xBD	; 189
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e2       	ldi	r20, 0x20	; 32
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	9e af       	std	Y+62, r25	; 0x3e
    401a:	8d af       	std	Y+61, r24	; 0x3d
    401c:	0f c0       	rjmp	.+30     	; 0x403c <HLCD_displayChar+0x9f8>
    401e:	88 ec       	ldi	r24, 0xC8	; 200
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	9c af       	std	Y+60, r25	; 0x3c
    4024:	8b af       	std	Y+59, r24	; 0x3b
    4026:	8b ad       	ldd	r24, Y+59	; 0x3b
    4028:	9c ad       	ldd	r25, Y+60	; 0x3c
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <HLCD_displayChar+0x9e6>
    402e:	9c af       	std	Y+60, r25	; 0x3c
    4030:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4032:	8d ad       	ldd	r24, Y+61	; 0x3d
    4034:	9e ad       	ldd	r25, Y+62	; 0x3e
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	9e af       	std	Y+62, r25	; 0x3e
    403a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403c:	8d ad       	ldd	r24, Y+61	; 0x3d
    403e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	69 f7       	brne	.-38     	; 0x401e <HLCD_displayChar+0x9da>
    4044:	16 c0       	rjmp	.+44     	; 0x4072 <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	fe 01       	movw	r30, r28
    4048:	ff 96       	adiw	r30, 0x3f	; 63
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9e af       	std	Y+62, r25	; 0x3e
    405c:	8d af       	std	Y+61, r24	; 0x3d
    405e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4060:	9e ad       	ldd	r25, Y+62	; 0x3e
    4062:	9a af       	std	Y+58, r25	; 0x3a
    4064:	89 af       	std	Y+57, r24	; 0x39
    4066:	89 ad       	ldd	r24, Y+57	; 0x39
    4068:	9a ad       	ldd	r25, Y+58	; 0x3a
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <HLCD_displayChar+0xa26>
    406e:	9a af       	std	Y+58, r25	; 0x3a
    4070:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4072:	fe 01       	movw	r30, r28
    4074:	e3 57       	subi	r30, 0x73	; 115
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	80 81       	ld	r24, Z
    407a:	88 23       	and	r24, r24
    407c:	59 f4       	brne	.+22     	; 0x4094 <HLCD_displayChar+0xa50>
    407e:	ce 01       	movw	r24, r28
    4080:	89 56       	subi	r24, 0x69	; 105
    4082:	9f 4f       	sbci	r25, 0xFF	; 255
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    408a:	fe 01       	movw	r30, r28
    408c:	e3 57       	subi	r30, 0x73	; 115
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 83       	st	Z, r24
    4092:	05 c0       	rjmp	.+10     	; 0x409e <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    4094:	fe 01       	movw	r30, r28
    4096:	e2 57       	subi	r30, 0x72	; 114
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	80 83       	st	Z, r24
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	a0 ef       	ldi	r26, 0xF0	; 240
    40a4:	b1 e4       	ldi	r27, 0x41	; 65
    40a6:	8d ab       	std	Y+53, r24	; 0x35
    40a8:	9e ab       	std	Y+54, r25	; 0x36
    40aa:	af ab       	std	Y+55, r26	; 0x37
    40ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ae:	6d a9       	ldd	r22, Y+53	; 0x35
    40b0:	7e a9       	ldd	r23, Y+54	; 0x36
    40b2:	8f a9       	ldd	r24, Y+55	; 0x37
    40b4:	98 ad       	ldd	r25, Y+56	; 0x38
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	4a ef       	ldi	r20, 0xFA	; 250
    40bc:	54 e4       	ldi	r21, 0x44	; 68
    40be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	89 ab       	std	Y+49, r24	; 0x31
    40c8:	9a ab       	std	Y+50, r25	; 0x32
    40ca:	ab ab       	std	Y+51, r26	; 0x33
    40cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40ce:	69 a9       	ldd	r22, Y+49	; 0x31
    40d0:	7a a9       	ldd	r23, Y+50	; 0x32
    40d2:	8b a9       	ldd	r24, Y+51	; 0x33
    40d4:	9c a9       	ldd	r25, Y+52	; 0x34
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e8       	ldi	r20, 0x80	; 128
    40dc:	5f e3       	ldi	r21, 0x3F	; 63
    40de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40e2:	88 23       	and	r24, r24
    40e4:	2c f4       	brge	.+10     	; 0x40f0 <HLCD_displayChar+0xaac>
		__ticks = 1;
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	98 ab       	std	Y+48, r25	; 0x30
    40ec:	8f a7       	std	Y+47, r24	; 0x2f
    40ee:	3f c0       	rjmp	.+126    	; 0x416e <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    40f0:	69 a9       	ldd	r22, Y+49	; 0x31
    40f2:	7a a9       	ldd	r23, Y+50	; 0x32
    40f4:	8b a9       	ldd	r24, Y+51	; 0x33
    40f6:	9c a9       	ldd	r25, Y+52	; 0x34
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	3f ef       	ldi	r19, 0xFF	; 255
    40fc:	4f e7       	ldi	r20, 0x7F	; 127
    40fe:	57 e4       	ldi	r21, 0x47	; 71
    4100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4104:	18 16       	cp	r1, r24
    4106:	4c f5       	brge	.+82     	; 0x415a <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4108:	6d a9       	ldd	r22, Y+53	; 0x35
    410a:	7e a9       	ldd	r23, Y+54	; 0x36
    410c:	8f a9       	ldd	r24, Y+55	; 0x37
    410e:	98 ad       	ldd	r25, Y+56	; 0x38
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 e2       	ldi	r20, 0x20	; 32
    4116:	51 e4       	ldi	r21, 0x41	; 65
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	bc 01       	movw	r22, r24
    4122:	cd 01       	movw	r24, r26
    4124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	98 ab       	std	Y+48, r25	; 0x30
    412e:	8f a7       	std	Y+47, r24	; 0x2f
    4130:	0f c0       	rjmp	.+30     	; 0x4150 <HLCD_displayChar+0xb0c>
    4132:	88 ec       	ldi	r24, 0xC8	; 200
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	9e a7       	std	Y+46, r25	; 0x2e
    4138:	8d a7       	std	Y+45, r24	; 0x2d
    413a:	8d a5       	ldd	r24, Y+45	; 0x2d
    413c:	9e a5       	ldd	r25, Y+46	; 0x2e
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	f1 f7       	brne	.-4      	; 0x413e <HLCD_displayChar+0xafa>
    4142:	9e a7       	std	Y+46, r25	; 0x2e
    4144:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4146:	8f a5       	ldd	r24, Y+47	; 0x2f
    4148:	98 a9       	ldd	r25, Y+48	; 0x30
    414a:	01 97       	sbiw	r24, 0x01	; 1
    414c:	98 ab       	std	Y+48, r25	; 0x30
    414e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4150:	8f a5       	ldd	r24, Y+47	; 0x2f
    4152:	98 a9       	ldd	r25, Y+48	; 0x30
    4154:	00 97       	sbiw	r24, 0x00	; 0
    4156:	69 f7       	brne	.-38     	; 0x4132 <HLCD_displayChar+0xaee>
    4158:	bb c1       	rjmp	.+886    	; 0x44d0 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415a:	69 a9       	ldd	r22, Y+49	; 0x31
    415c:	7a a9       	ldd	r23, Y+50	; 0x32
    415e:	8b a9       	ldd	r24, Y+51	; 0x33
    4160:	9c a9       	ldd	r25, Y+52	; 0x34
    4162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	98 ab       	std	Y+48, r25	; 0x30
    416c:	8f a7       	std	Y+47, r24	; 0x2f
    416e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4170:	98 a9       	ldd	r25, Y+48	; 0x30
    4172:	9c a7       	std	Y+44, r25	; 0x2c
    4174:	8b a7       	std	Y+43, r24	; 0x2b
    4176:	8b a5       	ldd	r24, Y+43	; 0x2b
    4178:	9c a5       	ldd	r25, Y+44	; 0x2c
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	f1 f7       	brne	.-4      	; 0x417a <HLCD_displayChar+0xb36>
    417e:	9c a7       	std	Y+44, r25	; 0x2c
    4180:	8b a7       	std	Y+43, r24	; 0x2b
    4182:	a6 c1       	rjmp	.+844    	; 0x44d0 <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4184:	fe 01       	movw	r30, r28
    4186:	e5 56       	subi	r30, 0x65	; 101
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	01 90       	ld	r0, Z+
    418c:	f0 81       	ld	r31, Z
    418e:	e0 2d       	mov	r30, r0
    4190:	80 81       	ld	r24, Z
    4192:	81 30       	cpi	r24, 0x01	; 1
    4194:	09 f0       	breq	.+2      	; 0x4198 <HLCD_displayChar+0xb54>
    4196:	97 c1       	rjmp	.+814    	; 0x44c6 <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4198:	fe 01       	movw	r30, r28
    419a:	e3 57       	subi	r30, 0x73	; 115
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	88 23       	and	r24, r24
    41a2:	59 f4       	brne	.+22     	; 0x41ba <HLCD_displayChar+0xb76>
    41a4:	ce 01       	movw	r24, r28
    41a6:	89 56       	subi	r24, 0x69	; 105
    41a8:	9f 4f       	sbci	r25, 0xFF	; 255
    41aa:	61 e0       	ldi	r22, 0x01	; 1
    41ac:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    41b0:	fe 01       	movw	r30, r28
    41b2:	e3 57       	subi	r30, 0x73	; 115
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 83       	st	Z, r24
    41b8:	05 c0       	rjmp	.+10     	; 0x41c4 <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    41ba:	fe 01       	movw	r30, r28
    41bc:	e2 57       	subi	r30, 0x72	; 114
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	80 83       	st	Z, r24
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	a0 e8       	ldi	r26, 0x80	; 128
    41ca:	bf e3       	ldi	r27, 0x3F	; 63
    41cc:	8f a3       	std	Y+39, r24	; 0x27
    41ce:	98 a7       	std	Y+40, r25	; 0x28
    41d0:	a9 a7       	std	Y+41, r26	; 0x29
    41d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d4:	6f a1       	ldd	r22, Y+39	; 0x27
    41d6:	78 a5       	ldd	r23, Y+40	; 0x28
    41d8:	89 a5       	ldd	r24, Y+41	; 0x29
    41da:	9a a5       	ldd	r25, Y+42	; 0x2a
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	4a ef       	ldi	r20, 0xFA	; 250
    41e2:	54 e4       	ldi	r21, 0x44	; 68
    41e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	8b a3       	std	Y+35, r24	; 0x23
    41ee:	9c a3       	std	Y+36, r25	; 0x24
    41f0:	ad a3       	std	Y+37, r26	; 0x25
    41f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41f4:	6b a1       	ldd	r22, Y+35	; 0x23
    41f6:	7c a1       	ldd	r23, Y+36	; 0x24
    41f8:	8d a1       	ldd	r24, Y+37	; 0x25
    41fa:	9e a1       	ldd	r25, Y+38	; 0x26
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e8       	ldi	r20, 0x80	; 128
    4202:	5f e3       	ldi	r21, 0x3F	; 63
    4204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4208:	88 23       	and	r24, r24
    420a:	2c f4       	brge	.+10     	; 0x4216 <HLCD_displayChar+0xbd2>
		__ticks = 1;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	9a a3       	std	Y+34, r25	; 0x22
    4212:	89 a3       	std	Y+33, r24	; 0x21
    4214:	3f c0       	rjmp	.+126    	; 0x4294 <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    4216:	6b a1       	ldd	r22, Y+35	; 0x23
    4218:	7c a1       	ldd	r23, Y+36	; 0x24
    421a:	8d a1       	ldd	r24, Y+37	; 0x25
    421c:	9e a1       	ldd	r25, Y+38	; 0x26
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	3f ef       	ldi	r19, 0xFF	; 255
    4222:	4f e7       	ldi	r20, 0x7F	; 127
    4224:	57 e4       	ldi	r21, 0x47	; 71
    4226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    422a:	18 16       	cp	r1, r24
    422c:	4c f5       	brge	.+82     	; 0x4280 <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422e:	6f a1       	ldd	r22, Y+39	; 0x27
    4230:	78 a5       	ldd	r23, Y+40	; 0x28
    4232:	89 a5       	ldd	r24, Y+41	; 0x29
    4234:	9a a5       	ldd	r25, Y+42	; 0x2a
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e2       	ldi	r20, 0x20	; 32
    423c:	51 e4       	ldi	r21, 0x41	; 65
    423e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	9a a3       	std	Y+34, r25	; 0x22
    4254:	89 a3       	std	Y+33, r24	; 0x21
    4256:	0f c0       	rjmp	.+30     	; 0x4276 <HLCD_displayChar+0xc32>
    4258:	88 ec       	ldi	r24, 0xC8	; 200
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	98 a3       	std	Y+32, r25	; 0x20
    425e:	8f 8f       	std	Y+31, r24	; 0x1f
    4260:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4262:	98 a1       	ldd	r25, Y+32	; 0x20
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <HLCD_displayChar+0xc20>
    4268:	98 a3       	std	Y+32, r25	; 0x20
    426a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426c:	89 a1       	ldd	r24, Y+33	; 0x21
    426e:	9a a1       	ldd	r25, Y+34	; 0x22
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	9a a3       	std	Y+34, r25	; 0x22
    4274:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4276:	89 a1       	ldd	r24, Y+33	; 0x21
    4278:	9a a1       	ldd	r25, Y+34	; 0x22
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	69 f7       	brne	.-38     	; 0x4258 <HLCD_displayChar+0xc14>
    427e:	14 c0       	rjmp	.+40     	; 0x42a8 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	6b a1       	ldd	r22, Y+35	; 0x23
    4282:	7c a1       	ldd	r23, Y+36	; 0x24
    4284:	8d a1       	ldd	r24, Y+37	; 0x25
    4286:	9e a1       	ldd	r25, Y+38	; 0x26
    4288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9a a3       	std	Y+34, r25	; 0x22
    4292:	89 a3       	std	Y+33, r24	; 0x21
    4294:	89 a1       	ldd	r24, Y+33	; 0x21
    4296:	9a a1       	ldd	r25, Y+34	; 0x22
    4298:	9e 8f       	std	Y+30, r25	; 0x1e
    429a:	8d 8f       	std	Y+29, r24	; 0x1d
    429c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    429e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	f1 f7       	brne	.-4      	; 0x42a0 <HLCD_displayChar+0xc5c>
    42a4:	9e 8f       	std	Y+30, r25	; 0x1e
    42a6:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    42a8:	fe 01       	movw	r30, r28
    42aa:	e5 56       	subi	r30, 0x65	; 101
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	01 90       	ld	r0, Z+
    42b0:	f0 81       	ld	r31, Z
    42b2:	e0 2d       	mov	r30, r0
    42b4:	92 81       	ldd	r25, Z+2	; 0x02
    42b6:	fe 01       	movw	r30, r28
    42b8:	e3 56       	subi	r30, 0x63	; 99
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	80 81       	ld	r24, Z
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	89 2f       	mov	r24, r25
    42c8:	ba 01       	movw	r22, r20
    42ca:	a9 01       	movw	r20, r18
    42cc:	0e 94 b2 09 	call	0x1364	; 0x1364 <GPIO_SetPortValue>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	a0 e8       	ldi	r26, 0x80	; 128
    42d6:	bf e3       	ldi	r27, 0x3F	; 63
    42d8:	89 8f       	std	Y+25, r24	; 0x19
    42da:	9a 8f       	std	Y+26, r25	; 0x1a
    42dc:	ab 8f       	std	Y+27, r26	; 0x1b
    42de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e0:	69 8d       	ldd	r22, Y+25	; 0x19
    42e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	4a ef       	ldi	r20, 0xFA	; 250
    42ee:	54 e4       	ldi	r21, 0x44	; 68
    42f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	8d 8b       	std	Y+21, r24	; 0x15
    42fa:	9e 8b       	std	Y+22, r25	; 0x16
    42fc:	af 8b       	std	Y+23, r26	; 0x17
    42fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4300:	6d 89       	ldd	r22, Y+21	; 0x15
    4302:	7e 89       	ldd	r23, Y+22	; 0x16
    4304:	8f 89       	ldd	r24, Y+23	; 0x17
    4306:	98 8d       	ldd	r25, Y+24	; 0x18
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e8       	ldi	r20, 0x80	; 128
    430e:	5f e3       	ldi	r21, 0x3F	; 63
    4310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4314:	88 23       	and	r24, r24
    4316:	2c f4       	brge	.+10     	; 0x4322 <HLCD_displayChar+0xcde>
		__ticks = 1;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	9c 8b       	std	Y+20, r25	; 0x14
    431e:	8b 8b       	std	Y+19, r24	; 0x13
    4320:	3f c0       	rjmp	.+126    	; 0x43a0 <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    4322:	6d 89       	ldd	r22, Y+21	; 0x15
    4324:	7e 89       	ldd	r23, Y+22	; 0x16
    4326:	8f 89       	ldd	r24, Y+23	; 0x17
    4328:	98 8d       	ldd	r25, Y+24	; 0x18
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	3f ef       	ldi	r19, 0xFF	; 255
    432e:	4f e7       	ldi	r20, 0x7F	; 127
    4330:	57 e4       	ldi	r21, 0x47	; 71
    4332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4336:	18 16       	cp	r1, r24
    4338:	4c f5       	brge	.+82     	; 0x438c <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433a:	69 8d       	ldd	r22, Y+25	; 0x19
    433c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    433e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e2       	ldi	r20, 0x20	; 32
    4348:	51 e4       	ldi	r21, 0x41	; 65
    434a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	bc 01       	movw	r22, r24
    4354:	cd 01       	movw	r24, r26
    4356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	9c 8b       	std	Y+20, r25	; 0x14
    4360:	8b 8b       	std	Y+19, r24	; 0x13
    4362:	0f c0       	rjmp	.+30     	; 0x4382 <HLCD_displayChar+0xd3e>
    4364:	88 ec       	ldi	r24, 0xC8	; 200
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	9a 8b       	std	Y+18, r25	; 0x12
    436a:	89 8b       	std	Y+17, r24	; 0x11
    436c:	89 89       	ldd	r24, Y+17	; 0x11
    436e:	9a 89       	ldd	r25, Y+18	; 0x12
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	f1 f7       	brne	.-4      	; 0x4370 <HLCD_displayChar+0xd2c>
    4374:	9a 8b       	std	Y+18, r25	; 0x12
    4376:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4378:	8b 89       	ldd	r24, Y+19	; 0x13
    437a:	9c 89       	ldd	r25, Y+20	; 0x14
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	9c 8b       	std	Y+20, r25	; 0x14
    4380:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	8b 89       	ldd	r24, Y+19	; 0x13
    4384:	9c 89       	ldd	r25, Y+20	; 0x14
    4386:	00 97       	sbiw	r24, 0x00	; 0
    4388:	69 f7       	brne	.-38     	; 0x4364 <HLCD_displayChar+0xd20>
    438a:	14 c0       	rjmp	.+40     	; 0x43b4 <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438c:	6d 89       	ldd	r22, Y+21	; 0x15
    438e:	7e 89       	ldd	r23, Y+22	; 0x16
    4390:	8f 89       	ldd	r24, Y+23	; 0x17
    4392:	98 8d       	ldd	r25, Y+24	; 0x18
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	9c 8b       	std	Y+20, r25	; 0x14
    439e:	8b 8b       	std	Y+19, r24	; 0x13
    43a0:	8b 89       	ldd	r24, Y+19	; 0x13
    43a2:	9c 89       	ldd	r25, Y+20	; 0x14
    43a4:	98 8b       	std	Y+16, r25	; 0x10
    43a6:	8f 87       	std	Y+15, r24	; 0x0f
    43a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43aa:	98 89       	ldd	r25, Y+16	; 0x10
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <HLCD_displayChar+0xd68>
    43b0:	98 8b       	std	Y+16, r25	; 0x10
    43b2:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    43b4:	fe 01       	movw	r30, r28
    43b6:	e3 57       	subi	r30, 0x73	; 115
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 81       	ld	r24, Z
    43bc:	88 23       	and	r24, r24
    43be:	59 f4       	brne	.+22     	; 0x43d6 <HLCD_displayChar+0xd92>
    43c0:	ce 01       	movw	r24, r28
    43c2:	89 56       	subi	r24, 0x69	; 105
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <GPIO_writePinLogic>
    43cc:	fe 01       	movw	r30, r28
    43ce:	e3 57       	subi	r30, 0x73	; 115
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	80 83       	st	Z, r24
    43d4:	05 c0       	rjmp	.+10     	; 0x43e0 <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    43d6:	fe 01       	movw	r30, r28
    43d8:	e2 57       	subi	r30, 0x72	; 114
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	80 83       	st	Z, r24
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	a0 e8       	ldi	r26, 0x80	; 128
    43e6:	bf e3       	ldi	r27, 0x3F	; 63
    43e8:	8b 87       	std	Y+11, r24	; 0x0b
    43ea:	9c 87       	std	Y+12, r25	; 0x0c
    43ec:	ad 87       	std	Y+13, r26	; 0x0d
    43ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	4a ef       	ldi	r20, 0xFA	; 250
    43fe:	54 e4       	ldi	r21, 0x44	; 68
    4400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	8f 83       	std	Y+7, r24	; 0x07
    440a:	98 87       	std	Y+8, r25	; 0x08
    440c:	a9 87       	std	Y+9, r26	; 0x09
    440e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4410:	6f 81       	ldd	r22, Y+7	; 0x07
    4412:	78 85       	ldd	r23, Y+8	; 0x08
    4414:	89 85       	ldd	r24, Y+9	; 0x09
    4416:	9a 85       	ldd	r25, Y+10	; 0x0a
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	40 e8       	ldi	r20, 0x80	; 128
    441e:	5f e3       	ldi	r21, 0x3F	; 63
    4420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4424:	88 23       	and	r24, r24
    4426:	2c f4       	brge	.+10     	; 0x4432 <HLCD_displayChar+0xdee>
		__ticks = 1;
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	9e 83       	std	Y+6, r25	; 0x06
    442e:	8d 83       	std	Y+5, r24	; 0x05
    4430:	3f c0       	rjmp	.+126    	; 0x44b0 <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    4432:	6f 81       	ldd	r22, Y+7	; 0x07
    4434:	78 85       	ldd	r23, Y+8	; 0x08
    4436:	89 85       	ldd	r24, Y+9	; 0x09
    4438:	9a 85       	ldd	r25, Y+10	; 0x0a
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	3f ef       	ldi	r19, 0xFF	; 255
    443e:	4f e7       	ldi	r20, 0x7F	; 127
    4440:	57 e4       	ldi	r21, 0x47	; 71
    4442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4446:	18 16       	cp	r1, r24
    4448:	4c f5       	brge	.+82     	; 0x449c <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    444a:	6b 85       	ldd	r22, Y+11	; 0x0b
    444c:	7c 85       	ldd	r23, Y+12	; 0x0c
    444e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4450:	9e 85       	ldd	r25, Y+14	; 0x0e
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e2       	ldi	r20, 0x20	; 32
    4458:	51 e4       	ldi	r21, 0x41	; 65
    445a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	bc 01       	movw	r22, r24
    4464:	cd 01       	movw	r24, r26
    4466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	9e 83       	std	Y+6, r25	; 0x06
    4470:	8d 83       	std	Y+5, r24	; 0x05
    4472:	0f c0       	rjmp	.+30     	; 0x4492 <HLCD_displayChar+0xe4e>
    4474:	88 ec       	ldi	r24, 0xC8	; 200
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9c 83       	std	Y+4, r25	; 0x04
    447a:	8b 83       	std	Y+3, r24	; 0x03
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	f1 f7       	brne	.-4      	; 0x4480 <HLCD_displayChar+0xe3c>
    4484:	9c 83       	std	Y+4, r25	; 0x04
    4486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4488:	8d 81       	ldd	r24, Y+5	; 0x05
    448a:	9e 81       	ldd	r25, Y+6	; 0x06
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	9e 83       	std	Y+6, r25	; 0x06
    4490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4492:	8d 81       	ldd	r24, Y+5	; 0x05
    4494:	9e 81       	ldd	r25, Y+6	; 0x06
    4496:	00 97       	sbiw	r24, 0x00	; 0
    4498:	69 f7       	brne	.-38     	; 0x4474 <HLCD_displayChar+0xe30>
    449a:	1a c0       	rjmp	.+52     	; 0x44d0 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449c:	6f 81       	ldd	r22, Y+7	; 0x07
    449e:	78 85       	ldd	r23, Y+8	; 0x08
    44a0:	89 85       	ldd	r24, Y+9	; 0x09
    44a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	9e 83       	std	Y+6, r25	; 0x06
    44ae:	8d 83       	std	Y+5, r24	; 0x05
    44b0:	8d 81       	ldd	r24, Y+5	; 0x05
    44b2:	9e 81       	ldd	r25, Y+6	; 0x06
    44b4:	9a 83       	std	Y+2, r25	; 0x02
    44b6:	89 83       	std	Y+1, r24	; 0x01
    44b8:	89 81       	ldd	r24, Y+1	; 0x01
    44ba:	9a 81       	ldd	r25, Y+2	; 0x02
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	f1 f7       	brne	.-4      	; 0x44bc <HLCD_displayChar+0xe78>
    44c0:	9a 83       	std	Y+2, r25	; 0x02
    44c2:	89 83       	std	Y+1, r24	; 0x01
    44c4:	05 c0       	rjmp	.+10     	; 0x44d0 <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    44c6:	fe 01       	movw	r30, r28
    44c8:	e2 57       	subi	r30, 0x72	; 114
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	83 e0       	ldi	r24, 0x03	; 3
    44ce:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    44d0:	fe 01       	movw	r30, r28
    44d2:	e3 57       	subi	r30, 0x73	; 115
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	80 81       	ld	r24, Z
    44d8:	88 23       	and	r24, r24
    44da:	29 f4       	brne	.+10     	; 0x44e6 <HLCD_displayChar+0xea2>
    44dc:	fe 01       	movw	r30, r28
    44de:	e2 57       	subi	r30, 0x72	; 114
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	10 82       	st	Z, r1
    44e4:	0b c0       	rjmp	.+22     	; 0x44fc <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    44e6:	fe 01       	movw	r30, r28
    44e8:	e2 57       	subi	r30, 0x72	; 114
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	80 83       	st	Z, r24
    44f0:	05 c0       	rjmp	.+10     	; 0x44fc <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    44f2:	fe 01       	movw	r30, r28
    44f4:	e2 57       	subi	r30, 0x72	; 114
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	80 83       	st	Z, r24
	}

	return lcdRet;
    44fc:	fe 01       	movw	r30, r28
    44fe:	e2 57       	subi	r30, 0x72	; 114
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
}
    4504:	c3 56       	subi	r28, 0x63	; 99
    4506:	df 4f       	sbci	r29, 0xFF	; 255
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	1f 91       	pop	r17
    4518:	0f 91       	pop	r16
    451a:	08 95       	ret

0000451c <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    451c:	df 93       	push	r29
    451e:	cf 93       	push	r28
    4520:	00 d0       	rcall	.+0      	; 0x4522 <HLCD_displayString+0x6>
    4522:	00 d0       	rcall	.+0      	; 0x4524 <HLCD_displayString+0x8>
    4524:	00 d0       	rcall	.+0      	; 0x4526 <HLCD_displayString+0xa>
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	9c 83       	std	Y+4, r25	; 0x04
    452c:	8b 83       	std	Y+3, r24	; 0x03
    452e:	7e 83       	std	Y+6, r23	; 0x06
    4530:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	00 97       	sbiw	r24, 0x00	; 0
    453c:	69 f1       	breq	.+90     	; 0x4598 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    453e:	eb 81       	ldd	r30, Y+3	; 0x03
    4540:	fc 81       	ldd	r31, Y+4	; 0x04
    4542:	80 81       	ld	r24, Z
    4544:	88 23       	and	r24, r24
    4546:	51 f1       	breq	.+84     	; 0x459c <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4548:	eb 81       	ldd	r30, Y+3	; 0x03
    454a:	fc 81       	ldd	r31, Y+4	; 0x04
    454c:	80 81       	ld	r24, Z
    454e:	81 30       	cpi	r24, 0x01	; 1
    4550:	01 f5       	brne	.+64     	; 0x4592 <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    4552:	19 82       	std	Y+1, r1	; 0x01
    4554:	12 c0       	rjmp	.+36     	; 0x457a <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	28 2f       	mov	r18, r24
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	8d 81       	ldd	r24, Y+5	; 0x05
    455e:	9e 81       	ldd	r25, Y+6	; 0x06
    4560:	fc 01       	movw	r30, r24
    4562:	e2 0f       	add	r30, r18
    4564:	f3 1f       	adc	r31, r19
    4566:	20 81       	ld	r18, Z
    4568:	8b 81       	ldd	r24, Y+3	; 0x03
    456a:	9c 81       	ldd	r25, Y+4	; 0x04
    456c:	62 2f       	mov	r22, r18
    456e:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_displayChar>
    4572:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	8f 5f       	subi	r24, 0xFF	; 255
    4578:	89 83       	std	Y+1, r24	; 0x01
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	28 2f       	mov	r18, r24
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	fc 01       	movw	r30, r24
    4586:	e2 0f       	add	r30, r18
    4588:	f3 1f       	adc	r31, r19
    458a:	80 81       	ld	r24, Z
    458c:	88 23       	and	r24, r24
    458e:	19 f7       	brne	.-58     	; 0x4556 <HLCD_displayString+0x3a>
    4590:	05 c0       	rjmp	.+10     	; 0x459c <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4592:	83 e0       	ldi	r24, 0x03	; 3
    4594:	8a 83       	std	Y+2, r24	; 0x02
    4596:	02 c0       	rjmp	.+4      	; 0x459c <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4598:	82 e0       	ldi	r24, 0x02	; 2
    459a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    459e:	26 96       	adiw	r28, 0x06	; 6
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	6b 97       	sbiw	r28, 0x1b	; 27
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	9f 8b       	std	Y+23, r25	; 0x17
    45c6:	8e 8b       	std	Y+22, r24	; 0x16
    45c8:	48 8f       	std	Y+24, r20	; 0x18
    45ca:	59 8f       	std	Y+25, r21	; 0x19
    45cc:	6a 8f       	std	Y+26, r22	; 0x1a
    45ce:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    45d4:	8e 89       	ldd	r24, Y+22	; 0x16
    45d6:	9f 89       	ldd	r25, Y+23	; 0x17
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	01 f1       	breq	.+64     	; 0x461c <HLCD_displayNumber+0x6c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    45dc:	ee 89       	ldd	r30, Y+22	; 0x16
    45de:	ff 89       	ldd	r31, Y+23	; 0x17
    45e0:	80 81       	ld	r24, Z
    45e2:	88 23       	and	r24, r24
    45e4:	e9 f0       	breq	.+58     	; 0x4620 <HLCD_displayNumber+0x70>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    45e6:	ee 89       	ldd	r30, Y+22	; 0x16
    45e8:	ff 89       	ldd	r31, Y+23	; 0x17
    45ea:	80 81       	ld	r24, Z
    45ec:	81 30       	cpi	r24, 0x01	; 1
    45ee:	99 f4       	brne	.+38     	; 0x4616 <HLCD_displayNumber+0x66>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    45f0:	88 8d       	ldd	r24, Y+24	; 0x18
    45f2:	99 8d       	ldd	r25, Y+25	; 0x19
    45f4:	9e 01       	movw	r18, r28
    45f6:	2e 5f       	subi	r18, 0xFE	; 254
    45f8:	3f 4f       	sbci	r19, 0xFF	; 255
    45fa:	b9 01       	movw	r22, r18
    45fc:	4a e0       	ldi	r20, 0x0A	; 10
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    4604:	8e 89       	ldd	r24, Y+22	; 0x16
    4606:	9f 89       	ldd	r25, Y+23	; 0x17
    4608:	9e 01       	movw	r18, r28
    460a:	2e 5f       	subi	r18, 0xFE	; 254
    460c:	3f 4f       	sbci	r19, 0xFF	; 255
    460e:	b9 01       	movw	r22, r18
    4610:	0e 94 8e 22 	call	0x451c	; 0x451c <HLCD_displayString>
    4614:	05 c0       	rjmp	.+10     	; 0x4620 <HLCD_displayNumber+0x70>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4616:	83 e0       	ldi	r24, 0x03	; 3
    4618:	89 83       	std	Y+1, r24	; 0x01
    461a:	02 c0       	rjmp	.+4      	; 0x4620 <HLCD_displayNumber+0x70>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    461c:	82 e0       	ldi	r24, 0x02	; 2
    461e:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    4620:	89 81       	ldd	r24, Y+1	; 0x01
}
    4622:	6b 96       	adiw	r28, 0x1b	; 27
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	f8 94       	cli
    4628:	de bf       	out	0x3e, r29	; 62
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	cd bf       	out	0x3d, r28	; 61
    462e:	cf 91       	pop	r28
    4630:	df 91       	pop	r29
    4632:	08 95       	ret

00004634 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    4634:	df 93       	push	r29
    4636:	cf 93       	push	r28
    4638:	00 d0       	rcall	.+0      	; 0x463a <HLCD_changeCursorPosation+0x6>
    463a:	00 d0       	rcall	.+0      	; 0x463c <HLCD_changeCursorPosation+0x8>
    463c:	0f 92       	push	r0
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	9b 83       	std	Y+3, r25	; 0x03
    4644:	8a 83       	std	Y+2, r24	; 0x02
    4646:	6c 83       	std	Y+4, r22	; 0x04
    4648:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    464e:	8a 81       	ldd	r24, Y+2	; 0x02
    4650:	9b 81       	ldd	r25, Y+3	; 0x03
    4652:	00 97       	sbiw	r24, 0x00	; 0
    4654:	91 f1       	breq	.+100    	; 0x46ba <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4656:	ea 81       	ldd	r30, Y+2	; 0x02
    4658:	fb 81       	ldd	r31, Y+3	; 0x03
    465a:	80 81       	ld	r24, Z
    465c:	88 23       	and	r24, r24
    465e:	79 f1       	breq	.+94     	; 0x46be <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4660:	ea 81       	ldd	r30, Y+2	; 0x02
    4662:	fb 81       	ldd	r31, Y+3	; 0x03
    4664:	80 81       	ld	r24, Z
    4666:	81 30       	cpi	r24, 0x01	; 1
    4668:	29 f5       	brne	.+74     	; 0x46b4 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    466a:	8c 81       	ldd	r24, Y+4	; 0x04
    466c:	88 23       	and	r24, r24
    466e:	71 f4       	brne	.+28     	; 0x468c <HLCD_changeCursorPosation+0x58>
    4670:	8d 81       	ldd	r24, Y+5	; 0x05
    4672:	80 31       	cpi	r24, 0x10	; 16
    4674:	58 f4       	brcc	.+22     	; 0x468c <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    4676:	8d 81       	ldd	r24, Y+5	; 0x05
    4678:	8f 70       	andi	r24, 0x0F	; 15
    467a:	80 68       	ori	r24, 0x80	; 128
    467c:	28 2f       	mov	r18, r24
    467e:	8a 81       	ldd	r24, Y+2	; 0x02
    4680:	9b 81       	ldd	r25, Y+3	; 0x03
    4682:	62 2f       	mov	r22, r18
    4684:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    4688:	89 83       	std	Y+1, r24	; 0x01
    468a:	19 c0       	rjmp	.+50     	; 0x46be <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    468c:	8c 81       	ldd	r24, Y+4	; 0x04
    468e:	81 30       	cpi	r24, 0x01	; 1
    4690:	71 f4       	brne	.+28     	; 0x46ae <HLCD_changeCursorPosation+0x7a>
    4692:	8d 81       	ldd	r24, Y+5	; 0x05
    4694:	80 31       	cpi	r24, 0x10	; 16
    4696:	58 f4       	brcc	.+22     	; 0x46ae <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    4698:	8d 81       	ldd	r24, Y+5	; 0x05
    469a:	8f 70       	andi	r24, 0x0F	; 15
    469c:	80 6c       	ori	r24, 0xC0	; 192
    469e:	28 2f       	mov	r18, r24
    46a0:	8a 81       	ldd	r24, Y+2	; 0x02
    46a2:	9b 81       	ldd	r25, Y+3	; 0x03
    46a4:	62 2f       	mov	r22, r18
    46a6:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	08 c0       	rjmp	.+16     	; 0x46be <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    46ae:	84 e0       	ldi	r24, 0x04	; 4
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    46b4:	83 e0       	ldi	r24, 0x03	; 3
    46b6:	89 83       	std	Y+1, r24	; 0x01
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    46ba:	82 e0       	ldi	r24, 0x02	; 2
    46bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    46be:	89 81       	ldd	r24, Y+1	; 0x01
}
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	cf 91       	pop	r28
    46cc:	df 91       	pop	r29
    46ce:	08 95       	ret

000046d0 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <HLCD_shiftDisplay+0x6>
    46d6:	00 d0       	rcall	.+0      	; 0x46d8 <HLCD_shiftDisplay+0x8>
    46d8:	00 d0       	rcall	.+0      	; 0x46da <HLCD_shiftDisplay+0xa>
    46da:	cd b7       	in	r28, 0x3d	; 61
    46dc:	de b7       	in	r29, 0x3e	; 62
    46de:	9c 83       	std	Y+4, r25	; 0x04
    46e0:	8b 83       	std	Y+3, r24	; 0x03
    46e2:	6d 83       	std	Y+5, r22	; 0x05
    46e4:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    46ea:	8b 81       	ldd	r24, Y+3	; 0x03
    46ec:	9c 81       	ldd	r25, Y+4	; 0x04
    46ee:	00 97       	sbiw	r24, 0x00	; 0
    46f0:	31 f1       	breq	.+76     	; 0x473e <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    46f2:	8e 81       	ldd	r24, Y+6	; 0x06
    46f4:	8c 31       	cpi	r24, 0x1C	; 28
    46f6:	19 f0       	breq	.+6      	; 0x46fe <HLCD_shiftDisplay+0x2e>
    46f8:	8e 81       	ldd	r24, Y+6	; 0x06
    46fa:	88 31       	cpi	r24, 0x18	; 24
    46fc:	e9 f4       	brne	.+58     	; 0x4738 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    46fe:	eb 81       	ldd	r30, Y+3	; 0x03
    4700:	fc 81       	ldd	r31, Y+4	; 0x04
    4702:	80 81       	ld	r24, Z
    4704:	88 23       	and	r24, r24
    4706:	e9 f0       	breq	.+58     	; 0x4742 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4708:	eb 81       	ldd	r30, Y+3	; 0x03
    470a:	fc 81       	ldd	r31, Y+4	; 0x04
    470c:	80 81       	ld	r24, Z
    470e:	81 30       	cpi	r24, 0x01	; 1
    4710:	81 f4       	brne	.+32     	; 0x4732 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    4712:	19 82       	std	Y+1, r1	; 0x01
    4714:	09 c0       	rjmp	.+18     	; 0x4728 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	9c 81       	ldd	r25, Y+4	; 0x04
    471a:	6e 81       	ldd	r22, Y+6	; 0x06
    471c:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    4720:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	8f 5f       	subi	r24, 0xFF	; 255
    4726:	89 83       	std	Y+1, r24	; 0x01
    4728:	99 81       	ldd	r25, Y+1	; 0x01
    472a:	8d 81       	ldd	r24, Y+5	; 0x05
    472c:	98 17       	cp	r25, r24
    472e:	98 f3       	brcs	.-26     	; 0x4716 <HLCD_shiftDisplay+0x46>
    4730:	08 c0       	rjmp	.+16     	; 0x4742 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4732:	83 e0       	ldi	r24, 0x03	; 3
    4734:	8a 83       	std	Y+2, r24	; 0x02
    4736:	05 c0       	rjmp	.+10     	; 0x4742 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    4738:	84 e0       	ldi	r24, 0x04	; 4
    473a:	8a 83       	std	Y+2, r24	; 0x02
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    473e:	82 e0       	ldi	r24, 0x02	; 2
    4740:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    4742:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4744:	26 96       	adiw	r28, 0x06	; 6
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	f8 94       	cli
    474a:	de bf       	out	0x3e, r29	; 62
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	cd bf       	out	0x3d, r28	; 61
    4750:	cf 91       	pop	r28
    4752:	df 91       	pop	r29
    4754:	08 95       	ret

00004756 <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    4756:	df 93       	push	r29
    4758:	cf 93       	push	r28
    475a:	cd b7       	in	r28, 0x3d	; 61
    475c:	de b7       	in	r29, 0x3e	; 62
    475e:	27 97       	sbiw	r28, 0x07	; 7
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	f8 94       	cli
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	9c 83       	std	Y+4, r25	; 0x04
    476c:	8b 83       	std	Y+3, r24	; 0x03
    476e:	7e 83       	std	Y+6, r23	; 0x06
    4770:	6d 83       	std	Y+5, r22	; 0x05
    4772:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	9c 81       	ldd	r25, Y+4	; 0x04
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	09 f4       	brne	.+2      	; 0x4782 <HLCD_createNewCustomChar+0x2c>
    4780:	4f c0       	rjmp	.+158    	; 0x4820 <HLCD_createNewCustomChar+0xca>
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	00 97       	sbiw	r24, 0x00	; 0
    4788:	09 f4       	brne	.+2      	; 0x478c <HLCD_createNewCustomChar+0x36>
    478a:	4a c0       	rjmp	.+148    	; 0x4820 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    478c:	8f 81       	ldd	r24, Y+7	; 0x07
    478e:	88 30       	cpi	r24, 0x08	; 8
    4790:	08 f0       	brcs	.+2      	; 0x4794 <HLCD_createNewCustomChar+0x3e>
    4792:	43 c0       	rjmp	.+134    	; 0x481a <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4794:	eb 81       	ldd	r30, Y+3	; 0x03
    4796:	fc 81       	ldd	r31, Y+4	; 0x04
    4798:	80 81       	ld	r24, Z
    479a:	88 23       	and	r24, r24
    479c:	09 f4       	brne	.+2      	; 0x47a0 <HLCD_createNewCustomChar+0x4a>
    479e:	42 c0       	rjmp	.+132    	; 0x4824 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    47a0:	eb 81       	ldd	r30, Y+3	; 0x03
    47a2:	fc 81       	ldd	r31, Y+4	; 0x04
    47a4:	80 81       	ld	r24, Z
    47a6:	81 30       	cpi	r24, 0x01	; 1
    47a8:	a9 f5       	brne	.+106    	; 0x4814 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    47aa:	8f 81       	ldd	r24, Y+7	; 0x07
    47ac:	88 2f       	mov	r24, r24
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	88 0f       	add	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	88 0f       	add	r24, r24
    47ba:	99 1f       	adc	r25, r25
    47bc:	80 64       	ori	r24, 0x40	; 64
    47be:	28 2f       	mov	r18, r24
    47c0:	8b 81       	ldd	r24, Y+3	; 0x03
    47c2:	9c 81       	ldd	r25, Y+4	; 0x04
    47c4:	62 2f       	mov	r22, r18
    47c6:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    47ca:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	88 23       	and	r24, r24
    47d0:	d1 f4       	brne	.+52     	; 0x4806 <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    47d2:	19 82       	std	Y+1, r1	; 0x01
    47d4:	15 c0       	rjmp	.+42     	; 0x4800 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
    47d8:	28 2f       	mov	r18, r24
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	fc 01       	movw	r30, r24
    47e2:	e2 0f       	add	r30, r18
    47e4:	f3 1f       	adc	r31, r19
    47e6:	20 81       	ld	r18, Z
    47e8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ea:	9c 81       	ldd	r25, Y+4	; 0x04
    47ec:	62 2f       	mov	r22, r18
    47ee:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_displayChar>
    47f2:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    47f4:	8a 81       	ldd	r24, Y+2	; 0x02
    47f6:	88 23       	and	r24, r24
    47f8:	31 f4       	brne	.+12     	; 0x4806 <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	8f 5f       	subi	r24, 0xFF	; 255
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	88 30       	cpi	r24, 0x08	; 8
    4804:	40 f3       	brcs	.-48     	; 0x47d6 <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	9c 81       	ldd	r25, Y+4	; 0x04
    480a:	60 e8       	ldi	r22, 0x80	; 128
    480c:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    4810:	8a 83       	std	Y+2, r24	; 0x02
    4812:	08 c0       	rjmp	.+16     	; 0x4824 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4814:	83 e0       	ldi	r24, 0x03	; 3
    4816:	8a 83       	std	Y+2, r24	; 0x02
    4818:	05 c0       	rjmp	.+10     	; 0x4824 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    481a:	84 e0       	ldi	r24, 0x04	; 4
    481c:	8a 83       	std	Y+2, r24	; 0x02
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4820:	82 e0       	ldi	r24, 0x02	; 2
    4822:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    4824:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4826:	27 96       	adiw	r28, 0x07	; 7
    4828:	0f b6       	in	r0, 0x3f	; 63
    482a:	f8 94       	cli
    482c:	de bf       	out	0x3e, r29	; 62
    482e:	0f be       	out	0x3f, r0	; 63
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	cf 91       	pop	r28
    4834:	df 91       	pop	r29
    4836:	08 95       	ret

00004838 <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    4838:	df 93       	push	r29
    483a:	cf 93       	push	r28
    483c:	00 d0       	rcall	.+0      	; 0x483e <HLCD_Clr+0x6>
    483e:	0f 92       	push	r0
    4840:	cd b7       	in	r28, 0x3d	; 61
    4842:	de b7       	in	r29, 0x3e	; 62
    4844:	9b 83       	std	Y+3, r25	; 0x03
    4846:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    484c:	8a 81       	ldd	r24, Y+2	; 0x02
    484e:	9b 81       	ldd	r25, Y+3	; 0x03
    4850:	61 e0       	ldi	r22, 0x01	; 1
    4852:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_sendCmd>
    4856:	89 83       	std	Y+1, r24	; 0x01
	if(lcdRet == HLCD_OK)
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	88 23       	and	r24, r24
    485c:	39 f4       	brne	.+14     	; 0x486c <HLCD_Clr+0x34>
	lcdRet = HLCD_changeCursorPosation(ST_ptrLcdCfgInstance,0,0);
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	9b 81       	ldd	r25, Y+3	; 0x03
    4862:	60 e0       	ldi	r22, 0x00	; 0
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	0e 94 1a 23 	call	0x4634	; 0x4634 <HLCD_changeCursorPosation>
    486a:	89 83       	std	Y+1, r24	; 0x01
	else /* Do Nohting */;

	return lcdRet;
    486c:	89 81       	ldd	r24, Y+1	; 0x01
}
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <appInit>:
		.ledPinNumber = GPIO_PIN2,
		.ledDefaultState = LED_STATUES_OFF
};

void appInit(void)
{
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
    4882:	80 e8       	ldi	r24, 0x80	; 128
    4884:	91 e0       	ldi	r25, 0x01	; 1
    4886:	0e 94 65 0c 	call	0x18ca	; 0x18ca <HLCD_init>
	MADC_init(&adc);
    488a:	8e e8       	ldi	r24, 0x8E	; 142
    488c:	91 e0       	ldi	r25, 0x01	; 1
    488e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MADC_init>
	LED_init(&greenLed);
    4892:	85 e9       	ldi	r24, 0x95	; 149
    4894:	91 e0       	ldi	r25, 0x01	; 1
    4896:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LED_init>
	LED_init(&redLed);
    489a:	88 e9       	ldi	r24, 0x98	; 152
    489c:	91 e0       	ldi	r25, 0x01	; 1
    489e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LED_init>
	LED_init(&yellowLed);
    48a2:	8b e9       	ldi	r24, 0x9B	; 155
    48a4:	91 e0       	ldi	r25, 0x01	; 1
    48a6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LED_init>
}
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <appMain>:

void appMain(void)
{
    48b0:	df 93       	push	r29
    48b2:	cf 93       	push	r28
    48b4:	00 d0       	rcall	.+0      	; 0x48b6 <appMain+0x6>
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <appMain+0x8>
    48b8:	0f 92       	push	r0
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
	Uint16_t digitalValue = 0;
    48be:	1c 82       	std	Y+4, r1	; 0x04
    48c0:	1b 82       	std	Y+3, r1	; 0x03
	Uint16_t voltage = 0;
    48c2:	1a 82       	std	Y+2, r1	; 0x02
    48c4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		MADC_startConversion(&adc);
    48c6:	8e e8       	ldi	r24, 0x8E	; 142
    48c8:	91 e0       	ldi	r25, 0x01	; 1
    48ca:	0e 94 a8 0a 	call	0x1550	; 0x1550 <MADC_startConversion>
		MADC_getConversionResult(&adc,&digitalValue);
    48ce:	8e e8       	ldi	r24, 0x8E	; 142
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	9e 01       	movw	r18, r28
    48d4:	2d 5f       	subi	r18, 0xFD	; 253
    48d6:	3f 4f       	sbci	r19, 0xFF	; 255
    48d8:	b9 01       	movw	r22, r18
    48da:	0e 94 c8 0a 	call	0x1590	; 0x1590 <MADC_getConversionResult>
		voltage = (digitalValue * 5) / 1024 ;
    48de:	2b 81       	ldd	r18, Y+3	; 0x03
    48e0:	3c 81       	ldd	r19, Y+4	; 0x04
    48e2:	c9 01       	movw	r24, r18
    48e4:	88 0f       	add	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	88 0f       	add	r24, r24
    48ea:	99 1f       	adc	r25, r25
    48ec:	82 0f       	add	r24, r18
    48ee:	93 1f       	adc	r25, r19
    48f0:	89 2f       	mov	r24, r25
    48f2:	99 27       	eor	r25, r25
    48f4:	86 95       	lsr	r24
    48f6:	86 95       	lsr	r24
    48f8:	9a 83       	std	Y+2, r25	; 0x02
    48fa:	89 83       	std	Y+1, r24	; 0x01

		if((voltage >= 0) && (voltage < 1.5))
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4900:	cc 01       	movw	r24, r24
    4902:	a0 e0       	ldi	r26, 0x00	; 0
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	40 ec       	ldi	r20, 0xC0	; 192
    491c:	5f e3       	ldi	r21, 0x3F	; 63
    491e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4922:	88 23       	and	r24, r24
    4924:	6c f4       	brge	.+26     	; 0x4940 <appMain+0x90>
		{
			LED_turnOn(&redLed);
    4926:	88 e9       	ldi	r24, 0x98	; 152
    4928:	91 e0       	ldi	r25, 0x01	; 1
    492a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LED_turnOn>
			LED_turnOff(&greenLed);
    492e:	85 e9       	ldi	r24, 0x95	; 149
    4930:	91 e0       	ldi	r25, 0x01	; 1
    4932:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOff(&yellowLed);
    4936:	8b e9       	ldi	r24, 0x9B	; 155
    4938:	91 e0       	ldi	r25, 0x01	; 1
    493a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
    493e:	4d c0       	rjmp	.+154    	; 0x49da <appMain+0x12a>
		}
		else if((voltage >= 1.5) && (voltage < 3))
    4940:	89 81       	ldd	r24, Y+1	; 0x01
    4942:	9a 81       	ldd	r25, Y+2	; 0x02
    4944:	cc 01       	movw	r24, r24
    4946:	a0 e0       	ldi	r26, 0x00	; 0
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	1d 82       	std	Y+5, r1	; 0x05
    4958:	bc 01       	movw	r22, r24
    495a:	cd 01       	movw	r24, r26
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 ec       	ldi	r20, 0xC0	; 192
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
    4968:	88 23       	and	r24, r24
    496a:	14 f0       	brlt	.+4      	; 0x4970 <appMain+0xc0>
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	8d 83       	std	Y+5, r24	; 0x05
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	9d 81       	ldd	r25, Y+5	; 0x05
    4974:	89 27       	eor	r24, r25
    4976:	88 23       	and	r24, r24
    4978:	91 f4       	brne	.+36     	; 0x499e <appMain+0xee>
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	9a 81       	ldd	r25, Y+2	; 0x02
    497e:	83 30       	cpi	r24, 0x03	; 3
    4980:	91 05       	cpc	r25, r1
    4982:	68 f4       	brcc	.+26     	; 0x499e <appMain+0xee>
		{
			LED_turnOff(&redLed);
    4984:	88 e9       	ldi	r24, 0x98	; 152
    4986:	91 e0       	ldi	r25, 0x01	; 1
    4988:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOff(&greenLed);
    498c:	85 e9       	ldi	r24, 0x95	; 149
    498e:	91 e0       	ldi	r25, 0x01	; 1
    4990:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOn(&yellowLed);
    4994:	8b e9       	ldi	r24, 0x9B	; 155
    4996:	91 e0       	ldi	r25, 0x01	; 1
    4998:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LED_turnOn>
    499c:	1e c0       	rjmp	.+60     	; 0x49da <appMain+0x12a>
		}
		else if((voltage >= 3))
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	9a 81       	ldd	r25, Y+2	; 0x02
    49a2:	83 30       	cpi	r24, 0x03	; 3
    49a4:	91 05       	cpc	r25, r1
    49a6:	68 f0       	brcs	.+26     	; 0x49c2 <appMain+0x112>
		{
			LED_turnOff(&redLed);
    49a8:	88 e9       	ldi	r24, 0x98	; 152
    49aa:	91 e0       	ldi	r25, 0x01	; 1
    49ac:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOn(&greenLed);
    49b0:	85 e9       	ldi	r24, 0x95	; 149
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LED_turnOn>
			LED_turnOff(&yellowLed);
    49b8:	8b e9       	ldi	r24, 0x9B	; 155
    49ba:	91 e0       	ldi	r25, 0x01	; 1
    49bc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
    49c0:	0c c0       	rjmp	.+24     	; 0x49da <appMain+0x12a>
		}
		else
		{
			LED_turnOff(&redLed);
    49c2:	88 e9       	ldi	r24, 0x98	; 152
    49c4:	91 e0       	ldi	r25, 0x01	; 1
    49c6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOff(&greenLed);
    49ca:	85 e9       	ldi	r24, 0x95	; 149
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
			LED_turnOff(&yellowLed);
    49d2:	8b e9       	ldi	r24, 0x9B	; 155
    49d4:	91 e0       	ldi	r25, 0x01	; 1
    49d6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LED_turnOff>
		}

		HLCD_displayNumber(&myLcd,voltage);
    49da:	89 81       	ldd	r24, Y+1	; 0x01
    49dc:	9a 81       	ldd	r25, Y+2	; 0x02
    49de:	9c 01       	movw	r18, r24
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	80 e8       	ldi	r24, 0x80	; 128
    49e6:	91 e0       	ldi	r25, 0x01	; 1
    49e8:	ba 01       	movw	r22, r20
    49ea:	a9 01       	movw	r20, r18
    49ec:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <HLCD_displayNumber>
		HLCD_Clr(&myLcd);
    49f0:	80 e8       	ldi	r24, 0x80	; 128
    49f2:	91 e0       	ldi	r25, 0x01	; 1
    49f4:	0e 94 1c 24 	call	0x4838	; 0x4838 <HLCD_Clr>
    49f8:	66 cf       	rjmp	.-308    	; 0x48c6 <appMain+0x16>

000049fa <main>:

#include "APPLICATION/app.h"


void main(void)
{
    49fa:	df 93       	push	r29
    49fc:	cf 93       	push	r28
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
	appInit();
    4a02:	0e 94 3d 24 	call	0x487a	; 0x487a <appInit>
	appMain();
    4a06:	0e 94 58 24 	call	0x48b0	; 0x48b0 <appMain>
}
    4a0a:	cf 91       	pop	r28
    4a0c:	df 91       	pop	r29
    4a0e:	08 95       	ret

00004a10 <__prologue_saves__>:
    4a10:	2f 92       	push	r2
    4a12:	3f 92       	push	r3
    4a14:	4f 92       	push	r4
    4a16:	5f 92       	push	r5
    4a18:	6f 92       	push	r6
    4a1a:	7f 92       	push	r7
    4a1c:	8f 92       	push	r8
    4a1e:	9f 92       	push	r9
    4a20:	af 92       	push	r10
    4a22:	bf 92       	push	r11
    4a24:	cf 92       	push	r12
    4a26:	df 92       	push	r13
    4a28:	ef 92       	push	r14
    4a2a:	ff 92       	push	r15
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	ca 1b       	sub	r28, r26
    4a3a:	db 0b       	sbc	r29, r27
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	09 94       	ijmp

00004a48 <__epilogue_restores__>:
    4a48:	2a 88       	ldd	r2, Y+18	; 0x12
    4a4a:	39 88       	ldd	r3, Y+17	; 0x11
    4a4c:	48 88       	ldd	r4, Y+16	; 0x10
    4a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a50:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a52:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a54:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a56:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a58:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a5a:	b9 84       	ldd	r11, Y+9	; 0x09
    4a5c:	c8 84       	ldd	r12, Y+8	; 0x08
    4a5e:	df 80       	ldd	r13, Y+7	; 0x07
    4a60:	ee 80       	ldd	r14, Y+6	; 0x06
    4a62:	fd 80       	ldd	r15, Y+5	; 0x05
    4a64:	0c 81       	ldd	r16, Y+4	; 0x04
    4a66:	1b 81       	ldd	r17, Y+3	; 0x03
    4a68:	aa 81       	ldd	r26, Y+2	; 0x02
    4a6a:	b9 81       	ldd	r27, Y+1	; 0x01
    4a6c:	ce 0f       	add	r28, r30
    4a6e:	d1 1d       	adc	r29, r1
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	ed 01       	movw	r28, r26
    4a7c:	08 95       	ret

00004a7e <itoa>:
    4a7e:	fb 01       	movw	r30, r22
    4a80:	9f 01       	movw	r18, r30
    4a82:	e8 94       	clt
    4a84:	42 30       	cpi	r20, 0x02	; 2
    4a86:	c4 f0       	brlt	.+48     	; 0x4ab8 <itoa+0x3a>
    4a88:	45 32       	cpi	r20, 0x25	; 37
    4a8a:	b4 f4       	brge	.+44     	; 0x4ab8 <itoa+0x3a>
    4a8c:	4a 30       	cpi	r20, 0x0A	; 10
    4a8e:	29 f4       	brne	.+10     	; 0x4a9a <itoa+0x1c>
    4a90:	97 fb       	bst	r25, 7
    4a92:	1e f4       	brtc	.+6      	; 0x4a9a <itoa+0x1c>
    4a94:	90 95       	com	r25
    4a96:	81 95       	neg	r24
    4a98:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9a:	64 2f       	mov	r22, r20
    4a9c:	77 27       	eor	r23, r23
    4a9e:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__udivmodhi4>
    4aa2:	80 5d       	subi	r24, 0xD0	; 208
    4aa4:	8a 33       	cpi	r24, 0x3A	; 58
    4aa6:	0c f0       	brlt	.+2      	; 0x4aaa <itoa+0x2c>
    4aa8:	89 5d       	subi	r24, 0xD9	; 217
    4aaa:	81 93       	st	Z+, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	00 97       	sbiw	r24, 0x00	; 0
    4ab0:	a1 f7       	brne	.-24     	; 0x4a9a <itoa+0x1c>
    4ab2:	16 f4       	brtc	.+4      	; 0x4ab8 <itoa+0x3a>
    4ab4:	5d e2       	ldi	r21, 0x2D	; 45
    4ab6:	51 93       	st	Z+, r21
    4ab8:	10 82       	st	Z, r1
    4aba:	c9 01       	movw	r24, r18
    4abc:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <strrev>

00004ac0 <strrev>:
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	67 2f       	mov	r22, r23
    4ac6:	71 91       	ld	r23, Z+
    4ac8:	77 23       	and	r23, r23
    4aca:	e1 f7       	brne	.-8      	; 0x4ac4 <strrev+0x4>
    4acc:	32 97       	sbiw	r30, 0x02	; 2
    4ace:	04 c0       	rjmp	.+8      	; 0x4ad8 <strrev+0x18>
    4ad0:	7c 91       	ld	r23, X
    4ad2:	6d 93       	st	X+, r22
    4ad4:	70 83       	st	Z, r23
    4ad6:	62 91       	ld	r22, -Z
    4ad8:	ae 17       	cp	r26, r30
    4ada:	bf 07       	cpc	r27, r31
    4adc:	c8 f3       	brcs	.-14     	; 0x4ad0 <strrev+0x10>
    4ade:	08 95       	ret

00004ae0 <__udivmodhi4>:
    4ae0:	aa 1b       	sub	r26, r26
    4ae2:	bb 1b       	sub	r27, r27
    4ae4:	51 e1       	ldi	r21, 0x11	; 17
    4ae6:	07 c0       	rjmp	.+14     	; 0x4af6 <__udivmodhi4_ep>

00004ae8 <__udivmodhi4_loop>:
    4ae8:	aa 1f       	adc	r26, r26
    4aea:	bb 1f       	adc	r27, r27
    4aec:	a6 17       	cp	r26, r22
    4aee:	b7 07       	cpc	r27, r23
    4af0:	10 f0       	brcs	.+4      	; 0x4af6 <__udivmodhi4_ep>
    4af2:	a6 1b       	sub	r26, r22
    4af4:	b7 0b       	sbc	r27, r23

00004af6 <__udivmodhi4_ep>:
    4af6:	88 1f       	adc	r24, r24
    4af8:	99 1f       	adc	r25, r25
    4afa:	5a 95       	dec	r21
    4afc:	a9 f7       	brne	.-22     	; 0x4ae8 <__udivmodhi4_loop>
    4afe:	80 95       	com	r24
    4b00:	90 95       	com	r25
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	08 95       	ret

00004b08 <_exit>:
    4b08:	f8 94       	cli

00004b0a <__stop_program>:
    4b0a:	ff cf       	rjmp	.-2      	; 0x4b0a <__stop_program>
