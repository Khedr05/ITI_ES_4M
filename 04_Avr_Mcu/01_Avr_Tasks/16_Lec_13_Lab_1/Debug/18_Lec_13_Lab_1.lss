
18_Lec_13_Lab_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000ce6  00000d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800096  00800096  00000db0  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f07  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 39       	cpi	r26, 0x99	; 153
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 06 	call	0xccc	; 0xccc <main>
  8a:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MUART_init>:

#include "uart_interface.h"


EN_MUART_systeamState_t  MUART_init(ST_MUART_cfg_t const *ST_ptrUartCfgInstance_t)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <MUART_init+0x6>
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9b 83       	std	Y+3, r25	; 0x03
  a0:	8a 83       	std	Y+2, r24	; 0x02
	EN_MUART_systeamState_t uartRet = MUART_NOK;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrUartCfgInstance_t)
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	9b 81       	ldd	r25, Y+3	; 0x03
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	09 f4       	brne	.+2      	; 0xb0 <MUART_init+0x1e>
  ae:	91 c0       	rjmp	.+290    	; 0x1d2 <MUART_init+0x140>
	{
		UCSRC_REG = (  (UCSRC_REG & 0x3F ) | (ST_ptrUartCfgInstance_t->operationMode << URSEL_BIT));
  b0:	a0 e4       	ldi	r26, 0x40	; 64
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e0 e4       	ldi	r30, 0x40	; 64
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	28 2f       	mov	r18, r24
  bc:	2f 73       	andi	r18, 0x3F	; 63
  be:	ea 81       	ldd	r30, Y+2	; 0x02
  c0:	fb 81       	ldd	r31, Y+3	; 0x03
  c2:	80 81       	ld	r24, Z
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	96 95       	lsr	r25
  ca:	98 2f       	mov	r25, r24
  cc:	88 27       	eor	r24, r24
  ce:	97 95       	ror	r25
  d0:	87 95       	ror	r24
  d2:	82 2b       	or	r24, r18
  d4:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xCF ) | (ST_ptrUartCfgInstance_t->parityBit << UPM0_BIT));
  d6:	a0 e4       	ldi	r26, 0x40	; 64
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e0 e4       	ldi	r30, 0x40	; 64
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	28 2f       	mov	r18, r24
  e2:	2f 7c       	andi	r18, 0xCF	; 207
  e4:	ea 81       	ldd	r30, Y+2	; 0x02
  e6:	fb 81       	ldd	r31, Y+3	; 0x03
  e8:	81 81       	ldd	r24, Z+1	; 0x01
  ea:	88 2f       	mov	r24, r24
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 95       	swap	r24
  f0:	92 95       	swap	r25
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	98 27       	eor	r25, r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	98 27       	eor	r25, r24
  fa:	82 2b       	or	r24, r18
  fc:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xF7 ) | (ST_ptrUartCfgInstance_t->stopBit << USBS_BIT));
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	28 2f       	mov	r18, r24
 10a:	27 7f       	andi	r18, 0xF7	; 247
 10c:	ea 81       	ldd	r30, Y+2	; 0x02
 10e:	fb 81       	ldd	r31, Y+3	; 0x03
 110:	82 81       	ldd	r24, Z+2	; 0x02
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 2b       	or	r24, r18
 124:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xF8 ) | (ST_ptrUartCfgInstance_t->charSize << UCSZ0_BIT));
 126:	a0 e4       	ldi	r26, 0x40	; 64
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e0 e4       	ldi	r30, 0x40	; 64
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	28 2f       	mov	r18, r24
 132:	28 7f       	andi	r18, 0xF8	; 248
 134:	ea 81       	ldd	r30, Y+2	; 0x02
 136:	fb 81       	ldd	r31, Y+3	; 0x03
 138:	83 81       	ldd	r24, Z+3	; 0x03
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	82 2b       	or	r24, r18
 144:	8c 93       	st	X, r24
		//UCSRA_REG = (  (UCSRA_REG & 0xFD ) | (ST_ptrUartCfgInstance_t->transmissionSpeed << U2X_BIT));

		if(ST_ptrUartCfgInstance_t->transmissionSpeed == MUART_SPEED_U1X)
 146:	ea 81       	ldd	r30, Y+2	; 0x02
 148:	fb 81       	ldd	r31, Y+3	; 0x03
 14a:	84 81       	ldd	r24, Z+4	; 0x04
 14c:	88 23       	and	r24, r24
 14e:	09 f5       	brne	.+66     	; 0x192 <MUART_init+0x100>
		{
			  CLR_BIT(UCSRA_REG,U2X_BIT);
 150:	ab e2       	ldi	r26, 0x2B	; 43
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	eb e2       	ldi	r30, 0x2B	; 43
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	8c 93       	st	X, r24
			  CLR_BIT(UCSRC_REG,URSEL_BIT);
 15e:	a0 e4       	ldi	r26, 0x40	; 64
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e0 e4       	ldi	r30, 0x40	; 64
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8f 77       	andi	r24, 0x7F	; 127
 16a:	8c 93       	st	X, r24
			  UBRRL_REG = ST_ptrUartCfgInstance_t->baudRate1x;
 16c:	a9 e2       	ldi	r26, 0x29	; 41
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	ea 81       	ldd	r30, Y+2	; 0x02
 172:	fb 81       	ldd	r31, Y+3	; 0x03
 174:	85 81       	ldd	r24, Z+5	; 0x05
 176:	8c 93       	st	X, r24
			  UBRRH_REG = ((ST_ptrUartCfgInstance_t->baudRate1x)>>8);
 178:	a0 e4       	ldi	r26, 0x40	; 64
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea 81       	ldd	r30, Y+2	; 0x02
 17e:	fb 81       	ldd	r31, Y+3	; 0x03
 180:	85 81       	ldd	r24, Z+5	; 0x05
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	89 2f       	mov	r24, r25
 188:	99 0f       	add	r25, r25
 18a:	99 0b       	sbc	r25, r25
 18c:	8c 93       	st	X, r24
			  uartRet = MUART_OK;
 18e:	19 82       	std	Y+1, r1	; 0x01
 190:	22 c0       	rjmp	.+68     	; 0x1d6 <MUART_init+0x144>
		}
		else
		{
			  SET_BIT(UCSRA_REG,U2X_BIT);
 192:	ab e2       	ldi	r26, 0x2B	; 43
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	eb e2       	ldi	r30, 0x2B	; 43
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	8c 93       	st	X, r24
			  CLR_BIT(UCSRC_REG,URSEL_BIT);
 1a0:	a0 e4       	ldi	r26, 0x40	; 64
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e0 e4       	ldi	r30, 0x40	; 64
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	8c 93       	st	X, r24
			  UBRRL_REG = ST_ptrUartCfgInstance_t->baudRate2x;
 1ae:	a9 e2       	ldi	r26, 0x29	; 41
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	ea 81       	ldd	r30, Y+2	; 0x02
 1b4:	fb 81       	ldd	r31, Y+3	; 0x03
 1b6:	86 81       	ldd	r24, Z+6	; 0x06
 1b8:	97 81       	ldd	r25, Z+7	; 0x07
 1ba:	8c 93       	st	X, r24
			  UBRRH_REG = ((ST_ptrUartCfgInstance_t->baudRate2x)>>8);
 1bc:	a0 e4       	ldi	r26, 0x40	; 64
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	ea 81       	ldd	r30, Y+2	; 0x02
 1c2:	fb 81       	ldd	r31, Y+3	; 0x03
 1c4:	86 81       	ldd	r24, Z+6	; 0x06
 1c6:	97 81       	ldd	r25, Z+7	; 0x07
 1c8:	89 2f       	mov	r24, r25
 1ca:	99 27       	eor	r25, r25
 1cc:	8c 93       	st	X, r24
			  uartRet = MUART_OK;
 1ce:	19 82       	std	Y+1, r1	; 0x01
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <MUART_init+0x144>
		}

	}
	else
	{
		uartRet = MUART_PTR_NULL;
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return uartRet;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <MUART_enable>:

EN_MUART_systeamState_t MUART_enable(void)
{
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	0f 92       	push	r0
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
	EN_MUART_systeamState_t uartRet = MUART_NOK;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG,RXEN_BIT);
 1f2:	aa e2       	ldi	r26, 0x2A	; 42
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	ea e2       	ldi	r30, 0x2A	; 42
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
 200:	aa e2       	ldi	r26, 0x2A	; 42
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	ea e2       	ldi	r30, 0x2A	; 42
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	8c 93       	st	X, r24
	uartRet = MUART_OK;
 20e:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
 210:	89 81       	ldd	r24, Y+1	; 0x01
}
 212:	0f 90       	pop	r0
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	08 95       	ret

0000021a <MUART_receiveData>:



EN_MUART_systeamState_t MUART_receiveData(uint8_t *retOfRecivedData){
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	00 d0       	rcall	.+0      	; 0x220 <MUART_receiveData+0x6>
 220:	0f 92       	push	r0
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9b 83       	std	Y+3, r25	; 0x03
 228:	8a 83       	std	Y+2, r24	; 0x02

	EN_MUART_systeamState_t uartRet = MUART_NOK;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG,RXC_BIT) != 1 );
 22e:	eb e2       	ldi	r30, 0x2B	; 43
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 1f       	adc	r24, r24
 236:	88 27       	eor	r24, r24
 238:	88 1f       	adc	r24, r24
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	c1 f7       	brne	.-16     	; 0x22e <MUART_receiveData+0x14>
	*retOfRecivedData = UDR_REG;
 23e:	ec e2       	ldi	r30, 0x2C	; 44
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	ea 81       	ldd	r30, Y+2	; 0x02
 246:	fb 81       	ldd	r31, Y+3	; 0x03
 248:	80 83       	st	Z, r24
	CLR_BIT(UCSRA_REG,RXC_BIT);
 24a:	ab e2       	ldi	r26, 0x2B	; 43
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	eb e2       	ldi	r30, 0x2B	; 43
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8f 77       	andi	r24, 0x7F	; 127
 256:	8c 93       	st	X, r24
	uartRet = MUART_OK;
 258:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
 25a:	89 81       	ldd	r24, Y+1	; 0x01
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	08 95       	ret

00000268 <MUART_sendData>:

EN_MUART_systeamState_t MUART_sendData(uint8_t u8DataToSend){
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	00 d0       	rcall	.+0      	; 0x26e <MUART_sendData+0x6>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	8a 83       	std	Y+2, r24	; 0x02

	EN_MUART_systeamState_t uartRet = MUART_NOK;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG,UDRE_BIT) != 1 );
 278:	eb e2       	ldi	r30, 0x2B	; 43
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	82 95       	swap	r24
 280:	86 95       	lsr	r24
 282:	87 70       	andi	r24, 0x07	; 7
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	81 70       	andi	r24, 0x01	; 1
 28a:	90 70       	andi	r25, 0x00	; 0
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	a1 f3       	breq	.-24     	; 0x278 <MUART_sendData+0x10>
	UDR_REG = u8DataToSend;
 290:	ec e2       	ldi	r30, 0x2C	; 44
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	80 83       	st	Z, r24
	uartRet = MUART_OK;
 298:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
 29a:	89 81       	ldd	r24, Y+1	; 0x01
}
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <GPIO_initPin+0x6>
 2ac:	0f 92       	push	r0
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	9b 83       	std	Y+3, r25	; 0x03
 2b4:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	9b 81       	ldd	r25, Y+3	; 0x03
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	b1 f0       	breq	.+44     	; 0x2ee <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
 2c2:	ea 81       	ldd	r30, Y+2	; 0x02
 2c4:	fb 81       	ldd	r31, Y+3	; 0x03
 2c6:	22 81       	ldd	r18, Z+2	; 0x02
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	9b 81       	ldd	r25, Y+3	; 0x03
 2cc:	62 2f       	mov	r22, r18
 2ce:	0e 94 80 01 	call	0x300	; 0x300 <GPIO_changePinDir>
 2d2:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 23       	and	r24, r24
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <GPIO_initPin+0x4c>
			ret =
 2da:	ea 81       	ldd	r30, Y+2	; 0x02
 2dc:	fb 81       	ldd	r31, Y+3	; 0x03
 2de:	23 81       	ldd	r18, Z+3	; 0x03
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	9b 81       	ldd	r25, Y+3	; 0x03
 2e4:	62 2f       	mov	r22, r18
 2e6:	0e 94 05 02 	call	0x40a	; 0x40a <GPIO_writePinLogic>
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	cf 91       	pop	r28
 2fc:	df 91       	pop	r29
 2fe:	08 95       	ret

00000300 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
 300:	df 93       	push	r29
 302:	cf 93       	push	r28
 304:	00 d0       	rcall	.+0      	; 0x306 <GPIO_changePinDir+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <GPIO_changePinDir+0x8>
 308:	00 d0       	rcall	.+0      	; 0x30a <GPIO_changePinDir+0xa>
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	9b 83       	std	Y+3, r25	; 0x03
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	9b 81       	ldd	r25, Y+3	; 0x03
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	09 f4       	brne	.+2      	; 0x322 <GPIO_changePinDir+0x22>
 320:	68 c0       	rjmp	.+208    	; 0x3f2 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
 322:	8c 81       	ldd	r24, Y+4	; 0x04
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	3e 83       	std	Y+6, r19	; 0x06
 32a:	2d 83       	std	Y+5, r18	; 0x05
 32c:	8d 81       	ldd	r24, Y+5	; 0x05
 32e:	9e 81       	ldd	r25, Y+6	; 0x06
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	31 f0       	breq	.+12     	; 0x340 <GPIO_changePinDir+0x40>
 334:	2d 81       	ldd	r18, Y+5	; 0x05
 336:	3e 81       	ldd	r19, Y+6	; 0x06
 338:	21 30       	cpi	r18, 0x01	; 1
 33a:	31 05       	cpc	r19, r1
 33c:	71 f1       	breq	.+92     	; 0x39a <GPIO_changePinDir+0x9a>
 33e:	5b c0       	rjmp	.+182    	; 0x3f6 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
 340:	ea 81       	ldd	r30, Y+2	; 0x02
 342:	fb 81       	ldd	r31, Y+3	; 0x03
 344:	80 81       	ld	r24, Z
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	fc 01       	movw	r30, r24
 350:	e0 5a       	subi	r30, 0xA0	; 160
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	a0 81       	ld	r26, Z
 356:	b1 81       	ldd	r27, Z+1	; 0x01
 358:	ea 81       	ldd	r30, Y+2	; 0x02
 35a:	fb 81       	ldd	r31, Y+3	; 0x03
 35c:	80 81       	ld	r24, Z
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	fc 01       	movw	r30, r24
 368:	e0 5a       	subi	r30, 0xA0	; 160
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	01 90       	ld	r0, Z+
 36e:	f0 81       	ld	r31, Z
 370:	e0 2d       	mov	r30, r0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	ea 81       	ldd	r30, Y+2	; 0x02
 378:	fb 81       	ldd	r31, Y+3	; 0x03
 37a:	81 81       	ldd	r24, Z+1	; 0x01
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <GPIO_changePinDir+0x8c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <GPIO_changePinDir+0x88>
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
 396:	19 82       	std	Y+1, r1	; 0x01
 398:	2e c0       	rjmp	.+92     	; 0x3f6 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
 39a:	ea 81       	ldd	r30, Y+2	; 0x02
 39c:	fb 81       	ldd	r31, Y+3	; 0x03
 39e:	80 81       	ld	r24, Z
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	fc 01       	movw	r30, r24
 3aa:	e0 5a       	subi	r30, 0xA0	; 160
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	a0 81       	ld	r26, Z
 3b0:	b1 81       	ldd	r27, Z+1	; 0x01
 3b2:	ea 81       	ldd	r30, Y+2	; 0x02
 3b4:	fb 81       	ldd	r31, Y+3	; 0x03
 3b6:	80 81       	ld	r24, Z
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	fc 01       	movw	r30, r24
 3c2:	e0 5a       	subi	r30, 0xA0	; 160
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	01 90       	ld	r0, Z+
 3c8:	f0 81       	ld	r31, Z
 3ca:	e0 2d       	mov	r30, r0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	ea 81       	ldd	r30, Y+2	; 0x02
 3d2:	fb 81       	ldd	r31, Y+3	; 0x03
 3d4:	81 81       	ldd	r24, Z+1	; 0x01
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <GPIO_changePinDir+0xe6>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <GPIO_changePinDir+0xe2>
 3ea:	84 2b       	or	r24, r20
 3ec:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
 3ee:	19 82       	std	Y+1, r1	; 0x01
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 3f8:	26 96       	adiw	r28, 0x06	; 6
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <GPIO_writePinLogic+0x6>
 410:	00 d0       	rcall	.+0      	; 0x412 <GPIO_writePinLogic+0x8>
 412:	00 d0       	rcall	.+0      	; 0x414 <GPIO_writePinLogic+0xa>
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	9b 83       	std	Y+3, r25	; 0x03
 41a:	8a 83       	std	Y+2, r24	; 0x02
 41c:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	09 f4       	brne	.+2      	; 0x42c <GPIO_writePinLogic+0x22>
 42a:	68 c0       	rjmp	.+208    	; 0x4fc <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
 42c:	8c 81       	ldd	r24, Y+4	; 0x04
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	3e 83       	std	Y+6, r19	; 0x06
 434:	2d 83       	std	Y+5, r18	; 0x05
 436:	8d 81       	ldd	r24, Y+5	; 0x05
 438:	9e 81       	ldd	r25, Y+6	; 0x06
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	31 f0       	breq	.+12     	; 0x44a <GPIO_writePinLogic+0x40>
 43e:	2d 81       	ldd	r18, Y+5	; 0x05
 440:	3e 81       	ldd	r19, Y+6	; 0x06
 442:	21 30       	cpi	r18, 0x01	; 1
 444:	31 05       	cpc	r19, r1
 446:	71 f1       	breq	.+92     	; 0x4a4 <GPIO_writePinLogic+0x9a>
 448:	5b c0       	rjmp	.+182    	; 0x500 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
 44a:	ea 81       	ldd	r30, Y+2	; 0x02
 44c:	fb 81       	ldd	r31, Y+3	; 0x03
 44e:	80 81       	ld	r24, Z
 450:	88 2f       	mov	r24, r24
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	fc 01       	movw	r30, r24
 45a:	e8 59       	subi	r30, 0x98	; 152
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	a0 81       	ld	r26, Z
 460:	b1 81       	ldd	r27, Z+1	; 0x01
 462:	ea 81       	ldd	r30, Y+2	; 0x02
 464:	fb 81       	ldd	r31, Y+3	; 0x03
 466:	80 81       	ld	r24, Z
 468:	88 2f       	mov	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	fc 01       	movw	r30, r24
 472:	e8 59       	subi	r30, 0x98	; 152
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	01 90       	ld	r0, Z+
 478:	f0 81       	ld	r31, Z
 47a:	e0 2d       	mov	r30, r0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	ea 81       	ldd	r30, Y+2	; 0x02
 482:	fb 81       	ldd	r31, Y+3	; 0x03
 484:	81 81       	ldd	r24, Z+1	; 0x01
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 2e       	mov	r0, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <GPIO_writePinLogic+0x8c>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <GPIO_writePinLogic+0x88>
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
 4a0:	19 82       	std	Y+1, r1	; 0x01
 4a2:	2e c0       	rjmp	.+92     	; 0x500 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
 4a4:	ea 81       	ldd	r30, Y+2	; 0x02
 4a6:	fb 81       	ldd	r31, Y+3	; 0x03
 4a8:	80 81       	ld	r24, Z
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	fc 01       	movw	r30, r24
 4b4:	e8 59       	subi	r30, 0x98	; 152
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	a0 81       	ld	r26, Z
 4ba:	b1 81       	ldd	r27, Z+1	; 0x01
 4bc:	ea 81       	ldd	r30, Y+2	; 0x02
 4be:	fb 81       	ldd	r31, Y+3	; 0x03
 4c0:	80 81       	ld	r24, Z
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	fc 01       	movw	r30, r24
 4cc:	e8 59       	subi	r30, 0x98	; 152
 4ce:	ff 4f       	sbci	r31, 0xFF	; 255
 4d0:	01 90       	ld	r0, Z+
 4d2:	f0 81       	ld	r31, Z
 4d4:	e0 2d       	mov	r30, r0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	ea 81       	ldd	r30, Y+2	; 0x02
 4dc:	fb 81       	ldd	r31, Y+3	; 0x03
 4de:	81 81       	ldd	r24, Z+1	; 0x01
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_writePinLogic+0xe6>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_writePinLogic+0xe2>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
 4f8:	19 82       	std	Y+1, r1	; 0x01
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
 500:	89 81       	ldd	r24, Y+1	; 0x01
}
 502:	26 96       	adiw	r28, 0x06	; 6
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	00 d0       	rcall	.+0      	; 0x51a <GPIO_readPinLogic+0x6>
 51a:	00 d0       	rcall	.+0      	; 0x51c <GPIO_readPinLogic+0x8>
 51c:	0f 92       	push	r0
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	9b 83       	std	Y+3, r25	; 0x03
 524:	8a 83       	std	Y+2, r24	; 0x02
 526:	7d 83       	std	Y+5, r23	; 0x05
 528:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
 52e:	8a 81       	ldd	r24, Y+2	; 0x02
 530:	9b 81       	ldd	r25, Y+3	; 0x03
 532:	00 97       	sbiw	r24, 0x00	; 0
 534:	11 f1       	breq	.+68     	; 0x57a <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
 536:	ea 81       	ldd	r30, Y+2	; 0x02
 538:	fb 81       	ldd	r31, Y+3	; 0x03
 53a:	80 81       	ld	r24, Z
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	fc 01       	movw	r30, r24
 546:	e0 59       	subi	r30, 0x90	; 144
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	01 90       	ld	r0, Z+
 54c:	f0 81       	ld	r31, Z
 54e:	e0 2d       	mov	r30, r0
 550:	80 81       	ld	r24, Z
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	ea 81       	ldd	r30, Y+2	; 0x02
 558:	fb 81       	ldd	r31, Y+3	; 0x03
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	88 2f       	mov	r24, r24
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	a9 01       	movw	r20, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <GPIO_readPinLogic+0x54>
 564:	55 95       	asr	r21
 566:	47 95       	ror	r20
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <GPIO_readPinLogic+0x50>
 56c:	ca 01       	movw	r24, r20
 56e:	81 70       	andi	r24, 0x01	; 1
 570:	ec 81       	ldd	r30, Y+4	; 0x04
 572:	fd 81       	ldd	r31, Y+5	; 0x05
 574:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
 576:	19 82       	std	Y+1, r1	; 0x01
 578:	02 c0       	rjmp	.+4      	; 0x57e <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
 57e:	89 81       	ldd	r24, Y+1	; 0x01
}
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	00 d0       	rcall	.+0      	; 0x596 <GPIO_togglePinLogic+0x6>
 596:	0f 92       	push	r0
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	9b 83       	std	Y+3, r25	; 0x03
 59e:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	9b 81       	ldd	r25, Y+3	; 0x03
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	61 f1       	breq	.+88     	; 0x604 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
 5ac:	ea 81       	ldd	r30, Y+2	; 0x02
 5ae:	fb 81       	ldd	r31, Y+3	; 0x03
 5b0:	80 81       	ld	r24, Z
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	fc 01       	movw	r30, r24
 5bc:	e8 59       	subi	r30, 0x98	; 152
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	a0 81       	ld	r26, Z
 5c2:	b1 81       	ldd	r27, Z+1	; 0x01
 5c4:	ea 81       	ldd	r30, Y+2	; 0x02
 5c6:	fb 81       	ldd	r31, Y+3	; 0x03
 5c8:	80 81       	ld	r24, Z
 5ca:	88 2f       	mov	r24, r24
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	fc 01       	movw	r30, r24
 5d4:	e8 59       	subi	r30, 0x98	; 152
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	01 90       	ld	r0, Z+
 5da:	f0 81       	ld	r31, Z
 5dc:	e0 2d       	mov	r30, r0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	ea 81       	ldd	r30, Y+2	; 0x02
 5e4:	fb 81       	ldd	r31, Y+3	; 0x03
 5e6:	81 81       	ldd	r24, Z+1	; 0x01
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 2e       	mov	r0, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <GPIO_togglePinLogic+0x68>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <GPIO_togglePinLogic+0x64>
 5fc:	84 27       	eor	r24, r20
 5fe:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
 600:	19 82       	std	Y+1, r1	; 0x01
 602:	02 c0       	rjmp	.+4      	; 0x608 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
 608:	89 81       	ldd	r24, Y+1	; 0x01
}
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	cf 91       	pop	r28
 612:	df 91       	pop	r29
 614:	08 95       	ret

00000616 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	28 97       	sbiw	r28, 0x08	; 8
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	8a 83       	std	Y+2, r24	; 0x02
 62c:	6b 83       	std	Y+3, r22	; 0x03
 62e:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	38 87       	std	Y+8, r19	; 0x08
 63c:	2f 83       	std	Y+7, r18	; 0x07
 63e:	8f 81       	ldd	r24, Y+7	; 0x07
 640:	98 85       	ldd	r25, Y+8	; 0x08
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	31 f0       	breq	.+12     	; 0x652 <GPIO_initPort+0x3c>
 646:	2f 81       	ldd	r18, Y+7	; 0x07
 648:	38 85       	ldd	r19, Y+8	; 0x08
 64a:	21 30       	cpi	r18, 0x01	; 1
 64c:	31 05       	cpc	r19, r1
 64e:	79 f0       	breq	.+30     	; 0x66e <GPIO_initPort+0x58>
 650:	1c c0       	rjmp	.+56     	; 0x68a <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	fc 01       	movw	r30, r24
 65e:	e0 5a       	subi	r30, 0xA0	; 160
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	01 90       	ld	r0, Z+
 664:	f0 81       	ld	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	10 82       	st	Z, r1
		ret = GPIO_OK;
 66a:	19 82       	std	Y+1, r1	; 0x01
 66c:	0e c0       	rjmp	.+28     	; 0x68a <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	88 2f       	mov	r24, r24
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	fc 01       	movw	r30, r24
 67a:	e0 5a       	subi	r30, 0xA0	; 160
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	01 90       	ld	r0, Z+
 680:	f0 81       	ld	r31, Z
 682:	e0 2d       	mov	r30, r0
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	80 83       	st	Z, r24
		ret = GPIO_OK;
 688:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
 68a:	8c 81       	ldd	r24, Y+4	; 0x04
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	3e 83       	std	Y+6, r19	; 0x06
 692:	2d 83       	std	Y+5, r18	; 0x05
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	9e 81       	ldd	r25, Y+6	; 0x06
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	31 f0       	breq	.+12     	; 0x6a8 <GPIO_initPort+0x92>
 69c:	2d 81       	ldd	r18, Y+5	; 0x05
 69e:	3e 81       	ldd	r19, Y+6	; 0x06
 6a0:	21 30       	cpi	r18, 0x01	; 1
 6a2:	31 05       	cpc	r19, r1
 6a4:	79 f0       	breq	.+30     	; 0x6c4 <GPIO_initPort+0xae>
 6a6:	1c c0       	rjmp	.+56     	; 0x6e0 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	fc 01       	movw	r30, r24
 6b4:	e8 59       	subi	r30, 0x98	; 152
 6b6:	ff 4f       	sbci	r31, 0xFF	; 255
 6b8:	01 90       	ld	r0, Z+
 6ba:	f0 81       	ld	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	10 82       	st	Z, r1
		ret = GPIO_OK;
 6c0:	19 82       	std	Y+1, r1	; 0x01
 6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	fc 01       	movw	r30, r24
 6d0:	e8 59       	subi	r30, 0x98	; 152
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	01 90       	ld	r0, Z+
 6d6:	f0 81       	ld	r31, Z
 6d8:	e0 2d       	mov	r30, r0
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	80 83       	st	Z, r24
		ret = GPIO_OK;
 6de:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e2:	28 96       	adiw	r28, 0x08	; 8
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	f8 94       	cli
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	cd bf       	out	0x3d, r28	; 61
 6ee:	cf 91       	pop	r28
 6f0:	df 91       	pop	r29
 6f2:	08 95       	ret

000006f4 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
 6f4:	df 93       	push	r29
 6f6:	cf 93       	push	r28
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <GPIO_changePortDir+0x6>
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <GPIO_changePortDir+0x8>
 6fc:	0f 92       	push	r0
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	8a 83       	std	Y+2, r24	; 0x02
 704:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	3d 83       	std	Y+5, r19	; 0x05
 712:	2c 83       	std	Y+4, r18	; 0x04
 714:	8c 81       	ldd	r24, Y+4	; 0x04
 716:	9d 81       	ldd	r25, Y+5	; 0x05
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	31 f0       	breq	.+12     	; 0x728 <GPIO_changePortDir+0x34>
 71c:	2c 81       	ldd	r18, Y+4	; 0x04
 71e:	3d 81       	ldd	r19, Y+5	; 0x05
 720:	21 30       	cpi	r18, 0x01	; 1
 722:	31 05       	cpc	r19, r1
 724:	79 f0       	breq	.+30     	; 0x744 <GPIO_changePortDir+0x50>
 726:	1c c0       	rjmp	.+56     	; 0x760 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	88 2f       	mov	r24, r24
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	fc 01       	movw	r30, r24
 734:	e0 5a       	subi	r30, 0xA0	; 160
 736:	ff 4f       	sbci	r31, 0xFF	; 255
 738:	01 90       	ld	r0, Z+
 73a:	f0 81       	ld	r31, Z
 73c:	e0 2d       	mov	r30, r0
 73e:	10 82       	st	Z, r1
		ret = GPIO_OK;
 740:	19 82       	std	Y+1, r1	; 0x01
 742:	0e c0       	rjmp	.+28     	; 0x760 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	88 2f       	mov	r24, r24
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	fc 01       	movw	r30, r24
 750:	e0 5a       	subi	r30, 0xA0	; 160
 752:	ff 4f       	sbci	r31, 0xFF	; 255
 754:	01 90       	ld	r0, Z+
 756:	f0 81       	ld	r31, Z
 758:	e0 2d       	mov	r30, r0
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	80 83       	st	Z, r24
		ret = GPIO_OK;
 75e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
 760:	89 81       	ldd	r24, Y+1	; 0x01
}
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	00 d0       	rcall	.+0      	; 0x778 <GPIO_writePortLogic+0x6>
 778:	00 d0       	rcall	.+0      	; 0x77a <GPIO_writePortLogic+0x8>
 77a:	0f 92       	push	r0
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	8a 83       	std	Y+2, r24	; 0x02
 782:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	3d 83       	std	Y+5, r19	; 0x05
 790:	2c 83       	std	Y+4, r18	; 0x04
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	9d 81       	ldd	r25, Y+5	; 0x05
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	31 f0       	breq	.+12     	; 0x7a6 <GPIO_writePortLogic+0x34>
 79a:	2c 81       	ldd	r18, Y+4	; 0x04
 79c:	3d 81       	ldd	r19, Y+5	; 0x05
 79e:	21 30       	cpi	r18, 0x01	; 1
 7a0:	31 05       	cpc	r19, r1
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <GPIO_writePortLogic+0x50>
 7a4:	1c c0       	rjmp	.+56     	; 0x7de <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	fc 01       	movw	r30, r24
 7b2:	e8 59       	subi	r30, 0x98	; 152
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	01 90       	ld	r0, Z+
 7b8:	f0 81       	ld	r31, Z
 7ba:	e0 2d       	mov	r30, r0
 7bc:	10 82       	st	Z, r1
		ret = GPIO_OK;
 7be:	19 82       	std	Y+1, r1	; 0x01
 7c0:	0e c0       	rjmp	.+28     	; 0x7de <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	88 2f       	mov	r24, r24
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	fc 01       	movw	r30, r24
 7ce:	e8 59       	subi	r30, 0x98	; 152
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	01 90       	ld	r0, Z+
 7d4:	f0 81       	ld	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	80 83       	st	Z, r24
		ret = GPIO_OK;
 7dc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
 7de:	89 81       	ldd	r24, Y+1	; 0x01
}
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	cf 91       	pop	r28
 7ec:	df 91       	pop	r29
 7ee:	08 95       	ret

000007f0 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
 7f0:	df 93       	push	r29
 7f2:	cf 93       	push	r28
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <GPIO_readPortLogic+0x6>
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <GPIO_readPortLogic+0x8>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	8a 83       	std	Y+2, r24	; 0x02
 7fe:	7c 83       	std	Y+4, r23	; 0x04
 800:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	88 2f       	mov	r24, r24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	fc 01       	movw	r30, r24
 812:	e0 59       	subi	r30, 0x90	; 144
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	01 90       	ld	r0, Z+
 818:	f0 81       	ld	r31, Z
 81a:	e0 2d       	mov	r30, r0
 81c:	80 81       	ld	r24, Z
 81e:	eb 81       	ldd	r30, Y+3	; 0x03
 820:	fc 81       	ldd	r31, Y+4	; 0x04
 822:	80 83       	st	Z, r24
	ret = GPIO_OK;
 824:	19 82       	std	Y+1, r1	; 0x01
	return ret;
 826:	89 81       	ldd	r24, Y+1	; 0x01
}
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	08 95       	ret

00000836 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
 836:	df 93       	push	r29
 838:	cf 93       	push	r28
 83a:	00 d0       	rcall	.+0      	; 0x83c <GPIO_togglePortLogic+0x6>
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	88 2f       	mov	r24, r24
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	fc 01       	movw	r30, r24
 852:	e0 5a       	subi	r30, 0xA0	; 160
 854:	ff 4f       	sbci	r31, 0xFF	; 255
 856:	a0 81       	ld	r26, Z
 858:	b1 81       	ldd	r27, Z+1	; 0x01
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	88 2f       	mov	r24, r24
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	fc 01       	movw	r30, r24
 866:	e0 5a       	subi	r30, 0xA0	; 160
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	01 90       	ld	r0, Z+
 86c:	f0 81       	ld	r31, Z
 86e:	e0 2d       	mov	r30, r0
 870:	20 81       	ld	r18, Z
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	fc 01       	movw	r30, r24
 87e:	e0 5a       	subi	r30, 0xA0	; 160
 880:	ff 4f       	sbci	r31, 0xFF	; 255
 882:	01 90       	ld	r0, Z+
 884:	f0 81       	ld	r31, Z
 886:	e0 2d       	mov	r30, r0
 888:	80 81       	ld	r24, Z
 88a:	82 27       	eor	r24, r18
 88c:	8c 93       	st	X, r24
	ret = GPIO_OK;
 88e:	19 82       	std	Y+1, r1	; 0x01
	return ret;
 890:	89 81       	ldd	r24, Y+1	; 0x01
}
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <GPIO_set4msbValue+0x6>
 8a2:	0f 92       	push	r0
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
 8a8:	8a 83       	std	Y+2, r24	; 0x02
 8aa:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	88 2f       	mov	r24, r24
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	fc 01       	movw	r30, r24
 8bc:	e8 59       	subi	r30, 0x98	; 152
 8be:	ff 4f       	sbci	r31, 0xFF	; 255
 8c0:	a0 81       	ld	r26, Z
 8c2:	b1 81       	ldd	r27, Z+1	; 0x01
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	88 2f       	mov	r24, r24
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	fc 01       	movw	r30, r24
 8d0:	e8 59       	subi	r30, 0x98	; 152
 8d2:	ff 4f       	sbci	r31, 0xFF	; 255
 8d4:	01 90       	ld	r0, Z+
 8d6:	f0 81       	ld	r31, Z
 8d8:	e0 2d       	mov	r30, r0
 8da:	80 81       	ld	r24, Z
 8dc:	8f 70       	andi	r24, 0x0F	; 15
 8de:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
 8e0:	8a 81       	ldd	r24, Y+2	; 0x02
 8e2:	88 2f       	mov	r24, r24
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	fc 01       	movw	r30, r24
 8ec:	e8 59       	subi	r30, 0x98	; 152
 8ee:	ff 4f       	sbci	r31, 0xFF	; 255
 8f0:	a0 81       	ld	r26, Z
 8f2:	b1 81       	ldd	r27, Z+1	; 0x01
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	fc 01       	movw	r30, r24
 900:	e8 59       	subi	r30, 0x98	; 152
 902:	ff 4f       	sbci	r31, 0xFF	; 255
 904:	01 90       	ld	r0, Z+
 906:	f0 81       	ld	r31, Z
 908:	e0 2d       	mov	r30, r0
 90a:	80 81       	ld	r24, Z
 90c:	28 2f       	mov	r18, r24
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	88 2f       	mov	r24, r24
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	82 95       	swap	r24
 916:	92 95       	swap	r25
 918:	90 7f       	andi	r25, 0xF0	; 240
 91a:	98 27       	eor	r25, r24
 91c:	80 7f       	andi	r24, 0xF0	; 240
 91e:	98 27       	eor	r25, r24
 920:	82 2b       	or	r24, r18
 922:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
 924:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
 926:	89 81       	ldd	r24, Y+1	; 0x01
}
 928:	0f 90       	pop	r0
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	cf 91       	pop	r28
 930:	df 91       	pop	r29
 932:	08 95       	ret

00000934 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
 934:	df 93       	push	r29
 936:	cf 93       	push	r28
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
 93c:	27 97       	sbiw	r28, 0x07	; 7
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	8a 83       	std	Y+2, r24	; 0x02
 94a:	4b 83       	std	Y+3, r20	; 0x03
 94c:	5c 83       	std	Y+4, r21	; 0x04
 94e:	6d 83       	std	Y+5, r22	; 0x05
 950:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	88 2f       	mov	r24, r24
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	fc 01       	movw	r30, r24
 962:	e8 59       	subi	r30, 0x98	; 152
 964:	ff 4f       	sbci	r31, 0xFF	; 255
 966:	01 90       	ld	r0, Z+
 968:	f0 81       	ld	r31, Z
 96a:	e0 2d       	mov	r30, r0
 96c:	80 81       	ld	r24, Z
 96e:	8a 81       	ldd	r24, Y+2	; 0x02
 970:	88 2f       	mov	r24, r24
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	fc 01       	movw	r30, r24
 97a:	e8 59       	subi	r30, 0x98	; 152
 97c:	ff 4f       	sbci	r31, 0xFF	; 255
 97e:	01 90       	ld	r0, Z+
 980:	f0 81       	ld	r31, Z
 982:	e0 2d       	mov	r30, r0
 984:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
 986:	8a 81       	ldd	r24, Y+2	; 0x02
 988:	88 2f       	mov	r24, r24
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	fc 01       	movw	r30, r24
 992:	e8 59       	subi	r30, 0x98	; 152
 994:	ff 4f       	sbci	r31, 0xFF	; 255
 996:	a0 81       	ld	r26, Z
 998:	b1 81       	ldd	r27, Z+1	; 0x01
 99a:	8a 81       	ldd	r24, Y+2	; 0x02
 99c:	88 2f       	mov	r24, r24
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	fc 01       	movw	r30, r24
 9a6:	e8 59       	subi	r30, 0x98	; 152
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	01 90       	ld	r0, Z+
 9ac:	f0 81       	ld	r31, Z
 9ae:	e0 2d       	mov	r30, r0
 9b0:	90 81       	ld	r25, Z
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	89 2b       	or	r24, r25
 9b6:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
 9b8:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
}
 9bc:	27 96       	adiw	r28, 0x07	; 7
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	f8 94       	cli
 9c2:	de bf       	out	0x3e, r29	; 62
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	cd bf       	out	0x3d, r28	; 61
 9c8:	cf 91       	pop	r28
 9ca:	df 91       	pop	r29
 9cc:	08 95       	ret

000009ce <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/led/led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
 9ce:	df 93       	push	r29
 9d0:	cf 93       	push	r28
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	28 97       	sbiw	r28, 0x08	; 8
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	f8 94       	cli
 9dc:	de bf       	out	0x3e, r29	; 62
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	cd bf       	out	0x3d, r28	; 61
 9e2:	98 87       	std	Y+8, r25	; 0x08
 9e4:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
 9ee:	8f 81       	ldd	r24, Y+7	; 0x07
 9f0:	98 85       	ldd	r25, Y+8	; 0x08
 9f2:	00 97       	sbiw	r24, 0x00	; 0
 9f4:	d9 f0       	breq	.+54     	; 0xa2c <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
 9f6:	ef 81       	ldd	r30, Y+7	; 0x07
 9f8:	f8 85       	ldd	r31, Y+8	; 0x08
 9fa:	81 81       	ldd	r24, Z+1	; 0x01
 9fc:	ef 81       	ldd	r30, Y+7	; 0x07
 9fe:	f8 85       	ldd	r31, Y+8	; 0x08
 a00:	92 81       	ldd	r25, Z+2	; 0x02
 a02:	ef 81       	ldd	r30, Y+7	; 0x07
 a04:	f8 85       	ldd	r31, Y+8	; 0x08
 a06:	20 81       	ld	r18, Z
 a08:	8b 83       	std	Y+3, r24	; 0x03
 a0a:	9c 83       	std	Y+4, r25	; 0x04
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	8d 83       	std	Y+5, r24	; 0x05
 a10:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
 a12:	ce 01       	movw	r24, r28
 a14:	03 96       	adiw	r24, 0x03	; 3
 a16:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GPIO_initPin>
 a1a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	88 23       	and	r24, r24
 a20:	11 f4       	brne	.+4      	; 0xa26 <LED_init+0x58>
      ledRet = LED_OK;
 a22:	1a 82       	std	Y+2, r1	; 0x02
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	8a 83       	std	Y+2, r24	; 0x02
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a32:	28 96       	adiw	r28, 0x08	; 8
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
 a3e:	cf 91       	pop	r28
 a40:	df 91       	pop	r29
 a42:	08 95       	ret

00000a44 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
 a44:	df 93       	push	r29
 a46:	cf 93       	push	r28
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
 a4c:	28 97       	sbiw	r28, 0x08	; 8
 a4e:	0f b6       	in	r0, 0x3f	; 63
 a50:	f8 94       	cli
 a52:	de bf       	out	0x3e, r29	; 62
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	cd bf       	out	0x3d, r28	; 61
 a58:	98 87       	std	Y+8, r25	; 0x08
 a5a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
 a64:	8f 81       	ldd	r24, Y+7	; 0x07
 a66:	98 85       	ldd	r25, Y+8	; 0x08
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	e1 f0       	breq	.+56     	; 0xaa4 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
 a6c:	ef 81       	ldd	r30, Y+7	; 0x07
 a6e:	f8 85       	ldd	r31, Y+8	; 0x08
 a70:	81 81       	ldd	r24, Z+1	; 0x01
 a72:	ef 81       	ldd	r30, Y+7	; 0x07
 a74:	f8 85       	ldd	r31, Y+8	; 0x08
 a76:	92 81       	ldd	r25, Z+2	; 0x02
 a78:	ef 81       	ldd	r30, Y+7	; 0x07
 a7a:	f8 85       	ldd	r31, Y+8	; 0x08
 a7c:	20 81       	ld	r18, Z
 a7e:	8b 83       	std	Y+3, r24	; 0x03
 a80:	9c 83       	std	Y+4, r25	; 0x04
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	8d 83       	std	Y+5, r24	; 0x05
 a86:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
 a88:	ce 01       	movw	r24, r28
 a8a:	03 96       	adiw	r24, 0x03	; 3
 a8c:	61 e0       	ldi	r22, 0x01	; 1
 a8e:	0e 94 05 02 	call	0x40a	; 0x40a <GPIO_writePinLogic>
 a92:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
 a94:	89 81       	ldd	r24, Y+1	; 0x01
 a96:	88 23       	and	r24, r24
 a98:	11 f4       	brne	.+4      	; 0xa9e <LED_turnOn+0x5a>
      ledRet = LED_OK;
 a9a:	1a 82       	std	Y+2, r1	; 0x02
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	8a 83       	std	Y+2, r24	; 0x02
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
}
 aaa:	28 96       	adiw	r28, 0x08	; 8
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	f8 94       	cli
 ab0:	de bf       	out	0x3e, r29	; 62
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	cd bf       	out	0x3d, r28	; 61
 ab6:	cf 91       	pop	r28
 ab8:	df 91       	pop	r29
 aba:	08 95       	ret

00000abc <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
 ac4:	28 97       	sbiw	r28, 0x08	; 8
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	98 87       	std	Y+8, r25	; 0x08
 ad2:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
 adc:	8f 81       	ldd	r24, Y+7	; 0x07
 ade:	98 85       	ldd	r25, Y+8	; 0x08
 ae0:	00 97       	sbiw	r24, 0x00	; 0
 ae2:	e1 f0       	breq	.+56     	; 0xb1c <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
 ae4:	ef 81       	ldd	r30, Y+7	; 0x07
 ae6:	f8 85       	ldd	r31, Y+8	; 0x08
 ae8:	81 81       	ldd	r24, Z+1	; 0x01
 aea:	ef 81       	ldd	r30, Y+7	; 0x07
 aec:	f8 85       	ldd	r31, Y+8	; 0x08
 aee:	92 81       	ldd	r25, Z+2	; 0x02
 af0:	ef 81       	ldd	r30, Y+7	; 0x07
 af2:	f8 85       	ldd	r31, Y+8	; 0x08
 af4:	20 81       	ld	r18, Z
 af6:	8b 83       	std	Y+3, r24	; 0x03
 af8:	9c 83       	std	Y+4, r25	; 0x04
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	8d 83       	std	Y+5, r24	; 0x05
 afe:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
 b00:	ce 01       	movw	r24, r28
 b02:	03 96       	adiw	r24, 0x03	; 3
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	0e 94 05 02 	call	0x40a	; 0x40a <GPIO_writePinLogic>
 b0a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	88 23       	and	r24, r24
 b10:	11 f4       	brne	.+4      	; 0xb16 <LED_turnOff+0x5a>
      ledRet = LED_OK;
 b12:	1a 82       	std	Y+2, r1	; 0x02
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	8a 83       	std	Y+2, r24	; 0x02
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
 b1c:	82 e0       	ldi	r24, 0x02	; 2
 b1e:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
 b20:	8a 81       	ldd	r24, Y+2	; 0x02
}
 b22:	28 96       	adiw	r28, 0x08	; 8
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	cf 91       	pop	r28
 b30:	df 91       	pop	r29
 b32:	08 95       	ret

00000b34 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
 b34:	df 93       	push	r29
 b36:	cf 93       	push	r28
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
 b3c:	28 97       	sbiw	r28, 0x08	; 8
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	f8 94       	cli
 b42:	de bf       	out	0x3e, r29	; 62
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	cd bf       	out	0x3d, r28	; 61
 b48:	98 87       	std	Y+8, r25	; 0x08
 b4a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
 b54:	8f 81       	ldd	r24, Y+7	; 0x07
 b56:	98 85       	ldd	r25, Y+8	; 0x08
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	d9 f0       	breq	.+54     	; 0xb92 <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
 b5c:	ef 81       	ldd	r30, Y+7	; 0x07
 b5e:	f8 85       	ldd	r31, Y+8	; 0x08
 b60:	81 81       	ldd	r24, Z+1	; 0x01
 b62:	ef 81       	ldd	r30, Y+7	; 0x07
 b64:	f8 85       	ldd	r31, Y+8	; 0x08
 b66:	92 81       	ldd	r25, Z+2	; 0x02
 b68:	ef 81       	ldd	r30, Y+7	; 0x07
 b6a:	f8 85       	ldd	r31, Y+8	; 0x08
 b6c:	20 81       	ld	r18, Z
 b6e:	8b 83       	std	Y+3, r24	; 0x03
 b70:	9c 83       	std	Y+4, r25	; 0x04
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	8d 83       	std	Y+5, r24	; 0x05
 b76:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
 b78:	ce 01       	movw	r24, r28
 b7a:	03 96       	adiw	r24, 0x03	; 3
 b7c:	0e 94 c8 02 	call	0x590	; 0x590 <GPIO_togglePinLogic>
 b80:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	88 23       	and	r24, r24
 b86:	11 f4       	brne	.+4      	; 0xb8c <LED_toggle+0x58>
      ledRet = LED_OK;
 b88:	1a 82       	std	Y+2, r1	; 0x02
 b8a:	05 c0       	rjmp	.+10     	; 0xb96 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	8a 83       	std	Y+2, r24	; 0x02
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
 b92:	82 e0       	ldi	r24, 0x02	; 2
 b94:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
 b96:	8a 81       	ldd	r24, Y+2	; 0x02
 b98:	28 96       	adiw	r28, 0x08	; 8
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	08 95       	ret

00000baa <initMain>:
	.baudRate1x = MUART_UART_BR1X_9600,
	.baudRate2x = MUART_UART_BR2X_9600
};

void initMain(void)
{
 baa:	df 93       	push	r29
 bac:	cf 93       	push	r28
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
	MUART_init(&uart);
 bb2:	8d e8       	ldi	r24, 0x8D	; 141
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 49 00 	call	0x92	; 0x92 <MUART_init>
	MUART_enable();
 bba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <MUART_enable>

	LED_init(&greenLed);
 bbe:	86 e9       	ldi	r24, 0x96	; 150
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&blueLed);
 bc6:	88 e7       	ldi	r24, 0x78	; 120
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&bibyLed);
 bce:	8e e7       	ldi	r24, 0x7E	; 126
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&redLed);
 bd6:	8b e7       	ldi	r24, 0x7B	; 123
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&orangeLed);
 bde:	81 e8       	ldi	r24, 0x81	; 129
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&pinkLed);
 be6:	84 e8       	ldi	r24, 0x84	; 132
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&yellowLed);
 bee:	8a e8       	ldi	r24, 0x8A	; 138
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
	LED_init(&purpleLed);
 bf6:	87 e8       	ldi	r24, 0x87	; 135
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LED_init>
}
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <appMain>:

void appMain(void)
{
 c04:	df 93       	push	r29
 c06:	cf 93       	push	r28
 c08:	0f 92       	push	r0
 c0a:	cd b7       	in	r28, 0x3d	; 61
 c0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t recivedData = '#';
 c0e:	83 e2       	ldi	r24, 0x23	; 35
 c10:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		MUART_receiveData(&recivedData);
 c12:	ce 01       	movw	r24, r28
 c14:	01 96       	adiw	r24, 0x01	; 1
 c16:	0e 94 0d 01 	call	0x21a	; 0x21a <MUART_receiveData>
		MUART_sendData(recivedData);
 c1a:	89 81       	ldd	r24, Y+1	; 0x01
 c1c:	0e 94 34 01 	call	0x268	; 0x268 <MUART_sendData>
		if(recivedData != '#')
 c20:	89 81       	ldd	r24, Y+1	; 0x01
 c22:	83 32       	cpi	r24, 0x23	; 35
 c24:	b1 f3       	breq	.-20     	; 0xc12 <appMain+0xe>
		{
			if(recivedData == '0')
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	80 33       	cpi	r24, 0x30	; 48
 c2a:	39 f4       	brne	.+14     	; 0xc3a <appMain+0x36>
			{
				LED_toggle(&greenLed);
 c2c:	86 e9       	ldi	r24, 0x96	; 150
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c34:	83 e2       	ldi	r24, 0x23	; 35
 c36:	89 83       	std	Y+1, r24	; 0x01
 c38:	ec cf       	rjmp	.-40     	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '1')
 c3a:	89 81       	ldd	r24, Y+1	; 0x01
 c3c:	81 33       	cpi	r24, 0x31	; 49
 c3e:	39 f4       	brne	.+14     	; 0xc4e <appMain+0x4a>
			{
				LED_toggle(&blueLed);
 c40:	88 e7       	ldi	r24, 0x78	; 120
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c48:	83 e2       	ldi	r24, 0x23	; 35
 c4a:	89 83       	std	Y+1, r24	; 0x01
 c4c:	e2 cf       	rjmp	.-60     	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '2')
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	82 33       	cpi	r24, 0x32	; 50
 c52:	39 f4       	brne	.+14     	; 0xc62 <appMain+0x5e>
			{
				LED_toggle(&redLed);
 c54:	8b e7       	ldi	r24, 0x7B	; 123
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c5c:	83 e2       	ldi	r24, 0x23	; 35
 c5e:	89 83       	std	Y+1, r24	; 0x01
 c60:	d8 cf       	rjmp	.-80     	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '3')
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	83 33       	cpi	r24, 0x33	; 51
 c66:	39 f4       	brne	.+14     	; 0xc76 <appMain+0x72>
			{
				LED_toggle(&bibyLed);
 c68:	8e e7       	ldi	r24, 0x7E	; 126
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c70:	83 e2       	ldi	r24, 0x23	; 35
 c72:	89 83       	std	Y+1, r24	; 0x01
 c74:	ce cf       	rjmp	.-100    	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '4')
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	84 33       	cpi	r24, 0x34	; 52
 c7a:	39 f4       	brne	.+14     	; 0xc8a <appMain+0x86>
			{
				LED_toggle(&orangeLed);
 c7c:	81 e8       	ldi	r24, 0x81	; 129
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c84:	83 e2       	ldi	r24, 0x23	; 35
 c86:	89 83       	std	Y+1, r24	; 0x01
 c88:	c4 cf       	rjmp	.-120    	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '5')
 c8a:	89 81       	ldd	r24, Y+1	; 0x01
 c8c:	85 33       	cpi	r24, 0x35	; 53
 c8e:	39 f4       	brne	.+14     	; 0xc9e <appMain+0x9a>
			{
				LED_toggle(&pinkLed);
 c90:	84 e8       	ldi	r24, 0x84	; 132
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 c98:	83 e2       	ldi	r24, 0x23	; 35
 c9a:	89 83       	std	Y+1, r24	; 0x01
 c9c:	ba cf       	rjmp	.-140    	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '6')
 c9e:	89 81       	ldd	r24, Y+1	; 0x01
 ca0:	86 33       	cpi	r24, 0x36	; 54
 ca2:	39 f4       	brne	.+14     	; 0xcb2 <appMain+0xae>
			{
				LED_toggle(&purpleLed);
 ca4:	87 e8       	ldi	r24, 0x87	; 135
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 cac:	83 e2       	ldi	r24, 0x23	; 35
 cae:	89 83       	std	Y+1, r24	; 0x01
 cb0:	b0 cf       	rjmp	.-160    	; 0xc12 <appMain+0xe>
			}
			else if(recivedData == '7')
 cb2:	89 81       	ldd	r24, Y+1	; 0x01
 cb4:	87 33       	cpi	r24, 0x37	; 55
 cb6:	39 f4       	brne	.+14     	; 0xcc6 <appMain+0xc2>
			{
				LED_toggle(&yellowLed);
 cb8:	8a e8       	ldi	r24, 0x8A	; 138
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0e 94 9a 05 	call	0xb34	; 0xb34 <LED_toggle>
				recivedData = '#';
 cc0:	83 e2       	ldi	r24, 0x23	; 35
 cc2:	89 83       	std	Y+1, r24	; 0x01
 cc4:	a6 cf       	rjmp	.-180    	; 0xc12 <appMain+0xe>
			}
			else
			{
				recivedData = '#';
 cc6:	83 e2       	ldi	r24, 0x23	; 35
 cc8:	89 83       	std	Y+1, r24	; 0x01
 cca:	a3 cf       	rjmp	.-186    	; 0xc12 <appMain+0xe>

00000ccc <main>:
/*************************************************************************/

#include "APPLICATION/app.h"

void main(void)
{
 ccc:	df 93       	push	r29
 cce:	cf 93       	push	r28
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
	initMain();
 cd4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <initMain>
	appMain();
 cd8:	0e 94 02 06 	call	0xc04	; 0xc04 <appMain>
}
 cdc:	cf 91       	pop	r28
 cde:	df 91       	pop	r29
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
