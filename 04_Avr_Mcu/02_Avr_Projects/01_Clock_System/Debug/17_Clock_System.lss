
17_Clock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00005d82  00005e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800184  00800184  00005f3a  2**0
                  ALLOC
  3 .stab         000063c0  00000000  00000000  00005f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000063ef  00000000  00000000  0000c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000126eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001282b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001299b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000145e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000154cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001627c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000163dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00016669  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016e37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__vector_4>
      14:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__vector_5>
      18:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__vector_6>
      1c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_7>
      20:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__vector_8>
      24:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_9>
      28:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_10>
      2c:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <main>
      8a:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6f 2e 	jmp	0x5cde	; 0x5cde <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLOCK_timerIsr>:
uint32_t sec = 0;



void CLOCK_timerIsr(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	if(tmrCounter == 3906)
     b4e:	80 91 85 01 	lds	r24, 0x0185
     b52:	90 91 86 01 	lds	r25, 0x0186
     b56:	2f e0       	ldi	r18, 0x0F	; 15
     b58:	82 34       	cpi	r24, 0x42	; 66
     b5a:	92 07       	cpc	r25, r18
     b5c:	71 f4       	brne	.+28     	; 0xb7a <CLOCK_timerIsr+0x34>
	{
		MTMR_writeTcntPreload(&myTmr,192);
     b5e:	86 e7       	ldi	r24, 0x76	; 118
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	60 ec       	ldi	r22, 0xC0	; 192
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <MTMR_writeTcntPreload>
		tmrCounter = 0;
     b6a:	10 92 86 01 	sts	0x0186, r1
     b6e:	10 92 85 01 	sts	0x0185, r1
		clockState = CLOCK_UPDATE_TIME_MODE;
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	80 93 84 01 	sts	0x0184, r24
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <CLOCK_timerIsr+0x46>
	}
	else
	{
		tmrCounter++;
     b7a:	80 91 85 01 	lds	r24, 0x0185
     b7e:	90 91 86 01 	lds	r25, 0x0186
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	90 93 86 01 	sts	0x0186, r25
     b88:	80 93 85 01 	sts	0x0185, r24
	}
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <CLOCK_init>:

void CLOCK_init(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
     b9a:	88 e5       	ldi	r24, 0x58	; 88
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <HLCD_init>
	HKP_init(&myKeypad);
     ba2:	86 e6       	ldi	r24, 0x66	; 102
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <HKP_init>
	myTmr.MTMR_setCallbackForOvf = CLOCK_timerIsr;
     baa:	83 ea       	ldi	r24, 0xA3	; 163
     bac:	95 e0       	ldi	r25, 0x05	; 5
     bae:	90 93 7d 01 	sts	0x017D, r25
     bb2:	80 93 7c 01 	sts	0x017C, r24
	MTMR_init(&myTmr);
     bb6:	86 e7       	ldi	r24, 0x76	; 118
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <MTMR_init>
	MGI_vGIE();
     bbe:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <MGI_vGIE>
}
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <CLOCK_interface>:

void CLOCK_interface(void)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <CLOCK_interface+0x6>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62

	while(1)
	{
		switch(clockState)
     bd2:	80 91 84 01 	lds	r24, 0x0184
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3a 83       	std	Y+2, r19	; 0x02
     bdc:	29 83       	std	Y+1, r18	; 0x01
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	91 05       	cpc	r25, r1
     be6:	39 f1       	breq	.+78     	; 0xc36 <CLOCK_interface+0x6e>
     be8:	29 81       	ldd	r18, Y+1	; 0x01
     bea:	3a 81       	ldd	r19, Y+2	; 0x02
     bec:	23 30       	cpi	r18, 0x03	; 3
     bee:	31 05       	cpc	r19, r1
     bf0:	54 f4       	brge	.+20     	; 0xc06 <CLOCK_interface+0x3e>
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	c1 f0       	breq	.+48     	; 0xc2a <CLOCK_interface+0x62>
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	3a 81       	ldd	r19, Y+2	; 0x02
     bfe:	21 30       	cpi	r18, 0x01	; 1
     c00:	31 05       	cpc	r19, r1
     c02:	b1 f0       	breq	.+44     	; 0xc30 <CLOCK_interface+0x68>
     c04:	e6 cf       	rjmp	.-52     	; 0xbd2 <CLOCK_interface+0xa>
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	91 05       	cpc	r25, r1
     c0e:	c9 f0       	breq	.+50     	; 0xc42 <CLOCK_interface+0x7a>
     c10:	29 81       	ldd	r18, Y+1	; 0x01
     c12:	3a 81       	ldd	r19, Y+2	; 0x02
     c14:	24 30       	cpi	r18, 0x04	; 4
     c16:	31 05       	cpc	r19, r1
     c18:	8c f0       	brlt	.+34     	; 0xc3c <CLOCK_interface+0x74>
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	85 30       	cpi	r24, 0x05	; 5
     c20:	91 05       	cpc	r25, r1
     c22:	b9 f6       	brne	.-82     	; 0xbd2 <CLOCK_interface+0xa>
		{
			case CLOCK_SLEEP_MODE:
			{
				CLOCK_CheckForPause();
     c24:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <CLOCK_CheckForPause>
     c28:	d4 cf       	rjmp	.-88     	; 0xbd2 <CLOCK_interface+0xa>
				break;
			}
			case CLOCK_Entry_MODE :
			{
				CLOCK_entryMode();
     c2a:	0e 94 24 06 	call	0xc48	; 0xc48 <CLOCK_entryMode>
     c2e:	d1 cf       	rjmp	.-94     	; 0xbd2 <CLOCK_interface+0xa>
				break;
			}
			case CLOCK_SCANNING :
			{
				CLOCK_Scanning();
     c30:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <CLOCK_Scanning>
     c34:	ce cf       	rjmp	.-100    	; 0xbd2 <CLOCK_interface+0xa>
				break;
			}
			case CLOCK_ADJUST_MODE :
			{
				CLOCK_adjust();
     c36:	0e 94 25 07 	call	0xe4a	; 0xe4a <CLOCK_adjust>
     c3a:	cb cf       	rjmp	.-106    	; 0xbd2 <CLOCK_interface+0xa>
				break;
			}
			case CLOCK_RUNNING_MODE :
			{
				CLOCK_running();
     c3c:	0e 94 80 07 	call	0xf00	; 0xf00 <CLOCK_running>
     c40:	c8 cf       	rjmp	.-112    	; 0xbd2 <CLOCK_interface+0xa>
				break;
			}
			case CLOCK_UPDATE_TIME_MODE :
			{
				CLOCK_updateTime();
     c42:	0e 94 8c 07 	call	0xf18	; 0xf18 <CLOCK_updateTime>
     c46:	c5 cf       	rjmp	.-118    	; 0xbd2 <CLOCK_interface+0xa>

00000c48 <CLOCK_entryMode>:
	}
}


void CLOCK_entryMode(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	HLCD_changeCursorPosation(&myLcd,0,0);
     c50:	88 e5       	ldi	r24, 0x58	; 88
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd,(uint8_t *)"A : Adjust Clock");
     c5c:	88 e5       	ldi	r24, 0x58	; 88
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	20 e6       	ldi	r18, 0x60	; 96
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	b9 01       	movw	r22, r18
     c66:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	HLCD_changeCursorPosation(&myLcd,1,0);
     c6a:	88 e5       	ldi	r24, 0x58	; 88
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd,(uint8_t *)"R : Reset Clock");
     c76:	88 e5       	ldi	r24, 0x58	; 88
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	21 e7       	ldi	r18, 0x71	; 113
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	b9 01       	movw	r22, r18
     c80:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	HLCD_Clr(&myLcd);
     c84:	88 e5       	ldi	r24, 0x58	; 88
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
	HLCD_changeCursorPosation(&myLcd,0,0);
     c8c:	88 e5       	ldi	r24, 0x58	; 88
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd,(uint8_t *)"G : Start Clock");
     c98:	88 e5       	ldi	r24, 0x58	; 88
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	21 e8       	ldi	r18, 0x81	; 129
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	b9 01       	movw	r22, r18
     ca2:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	HLCD_changeCursorPosation(&myLcd,1,0);
     ca6:	88 e5       	ldi	r24, 0x58	; 88
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd,(uint8_t *)"P : Stop Clock");
     cb2:	88 e5       	ldi	r24, 0x58	; 88
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	21 e9       	ldi	r18, 0x91	; 145
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	b9 01       	movw	r22, r18
     cbc:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	HLCD_Clr(&myLcd);
     cc0:	88 e5       	ldi	r24, 0x58	; 88
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
	CLOCK_UpdateLcd();
     cc8:	0e 94 80 0a 	call	0x1500	; 0x1500 <CLOCK_UpdateLcd>
	clockState = CLOCK_SCANNING;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 84 01 	sts	0x0184, r24
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <CLOCK_Scanning>:


void CLOCK_Scanning(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	HKP_scanningForPressedBtn(&pressedKeyVal);
     ce0:	8f e2       	ldi	r24, 0x2F	; 47
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <HKP_scanningForPressedBtn>
	if(pressedKeyVal == 'A')
     ce8:	80 91 2f 01 	lds	r24, 0x012F
     cec:	81 34       	cpi	r24, 0x41	; 65
     cee:	09 f0       	breq	.+2      	; 0xcf2 <CLOCK_Scanning+0x1a>
     cf0:	53 c0       	rjmp	.+166    	; 0xd98 <CLOCK_Scanning+0xc0>
	{
		pressedKeyVal = '#';
     cf2:	83 e2       	ldi	r24, 0x23	; 35
     cf4:	80 93 2f 01 	sts	0x012F, r24
		MTMR_stop(&myTmr);
     cf8:	86 e7       	ldi	r24, 0x76	; 118
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MTMR_stop>
		HLCD_Clr(&myLcd);
     d00:	88 e5       	ldi	r24, 0x58	; 88
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
     d08:	88 e5       	ldi	r24, 0x58	; 88
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"H : Edit Hours");
     d14:	88 e5       	ldi	r24, 0x58	; 88
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	20 ea       	ldi	r18, 0xA0	; 160
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	b9 01       	movw	r22, r18
     d1e:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
     d22:	88 e5       	ldi	r24, 0x58	; 88
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"M : Edit Minutes");
     d2e:	88 e5       	ldi	r24, 0x58	; 88
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	2f ea       	ldi	r18, 0xAF	; 175
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	b9 01       	movw	r22, r18
     d38:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		HLCD_Clr(&myLcd);
     d3c:	88 e5       	ldi	r24, 0x58	; 88
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
     d44:	88 e5       	ldi	r24, 0x58	; 88
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"S : Edit Seconds");
     d50:	88 e5       	ldi	r24, 0x58	; 88
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	20 ec       	ldi	r18, 0xC0	; 192
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	b9 01       	movw	r22, r18
     d5a:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
     d5e:	88 e5       	ldi	r24, 0x58	; 88
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"D : Done");
     d6a:	88 e5       	ldi	r24, 0x58	; 88
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	21 ed       	ldi	r18, 0xD1	; 209
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	b9 01       	movw	r22, r18
     d74:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		HLCD_Clr(&myLcd);
     d78:	88 e5       	ldi	r24, 0x58	; 88
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		CLOCK_UpdateLcd();
     d80:	0e 94 80 0a 	call	0x1500	; 0x1500 <CLOCK_UpdateLcd>
		HLCD_changeCursorPosation(&myLcd,0,4);
     d84:	88 e5       	ldi	r24, 0x58	; 88
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>

		clockState = CLOCK_ADJUST_MODE;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 84 01 	sts	0x0184, r24
     d96:	56 c0       	rjmp	.+172    	; 0xe44 <CLOCK_Scanning+0x16c>
	}
	else if(pressedKeyVal == 'R')
     d98:	80 91 2f 01 	lds	r24, 0x012F
     d9c:	82 35       	cpi	r24, 0x52	; 82
     d9e:	31 f4       	brne	.+12     	; 0xdac <CLOCK_Scanning+0xd4>
	{
		CLOCK_resetClock();
     da0:	0e 94 17 0c 	call	0x182e	; 0x182e <CLOCK_resetClock>
		pressedKeyVal = '#';
     da4:	83 e2       	ldi	r24, 0x23	; 35
     da6:	80 93 2f 01 	sts	0x012F, r24
     daa:	4c c0       	rjmp	.+152    	; 0xe44 <CLOCK_Scanning+0x16c>
	}
	else if(pressedKeyVal == 'G')
     dac:	80 91 2f 01 	lds	r24, 0x012F
     db0:	87 34       	cpi	r24, 0x47	; 71
     db2:	31 f4       	brne	.+12     	; 0xdc0 <CLOCK_Scanning+0xe8>
	{
		CLOCK_startClock();
     db4:	0e 94 6c 07 	call	0xed8	; 0xed8 <CLOCK_startClock>
		pressedKeyVal = '#';
     db8:	83 e2       	ldi	r24, 0x23	; 35
     dba:	80 93 2f 01 	sts	0x012F, r24
     dbe:	42 c0       	rjmp	.+132    	; 0xe44 <CLOCK_Scanning+0x16c>
	}
	else if(pressedKeyVal == 'P')
     dc0:	80 91 2f 01 	lds	r24, 0x012F
     dc4:	80 35       	cpi	r24, 0x50	; 80
     dc6:	21 f5       	brne	.+72     	; 0xe10 <CLOCK_Scanning+0x138>
	{
		pressedKeyVal = '#';
     dc8:	83 e2       	ldi	r24, 0x23	; 35
     dca:	80 93 2f 01 	sts	0x012F, r24
		HLCD_Clr(&myLcd);
     dce:	88 e5       	ldi	r24, 0x58	; 88
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
     dd6:	88 e5       	ldi	r24, 0x58	; 88
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Clock Already");
     de2:	88 e5       	ldi	r24, 0x58	; 88
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	2a ed       	ldi	r18, 0xDA	; 218
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
     df0:	88 e5       	ldi	r24, 0x58	; 88
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Stopped");
     dfc:	88 e5       	ldi	r24, 0x58	; 88
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	28 ee       	ldi	r18, 0xE8	; 232
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	b9 01       	movw	r22, r18
     e06:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		clockState = CLOCK_Entry_MODE;
     e0a:	10 92 84 01 	sts	0x0184, r1
     e0e:	1a c0       	rjmp	.+52     	; 0xe44 <CLOCK_Scanning+0x16c>
	}
	else if(pressedKeyVal != '#')
     e10:	80 91 2f 01 	lds	r24, 0x012F
     e14:	83 32       	cpi	r24, 0x23	; 35
     e16:	b1 f0       	breq	.+44     	; 0xe44 <CLOCK_Scanning+0x16c>
	{
		pressedKeyVal = '#';
     e18:	83 e2       	ldi	r24, 0x23	; 35
     e1a:	80 93 2f 01 	sts	0x012F, r24
		HLCD_Clr(&myLcd);
     e1e:	88 e5       	ldi	r24, 0x58	; 88
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
     e26:	88 e5       	ldi	r24, 0x58	; 88
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Invalid Parameter");
     e32:	88 e5       	ldi	r24, 0x58	; 88
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	20 ef       	ldi	r18, 0xF0	; 240
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	b9 01       	movw	r22, r18
     e3c:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		clockState = CLOCK_Entry_MODE;
     e40:	10 92 84 01 	sts	0x0184, r1
	}
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <CLOCK_adjust>:


void CLOCK_adjust(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	HKP_scanningForPressedBtn(&pressedKeyVal);
     e52:	8f e2       	ldi	r24, 0x2F	; 47
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <HKP_scanningForPressedBtn>
	if(pressedKeyVal == 'H')
     e5a:	80 91 2f 01 	lds	r24, 0x012F
     e5e:	88 34       	cpi	r24, 0x48	; 72
     e60:	31 f4       	brne	.+12     	; 0xe6e <CLOCK_adjust+0x24>
	{
		CLOCK_updateHr();
     e62:	0e 94 3a 08 	call	0x1074	; 0x1074 <CLOCK_updateHr>
		pressedKeyVal = '#';
     e66:	83 e2       	ldi	r24, 0x23	; 35
     e68:	80 93 2f 01 	sts	0x012F, r24
     e6c:	32 c0       	rjmp	.+100    	; 0xed2 <CLOCK_adjust+0x88>
	}
	else if(pressedKeyVal == 'M')
     e6e:	80 91 2f 01 	lds	r24, 0x012F
     e72:	8d 34       	cpi	r24, 0x4D	; 77
     e74:	31 f4       	brne	.+12     	; 0xe82 <CLOCK_adjust+0x38>
	{
		CLOCK_updateMin();
     e76:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <CLOCK_updateMin>
		pressedKeyVal = '#';
     e7a:	83 e2       	ldi	r24, 0x23	; 35
     e7c:	80 93 2f 01 	sts	0x012F, r24
     e80:	28 c0       	rjmp	.+80     	; 0xed2 <CLOCK_adjust+0x88>
	}
	else if(pressedKeyVal == 'S')
     e82:	80 91 2f 01 	lds	r24, 0x012F
     e86:	83 35       	cpi	r24, 0x53	; 83
     e88:	31 f4       	brne	.+12     	; 0xe96 <CLOCK_adjust+0x4c>
	{
		CLOCK_updateSec();
     e8a:	0e 94 ae 09 	call	0x135c	; 0x135c <CLOCK_updateSec>
		pressedKeyVal = '#';
     e8e:	83 e2       	ldi	r24, 0x23	; 35
     e90:	80 93 2f 01 	sts	0x012F, r24
     e94:	1e c0       	rjmp	.+60     	; 0xed2 <CLOCK_adjust+0x88>
	}
	else if(pressedKeyVal == 'D')
     e96:	80 91 2f 01 	lds	r24, 0x012F
     e9a:	84 34       	cpi	r24, 0x44	; 68
     e9c:	d1 f4       	brne	.+52     	; 0xed2 <CLOCK_adjust+0x88>
	{
		HLCD_Clr(&myLcd);
     e9e:	88 e5       	ldi	r24, 0x58	; 88
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
     ea6:	88 e5       	ldi	r24, 0x58	; 88
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Adjusted Success");
     eb2:	88 e5       	ldi	r24, 0x58	; 88
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	22 e0       	ldi	r18, 0x02	; 2
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	b9 01       	movw	r22, r18
     ebc:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
		pressedKeyVal = '#';
     ec0:	83 e2       	ldi	r24, 0x23	; 35
     ec2:	80 93 2f 01 	sts	0x012F, r24
		HLCD_Clr(&myLcd);
     ec6:	88 e5       	ldi	r24, 0x58	; 88
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
		CLOCK_startClock();
     ece:	0e 94 6c 07 	call	0xed8	; 0xed8 <CLOCK_startClock>
	}
	else
	{
		/* Do Nothing */
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <CLOCK_startClock>:

void CLOCK_startClock(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	MTMR_start(&myTmr);
     ee0:	86 e7       	ldi	r24, 0x76	; 118
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <MTMR_start>
	MTMR_writeTcntPreload(&myTmr,192);
     ee8:	86 e7       	ldi	r24, 0x76	; 118
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	60 ec       	ldi	r22, 0xC0	; 192
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <MTMR_writeTcntPreload>
	clockState = CLOCK_RUNNING_MODE;
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 93 84 01 	sts	0x0184, r24
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <CLOCK_running>:

void CLOCK_running(void)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	CLOCK_UpdateLcd();
     f08:	0e 94 80 0a 	call	0x1500	; 0x1500 <CLOCK_UpdateLcd>
	clockState = CLOCK_SLEEP_MODE;
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	80 93 84 01 	sts	0x0184, r24
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <CLOCK_updateTime>:

void CLOCK_updateTime(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	if(sec <= 59)
     f20:	80 91 8f 01 	lds	r24, 0x018F
     f24:	90 91 90 01 	lds	r25, 0x0190
     f28:	a0 91 91 01 	lds	r26, 0x0191
     f2c:	b0 91 92 01 	lds	r27, 0x0192
     f30:	8c 33       	cpi	r24, 0x3C	; 60
     f32:	91 05       	cpc	r25, r1
     f34:	a1 05       	cpc	r26, r1
     f36:	b1 05       	cpc	r27, r1
     f38:	a0 f4       	brcc	.+40     	; 0xf62 <CLOCK_updateTime+0x4a>
	{
		sec++;
     f3a:	80 91 8f 01 	lds	r24, 0x018F
     f3e:	90 91 90 01 	lds	r25, 0x0190
     f42:	a0 91 91 01 	lds	r26, 0x0191
     f46:	b0 91 92 01 	lds	r27, 0x0192
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	b1 1d       	adc	r27, r1
     f50:	80 93 8f 01 	sts	0x018F, r24
     f54:	90 93 90 01 	sts	0x0190, r25
     f58:	a0 93 91 01 	sts	0x0191, r26
     f5c:	b0 93 92 01 	sts	0x0192, r27
     f60:	83 c0       	rjmp	.+262    	; 0x1068 <CLOCK_updateTime+0x150>
	}
	else if(sec == 60)
     f62:	80 91 8f 01 	lds	r24, 0x018F
     f66:	90 91 90 01 	lds	r25, 0x0190
     f6a:	a0 91 91 01 	lds	r26, 0x0191
     f6e:	b0 91 92 01 	lds	r27, 0x0192
     f72:	8c 33       	cpi	r24, 0x3C	; 60
     f74:	91 05       	cpc	r25, r1
     f76:	a1 05       	cpc	r26, r1
     f78:	b1 05       	cpc	r27, r1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <CLOCK_updateTime+0x66>
     f7c:	75 c0       	rjmp	.+234    	; 0x1068 <CLOCK_updateTime+0x150>
	{
		sec = 0;
     f7e:	10 92 8f 01 	sts	0x018F, r1
     f82:	10 92 90 01 	sts	0x0190, r1
     f86:	10 92 91 01 	sts	0x0191, r1
     f8a:	10 92 92 01 	sts	0x0192, r1
		if(min <= 59)
     f8e:	80 91 8b 01 	lds	r24, 0x018B
     f92:	90 91 8c 01 	lds	r25, 0x018C
     f96:	a0 91 8d 01 	lds	r26, 0x018D
     f9a:	b0 91 8e 01 	lds	r27, 0x018E
     f9e:	8c 33       	cpi	r24, 0x3C	; 60
     fa0:	91 05       	cpc	r25, r1
     fa2:	a1 05       	cpc	r26, r1
     fa4:	b1 05       	cpc	r27, r1
     fa6:	a0 f4       	brcc	.+40     	; 0xfd0 <CLOCK_updateTime+0xb8>
		{
			min++;
     fa8:	80 91 8b 01 	lds	r24, 0x018B
     fac:	90 91 8c 01 	lds	r25, 0x018C
     fb0:	a0 91 8d 01 	lds	r26, 0x018D
     fb4:	b0 91 8e 01 	lds	r27, 0x018E
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	80 93 8b 01 	sts	0x018B, r24
     fc2:	90 93 8c 01 	sts	0x018C, r25
     fc6:	a0 93 8d 01 	sts	0x018D, r26
     fca:	b0 93 8e 01 	sts	0x018E, r27
     fce:	4c c0       	rjmp	.+152    	; 0x1068 <CLOCK_updateTime+0x150>
		}
		else if(min == 60)
     fd0:	80 91 8b 01 	lds	r24, 0x018B
     fd4:	90 91 8c 01 	lds	r25, 0x018C
     fd8:	a0 91 8d 01 	lds	r26, 0x018D
     fdc:	b0 91 8e 01 	lds	r27, 0x018E
     fe0:	8c 33       	cpi	r24, 0x3C	; 60
     fe2:	91 05       	cpc	r25, r1
     fe4:	a1 05       	cpc	r26, r1
     fe6:	b1 05       	cpc	r27, r1
     fe8:	09 f0       	breq	.+2      	; 0xfec <CLOCK_updateTime+0xd4>
     fea:	3e c0       	rjmp	.+124    	; 0x1068 <CLOCK_updateTime+0x150>
		{
			min = 0;
     fec:	10 92 8b 01 	sts	0x018B, r1
     ff0:	10 92 8c 01 	sts	0x018C, r1
     ff4:	10 92 8d 01 	sts	0x018D, r1
     ff8:	10 92 8e 01 	sts	0x018E, r1
			if(hr <= 23)
     ffc:	80 91 87 01 	lds	r24, 0x0187
    1000:	90 91 88 01 	lds	r25, 0x0188
    1004:	a0 91 89 01 	lds	r26, 0x0189
    1008:	b0 91 8a 01 	lds	r27, 0x018A
    100c:	88 31       	cpi	r24, 0x18	; 24
    100e:	91 05       	cpc	r25, r1
    1010:	a1 05       	cpc	r26, r1
    1012:	b1 05       	cpc	r27, r1
    1014:	a0 f4       	brcc	.+40     	; 0x103e <CLOCK_updateTime+0x126>
			{
				hr++;
    1016:	80 91 87 01 	lds	r24, 0x0187
    101a:	90 91 88 01 	lds	r25, 0x0188
    101e:	a0 91 89 01 	lds	r26, 0x0189
    1022:	b0 91 8a 01 	lds	r27, 0x018A
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	a1 1d       	adc	r26, r1
    102a:	b1 1d       	adc	r27, r1
    102c:	80 93 87 01 	sts	0x0187, r24
    1030:	90 93 88 01 	sts	0x0188, r25
    1034:	a0 93 89 01 	sts	0x0189, r26
    1038:	b0 93 8a 01 	sts	0x018A, r27
    103c:	15 c0       	rjmp	.+42     	; 0x1068 <CLOCK_updateTime+0x150>
			}
			else if(hr == 24)
    103e:	80 91 87 01 	lds	r24, 0x0187
    1042:	90 91 88 01 	lds	r25, 0x0188
    1046:	a0 91 89 01 	lds	r26, 0x0189
    104a:	b0 91 8a 01 	lds	r27, 0x018A
    104e:	88 31       	cpi	r24, 0x18	; 24
    1050:	91 05       	cpc	r25, r1
    1052:	a1 05       	cpc	r26, r1
    1054:	b1 05       	cpc	r27, r1
    1056:	41 f4       	brne	.+16     	; 0x1068 <CLOCK_updateTime+0x150>
			{
				hr = 0;
    1058:	10 92 87 01 	sts	0x0187, r1
    105c:	10 92 88 01 	sts	0x0188, r1
    1060:	10 92 89 01 	sts	0x0189, r1
    1064:	10 92 8a 01 	sts	0x018A, r1
	else
	{
		/* Do Nothing */
	}

	clockState = CLOCK_RUNNING_MODE;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	80 93 84 01 	sts	0x0184, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <CLOCK_updateHr>:

void CLOCK_updateHr(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	if( (hr >= 0) && (hr <= 8))
    107c:	80 91 87 01 	lds	r24, 0x0187
    1080:	90 91 88 01 	lds	r25, 0x0188
    1084:	a0 91 89 01 	lds	r26, 0x0189
    1088:	b0 91 8a 01 	lds	r27, 0x018A
    108c:	89 30       	cpi	r24, 0x09	; 9
    108e:	91 05       	cpc	r25, r1
    1090:	a1 05       	cpc	r26, r1
    1092:	b1 05       	cpc	r27, r1
    1094:	80 f5       	brcc	.+96     	; 0x10f6 <CLOCK_updateHr+0x82>
	{
		hr++;
    1096:	80 91 87 01 	lds	r24, 0x0187
    109a:	90 91 88 01 	lds	r25, 0x0188
    109e:	a0 91 89 01 	lds	r26, 0x0189
    10a2:	b0 91 8a 01 	lds	r27, 0x018A
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	a1 1d       	adc	r26, r1
    10aa:	b1 1d       	adc	r27, r1
    10ac:	80 93 87 01 	sts	0x0187, r24
    10b0:	90 93 88 01 	sts	0x0188, r25
    10b4:	a0 93 89 01 	sts	0x0189, r26
    10b8:	b0 93 8a 01 	sts	0x018A, r27
		HLCD_changeCursorPosation(&myLcd,0,4);
    10bc:	88 e5       	ldi	r24, 0x58	; 88
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	44 e0       	ldi	r20, 0x04	; 4
    10c4:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    10c8:	88 e5       	ldi	r24, 0x58	; 88
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,hr);
    10d8:	20 91 87 01 	lds	r18, 0x0187
    10dc:	30 91 88 01 	lds	r19, 0x0188
    10e0:	40 91 89 01 	lds	r20, 0x0189
    10e4:	50 91 8a 01 	lds	r21, 0x018A
    10e8:	88 e5       	ldi	r24, 0x58	; 88
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	ba 01       	movw	r22, r20
    10ee:	a9 01       	movw	r20, r18
    10f0:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    10f4:	73 c0       	rjmp	.+230    	; 0x11dc <CLOCK_updateHr+0x168>
	}
	else if((hr >= 9) && (hr <= 23))
    10f6:	80 91 87 01 	lds	r24, 0x0187
    10fa:	90 91 88 01 	lds	r25, 0x0188
    10fe:	a0 91 89 01 	lds	r26, 0x0189
    1102:	b0 91 8a 01 	lds	r27, 0x018A
    1106:	89 30       	cpi	r24, 0x09	; 9
    1108:	91 05       	cpc	r25, r1
    110a:	a1 05       	cpc	r26, r1
    110c:	b1 05       	cpc	r27, r1
    110e:	a8 f1       	brcs	.+106    	; 0x117a <CLOCK_updateHr+0x106>
    1110:	80 91 87 01 	lds	r24, 0x0187
    1114:	90 91 88 01 	lds	r25, 0x0188
    1118:	a0 91 89 01 	lds	r26, 0x0189
    111c:	b0 91 8a 01 	lds	r27, 0x018A
    1120:	88 31       	cpi	r24, 0x18	; 24
    1122:	91 05       	cpc	r25, r1
    1124:	a1 05       	cpc	r26, r1
    1126:	b1 05       	cpc	r27, r1
    1128:	40 f5       	brcc	.+80     	; 0x117a <CLOCK_updateHr+0x106>
	{
		hr++;
    112a:	80 91 87 01 	lds	r24, 0x0187
    112e:	90 91 88 01 	lds	r25, 0x0188
    1132:	a0 91 89 01 	lds	r26, 0x0189
    1136:	b0 91 8a 01 	lds	r27, 0x018A
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	a1 1d       	adc	r26, r1
    113e:	b1 1d       	adc	r27, r1
    1140:	80 93 87 01 	sts	0x0187, r24
    1144:	90 93 88 01 	sts	0x0188, r25
    1148:	a0 93 89 01 	sts	0x0189, r26
    114c:	b0 93 8a 01 	sts	0x018A, r27
		HLCD_changeCursorPosation(&myLcd,0,4);
    1150:	88 e5       	ldi	r24, 0x58	; 88
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	44 e0       	ldi	r20, 0x04	; 4
    1158:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,hr);
    115c:	20 91 87 01 	lds	r18, 0x0187
    1160:	30 91 88 01 	lds	r19, 0x0188
    1164:	40 91 89 01 	lds	r20, 0x0189
    1168:	50 91 8a 01 	lds	r21, 0x018A
    116c:	88 e5       	ldi	r24, 0x58	; 88
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	ba 01       	movw	r22, r20
    1172:	a9 01       	movw	r20, r18
    1174:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    1178:	31 c0       	rjmp	.+98     	; 0x11dc <CLOCK_updateHr+0x168>
	}
	else if(hr == 24)
    117a:	80 91 87 01 	lds	r24, 0x0187
    117e:	90 91 88 01 	lds	r25, 0x0188
    1182:	a0 91 89 01 	lds	r26, 0x0189
    1186:	b0 91 8a 01 	lds	r27, 0x018A
    118a:	88 31       	cpi	r24, 0x18	; 24
    118c:	91 05       	cpc	r25, r1
    118e:	a1 05       	cpc	r26, r1
    1190:	b1 05       	cpc	r27, r1
    1192:	21 f5       	brne	.+72     	; 0x11dc <CLOCK_updateHr+0x168>
	{
		hr = 0;
    1194:	10 92 87 01 	sts	0x0187, r1
    1198:	10 92 88 01 	sts	0x0188, r1
    119c:	10 92 89 01 	sts	0x0189, r1
    11a0:	10 92 8a 01 	sts	0x018A, r1
		HLCD_changeCursorPosation(&myLcd,0,4);
    11a4:	88 e5       	ldi	r24, 0x58	; 88
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	44 e0       	ldi	r20, 0x04	; 4
    11ac:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,hr);
    11b0:	20 91 87 01 	lds	r18, 0x0187
    11b4:	30 91 88 01 	lds	r19, 0x0188
    11b8:	40 91 89 01 	lds	r20, 0x0189
    11bc:	50 91 8a 01 	lds	r21, 0x018A
    11c0:	88 e5       	ldi	r24, 0x58	; 88
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	ba 01       	movw	r22, r20
    11c6:	a9 01       	movw	r20, r18
    11c8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    11cc:	88 e5       	ldi	r24, 0x58	; 88
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	}
	else
	{
		/* Do Nothing */
	}
	clockState = CLOCK_ADJUST_MODE;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	80 93 84 01 	sts	0x0184, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <CLOCK_updateMin>:

void CLOCK_updateMin(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	if( (min >= 0) && (min <= 8))
    11f0:	80 91 8b 01 	lds	r24, 0x018B
    11f4:	90 91 8c 01 	lds	r25, 0x018C
    11f8:	a0 91 8d 01 	lds	r26, 0x018D
    11fc:	b0 91 8e 01 	lds	r27, 0x018E
    1200:	89 30       	cpi	r24, 0x09	; 9
    1202:	91 05       	cpc	r25, r1
    1204:	a1 05       	cpc	r26, r1
    1206:	b1 05       	cpc	r27, r1
    1208:	80 f5       	brcc	.+96     	; 0x126a <CLOCK_updateMin+0x82>
	{
		min++;
    120a:	80 91 8b 01 	lds	r24, 0x018B
    120e:	90 91 8c 01 	lds	r25, 0x018C
    1212:	a0 91 8d 01 	lds	r26, 0x018D
    1216:	b0 91 8e 01 	lds	r27, 0x018E
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	a1 1d       	adc	r26, r1
    121e:	b1 1d       	adc	r27, r1
    1220:	80 93 8b 01 	sts	0x018B, r24
    1224:	90 93 8c 01 	sts	0x018C, r25
    1228:	a0 93 8d 01 	sts	0x018D, r26
    122c:	b0 93 8e 01 	sts	0x018E, r27
		HLCD_changeCursorPosation(&myLcd,0,7);
    1230:	88 e5       	ldi	r24, 0x58	; 88
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	47 e0       	ldi	r20, 0x07	; 7
    1238:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    123c:	88 e5       	ldi	r24, 0x58	; 88
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,min);
    124c:	20 91 8b 01 	lds	r18, 0x018B
    1250:	30 91 8c 01 	lds	r19, 0x018C
    1254:	40 91 8d 01 	lds	r20, 0x018D
    1258:	50 91 8e 01 	lds	r21, 0x018E
    125c:	88 e5       	ldi	r24, 0x58	; 88
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	ba 01       	movw	r22, r20
    1262:	a9 01       	movw	r20, r18
    1264:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    1268:	73 c0       	rjmp	.+230    	; 0x1350 <CLOCK_updateMin+0x168>
	}
	else if((min >= 9) && (min <= 59))
    126a:	80 91 8b 01 	lds	r24, 0x018B
    126e:	90 91 8c 01 	lds	r25, 0x018C
    1272:	a0 91 8d 01 	lds	r26, 0x018D
    1276:	b0 91 8e 01 	lds	r27, 0x018E
    127a:	89 30       	cpi	r24, 0x09	; 9
    127c:	91 05       	cpc	r25, r1
    127e:	a1 05       	cpc	r26, r1
    1280:	b1 05       	cpc	r27, r1
    1282:	a8 f1       	brcs	.+106    	; 0x12ee <CLOCK_updateMin+0x106>
    1284:	80 91 8b 01 	lds	r24, 0x018B
    1288:	90 91 8c 01 	lds	r25, 0x018C
    128c:	a0 91 8d 01 	lds	r26, 0x018D
    1290:	b0 91 8e 01 	lds	r27, 0x018E
    1294:	8c 33       	cpi	r24, 0x3C	; 60
    1296:	91 05       	cpc	r25, r1
    1298:	a1 05       	cpc	r26, r1
    129a:	b1 05       	cpc	r27, r1
    129c:	40 f5       	brcc	.+80     	; 0x12ee <CLOCK_updateMin+0x106>
	{
		min++;
    129e:	80 91 8b 01 	lds	r24, 0x018B
    12a2:	90 91 8c 01 	lds	r25, 0x018C
    12a6:	a0 91 8d 01 	lds	r26, 0x018D
    12aa:	b0 91 8e 01 	lds	r27, 0x018E
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	a1 1d       	adc	r26, r1
    12b2:	b1 1d       	adc	r27, r1
    12b4:	80 93 8b 01 	sts	0x018B, r24
    12b8:	90 93 8c 01 	sts	0x018C, r25
    12bc:	a0 93 8d 01 	sts	0x018D, r26
    12c0:	b0 93 8e 01 	sts	0x018E, r27
		HLCD_changeCursorPosation(&myLcd,0,7);
    12c4:	88 e5       	ldi	r24, 0x58	; 88
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	47 e0       	ldi	r20, 0x07	; 7
    12cc:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,min);
    12d0:	20 91 8b 01 	lds	r18, 0x018B
    12d4:	30 91 8c 01 	lds	r19, 0x018C
    12d8:	40 91 8d 01 	lds	r20, 0x018D
    12dc:	50 91 8e 01 	lds	r21, 0x018E
    12e0:	88 e5       	ldi	r24, 0x58	; 88
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	ba 01       	movw	r22, r20
    12e6:	a9 01       	movw	r20, r18
    12e8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    12ec:	31 c0       	rjmp	.+98     	; 0x1350 <CLOCK_updateMin+0x168>
	}
	else if(min == 60)
    12ee:	80 91 8b 01 	lds	r24, 0x018B
    12f2:	90 91 8c 01 	lds	r25, 0x018C
    12f6:	a0 91 8d 01 	lds	r26, 0x018D
    12fa:	b0 91 8e 01 	lds	r27, 0x018E
    12fe:	8c 33       	cpi	r24, 0x3C	; 60
    1300:	91 05       	cpc	r25, r1
    1302:	a1 05       	cpc	r26, r1
    1304:	b1 05       	cpc	r27, r1
    1306:	21 f5       	brne	.+72     	; 0x1350 <CLOCK_updateMin+0x168>
	{
		min = 0;
    1308:	10 92 8b 01 	sts	0x018B, r1
    130c:	10 92 8c 01 	sts	0x018C, r1
    1310:	10 92 8d 01 	sts	0x018D, r1
    1314:	10 92 8e 01 	sts	0x018E, r1
		HLCD_changeCursorPosation(&myLcd,0,7);
    1318:	88 e5       	ldi	r24, 0x58	; 88
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	47 e0       	ldi	r20, 0x07	; 7
    1320:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,min);
    1324:	20 91 8b 01 	lds	r18, 0x018B
    1328:	30 91 8c 01 	lds	r19, 0x018C
    132c:	40 91 8d 01 	lds	r20, 0x018D
    1330:	50 91 8e 01 	lds	r21, 0x018E
    1334:	88 e5       	ldi	r24, 0x58	; 88
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	ba 01       	movw	r22, r20
    133a:	a9 01       	movw	r20, r18
    133c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    1340:	88 e5       	ldi	r24, 0x58	; 88
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	}
	else
	{
		/* Do Nothing */
	}
	clockState = CLOCK_ADJUST_MODE;
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	80 93 84 01 	sts	0x0184, r24
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <CLOCK_updateSec>:

void CLOCK_updateSec(void)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	if( (sec >= 0) && (sec <= 8))
    1364:	80 91 8f 01 	lds	r24, 0x018F
    1368:	90 91 90 01 	lds	r25, 0x0190
    136c:	a0 91 91 01 	lds	r26, 0x0191
    1370:	b0 91 92 01 	lds	r27, 0x0192
    1374:	89 30       	cpi	r24, 0x09	; 9
    1376:	91 05       	cpc	r25, r1
    1378:	a1 05       	cpc	r26, r1
    137a:	b1 05       	cpc	r27, r1
    137c:	80 f5       	brcc	.+96     	; 0x13de <CLOCK_updateSec+0x82>
	{
		sec++;
    137e:	80 91 8f 01 	lds	r24, 0x018F
    1382:	90 91 90 01 	lds	r25, 0x0190
    1386:	a0 91 91 01 	lds	r26, 0x0191
    138a:	b0 91 92 01 	lds	r27, 0x0192
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	a1 1d       	adc	r26, r1
    1392:	b1 1d       	adc	r27, r1
    1394:	80 93 8f 01 	sts	0x018F, r24
    1398:	90 93 90 01 	sts	0x0190, r25
    139c:	a0 93 91 01 	sts	0x0191, r26
    13a0:	b0 93 92 01 	sts	0x0192, r27
		HLCD_changeCursorPosation(&myLcd,0,10);
    13a4:	88 e5       	ldi	r24, 0x58	; 88
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	4a e0       	ldi	r20, 0x0A	; 10
    13ac:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    13b0:	88 e5       	ldi	r24, 0x58	; 88
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,sec);
    13c0:	20 91 8f 01 	lds	r18, 0x018F
    13c4:	30 91 90 01 	lds	r19, 0x0190
    13c8:	40 91 91 01 	lds	r20, 0x0191
    13cc:	50 91 92 01 	lds	r21, 0x0192
    13d0:	88 e5       	ldi	r24, 0x58	; 88
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	ba 01       	movw	r22, r20
    13d6:	a9 01       	movw	r20, r18
    13d8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    13dc:	73 c0       	rjmp	.+230    	; 0x14c4 <CLOCK_updateSec+0x168>
	}
	else if((sec >= 9) && (sec <= 59))
    13de:	80 91 8f 01 	lds	r24, 0x018F
    13e2:	90 91 90 01 	lds	r25, 0x0190
    13e6:	a0 91 91 01 	lds	r26, 0x0191
    13ea:	b0 91 92 01 	lds	r27, 0x0192
    13ee:	89 30       	cpi	r24, 0x09	; 9
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	a8 f1       	brcs	.+106    	; 0x1462 <CLOCK_updateSec+0x106>
    13f8:	80 91 8f 01 	lds	r24, 0x018F
    13fc:	90 91 90 01 	lds	r25, 0x0190
    1400:	a0 91 91 01 	lds	r26, 0x0191
    1404:	b0 91 92 01 	lds	r27, 0x0192
    1408:	8c 33       	cpi	r24, 0x3C	; 60
    140a:	91 05       	cpc	r25, r1
    140c:	a1 05       	cpc	r26, r1
    140e:	b1 05       	cpc	r27, r1
    1410:	40 f5       	brcc	.+80     	; 0x1462 <CLOCK_updateSec+0x106>
	{
		sec++;
    1412:	80 91 8f 01 	lds	r24, 0x018F
    1416:	90 91 90 01 	lds	r25, 0x0190
    141a:	a0 91 91 01 	lds	r26, 0x0191
    141e:	b0 91 92 01 	lds	r27, 0x0192
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	a1 1d       	adc	r26, r1
    1426:	b1 1d       	adc	r27, r1
    1428:	80 93 8f 01 	sts	0x018F, r24
    142c:	90 93 90 01 	sts	0x0190, r25
    1430:	a0 93 91 01 	sts	0x0191, r26
    1434:	b0 93 92 01 	sts	0x0192, r27
		HLCD_changeCursorPosation(&myLcd,0,10);
    1438:	88 e5       	ldi	r24, 0x58	; 88
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	4a e0       	ldi	r20, 0x0A	; 10
    1440:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,sec);
    1444:	20 91 8f 01 	lds	r18, 0x018F
    1448:	30 91 90 01 	lds	r19, 0x0190
    144c:	40 91 91 01 	lds	r20, 0x0191
    1450:	50 91 92 01 	lds	r21, 0x0192
    1454:	88 e5       	ldi	r24, 0x58	; 88
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	ba 01       	movw	r22, r20
    145a:	a9 01       	movw	r20, r18
    145c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    1460:	31 c0       	rjmp	.+98     	; 0x14c4 <CLOCK_updateSec+0x168>
	}
	else if(sec == 60)
    1462:	80 91 8f 01 	lds	r24, 0x018F
    1466:	90 91 90 01 	lds	r25, 0x0190
    146a:	a0 91 91 01 	lds	r26, 0x0191
    146e:	b0 91 92 01 	lds	r27, 0x0192
    1472:	8c 33       	cpi	r24, 0x3C	; 60
    1474:	91 05       	cpc	r25, r1
    1476:	a1 05       	cpc	r26, r1
    1478:	b1 05       	cpc	r27, r1
    147a:	21 f5       	brne	.+72     	; 0x14c4 <CLOCK_updateSec+0x168>
	{
		sec = 0;
    147c:	10 92 8f 01 	sts	0x018F, r1
    1480:	10 92 90 01 	sts	0x0190, r1
    1484:	10 92 91 01 	sts	0x0191, r1
    1488:	10 92 92 01 	sts	0x0192, r1
		HLCD_changeCursorPosation(&myLcd,0,10);
    148c:	88 e5       	ldi	r24, 0x58	; 88
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	4a e0       	ldi	r20, 0x0A	; 10
    1494:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,sec);
    1498:	20 91 8f 01 	lds	r18, 0x018F
    149c:	30 91 90 01 	lds	r19, 0x0190
    14a0:	40 91 91 01 	lds	r20, 0x0191
    14a4:	50 91 92 01 	lds	r21, 0x0192
    14a8:	88 e5       	ldi	r24, 0x58	; 88
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	ba 01       	movw	r22, r20
    14ae:	a9 01       	movw	r20, r18
    14b0:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    14b4:	88 e5       	ldi	r24, 0x58	; 88
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	}
	else
	{
		/* Do Nothing */
	}
	clockState = CLOCK_ADJUST_MODE;
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	80 93 84 01 	sts	0x0184, r24
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <CLOCK_CheckForPause>:


void CLOCK_CheckForPause(void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	HKP_scanningForPressedBtn(&pressedKeyVal);
    14d8:	8f e2       	ldi	r24, 0x2F	; 47
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <HKP_scanningForPressedBtn>
	if(pressedKeyVal == 'P')
    14e0:	80 91 2f 01 	lds	r24, 0x012F
    14e4:	80 35       	cpi	r24, 0x50	; 80
    14e6:	49 f4       	brne	.+18     	; 0x14fa <CLOCK_CheckForPause+0x2a>
	{
		pressedKeyVal = '#';
    14e8:	83 e2       	ldi	r24, 0x23	; 35
    14ea:	80 93 2f 01 	sts	0x012F, r24
		MTMR_stop(&myTmr);
    14ee:	86 e7       	ldi	r24, 0x76	; 118
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MTMR_stop>
		clockState = CLOCK_Entry_MODE;
    14f6:	10 92 84 01 	sts	0x0184, r1
	}
}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <CLOCK_UpdateLcd>:

void CLOCK_UpdateLcd(void)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	if( (hr >= 0) && (hr <= 9))
    1508:	80 91 87 01 	lds	r24, 0x0187
    150c:	90 91 88 01 	lds	r25, 0x0188
    1510:	a0 91 89 01 	lds	r26, 0x0189
    1514:	b0 91 8a 01 	lds	r27, 0x018A
    1518:	8a 30       	cpi	r24, 0x0A	; 10
    151a:	91 05       	cpc	r25, r1
    151c:	a1 05       	cpc	r26, r1
    151e:	b1 05       	cpc	r27, r1
    1520:	e8 f4       	brcc	.+58     	; 0x155c <CLOCK_UpdateLcd+0x5c>
	{
		HLCD_changeCursorPosation(&myLcd,0,4);
    1522:	88 e5       	ldi	r24, 0x58	; 88
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	44 e0       	ldi	r20, 0x04	; 4
    152a:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    152e:	88 e5       	ldi	r24, 0x58	; 88
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,hr);
    153e:	20 91 87 01 	lds	r18, 0x0187
    1542:	30 91 88 01 	lds	r19, 0x0188
    1546:	40 91 89 01 	lds	r20, 0x0189
    154a:	50 91 8a 01 	lds	r21, 0x018A
    154e:	88 e5       	ldi	r24, 0x58	; 88
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	ba 01       	movw	r22, r20
    1554:	a9 01       	movw	r20, r18
    1556:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    155a:	58 c0       	rjmp	.+176    	; 0x160c <CLOCK_UpdateLcd+0x10c>
	}
	else if((hr >= 10) && (hr <= 24))
    155c:	80 91 87 01 	lds	r24, 0x0187
    1560:	90 91 88 01 	lds	r25, 0x0188
    1564:	a0 91 89 01 	lds	r26, 0x0189
    1568:	b0 91 8a 01 	lds	r27, 0x018A
    156c:	8a 30       	cpi	r24, 0x0A	; 10
    156e:	91 05       	cpc	r25, r1
    1570:	a1 05       	cpc	r26, r1
    1572:	b1 05       	cpc	r27, r1
    1574:	10 f1       	brcs	.+68     	; 0x15ba <CLOCK_UpdateLcd+0xba>
    1576:	80 91 87 01 	lds	r24, 0x0187
    157a:	90 91 88 01 	lds	r25, 0x0188
    157e:	a0 91 89 01 	lds	r26, 0x0189
    1582:	b0 91 8a 01 	lds	r27, 0x018A
    1586:	89 31       	cpi	r24, 0x19	; 25
    1588:	91 05       	cpc	r25, r1
    158a:	a1 05       	cpc	r26, r1
    158c:	b1 05       	cpc	r27, r1
    158e:	a8 f4       	brcc	.+42     	; 0x15ba <CLOCK_UpdateLcd+0xba>
	{
		HLCD_changeCursorPosation(&myLcd,0,4);
    1590:	88 e5       	ldi	r24, 0x58	; 88
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	44 e0       	ldi	r20, 0x04	; 4
    1598:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,hr);
    159c:	20 91 87 01 	lds	r18, 0x0187
    15a0:	30 91 88 01 	lds	r19, 0x0188
    15a4:	40 91 89 01 	lds	r20, 0x0189
    15a8:	50 91 8a 01 	lds	r21, 0x018A
    15ac:	88 e5       	ldi	r24, 0x58	; 88
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	ba 01       	movw	r22, r20
    15b2:	a9 01       	movw	r20, r18
    15b4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    15b8:	29 c0       	rjmp	.+82     	; 0x160c <CLOCK_UpdateLcd+0x10c>
	}
	else if(hr > 24)
    15ba:	80 91 87 01 	lds	r24, 0x0187
    15be:	90 91 88 01 	lds	r25, 0x0188
    15c2:	a0 91 89 01 	lds	r26, 0x0189
    15c6:	b0 91 8a 01 	lds	r27, 0x018A
    15ca:	89 31       	cpi	r24, 0x19	; 25
    15cc:	91 05       	cpc	r25, r1
    15ce:	a1 05       	cpc	r26, r1
    15d0:	b1 05       	cpc	r27, r1
    15d2:	e0 f0       	brcs	.+56     	; 0x160c <CLOCK_UpdateLcd+0x10c>
	{
		HLCD_changeCursorPosation(&myLcd,0,4);
    15d4:	88 e5       	ldi	r24, 0x58	; 88
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	44 e0       	ldi	r20, 0x04	; 4
    15dc:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,hr);
    15e0:	20 91 87 01 	lds	r18, 0x0187
    15e4:	30 91 88 01 	lds	r19, 0x0188
    15e8:	40 91 89 01 	lds	r20, 0x0189
    15ec:	50 91 8a 01 	lds	r21, 0x018A
    15f0:	88 e5       	ldi	r24, 0x58	; 88
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	ba 01       	movw	r22, r20
    15f6:	a9 01       	movw	r20, r18
    15f8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    15fc:	88 e5       	ldi	r24, 0x58	; 88
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	else
	{
		/* Do Nothing */
	}

	HLCD_displayChar(&myLcd,':');
    160c:	88 e5       	ldi	r24, 0x58	; 88
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	6a e3       	ldi	r22, 0x3A	; 58
    1612:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <HLCD_displayChar>

	if( (min >= 0) && (min <= 9))
    1616:	80 91 8b 01 	lds	r24, 0x018B
    161a:	90 91 8c 01 	lds	r25, 0x018C
    161e:	a0 91 8d 01 	lds	r26, 0x018D
    1622:	b0 91 8e 01 	lds	r27, 0x018E
    1626:	8a 30       	cpi	r24, 0x0A	; 10
    1628:	91 05       	cpc	r25, r1
    162a:	a1 05       	cpc	r26, r1
    162c:	b1 05       	cpc	r27, r1
    162e:	e8 f4       	brcc	.+58     	; 0x166a <CLOCK_UpdateLcd+0x16a>
	{
		HLCD_changeCursorPosation(&myLcd,0,7);
    1630:	88 e5       	ldi	r24, 0x58	; 88
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	47 e0       	ldi	r20, 0x07	; 7
    1638:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    163c:	88 e5       	ldi	r24, 0x58	; 88
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,min);
    164c:	20 91 8b 01 	lds	r18, 0x018B
    1650:	30 91 8c 01 	lds	r19, 0x018C
    1654:	40 91 8d 01 	lds	r20, 0x018D
    1658:	50 91 8e 01 	lds	r21, 0x018E
    165c:	88 e5       	ldi	r24, 0x58	; 88
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	ba 01       	movw	r22, r20
    1662:	a9 01       	movw	r20, r18
    1664:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    1668:	58 c0       	rjmp	.+176    	; 0x171a <CLOCK_UpdateLcd+0x21a>
	}
	else if((min >= 10) && (min <= 60))
    166a:	80 91 8b 01 	lds	r24, 0x018B
    166e:	90 91 8c 01 	lds	r25, 0x018C
    1672:	a0 91 8d 01 	lds	r26, 0x018D
    1676:	b0 91 8e 01 	lds	r27, 0x018E
    167a:	8a 30       	cpi	r24, 0x0A	; 10
    167c:	91 05       	cpc	r25, r1
    167e:	a1 05       	cpc	r26, r1
    1680:	b1 05       	cpc	r27, r1
    1682:	10 f1       	brcs	.+68     	; 0x16c8 <CLOCK_UpdateLcd+0x1c8>
    1684:	80 91 8b 01 	lds	r24, 0x018B
    1688:	90 91 8c 01 	lds	r25, 0x018C
    168c:	a0 91 8d 01 	lds	r26, 0x018D
    1690:	b0 91 8e 01 	lds	r27, 0x018E
    1694:	8d 33       	cpi	r24, 0x3D	; 61
    1696:	91 05       	cpc	r25, r1
    1698:	a1 05       	cpc	r26, r1
    169a:	b1 05       	cpc	r27, r1
    169c:	a8 f4       	brcc	.+42     	; 0x16c8 <CLOCK_UpdateLcd+0x1c8>
	{
		HLCD_changeCursorPosation(&myLcd,0,7);
    169e:	88 e5       	ldi	r24, 0x58	; 88
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	47 e0       	ldi	r20, 0x07	; 7
    16a6:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,min);
    16aa:	20 91 8b 01 	lds	r18, 0x018B
    16ae:	30 91 8c 01 	lds	r19, 0x018C
    16b2:	40 91 8d 01 	lds	r20, 0x018D
    16b6:	50 91 8e 01 	lds	r21, 0x018E
    16ba:	88 e5       	ldi	r24, 0x58	; 88
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	ba 01       	movw	r22, r20
    16c0:	a9 01       	movw	r20, r18
    16c2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    16c6:	29 c0       	rjmp	.+82     	; 0x171a <CLOCK_UpdateLcd+0x21a>
	}
	else if(min > 60)
    16c8:	80 91 8b 01 	lds	r24, 0x018B
    16cc:	90 91 8c 01 	lds	r25, 0x018C
    16d0:	a0 91 8d 01 	lds	r26, 0x018D
    16d4:	b0 91 8e 01 	lds	r27, 0x018E
    16d8:	8d 33       	cpi	r24, 0x3D	; 61
    16da:	91 05       	cpc	r25, r1
    16dc:	a1 05       	cpc	r26, r1
    16de:	b1 05       	cpc	r27, r1
    16e0:	e0 f0       	brcs	.+56     	; 0x171a <CLOCK_UpdateLcd+0x21a>
	{
		HLCD_changeCursorPosation(&myLcd,0,7);
    16e2:	88 e5       	ldi	r24, 0x58	; 88
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	47 e0       	ldi	r20, 0x07	; 7
    16ea:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,min);
    16ee:	20 91 8b 01 	lds	r18, 0x018B
    16f2:	30 91 8c 01 	lds	r19, 0x018C
    16f6:	40 91 8d 01 	lds	r20, 0x018D
    16fa:	50 91 8e 01 	lds	r21, 0x018E
    16fe:	88 e5       	ldi	r24, 0x58	; 88
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	ba 01       	movw	r22, r20
    1704:	a9 01       	movw	r20, r18
    1706:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    170a:	88 e5       	ldi	r24, 0x58	; 88
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	else
	{
		/* Do Nothing */
	}

	HLCD_displayChar(&myLcd,':');
    171a:	88 e5       	ldi	r24, 0x58	; 88
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	6a e3       	ldi	r22, 0x3A	; 58
    1720:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <HLCD_displayChar>

	if( (sec >= 0) && (sec <= 9))
    1724:	80 91 8f 01 	lds	r24, 0x018F
    1728:	90 91 90 01 	lds	r25, 0x0190
    172c:	a0 91 91 01 	lds	r26, 0x0191
    1730:	b0 91 92 01 	lds	r27, 0x0192
    1734:	8a 30       	cpi	r24, 0x0A	; 10
    1736:	91 05       	cpc	r25, r1
    1738:	a1 05       	cpc	r26, r1
    173a:	b1 05       	cpc	r27, r1
    173c:	e8 f4       	brcc	.+58     	; 0x1778 <CLOCK_UpdateLcd+0x278>
	{
		HLCD_changeCursorPosation(&myLcd,0,10);
    173e:	88 e5       	ldi	r24, 0x58	; 88
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	4a e0       	ldi	r20, 0x0A	; 10
    1746:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,0);
    174a:	88 e5       	ldi	r24, 0x58	; 88
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,sec);
    175a:	20 91 8f 01 	lds	r18, 0x018F
    175e:	30 91 90 01 	lds	r19, 0x0190
    1762:	40 91 91 01 	lds	r20, 0x0191
    1766:	50 91 92 01 	lds	r21, 0x0192
    176a:	88 e5       	ldi	r24, 0x58	; 88
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	ba 01       	movw	r22, r20
    1770:	a9 01       	movw	r20, r18
    1772:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    1776:	58 c0       	rjmp	.+176    	; 0x1828 <CLOCK_UpdateLcd+0x328>
	}
	else if((sec >= 10) && (sec <= 60))
    1778:	80 91 8f 01 	lds	r24, 0x018F
    177c:	90 91 90 01 	lds	r25, 0x0190
    1780:	a0 91 91 01 	lds	r26, 0x0191
    1784:	b0 91 92 01 	lds	r27, 0x0192
    1788:	8a 30       	cpi	r24, 0x0A	; 10
    178a:	91 05       	cpc	r25, r1
    178c:	a1 05       	cpc	r26, r1
    178e:	b1 05       	cpc	r27, r1
    1790:	10 f1       	brcs	.+68     	; 0x17d6 <CLOCK_UpdateLcd+0x2d6>
    1792:	80 91 8f 01 	lds	r24, 0x018F
    1796:	90 91 90 01 	lds	r25, 0x0190
    179a:	a0 91 91 01 	lds	r26, 0x0191
    179e:	b0 91 92 01 	lds	r27, 0x0192
    17a2:	8d 33       	cpi	r24, 0x3D	; 61
    17a4:	91 05       	cpc	r25, r1
    17a6:	a1 05       	cpc	r26, r1
    17a8:	b1 05       	cpc	r27, r1
    17aa:	a8 f4       	brcc	.+42     	; 0x17d6 <CLOCK_UpdateLcd+0x2d6>
	{
		HLCD_changeCursorPosation(&myLcd,0,10);
    17ac:	88 e5       	ldi	r24, 0x58	; 88
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	4a e0       	ldi	r20, 0x0A	; 10
    17b4:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,sec);
    17b8:	20 91 8f 01 	lds	r18, 0x018F
    17bc:	30 91 90 01 	lds	r19, 0x0190
    17c0:	40 91 91 01 	lds	r20, 0x0191
    17c4:	50 91 92 01 	lds	r21, 0x0192
    17c8:	88 e5       	ldi	r24, 0x58	; 88
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	ba 01       	movw	r22, r20
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
    17d4:	29 c0       	rjmp	.+82     	; 0x1828 <CLOCK_UpdateLcd+0x328>
	}
	else if(sec > 60)
    17d6:	80 91 8f 01 	lds	r24, 0x018F
    17da:	90 91 90 01 	lds	r25, 0x0190
    17de:	a0 91 91 01 	lds	r26, 0x0191
    17e2:	b0 91 92 01 	lds	r27, 0x0192
    17e6:	8d 33       	cpi	r24, 0x3D	; 61
    17e8:	91 05       	cpc	r25, r1
    17ea:	a1 05       	cpc	r26, r1
    17ec:	b1 05       	cpc	r27, r1
    17ee:	e0 f0       	brcs	.+56     	; 0x1828 <CLOCK_UpdateLcd+0x328>
	{
		HLCD_changeCursorPosation(&myLcd,0,10);
    17f0:	88 e5       	ldi	r24, 0x58	; 88
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	4a e0       	ldi	r20, 0x0A	; 10
    17f8:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,sec);
    17fc:	20 91 8f 01 	lds	r18, 0x018F
    1800:	30 91 90 01 	lds	r19, 0x0190
    1804:	40 91 91 01 	lds	r20, 0x0191
    1808:	50 91 92 01 	lds	r21, 0x0192
    180c:	88 e5       	ldi	r24, 0x58	; 88
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	ba 01       	movw	r22, r20
    1812:	a9 01       	movw	r20, r18
    1814:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
		HLCD_displayNumber(&myLcd,0);
    1818:	88 e5       	ldi	r24, 0x58	; 88
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	0e 94 9a 2b 	call	0x5734	; 0x5734 <HLCD_displayNumber>
	}
	else
	{
		/* Do Nothing */
	}
}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <CLOCK_resetClock>:

void CLOCK_resetClock(void)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
	hr = 0;
    1836:	10 92 87 01 	sts	0x0187, r1
    183a:	10 92 88 01 	sts	0x0188, r1
    183e:	10 92 89 01 	sts	0x0189, r1
    1842:	10 92 8a 01 	sts	0x018A, r1
	min = 0;
    1846:	10 92 8b 01 	sts	0x018B, r1
    184a:	10 92 8c 01 	sts	0x018C, r1
    184e:	10 92 8d 01 	sts	0x018D, r1
    1852:	10 92 8e 01 	sts	0x018E, r1
	sec = 0;
    1856:	10 92 8f 01 	sts	0x018F, r1
    185a:	10 92 90 01 	sts	0x0190, r1
    185e:	10 92 91 01 	sts	0x0191, r1
    1862:	10 92 92 01 	sts	0x0192, r1
	MTMR_stop(&myTmr);
    1866:	86 e7       	ldi	r24, 0x76	; 118
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <MTMR_stop>
	MTMR_writeTcntPreload(&myTmr,0);
    186e:	86 e7       	ldi	r24, 0x76	; 118
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <MTMR_writeTcntPreload>
	HLCD_Clr(&myLcd);
    187a:	88 e5       	ldi	r24, 0x58	; 88
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <HLCD_Clr>
	HLCD_changeCursorPosation(&myLcd,0,0);
    1882:	88 e5       	ldi	r24, 0x58	; 88
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd, "Clock Reset");
    188e:	88 e5       	ldi	r24, 0x58	; 88
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	23 e1       	ldi	r18, 0x13	; 19
    1894:	31 e0       	ldi	r19, 0x01	; 1
    1896:	b9 01       	movw	r22, r18
    1898:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	HLCD_changeCursorPosation(&myLcd,1,0);
    189c:	88 e5       	ldi	r24, 0x58	; 88
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd, "Success");
    18a8:	88 e5       	ldi	r24, 0x58	; 88
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	2f e1       	ldi	r18, 0x1F	; 31
    18ae:	31 e0       	ldi	r19, 0x01	; 1
    18b0:	b9 01       	movw	r22, r18
    18b2:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
	clockState = CLOCK_Entry_MODE;
    18b6:	10 92 84 01 	sts	0x0184, r1
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <MTMR_setAddressOfCallback>:
static void(*ptr_IsrCallingForOcTmr2) (void) = PTR_NULL;



static EN_MTMR_systemState_t MTMR_setAddressOfCallback(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <MTMR_setAddressOfCallback+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <MTMR_setAddressOfCallback+0x8>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <MTMR_setAddressOfCallback+0x20>
    18de:	61 c0       	rjmp	.+194    	; 0x19a2 <MTMR_setAddressOfCallback+0xe2>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    18e0:	ea 81       	ldd	r30, Y+2	; 0x02
    18e2:	fb 81       	ldd	r31, Y+3	; 0x03
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3d 83       	std	Y+5, r19	; 0x05
    18ec:	2c 83       	std	Y+4, r18	; 0x04
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	01 f1       	breq	.+64     	; 0x1938 <MTMR_setAddressOfCallback+0x78>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	b9 f1       	breq	.+110    	; 0x1970 <MTMR_setAddressOfCallback+0xb0>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	09 f0       	breq	.+2      	; 0x190c <MTMR_setAddressOfCallback+0x4c>
    190a:	48 c0       	rjmp	.+144    	; 0x199c <MTMR_setAddressOfCallback+0xdc>
		{
		case MTMR_TIMER_0_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    190c:	ea 81       	ldd	r30, Y+2	; 0x02
    190e:	fb 81       	ldd	r31, Y+3	; 0x03
    1910:	86 81       	ldd	r24, Z+6	; 0x06
    1912:	97 81       	ldd	r25, Z+7	; 0x07
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	51 f0       	breq	.+20     	; 0x192c <MTMR_setAddressOfCallback+0x6c>
			{ ptr_IsrCallingForOvfTmr0 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    1918:	ea 81       	ldd	r30, Y+2	; 0x02
    191a:	fb 81       	ldd	r31, Y+3	; 0x03
    191c:	86 81       	ldd	r24, Z+6	; 0x06
    191e:	97 81       	ldd	r25, Z+7	; 0x07
    1920:	90 93 94 01 	sts	0x0194, r25
    1924:	80 93 93 01 	sts	0x0193, r24
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <MTMR_setAddressOfCallback+0x70>
			else tmrRet = MTMR_PTR_NULL;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    1930:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcTmr0 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	37 c0       	rjmp	.+110    	; 0x19a6 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    1938:	ea 81       	ldd	r30, Y+2	; 0x02
    193a:	fb 81       	ldd	r31, Y+3	; 0x03
    193c:	86 81       	ldd	r24, Z+6	; 0x06
    193e:	97 81       	ldd	r25, Z+7	; 0x07
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	51 f0       	breq	.+20     	; 0x1958 <MTMR_setAddressOfCallback+0x98>
			{ ptr_IsrCallingForOvfTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    1944:	ea 81       	ldd	r30, Y+2	; 0x02
    1946:	fb 81       	ldd	r31, Y+3	; 0x03
    1948:	86 81       	ldd	r24, Z+6	; 0x06
    194a:	97 81       	ldd	r25, Z+7	; 0x07
    194c:	90 93 98 01 	sts	0x0198, r25
    1950:	80 93 97 01 	sts	0x0197, r24
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	02 c0       	rjmp	.+4      	; 0x195c <MTMR_setAddressOfCallback+0x9c>
			else tmrRet = MTMR_PTR_NULL;
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    195c:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcATmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelB))
    1962:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcBTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelB; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForIcu))
    1968:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForIcuTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForIcu; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	1b c0       	rjmp	.+54     	; 0x19a6 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    1970:	ea 81       	ldd	r30, Y+2	; 0x02
    1972:	fb 81       	ldd	r31, Y+3	; 0x03
    1974:	86 81       	ldd	r24, Z+6	; 0x06
    1976:	97 81       	ldd	r25, Z+7	; 0x07
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	51 f0       	breq	.+20     	; 0x1990 <MTMR_setAddressOfCallback+0xd0>
			{ ptr_IsrCallingForOvfTmr2 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    197c:	ea 81       	ldd	r30, Y+2	; 0x02
    197e:	fb 81       	ldd	r31, Y+3	; 0x03
    1980:	86 81       	ldd	r24, Z+6	; 0x06
    1982:	97 81       	ldd	r25, Z+7	; 0x07
    1984:	90 93 a0 01 	sts	0x01A0, r25
    1988:	80 93 9f 01 	sts	0x019F, r24
    198c:	19 82       	std	Y+1, r1	; 0x01
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <MTMR_setAddressOfCallback+0xd4>
			else tmrRet = MTMR_PTR_NULL;
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    1994:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcTmr2 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <MTMR_setAddressOfCallback+0xe6>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <MTMR_init>:



EN_MTMR_systemState_t   MTMR_init(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <MTMR_init+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <MTMR_init+0x8>
    19c0:	0f 92       	push	r0
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <MTMR_init+0x20>
    19d6:	2f c1       	rjmp	.+606    	; 0x1c36 <MTMR_init+0x27e>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    19d8:	ea 81       	ldd	r30, Y+2	; 0x02
    19da:	fb 81       	ldd	r31, Y+3	; 0x03
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	3d 83       	std	Y+5, r19	; 0x05
    19e4:	2c 83       	std	Y+4, r18	; 0x04
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <MTMR_init+0x3a>
    19f0:	5d c0       	rjmp	.+186    	; 0x1aac <MTMR_init+0xf4>
    19f2:	2c 81       	ldd	r18, Y+4	; 0x04
    19f4:	3d 81       	ldd	r19, Y+5	; 0x05
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <MTMR_init+0x46>
    19fc:	bc c0       	rjmp	.+376    	; 0x1b76 <MTMR_init+0x1be>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <MTMR_init+0x50>
    1a06:	14 c1       	rjmp	.+552    	; 0x1c30 <MTMR_init+0x278>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCCR0_REG = ((TCCR0_REG & 0xBF)   | (ST_ptrCfgInstance_t->timerMode << WGM00_BIT ));
    1a08:	a3 e5       	ldi	r26, 0x53	; 83
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e3 e5       	ldi	r30, 0x53	; 83
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	28 2f       	mov	r18, r24
    1a14:	2f 7b       	andi	r18, 0xBF	; 191
    1a16:	ea 81       	ldd	r30, Y+2	; 0x02
    1a18:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1a:	81 81       	ldd	r24, Z+1	; 0x01
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	00 24       	eor	r0, r0
    1a22:	96 95       	lsr	r25
    1a24:	87 95       	ror	r24
    1a26:	07 94       	ror	r0
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	07 94       	ror	r0
    1a2e:	98 2f       	mov	r25, r24
    1a30:	80 2d       	mov	r24, r0
    1a32:	82 2b       	or	r24, r18
    1a34:	8c 93       	st	X, r24
			TCCR0_REG = ((TCCR0_REG & 0xF7)   | ((ST_ptrCfgInstance_t->timerMode >> 1) << WGM01_BIT ));
    1a36:	a3 e5       	ldi	r26, 0x53	; 83
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	27 7f       	andi	r18, 0xF7	; 247
    1a44:	ea 81       	ldd	r30, Y+2	; 0x02
    1a46:	fb 81       	ldd	r31, Y+3	; 0x03
    1a48:	81 81       	ldd	r24, Z+1	; 0x01
    1a4a:	86 95       	lsr	r24
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	82 2b       	or	r24, r18
    1a5e:	8c 93       	st	X, r24
			TCCR0_REG = ((TCCR0_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcAAction << COM00_BIT ));
    1a60:	a3 e5       	ldi	r26, 0x53	; 83
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e3 e5       	ldi	r30, 0x53	; 83
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	2f 7c       	andi	r18, 0xCF	; 207
    1a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a70:	fb 81       	ldd	r31, Y+3	; 0x03
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	82 95       	swap	r24
    1a7a:	92 95       	swap	r25
    1a7c:	90 7f       	andi	r25, 0xF0	; 240
    1a7e:	98 27       	eor	r25, r24
    1a80:	80 7f       	andi	r24, 0xF0	; 240
    1a82:	98 27       	eor	r25, r24
    1a84:	82 2b       	or	r24, r18
    1a86:	8c 93       	st	X, r24
			TIMSK_REG = ((TIMSK_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerInterruptStates << TOIE0_BIT ));
    1a88:	a9 e5       	ldi	r26, 0x59	; 89
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e9 e5       	ldi	r30, 0x59	; 89
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	98 2f       	mov	r25, r24
    1a94:	9c 7f       	andi	r25, 0xFC	; 252
    1a96:	ea 81       	ldd	r30, Y+2	; 0x02
    1a98:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9a:	85 81       	ldd	r24, Z+5	; 0x05
    1a9c:	89 2b       	or	r24, r25
    1a9e:	8c 93       	st	X, r24

			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <MTMR_setAddressOfCallback>
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	c7 c0       	rjmp	.+398    	; 0x1c3a <MTMR_init+0x282>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			TCCR1A_REG = ((TCCR1A_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerMode << WGM10_BIT ));
    1aac:	af e4       	ldi	r26, 0x4F	; 79
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ef e4       	ldi	r30, 0x4F	; 79
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	9c 7f       	andi	r25, 0xFC	; 252
    1aba:	ea 81       	ldd	r30, Y+2	; 0x02
    1abc:	fb 81       	ldd	r31, Y+3	; 0x03
    1abe:	81 81       	ldd	r24, Z+1	; 0x01
    1ac0:	89 2b       	or	r24, r25
    1ac2:	8c 93       	st	X, r24
			TCCR1B_REG = ((TCCR1B_REG & 0xE7)   | ((ST_ptrCfgInstance_t->timerMode >> 2) << WGM12_BIT ));
    1ac4:	ae e4       	ldi	r26, 0x4E	; 78
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ee e4       	ldi	r30, 0x4E	; 78
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	28 2f       	mov	r18, r24
    1ad0:	27 7e       	andi	r18, 0xE7	; 231
    1ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad6:	81 81       	ldd	r24, Z+1	; 0x01
    1ad8:	86 95       	lsr	r24
    1ada:	86 95       	lsr	r24
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	82 2b       	or	r24, r18
    1aee:	8c 93       	st	X, r24

			TCCR1A_REG = ((TCCR1A_REG & 0x3F)   | (ST_ptrCfgInstance_t->timerOcAAction << COM1A0_BIT ));
    1af0:	af e4       	ldi	r26, 0x4F	; 79
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ef e4       	ldi	r30, 0x4F	; 79
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	2f 73       	andi	r18, 0x3F	; 63
    1afe:	ea 81       	ldd	r30, Y+2	; 0x02
    1b00:	fb 81       	ldd	r31, Y+3	; 0x03
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	00 24       	eor	r0, r0
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	07 94       	ror	r0
    1b10:	96 95       	lsr	r25
    1b12:	87 95       	ror	r24
    1b14:	07 94       	ror	r0
    1b16:	98 2f       	mov	r25, r24
    1b18:	80 2d       	mov	r24, r0
    1b1a:	82 2b       	or	r24, r18
    1b1c:	8c 93       	st	X, r24
			TCCR1A_REG = ((TCCR1A_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcBAction << COM1B0_BIT ));
    1b1e:	af e4       	ldi	r26, 0x4F	; 79
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	ef e4       	ldi	r30, 0x4F	; 79
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	2f 7c       	andi	r18, 0xCF	; 207
    1b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b30:	83 81       	ldd	r24, Z+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	82 95       	swap	r24
    1b38:	92 95       	swap	r25
    1b3a:	90 7f       	andi	r25, 0xF0	; 240
    1b3c:	98 27       	eor	r25, r24
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	98 27       	eor	r25, r24
    1b42:	82 2b       	or	r24, r18
    1b44:	8c 93       	st	X, r24

			TIMSK_REG  = ((TIMSK_REG & 0xC3)   	| (ST_ptrCfgInstance_t->timerInterruptStates << TOIE1_BIT ));
    1b46:	a9 e5       	ldi	r26, 0x59	; 89
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e9 e5       	ldi	r30, 0x59	; 89
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	23 7c       	andi	r18, 0xC3	; 195
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	85 81       	ldd	r24, Z+5	; 0x05
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	82 2b       	or	r24, r18
    1b68:	8c 93       	st	X, r24


			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <MTMR_setAddressOfCallback>
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	62 c0       	rjmp	.+196    	; 0x1c3a <MTMR_init+0x282>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{

			TCCR2_REG = ((TCCR2_REG & 0xBF)   | (ST_ptrCfgInstance_t->timerMode << WGM20_BIT ));
    1b76:	a5 e4       	ldi	r26, 0x45	; 69
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e4       	ldi	r30, 0x45	; 69
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	2f 7b       	andi	r18, 0xBF	; 191
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	81 81       	ldd	r24, Z+1	; 0x01
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	00 24       	eor	r0, r0
    1b90:	96 95       	lsr	r25
    1b92:	87 95       	ror	r24
    1b94:	07 94       	ror	r0
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	07 94       	ror	r0
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	80 2d       	mov	r24, r0
    1ba0:	82 2b       	or	r24, r18
    1ba2:	8c 93       	st	X, r24
			TCCR2_REG = ((TCCR2_REG & 0xF7)   | ((ST_ptrCfgInstance_t->timerMode >> 1) << WGM21_BIT ));
    1ba4:	a5 e4       	ldi	r26, 0x45	; 69
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e5 e4       	ldi	r30, 0x45	; 69
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	27 7f       	andi	r18, 0xF7	; 247
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	81 81       	ldd	r24, Z+1	; 0x01
    1bb8:	86 95       	lsr	r24
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	82 2b       	or	r24, r18
    1bcc:	8c 93       	st	X, r24
			TCCR2_REG = ((TCCR2_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcAAction << COM20_BIT ));
    1bce:	a5 e4       	ldi	r26, 0x45	; 69
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e4       	ldi	r30, 0x45	; 69
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	2f 7c       	andi	r18, 0xCF	; 207
    1bdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bde:	fb 81       	ldd	r31, Y+3	; 0x03
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	82 95       	swap	r24
    1be8:	92 95       	swap	r25
    1bea:	90 7f       	andi	r25, 0xF0	; 240
    1bec:	98 27       	eor	r25, r24
    1bee:	80 7f       	andi	r24, 0xF0	; 240
    1bf0:	98 27       	eor	r25, r24
    1bf2:	82 2b       	or	r24, r18
    1bf4:	8c 93       	st	X, r24
			TIMSK_REG = ((TIMSK_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerInterruptStates << TOIE2_BIT ));
    1bf6:	a9 e5       	ldi	r26, 0x59	; 89
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e9 e5       	ldi	r30, 0x59	; 89
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	28 2f       	mov	r18, r24
    1c02:	2c 7f       	andi	r18, 0xFC	; 252
    1c04:	ea 81       	ldd	r30, Y+2	; 0x02
    1c06:	fb 81       	ldd	r31, Y+3	; 0x03
    1c08:	85 81       	ldd	r24, Z+5	; 0x05
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	00 24       	eor	r0, r0
    1c10:	96 95       	lsr	r25
    1c12:	87 95       	ror	r24
    1c14:	07 94       	ror	r0
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	07 94       	ror	r0
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	80 2d       	mov	r24, r0
    1c20:	82 2b       	or	r24, r18
    1c22:	8c 93       	st	X, r24

			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	9b 81       	ldd	r25, Y+3	; 0x03
    1c28:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <MTMR_setAddressOfCallback>
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <MTMR_init+0x282>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <MTMR_init+0x282>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	89 83       	std	Y+1, r24	; 0x01
	}
	return tmrRet;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <MTMR_start>:


EN_MTMR_systemState_t   MTMR_start(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <MTMR_start+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <MTMR_start+0x8>
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9b 83       	std	Y+3, r25	; 0x03
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	9b 81       	ldd	r25, Y+3	; 0x03
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <MTMR_start+0x20>
    1c6a:	42 c0       	rjmp	.+132    	; 0x1cf0 <MTMR_start+0xa4>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1c6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c70:	80 81       	ld	r24, Z
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3d 83       	std	Y+5, r19	; 0x05
    1c78:	2c 83       	std	Y+4, r18	; 0x04
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	b9 f0       	breq	.+46     	; 0x1cb2 <MTMR_start+0x66>
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	3d 81       	ldd	r19, Y+5	; 0x05
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	01 f1       	breq	.+64     	; 0x1cce <MTMR_start+0x82>
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	9d 81       	ldd	r25, Y+5	; 0x05
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	51 f5       	brne	.+84     	; 0x1cea <MTMR_start+0x9e>
		{
		case MTMR_TIMER_0_Channel:
		{
			TCCR0_REG = ((TCCR0_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk  << CS00_BIT ));
    1c96:	a3 e5       	ldi	r26, 0x53	; 83
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e3 e5       	ldi	r30, 0x53	; 83
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	98 7f       	andi	r25, 0xF8	; 248
    1ca4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca8:	84 81       	ldd	r24, Z+4	; 0x04
    1caa:	89 2b       	or	r24, r25
    1cac:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	21 c0       	rjmp	.+66     	; 0x1cf4 <MTMR_start+0xa8>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			TCCR1B_REG = ((TCCR1B_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk << CS10_BIT ));
    1cb2:	ae e4       	ldi	r26, 0x4E	; 78
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ee e4       	ldi	r30, 0x4E	; 78
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	98 7f       	andi	r25, 0xF8	; 248
    1cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc4:	84 81       	ldd	r24, Z+4	; 0x04
    1cc6:	89 2b       	or	r24, r25
    1cc8:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	13 c0       	rjmp	.+38     	; 0x1cf4 <MTMR_start+0xa8>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCCR2_REG = ((TCCR2_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk  << CS20_BIT ));
    1cce:	a5 e4       	ldi	r26, 0x45	; 69
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e5 e4       	ldi	r30, 0x45	; 69
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	98 2f       	mov	r25, r24
    1cda:	98 7f       	andi	r25, 0xF8	; 248
    1cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cde:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce0:	84 81       	ldd	r24, Z+4	; 0x04
    1ce2:	89 2b       	or	r24, r25
    1ce4:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <MTMR_start+0xa8>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <MTMR_start+0xa8>


	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <MTMR_stop>:


EN_MTMR_systemState_t   MTMR_stop(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <MTMR_stop+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <MTMR_stop+0x8>
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	9b 83       	std	Y+3, r25	; 0x03
    1d16:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	99 f1       	breq	.+102    	; 0x1d8a <MTMR_stop+0x84>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1d24:	ea 81       	ldd	r30, Y+2	; 0x02
    1d26:	fb 81       	ldd	r31, Y+3	; 0x03
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3d 83       	std	Y+5, r19	; 0x05
    1d30:	2c 83       	std	Y+4, r18	; 0x04
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	91 f0       	breq	.+36     	; 0x1d60 <MTMR_stop+0x5a>
    1d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	b1 f0       	breq	.+44     	; 0x1d72 <MTMR_stop+0x6c>
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	d9 f4       	brne	.+54     	; 0x1d84 <MTMR_stop+0x7e>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCCR0_REG = ((TCCR0_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER  << CS00_BIT ));
    1d4e:	a3 e5       	ldi	r26, 0x53	; 83
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e3 e5       	ldi	r30, 0x53	; 83
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 7f       	andi	r24, 0xF8	; 248
    1d5a:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1d5c:	19 82       	std	Y+1, r1	; 0x01
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <MTMR_stop+0x88>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			TCCR1B_REG = ((TCCR1B_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER << CS10_BIT ));
    1d60:	ae e4       	ldi	r26, 0x4E	; 78
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ee e4       	ldi	r30, 0x4E	; 78
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 7f       	andi	r24, 0xF8	; 248
    1d6c:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1d6e:	19 82       	std	Y+1, r1	; 0x01
    1d70:	0e c0       	rjmp	.+28     	; 0x1d8e <MTMR_stop+0x88>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCCR2_REG = ((TCCR2_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER  << CS20_BIT ));
    1d72:	a5 e4       	ldi	r26, 0x45	; 69
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e5 e4       	ldi	r30, 0x45	; 69
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 7f       	andi	r24, 0xF8	; 248
    1d7e:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1d80:	19 82       	std	Y+1, r1	; 0x01
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <MTMR_stop+0x88>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <MTMR_stop+0x88>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <MTMR_readTcnt>:

EN_MTMR_systemState_t   MTMR_readTcnt(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t *retOfTcntValue)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	27 97       	sbiw	r28, 0x07	; 7
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	7d 83       	std	Y+5, r23	; 0x05
    1dba:	6c 83       	std	Y+4, r22	; 0x04
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	c1 f1       	breq	.+112    	; 0x1e38 <MTMR_readTcnt+0x98>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dca:	fb 81       	ldd	r31, Y+3	; 0x03
    1dcc:	80 81       	ld	r24, Z
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3f 83       	std	Y+7, r19	; 0x07
    1dd4:	2e 83       	std	Y+6, r18	; 0x06
    1dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	a1 f0       	breq	.+40     	; 0x1e08 <MTMR_readTcnt+0x68>
    1de0:	2e 81       	ldd	r18, Y+6	; 0x06
    1de2:	3f 81       	ldd	r19, Y+7	; 0x07
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	c9 f0       	breq	.+50     	; 0x1e1c <MTMR_readTcnt+0x7c>
    1dea:	8e 81       	ldd	r24, Y+6	; 0x06
    1dec:	9f 81       	ldd	r25, Y+7	; 0x07
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	01 f5       	brne	.+64     	; 0x1e32 <MTMR_readTcnt+0x92>
		{
		case MTMR_TIMER_0_Channel:
		{

			*retOfTcntValue = TCNT0_REG;
    1df2:	e2 e5       	ldi	r30, 0x52	; 82
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfe:	fd 81       	ldd	r31, Y+5	; 0x05
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	1a c0       	rjmp	.+52     	; 0x1e3c <MTMR_readTcnt+0x9c>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			*retOfTcntValue = TCNT1_REG;
    1e08:	ec e4       	ldi	r30, 0x4C	; 76
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	ec 81       	ldd	r30, Y+4	; 0x04
    1e12:	fd 81       	ldd	r31, Y+5	; 0x05
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	10 c0       	rjmp	.+32     	; 0x1e3c <MTMR_readTcnt+0x9c>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			*retOfTcntValue = TCNT2_REG;
    1e1c:	e4 e4       	ldi	r30, 0x44	; 68
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	ec 81       	ldd	r30, Y+4	; 0x04
    1e28:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <MTMR_readTcnt+0x9c>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <MTMR_readTcnt+0x9c>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3e:	27 96       	adiw	r28, 0x07	; 7
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <MTMR_writeTcntPreload>:

EN_MTMR_systemState_t   MTMR_writeTcntPreload(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t tcntPreloadValue)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	27 97       	sbiw	r28, 0x07	; 7
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	9b 83       	std	Y+3, r25	; 0x03
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	7d 83       	std	Y+5, r23	; 0x05
    1e6a:	6c 83       	std	Y+4, r22	; 0x04
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	61 f1       	breq	.+88     	; 0x1ed0 <MTMR_writeTcntPreload+0x80>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    1e78:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7c:	80 81       	ld	r24, Z
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3f 83       	std	Y+7, r19	; 0x07
    1e84:	2e 83       	std	Y+6, r18	; 0x06
    1e86:	8e 81       	ldd	r24, Y+6	; 0x06
    1e88:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	79 f0       	breq	.+30     	; 0x1eae <MTMR_writeTcntPreload+0x5e>
    1e90:	2e 81       	ldd	r18, Y+6	; 0x06
    1e92:	3f 81       	ldd	r19, Y+7	; 0x07
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	91 f0       	breq	.+36     	; 0x1ebe <MTMR_writeTcntPreload+0x6e>
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	a1 f4       	brne	.+40     	; 0x1eca <MTMR_writeTcntPreload+0x7a>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCNT0_REG = (uint8_t)tcntPreloadValue;
    1ea2:	e2 e5       	ldi	r30, 0x52	; 82
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	13 c0       	rjmp	.+38     	; 0x1ed4 <MTMR_writeTcntPreload+0x84>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			TCNT1_REG = tcntPreloadValue;
    1eae:	ec e4       	ldi	r30, 0x4C	; 76
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	0b c0       	rjmp	.+22     	; 0x1ed4 <MTMR_writeTcntPreload+0x84>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCNT2_REG = (uint8_t)tcntPreloadValue;
    1ebe:	e4 e4       	ldi	r30, 0x44	; 68
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1ec6:	19 82       	std	Y+1, r1	; 0x01
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <MTMR_writeTcntPreload+0x84>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <MTMR_writeTcntPreload+0x84>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed6:	27 96       	adiw	r28, 0x07	; 7
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <MTMR_readOcr>:


EN_MTMR_systemState_t   MTMR_readOcr(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t *retOfOcrAValue , Uint16_t *retOfOcrBValue)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	29 97       	sbiw	r28, 0x09	; 9
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	7d 83       	std	Y+5, r23	; 0x05
    1f02:	6c 83       	std	Y+4, r22	; 0x04
    1f04:	5f 83       	std	Y+7, r21	; 0x07
    1f06:	4e 83       	std	Y+6, r20	; 0x06
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <MTMR_readOcr+0x2e>
    1f14:	48 c0       	rjmp	.+144    	; 0x1fa6 <MTMR_readOcr+0xbe>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	39 87       	std	Y+9, r19	; 0x09
    1f22:	28 87       	std	Y+8, r18	; 0x08
    1f24:	88 85       	ldd	r24, Y+8	; 0x08
    1f26:	99 85       	ldd	r25, Y+9	; 0x09
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	c1 f0       	breq	.+48     	; 0x1f5e <MTMR_readOcr+0x76>
    1f2e:	28 85       	ldd	r18, Y+8	; 0x08
    1f30:	39 85       	ldd	r19, Y+9	; 0x09
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	29 f1       	breq	.+74     	; 0x1f82 <MTMR_readOcr+0x9a>
    1f38:	88 85       	ldd	r24, Y+8	; 0x08
    1f3a:	99 85       	ldd	r25, Y+9	; 0x09
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	81 f5       	brne	.+96     	; 0x1fa0 <MTMR_readOcr+0xb8>
		{
		case MTMR_TIMER_0_Channel:
		{

			*retOfOcrAValue = OCR0_REG;
    1f40:	ec e5       	ldi	r30, 0x5C	; 92
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
			*retOfOcrBValue = PTR_NULL;
    1f52:	ee 81       	ldd	r30, Y+6	; 0x06
    1f54:	ff 81       	ldd	r31, Y+7	; 0x07
    1f56:	11 82       	std	Z+1, r1	; 0x01
    1f58:	10 82       	st	Z, r1
			tmrRet = MTMR_OK;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	26 c0       	rjmp	.+76     	; 0x1faa <MTMR_readOcr+0xc2>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			*retOfOcrAValue = OCR1A_REG;
    1f5e:	ea e4       	ldi	r30, 0x4A	; 74
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	ec 81       	ldd	r30, Y+4	; 0x04
    1f68:	fd 81       	ldd	r31, Y+5	; 0x05
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
			*retOfOcrBValue = OCR1B_REG;
    1f6e:	e8 e4       	ldi	r30, 0x48	; 72
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	ee 81       	ldd	r30, Y+6	; 0x06
    1f78:	ff 81       	ldd	r31, Y+7	; 0x07
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1f7e:	19 82       	std	Y+1, r1	; 0x01
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <MTMR_readOcr+0xc2>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			*retOfOcrAValue = OCR2_REG;
    1f82:	e3 e4       	ldi	r30, 0x43	; 67
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
			*retOfOcrBValue = PTR_NULL;
    1f94:	ee 81       	ldd	r30, Y+6	; 0x06
    1f96:	ff 81       	ldd	r31, Y+7	; 0x07
    1f98:	11 82       	std	Z+1, r1	; 0x01
    1f9a:	10 82       	st	Z, r1
			tmrRet = MTMR_OK;
    1f9c:	19 82       	std	Y+1, r1	; 0x01
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <MTMR_readOcr+0xc2>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <MTMR_readOcr+0xc2>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fac:	29 96       	adiw	r28, 0x09	; 9
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <__vector_11>:


ISR(TIM0_OVF_INT)
{
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	2f 93       	push	r18
    1fca:	3f 93       	push	r19
    1fcc:	4f 93       	push	r20
    1fce:	5f 93       	push	r21
    1fd0:	6f 93       	push	r22
    1fd2:	7f 93       	push	r23
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr0)
    1fe8:	80 91 93 01 	lds	r24, 0x0193
    1fec:	90 91 94 01 	lds	r25, 0x0194
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <__vector_11+0x40>
		ptr_IsrCallingForOvfTmr0();
    1ff4:	e0 91 93 01 	lds	r30, 0x0193
    1ff8:	f0 91 94 01 	lds	r31, 0x0194
    1ffc:	09 95       	icall
	else
		/* Do Nothing */;
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_10>:

ISR(TIM0_COMP_INT)
{
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	0f 92       	push	r0
    202c:	11 24       	eor	r1, r1
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	ef 93       	push	r30
    2044:	ff 93       	push	r31
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcTmr0)
    204e:	80 91 95 01 	lds	r24, 0x0195
    2052:	90 91 96 01 	lds	r25, 0x0196
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <__vector_10+0x40>
		ptr_IsrCallingForOcTmr0();
    205a:	e0 91 95 01 	lds	r30, 0x0195
    205e:	f0 91 96 01 	lds	r31, 0x0196
    2062:	09 95       	icall
	else
		/* Do Nothing */;
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_9>:

ISR(TIM1_OVF_INT)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	2f 93       	push	r18
    2096:	3f 93       	push	r19
    2098:	4f 93       	push	r20
    209a:	5f 93       	push	r21
    209c:	6f 93       	push	r22
    209e:	7f 93       	push	r23
    20a0:	8f 93       	push	r24
    20a2:	9f 93       	push	r25
    20a4:	af 93       	push	r26
    20a6:	bf 93       	push	r27
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr1)
    20b4:	80 91 97 01 	lds	r24, 0x0197
    20b8:	90 91 98 01 	lds	r25, 0x0198
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	29 f0       	breq	.+10     	; 0x20ca <__vector_9+0x40>
		ptr_IsrCallingForOvfTmr1();
    20c0:	e0 91 97 01 	lds	r30, 0x0197
    20c4:	f0 91 98 01 	lds	r31, 0x0198
    20c8:	09 95       	icall
	else
		/* Do Nothing */;
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_7>:

ISR(TIM1_COMPA_INT)
{
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcATmr1)
    211a:	80 91 9b 01 	lds	r24, 0x019B
    211e:	90 91 9c 01 	lds	r25, 0x019C
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	29 f0       	breq	.+10     	; 0x2130 <__vector_7+0x40>
		ptr_IsrCallingForOcATmr1();
    2126:	e0 91 9b 01 	lds	r30, 0x019B
    212a:	f0 91 9c 01 	lds	r31, 0x019C
    212e:	09 95       	icall
	else
		/* Do Nothing */;
}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	ff 91       	pop	r31
    2136:	ef 91       	pop	r30
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	7f 91       	pop	r23
    2142:	6f 91       	pop	r22
    2144:	5f 91       	pop	r21
    2146:	4f 91       	pop	r20
    2148:	3f 91       	pop	r19
    214a:	2f 91       	pop	r18
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <__vector_8>:

ISR(TIM1_COMPB_INT)
{
    2156:	1f 92       	push	r1
    2158:	0f 92       	push	r0
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	0f 92       	push	r0
    215e:	11 24       	eor	r1, r1
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	ef 93       	push	r30
    2176:	ff 93       	push	r31
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcBTmr1)
    2180:	80 91 99 01 	lds	r24, 0x0199
    2184:	90 91 9a 01 	lds	r25, 0x019A
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_8+0x40>
		ptr_IsrCallingForOcBTmr1();
    218c:	e0 91 99 01 	lds	r30, 0x0199
    2190:	f0 91 9a 01 	lds	r31, 0x019A
    2194:	09 95       	icall
	else
		/* Do Nothing */;
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <__vector_6>:

ISR(TIM1_CAPT_INT)
{
    21bc:	1f 92       	push	r1
    21be:	0f 92       	push	r0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	0f 92       	push	r0
    21c4:	11 24       	eor	r1, r1
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForIcuTmr1)
    21e6:	80 91 9d 01 	lds	r24, 0x019D
    21ea:	90 91 9e 01 	lds	r25, 0x019E
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_6+0x40>
		ptr_IsrCallingForIcuTmr1();
    21f2:	e0 91 9d 01 	lds	r30, 0x019D
    21f6:	f0 91 9e 01 	lds	r31, 0x019E
    21fa:	09 95       	icall
	else
		/* Do Nothing */;
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <__vector_5>:

ISR(TIM2_OVF_INT)
{
    2222:	1f 92       	push	r1
    2224:	0f 92       	push	r0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	2f 93       	push	r18
    222e:	3f 93       	push	r19
    2230:	4f 93       	push	r20
    2232:	5f 93       	push	r21
    2234:	6f 93       	push	r22
    2236:	7f 93       	push	r23
    2238:	8f 93       	push	r24
    223a:	9f 93       	push	r25
    223c:	af 93       	push	r26
    223e:	bf 93       	push	r27
    2240:	ef 93       	push	r30
    2242:	ff 93       	push	r31
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr2)
    224c:	80 91 9f 01 	lds	r24, 0x019F
    2250:	90 91 a0 01 	lds	r25, 0x01A0
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	29 f0       	breq	.+10     	; 0x2262 <__vector_5+0x40>
		ptr_IsrCallingForOvfTmr2();
    2258:	e0 91 9f 01 	lds	r30, 0x019F
    225c:	f0 91 a0 01 	lds	r31, 0x01A0
    2260:	09 95       	icall
	else
		/* Do Nothing */;
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	bf 91       	pop	r27
    226c:	af 91       	pop	r26
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	7f 91       	pop	r23
    2274:	6f 91       	pop	r22
    2276:	5f 91       	pop	r21
    2278:	4f 91       	pop	r20
    227a:	3f 91       	pop	r19
    227c:	2f 91       	pop	r18
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti

00002288 <__vector_4>:

ISR(TIM2_COMP_INT)
{
    2288:	1f 92       	push	r1
    228a:	0f 92       	push	r0
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	0f 92       	push	r0
    2290:	11 24       	eor	r1, r1
    2292:	2f 93       	push	r18
    2294:	3f 93       	push	r19
    2296:	4f 93       	push	r20
    2298:	5f 93       	push	r21
    229a:	6f 93       	push	r22
    229c:	7f 93       	push	r23
    229e:	8f 93       	push	r24
    22a0:	9f 93       	push	r25
    22a2:	af 93       	push	r26
    22a4:	bf 93       	push	r27
    22a6:	ef 93       	push	r30
    22a8:	ff 93       	push	r31
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcTmr2)
    22b2:	80 91 a1 01 	lds	r24, 0x01A1
    22b6:	90 91 a2 01 	lds	r25, 0x01A2
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <__vector_4+0x40>
		ptr_IsrCallingForOcTmr2();
    22be:	e0 91 a1 01 	lds	r30, 0x01A1
    22c2:	f0 91 a2 01 	lds	r31, 0x01A2
    22c6:	09 95       	icall
	else
		/* Do Nothing */;
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	ff 91       	pop	r31
    22ce:	ef 91       	pop	r30
    22d0:	bf 91       	pop	r27
    22d2:	af 91       	pop	r26
    22d4:	9f 91       	pop	r25
    22d6:	8f 91       	pop	r24
    22d8:	7f 91       	pop	r23
    22da:	6f 91       	pop	r22
    22dc:	5f 91       	pop	r21
    22de:	4f 91       	pop	r20
    22e0:	3f 91       	pop	r19
    22e2:	2f 91       	pop	r18
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <GPIO_initPin+0x6>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	9b 83       	std	Y+3, r25	; 0x03
    22fc:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	b1 f0       	breq	.+44     	; 0x2336 <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
    230a:	ea 81       	ldd	r30, Y+2	; 0x02
    230c:	fb 81       	ldd	r31, Y+3	; 0x03
    230e:	22 81       	ldd	r18, Z+2	; 0x02
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	9b 81       	ldd	r25, Y+3	; 0x03
    2314:	62 2f       	mov	r22, r18
    2316:	0e 94 a4 11 	call	0x2348	; 0x2348 <GPIO_changePinDir>
    231a:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	88 23       	and	r24, r24
    2320:	61 f4       	brne	.+24     	; 0x233a <GPIO_initPin+0x4c>
			ret =
    2322:	ea 81       	ldd	r30, Y+2	; 0x02
    2324:	fb 81       	ldd	r31, Y+3	; 0x03
    2326:	23 81       	ldd	r18, Z+3	; 0x03
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	62 2f       	mov	r22, r18
    232e:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	02 c0       	rjmp	.+4      	; 0x233a <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <GPIO_changePinDir+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <GPIO_changePinDir+0x8>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <GPIO_changePinDir+0xa>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9b 83       	std	Y+3, r25	; 0x03
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	09 f4       	brne	.+2      	; 0x236a <GPIO_changePinDir+0x22>
    2368:	68 c0       	rjmp	.+208    	; 0x243a <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	3e 83       	std	Y+6, r19	; 0x06
    2372:	2d 83       	std	Y+5, r18	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	31 f0       	breq	.+12     	; 0x2388 <GPIO_changePinDir+0x40>
    237c:	2d 81       	ldd	r18, Y+5	; 0x05
    237e:	3e 81       	ldd	r19, Y+6	; 0x06
    2380:	21 30       	cpi	r18, 0x01	; 1
    2382:	31 05       	cpc	r19, r1
    2384:	71 f1       	breq	.+92     	; 0x23e2 <GPIO_changePinDir+0x9a>
    2386:	5b c0       	rjmp	.+182    	; 0x243e <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    2388:	ea 81       	ldd	r30, Y+2	; 0x02
    238a:	fb 81       	ldd	r31, Y+3	; 0x03
    238c:	80 81       	ld	r24, Z
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	fc 01       	movw	r30, r24
    2398:	e0 5d       	subi	r30, 0xD0	; 208
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	a0 81       	ld	r26, Z
    239e:	b1 81       	ldd	r27, Z+1	; 0x01
    23a0:	ea 81       	ldd	r30, Y+2	; 0x02
    23a2:	fb 81       	ldd	r31, Y+3	; 0x03
    23a4:	80 81       	ld	r24, Z
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	fc 01       	movw	r30, r24
    23b0:	e0 5d       	subi	r30, 0xD0	; 208
    23b2:	fe 4f       	sbci	r31, 0xFE	; 254
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	ea 81       	ldd	r30, Y+2	; 0x02
    23c0:	fb 81       	ldd	r31, Y+3	; 0x03
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <GPIO_changePinDir+0x8c>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <GPIO_changePinDir+0x88>
    23d8:	80 95       	com	r24
    23da:	84 23       	and	r24, r20
    23dc:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    23de:	19 82       	std	Y+1, r1	; 0x01
    23e0:	2e c0       	rjmp	.+92     	; 0x243e <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    23e2:	ea 81       	ldd	r30, Y+2	; 0x02
    23e4:	fb 81       	ldd	r31, Y+3	; 0x03
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	fc 01       	movw	r30, r24
    23f2:	e0 5d       	subi	r30, 0xD0	; 208
    23f4:	fe 4f       	sbci	r31, 0xFE	; 254
    23f6:	a0 81       	ld	r26, Z
    23f8:	b1 81       	ldd	r27, Z+1	; 0x01
    23fa:	ea 81       	ldd	r30, Y+2	; 0x02
    23fc:	fb 81       	ldd	r31, Y+3	; 0x03
    23fe:	80 81       	ld	r24, Z
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	fc 01       	movw	r30, r24
    240a:	e0 5d       	subi	r30, 0xD0	; 208
    240c:	fe 4f       	sbci	r31, 0xFE	; 254
    240e:	01 90       	ld	r0, Z+
    2410:	f0 81       	ld	r31, Z
    2412:	e0 2d       	mov	r30, r0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	ea 81       	ldd	r30, Y+2	; 0x02
    241a:	fb 81       	ldd	r31, Y+3	; 0x03
    241c:	81 81       	ldd	r24, Z+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <GPIO_changePinDir+0xe6>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <GPIO_changePinDir+0xe2>
    2432:	84 2b       	or	r24, r20
    2434:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    2436:	19 82       	std	Y+1, r1	; 0x01
    2438:	02 c0       	rjmp	.+4      	; 0x243e <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    243e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2440:	26 96       	adiw	r28, 0x06	; 6
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <GPIO_writePinLogic+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <GPIO_writePinLogic+0x8>
    245a:	00 d0       	rcall	.+0      	; 0x245c <GPIO_writePinLogic+0xa>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	9b 83       	std	Y+3, r25	; 0x03
    2462:	8a 83       	std	Y+2, r24	; 0x02
    2464:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	09 f4       	brne	.+2      	; 0x2474 <GPIO_writePinLogic+0x22>
    2472:	68 c0       	rjmp	.+208    	; 0x2544 <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	3e 83       	std	Y+6, r19	; 0x06
    247c:	2d 83       	std	Y+5, r18	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	31 f0       	breq	.+12     	; 0x2492 <GPIO_writePinLogic+0x40>
    2486:	2d 81       	ldd	r18, Y+5	; 0x05
    2488:	3e 81       	ldd	r19, Y+6	; 0x06
    248a:	21 30       	cpi	r18, 0x01	; 1
    248c:	31 05       	cpc	r19, r1
    248e:	71 f1       	breq	.+92     	; 0x24ec <GPIO_writePinLogic+0x9a>
    2490:	5b c0       	rjmp	.+182    	; 0x2548 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
    2492:	ea 81       	ldd	r30, Y+2	; 0x02
    2494:	fb 81       	ldd	r31, Y+3	; 0x03
    2496:	80 81       	ld	r24, Z
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	fc 01       	movw	r30, r24
    24a2:	e8 5c       	subi	r30, 0xC8	; 200
    24a4:	fe 4f       	sbci	r31, 0xFE	; 254
    24a6:	a0 81       	ld	r26, Z
    24a8:	b1 81       	ldd	r27, Z+1	; 0x01
    24aa:	ea 81       	ldd	r30, Y+2	; 0x02
    24ac:	fb 81       	ldd	r31, Y+3	; 0x03
    24ae:	80 81       	ld	r24, Z
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	fc 01       	movw	r30, r24
    24ba:	e8 5c       	subi	r30, 0xC8	; 200
    24bc:	fe 4f       	sbci	r31, 0xFE	; 254
    24be:	01 90       	ld	r0, Z+
    24c0:	f0 81       	ld	r31, Z
    24c2:	e0 2d       	mov	r30, r0
    24c4:	80 81       	ld	r24, Z
    24c6:	48 2f       	mov	r20, r24
    24c8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ca:	fb 81       	ldd	r31, Y+3	; 0x03
    24cc:	81 81       	ldd	r24, Z+1	; 0x01
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <GPIO_writePinLogic+0x8c>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <GPIO_writePinLogic+0x88>
    24e2:	80 95       	com	r24
    24e4:	84 23       	and	r24, r20
    24e6:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    24e8:	19 82       	std	Y+1, r1	; 0x01
    24ea:	2e c0       	rjmp	.+92     	; 0x2548 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
    24ec:	ea 81       	ldd	r30, Y+2	; 0x02
    24ee:	fb 81       	ldd	r31, Y+3	; 0x03
    24f0:	80 81       	ld	r24, Z
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	fc 01       	movw	r30, r24
    24fc:	e8 5c       	subi	r30, 0xC8	; 200
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	a0 81       	ld	r26, Z
    2502:	b1 81       	ldd	r27, Z+1	; 0x01
    2504:	ea 81       	ldd	r30, Y+2	; 0x02
    2506:	fb 81       	ldd	r31, Y+3	; 0x03
    2508:	80 81       	ld	r24, Z
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	fc 01       	movw	r30, r24
    2514:	e8 5c       	subi	r30, 0xC8	; 200
    2516:	fe 4f       	sbci	r31, 0xFE	; 254
    2518:	01 90       	ld	r0, Z+
    251a:	f0 81       	ld	r31, Z
    251c:	e0 2d       	mov	r30, r0
    251e:	80 81       	ld	r24, Z
    2520:	48 2f       	mov	r20, r24
    2522:	ea 81       	ldd	r30, Y+2	; 0x02
    2524:	fb 81       	ldd	r31, Y+3	; 0x03
    2526:	81 81       	ldd	r24, Z+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 2e       	mov	r0, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <GPIO_writePinLogic+0xe6>
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <GPIO_writePinLogic+0xe2>
    253c:	84 2b       	or	r24, r20
    253e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    2540:	19 82       	std	Y+1, r1	; 0x01
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    2544:	82 e0       	ldi	r24, 0x02	; 2
    2546:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
}
    254a:	26 96       	adiw	r28, 0x06	; 6
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <GPIO_readPinLogic+0x6>
    2562:	00 d0       	rcall	.+0      	; 0x2564 <GPIO_readPinLogic+0x8>
    2564:	0f 92       	push	r0
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	7d 83       	std	Y+5, r23	; 0x05
    2570:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	11 f1       	breq	.+68     	; 0x25c2 <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
    257e:	ea 81       	ldd	r30, Y+2	; 0x02
    2580:	fb 81       	ldd	r31, Y+3	; 0x03
    2582:	80 81       	ld	r24, Z
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	fc 01       	movw	r30, r24
    258e:	e0 5c       	subi	r30, 0xC0	; 192
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	01 90       	ld	r0, Z+
    2594:	f0 81       	ld	r31, Z
    2596:	e0 2d       	mov	r30, r0
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	ea 81       	ldd	r30, Y+2	; 0x02
    25a0:	fb 81       	ldd	r31, Y+3	; 0x03
    25a2:	81 81       	ldd	r24, Z+1	; 0x01
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a9 01       	movw	r20, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <GPIO_readPinLogic+0x54>
    25ac:	55 95       	asr	r21
    25ae:	47 95       	ror	r20
    25b0:	8a 95       	dec	r24
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <GPIO_readPinLogic+0x50>
    25b4:	ca 01       	movw	r24, r20
    25b6:	81 70       	andi	r24, 0x01	; 1
    25b8:	ec 81       	ldd	r30, Y+4	; 0x04
    25ba:	fd 81       	ldd	r31, Y+5	; 0x05
    25bc:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    25be:	19 82       	std	Y+1, r1	; 0x01
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <GPIO_togglePinLogic+0x6>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9b 83       	std	Y+3, r25	; 0x03
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	61 f1       	breq	.+88     	; 0x264c <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
    25f4:	ea 81       	ldd	r30, Y+2	; 0x02
    25f6:	fb 81       	ldd	r31, Y+3	; 0x03
    25f8:	80 81       	ld	r24, Z
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	fc 01       	movw	r30, r24
    2604:	e8 5c       	subi	r30, 0xC8	; 200
    2606:	fe 4f       	sbci	r31, 0xFE	; 254
    2608:	a0 81       	ld	r26, Z
    260a:	b1 81       	ldd	r27, Z+1	; 0x01
    260c:	ea 81       	ldd	r30, Y+2	; 0x02
    260e:	fb 81       	ldd	r31, Y+3	; 0x03
    2610:	80 81       	ld	r24, Z
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	fc 01       	movw	r30, r24
    261c:	e8 5c       	subi	r30, 0xC8	; 200
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	01 90       	ld	r0, Z+
    2622:	f0 81       	ld	r31, Z
    2624:	e0 2d       	mov	r30, r0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	ea 81       	ldd	r30, Y+2	; 0x02
    262c:	fb 81       	ldd	r31, Y+3	; 0x03
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	02 2e       	mov	r0, r18
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <GPIO_togglePinLogic+0x68>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	0a 94       	dec	r0
    2642:	e2 f7       	brpl	.-8      	; 0x263c <GPIO_togglePinLogic+0x64>
    2644:	84 27       	eor	r24, r20
    2646:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	28 97       	sbiw	r28, 0x08	; 8
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	8a 83       	std	Y+2, r24	; 0x02
    2674:	6b 83       	std	Y+3, r22	; 0x03
    2676:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	38 87       	std	Y+8, r19	; 0x08
    2684:	2f 83       	std	Y+7, r18	; 0x07
    2686:	8f 81       	ldd	r24, Y+7	; 0x07
    2688:	98 85       	ldd	r25, Y+8	; 0x08
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	31 f0       	breq	.+12     	; 0x269a <GPIO_initPort+0x3c>
    268e:	2f 81       	ldd	r18, Y+7	; 0x07
    2690:	38 85       	ldd	r19, Y+8	; 0x08
    2692:	21 30       	cpi	r18, 0x01	; 1
    2694:	31 05       	cpc	r19, r1
    2696:	79 f0       	breq	.+30     	; 0x26b6 <GPIO_initPort+0x58>
    2698:	1c c0       	rjmp	.+56     	; 0x26d2 <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	fc 01       	movw	r30, r24
    26a6:	e0 5d       	subi	r30, 0xD0	; 208
    26a8:	fe 4f       	sbci	r31, 0xFE	; 254
    26aa:	01 90       	ld	r0, Z+
    26ac:	f0 81       	ld	r31, Z
    26ae:	e0 2d       	mov	r30, r0
    26b0:	10 82       	st	Z, r1
		ret = GPIO_OK;
    26b2:	19 82       	std	Y+1, r1	; 0x01
    26b4:	0e c0       	rjmp	.+28     	; 0x26d2 <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	fc 01       	movw	r30, r24
    26c2:	e0 5d       	subi	r30, 0xD0	; 208
    26c4:	fe 4f       	sbci	r31, 0xFE	; 254
    26c6:	01 90       	ld	r0, Z+
    26c8:	f0 81       	ld	r31, Z
    26ca:	e0 2d       	mov	r30, r0
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	80 83       	st	Z, r24
		ret = GPIO_OK;
    26d0:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	3e 83       	std	Y+6, r19	; 0x06
    26da:	2d 83       	std	Y+5, r18	; 0x05
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	31 f0       	breq	.+12     	; 0x26f0 <GPIO_initPort+0x92>
    26e4:	2d 81       	ldd	r18, Y+5	; 0x05
    26e6:	3e 81       	ldd	r19, Y+6	; 0x06
    26e8:	21 30       	cpi	r18, 0x01	; 1
    26ea:	31 05       	cpc	r19, r1
    26ec:	79 f0       	breq	.+30     	; 0x270c <GPIO_initPort+0xae>
    26ee:	1c c0       	rjmp	.+56     	; 0x2728 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	fc 01       	movw	r30, r24
    26fc:	e8 5c       	subi	r30, 0xC8	; 200
    26fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2700:	01 90       	ld	r0, Z+
    2702:	f0 81       	ld	r31, Z
    2704:	e0 2d       	mov	r30, r0
    2706:	10 82       	st	Z, r1
		ret = GPIO_OK;
    2708:	19 82       	std	Y+1, r1	; 0x01
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	fc 01       	movw	r30, r24
    2718:	e8 5c       	subi	r30, 0xC8	; 200
    271a:	fe 4f       	sbci	r31, 0xFE	; 254
    271c:	01 90       	ld	r0, Z+
    271e:	f0 81       	ld	r31, Z
    2720:	e0 2d       	mov	r30, r0
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    2724:	80 83       	st	Z, r24
		ret = GPIO_OK;
    2726:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
}
    272a:	28 96       	adiw	r28, 0x08	; 8
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <GPIO_changePortDir+0x6>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <GPIO_changePortDir+0x8>
    2744:	0f 92       	push	r0
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3d 83       	std	Y+5, r19	; 0x05
    275a:	2c 83       	std	Y+4, r18	; 0x04
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	31 f0       	breq	.+12     	; 0x2770 <GPIO_changePortDir+0x34>
    2764:	2c 81       	ldd	r18, Y+4	; 0x04
    2766:	3d 81       	ldd	r19, Y+5	; 0x05
    2768:	21 30       	cpi	r18, 0x01	; 1
    276a:	31 05       	cpc	r19, r1
    276c:	79 f0       	breq	.+30     	; 0x278c <GPIO_changePortDir+0x50>
    276e:	1c c0       	rjmp	.+56     	; 0x27a8 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	fc 01       	movw	r30, r24
    277c:	e0 5d       	subi	r30, 0xD0	; 208
    277e:	fe 4f       	sbci	r31, 0xFE	; 254
    2780:	01 90       	ld	r0, Z+
    2782:	f0 81       	ld	r31, Z
    2784:	e0 2d       	mov	r30, r0
    2786:	10 82       	st	Z, r1
		ret = GPIO_OK;
    2788:	19 82       	std	Y+1, r1	; 0x01
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	fc 01       	movw	r30, r24
    2798:	e0 5d       	subi	r30, 0xD0	; 208
    279a:	fe 4f       	sbci	r31, 0xFE	; 254
    279c:	01 90       	ld	r0, Z+
    279e:	f0 81       	ld	r31, Z
    27a0:	e0 2d       	mov	r30, r0
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	80 83       	st	Z, r24
		ret = GPIO_OK;
    27a6:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <GPIO_writePortLogic+0x6>
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <GPIO_writePortLogic+0x8>
    27c2:	0f 92       	push	r0
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	8a 83       	std	Y+2, r24	; 0x02
    27ca:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3d 83       	std	Y+5, r19	; 0x05
    27d8:	2c 83       	std	Y+4, r18	; 0x04
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	9d 81       	ldd	r25, Y+5	; 0x05
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	31 f0       	breq	.+12     	; 0x27ee <GPIO_writePortLogic+0x34>
    27e2:	2c 81       	ldd	r18, Y+4	; 0x04
    27e4:	3d 81       	ldd	r19, Y+5	; 0x05
    27e6:	21 30       	cpi	r18, 0x01	; 1
    27e8:	31 05       	cpc	r19, r1
    27ea:	79 f0       	breq	.+30     	; 0x280a <GPIO_writePortLogic+0x50>
    27ec:	1c c0       	rjmp	.+56     	; 0x2826 <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	fc 01       	movw	r30, r24
    27fa:	e8 5c       	subi	r30, 0xC8	; 200
    27fc:	fe 4f       	sbci	r31, 0xFE	; 254
    27fe:	01 90       	ld	r0, Z+
    2800:	f0 81       	ld	r31, Z
    2802:	e0 2d       	mov	r30, r0
    2804:	10 82       	st	Z, r1
		ret = GPIO_OK;
    2806:	19 82       	std	Y+1, r1	; 0x01
    2808:	0e c0       	rjmp	.+28     	; 0x2826 <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	fc 01       	movw	r30, r24
    2816:	e8 5c       	subi	r30, 0xC8	; 200
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	01 90       	ld	r0, Z+
    281c:	f0 81       	ld	r31, Z
    281e:	e0 2d       	mov	r30, r0
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	80 83       	st	Z, r24
		ret = GPIO_OK;
    2824:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <GPIO_readPortLogic+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <GPIO_readPortLogic+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	7c 83       	std	Y+4, r23	; 0x04
    2848:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	fc 01       	movw	r30, r24
    285a:	e0 5c       	subi	r30, 0xC0	; 192
    285c:	fe 4f       	sbci	r31, 0xFE	; 254
    285e:	01 90       	ld	r0, Z+
    2860:	f0 81       	ld	r31, Z
    2862:	e0 2d       	mov	r30, r0
    2864:	80 81       	ld	r24, Z
    2866:	eb 81       	ldd	r30, Y+3	; 0x03
    2868:	fc 81       	ldd	r31, Y+4	; 0x04
    286a:	80 83       	st	Z, r24
	ret = GPIO_OK;
    286c:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	00 d0       	rcall	.+0      	; 0x2884 <GPIO_togglePortLogic+0x6>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	fc 01       	movw	r30, r24
    289a:	e0 5d       	subi	r30, 0xD0	; 208
    289c:	fe 4f       	sbci	r31, 0xFE	; 254
    289e:	a0 81       	ld	r26, Z
    28a0:	b1 81       	ldd	r27, Z+1	; 0x01
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	88 2f       	mov	r24, r24
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	fc 01       	movw	r30, r24
    28ae:	e0 5d       	subi	r30, 0xD0	; 208
    28b0:	fe 4f       	sbci	r31, 0xFE	; 254
    28b2:	01 90       	ld	r0, Z+
    28b4:	f0 81       	ld	r31, Z
    28b6:	e0 2d       	mov	r30, r0
    28b8:	20 81       	ld	r18, Z
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	fc 01       	movw	r30, r24
    28c6:	e0 5d       	subi	r30, 0xD0	; 208
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	01 90       	ld	r0, Z+
    28cc:	f0 81       	ld	r31, Z
    28ce:	e0 2d       	mov	r30, r0
    28d0:	80 81       	ld	r24, Z
    28d2:	82 27       	eor	r24, r18
    28d4:	8c 93       	st	X, r24
	ret = GPIO_OK;
    28d6:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <GPIO_set4msbValue+0x6>
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	8a 83       	std	Y+2, r24	; 0x02
    28f2:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	fc 01       	movw	r30, r24
    2904:	e8 5c       	subi	r30, 0xC8	; 200
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	a0 81       	ld	r26, Z
    290a:	b1 81       	ldd	r27, Z+1	; 0x01
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	fc 01       	movw	r30, r24
    2918:	e8 5c       	subi	r30, 0xC8	; 200
    291a:	fe 4f       	sbci	r31, 0xFE	; 254
    291c:	01 90       	ld	r0, Z+
    291e:	f0 81       	ld	r31, Z
    2920:	e0 2d       	mov	r30, r0
    2922:	80 81       	ld	r24, Z
    2924:	8f 70       	andi	r24, 0x0F	; 15
    2926:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	fc 01       	movw	r30, r24
    2934:	e8 5c       	subi	r30, 0xC8	; 200
    2936:	fe 4f       	sbci	r31, 0xFE	; 254
    2938:	a0 81       	ld	r26, Z
    293a:	b1 81       	ldd	r27, Z+1	; 0x01
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	fc 01       	movw	r30, r24
    2948:	e8 5c       	subi	r30, 0xC8	; 200
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	01 90       	ld	r0, Z+
    294e:	f0 81       	ld	r31, Z
    2950:	e0 2d       	mov	r30, r0
    2952:	80 81       	ld	r24, Z
    2954:	28 2f       	mov	r18, r24
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	82 95       	swap	r24
    295e:	92 95       	swap	r25
    2960:	90 7f       	andi	r25, 0xF0	; 240
    2962:	98 27       	eor	r25, r24
    2964:	80 7f       	andi	r24, 0xF0	; 240
    2966:	98 27       	eor	r25, r24
    2968:	82 2b       	or	r24, r18
    296a:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    296c:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    296e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	27 97       	sbiw	r28, 0x07	; 7
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	8a 83       	std	Y+2, r24	; 0x02
    2992:	4b 83       	std	Y+3, r20	; 0x03
    2994:	5c 83       	std	Y+4, r21	; 0x04
    2996:	6d 83       	std	Y+5, r22	; 0x05
    2998:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	fc 01       	movw	r30, r24
    29aa:	e8 5c       	subi	r30, 0xC8	; 200
    29ac:	fe 4f       	sbci	r31, 0xFE	; 254
    29ae:	01 90       	ld	r0, Z+
    29b0:	f0 81       	ld	r31, Z
    29b2:	e0 2d       	mov	r30, r0
    29b4:	80 81       	ld	r24, Z
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	fc 01       	movw	r30, r24
    29c2:	e8 5c       	subi	r30, 0xC8	; 200
    29c4:	fe 4f       	sbci	r31, 0xFE	; 254
    29c6:	01 90       	ld	r0, Z+
    29c8:	f0 81       	ld	r31, Z
    29ca:	e0 2d       	mov	r30, r0
    29cc:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	fc 01       	movw	r30, r24
    29da:	e8 5c       	subi	r30, 0xC8	; 200
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	a0 81       	ld	r26, Z
    29e0:	b1 81       	ldd	r27, Z+1	; 0x01
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	fc 01       	movw	r30, r24
    29ee:	e8 5c       	subi	r30, 0xC8	; 200
    29f0:	fe 4f       	sbci	r31, 0xFE	; 254
    29f2:	01 90       	ld	r0, Z+
    29f4:	f0 81       	ld	r31, Z
    29f6:	e0 2d       	mov	r30, r0
    29f8:	90 81       	ld	r25, Z
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	89 2b       	or	r24, r25
    29fe:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    2a00:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a04:	27 96       	adiw	r28, 0x07	; 7
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <MGI_vGIE>:
/*************************************************************************/

#include "gi_interface.h"

void MGI_vGIE(void)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    2a1e:	af e5       	ldi	r26, 0x5F	; 95
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	ef e5       	ldi	r30, 0x5F	; 95
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	80 68       	ori	r24, 0x80	; 128
    2a2a:	8c 93       	st	X, r24
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <MGI_vGID>:

void MGI_vGID(void)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I_BIT);
    2a3a:	af e5       	ldi	r26, 0x5F	; 95
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ef e5       	ldi	r30, 0x5F	; 95
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 77       	andi	r24, 0x7F	; 127
    2a46:	8c 93       	st	X, r24
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	ce 59       	subi	r28, 0x9E	; 158
    2a5c:	d0 40       	sbci	r29, 0x00	; 0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e3 56       	subi	r30, 0x63	; 99
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2a72:	fe 01       	movw	r30, r28
    2a74:	e0 58       	subi	r30, 0x80	; 128
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e1 58       	subi	r30, 0x81	; 129
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    2a86:	fe 01       	movw	r30, r28
    2a88:	e3 56       	subi	r30, 0x63	; 99
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <HLCD_init+0x48>
    2a94:	18 c7       	rjmp	.+3632   	; 0x38c6 <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2a96:	fe 01       	movw	r30, r28
    2a98:	e3 56       	subi	r30, 0x63	; 99
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	01 90       	ld	r0, Z+
    2a9e:	f0 81       	ld	r31, Z
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	81 81       	ldd	r24, Z+1	; 0x01
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 56       	subi	r30, 0x63	; 99
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	01 90       	ld	r0, Z+
    2aac:	f0 81       	ld	r31, Z
    2aae:	e0 2d       	mov	r30, r0
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ef 57       	subi	r30, 0x7F	; 127
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 83       	st	Z, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	ef 57       	subi	r30, 0x7F	; 127
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ef 57       	subi	r30, 0x7F	; 127
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	82 83       	std	Z+2, r24	; 0x02
    2acc:	fe 01       	movw	r30, r28
    2ace:	ef 57       	subi	r30, 0x7F	; 127
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e3 56       	subi	r30, 0x63	; 99
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	01 90       	ld	r0, Z+
    2adc:	f0 81       	ld	r31, Z
    2ade:	e0 2d       	mov	r30, r0
    2ae0:	81 81       	ldd	r24, Z+1	; 0x01
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e3 56       	subi	r30, 0x63	; 99
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	01 90       	ld	r0, Z+
    2aea:	f0 81       	ld	r31, Z
    2aec:	e0 2d       	mov	r30, r0
    2aee:	94 81       	ldd	r25, Z+4	; 0x04
    2af0:	fe 01       	movw	r30, r28
    2af2:	eb 57       	subi	r30, 0x7B	; 123
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 83       	st	Z, r24
    2af8:	fe 01       	movw	r30, r28
    2afa:	eb 57       	subi	r30, 0x7B	; 123
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	fe 01       	movw	r30, r28
    2b02:	eb 57       	subi	r30, 0x7B	; 123
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	82 83       	std	Z+2, r24	; 0x02
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	eb 57       	subi	r30, 0x7B	; 123
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    2b12:	fe 01       	movw	r30, r28
    2b14:	e3 56       	subi	r30, 0x63	; 99
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	01 90       	ld	r0, Z+
    2b1a:	f0 81       	ld	r31, Z
    2b1c:	e0 2d       	mov	r30, r0
    2b1e:	81 81       	ldd	r24, Z+1	; 0x01
    2b20:	fe 01       	movw	r30, r28
    2b22:	e3 56       	subi	r30, 0x63	; 99
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	01 90       	ld	r0, Z+
    2b28:	f0 81       	ld	r31, Z
    2b2a:	e0 2d       	mov	r30, r0
    2b2c:	95 81       	ldd	r25, Z+5	; 0x05
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e7 57       	subi	r30, 0x77	; 119
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 83       	st	Z, r24
    2b36:	fe 01       	movw	r30, r28
    2b38:	e7 57       	subi	r30, 0x77	; 119
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e7 57       	subi	r30, 0x77	; 119
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	82 83       	std	Z+2, r24	; 0x02
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e7 57       	subi	r30, 0x77	; 119
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    2b50:	ce 01       	movw	r24, r28
    2b52:	8f 57       	subi	r24, 0x7F	; 127
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e1 58       	subi	r30, 0x81	; 129
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    2b62:	fe 01       	movw	r30, r28
    2b64:	e1 58       	subi	r30, 0x81	; 129
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 23       	and	r24, r24
    2b6c:	51 f4       	brne	.+20     	; 0x2b82 <HLCD_init+0x134>
    2b6e:	ce 01       	movw	r24, r28
    2b70:	8b 57       	subi	r24, 0x7B	; 123
    2b72:	9f 4f       	sbci	r25, 0xFF	; 255
    2b74:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e1 58       	subi	r30, 0x81	; 129
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 83       	st	Z, r24
    2b80:	05 c0       	rjmp	.+10     	; 0x2b8c <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    2b82:	fe 01       	movw	r30, r28
    2b84:	e0 58       	subi	r30, 0x80	; 128
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e1 58       	subi	r30, 0x81	; 129
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	88 23       	and	r24, r24
    2b96:	51 f4       	brne	.+20     	; 0x2bac <HLCD_init+0x15e>
    2b98:	ce 01       	movw	r24, r28
    2b9a:	87 57       	subi	r24, 0x77	; 119
    2b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9e:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e1 58       	subi	r30, 0x81	; 129
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 83       	st	Z, r24
    2baa:	05 c0       	rjmp	.+10     	; 0x2bb6 <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    2bac:	fe 01       	movw	r30, r28
    2bae:	e0 58       	subi	r30, 0x80	; 128
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e3 56       	subi	r30, 0x63	; 99
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	01 90       	ld	r0, Z+
    2bbe:	f0 81       	ld	r31, Z
    2bc0:	e0 2d       	mov	r30, r0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 23       	and	r24, r24
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <HLCD_init+0x17c>
    2bc8:	42 c4       	rjmp	.+2180   	; 0x344e <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e3 56       	subi	r30, 0x63	; 99
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	01 90       	ld	r0, Z+
    2bd2:	f0 81       	ld	r31, Z
    2bd4:	e0 2d       	mov	r30, r0
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 56       	subi	r30, 0x63	; 99
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	01 90       	ld	r0, Z+
    2be0:	f0 81       	ld	r31, Z
    2be2:	e0 2d       	mov	r30, r0
    2be4:	92 85       	ldd	r25, Z+10	; 0x0a
    2be6:	fe 01       	movw	r30, r28
    2be8:	e3 57       	subi	r30, 0x73	; 115
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 83       	st	Z, r24
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e3 57       	subi	r30, 0x73	; 115
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e3 57       	subi	r30, 0x73	; 115
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	82 83       	std	Z+2, r24	; 0x02
    2c00:	fe 01       	movw	r30, r28
    2c02:	e3 57       	subi	r30, 0x73	; 115
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e3 56       	subi	r30, 0x63	; 99
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	01 90       	ld	r0, Z+
    2c10:	f0 81       	ld	r31, Z
    2c12:	e0 2d       	mov	r30, r0
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	fe 01       	movw	r30, r28
    2c18:	e3 56       	subi	r30, 0x63	; 99
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	f0 81       	ld	r31, Z
    2c20:	e0 2d       	mov	r30, r0
    2c22:	93 85       	ldd	r25, Z+11	; 0x0b
    2c24:	fe 01       	movw	r30, r28
    2c26:	ef 56       	subi	r30, 0x6F	; 111
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 83       	st	Z, r24
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ef 56       	subi	r30, 0x6F	; 111
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	fe 01       	movw	r30, r28
    2c36:	ef 56       	subi	r30, 0x6F	; 111
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	82 83       	std	Z+2, r24	; 0x02
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ef 56       	subi	r30, 0x6F	; 111
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2c46:	fe 01       	movw	r30, r28
    2c48:	e3 56       	subi	r30, 0x63	; 99
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	f0 81       	ld	r31, Z
    2c50:	e0 2d       	mov	r30, r0
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	fe 01       	movw	r30, r28
    2c56:	e3 56       	subi	r30, 0x63	; 99
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	f0 81       	ld	r31, Z
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	94 85       	ldd	r25, Z+12	; 0x0c
    2c62:	fe 01       	movw	r30, r28
    2c64:	eb 56       	subi	r30, 0x6B	; 107
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 83       	st	Z, r24
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	eb 56       	subi	r30, 0x6B	; 107
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	fe 01       	movw	r30, r28
    2c74:	eb 56       	subi	r30, 0x6B	; 107
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	82 83       	std	Z+2, r24	; 0x02
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	eb 56       	subi	r30, 0x6B	; 107
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    2c84:	fe 01       	movw	r30, r28
    2c86:	e3 56       	subi	r30, 0x63	; 99
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	f0 81       	ld	r31, Z
    2c8e:	e0 2d       	mov	r30, r0
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	fe 01       	movw	r30, r28
    2c94:	e3 56       	subi	r30, 0x63	; 99
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	01 90       	ld	r0, Z+
    2c9a:	f0 81       	ld	r31, Z
    2c9c:	e0 2d       	mov	r30, r0
    2c9e:	95 85       	ldd	r25, Z+13	; 0x0d
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e7 56       	subi	r30, 0x67	; 103
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 83       	st	Z, r24
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e7 56       	subi	r30, 0x67	; 103
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e7 56       	subi	r30, 0x67	; 103
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	82 83       	std	Z+2, r24	; 0x02
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e7 56       	subi	r30, 0x67	; 103
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e1 58       	subi	r30, 0x81	; 129
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	88 23       	and	r24, r24
    2ccc:	51 f4       	brne	.+20     	; 0x2ce2 <HLCD_init+0x294>
    2cce:	ce 01       	movw	r24, r28
    2cd0:	83 57       	subi	r24, 0x73	; 115
    2cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd4:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e1 58       	subi	r30, 0x81	; 129
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 83       	st	Z, r24
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e0 58       	subi	r30, 0x80	; 128
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    2cec:	fe 01       	movw	r30, r28
    2cee:	e1 58       	subi	r30, 0x81	; 129
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 23       	and	r24, r24
    2cf6:	51 f4       	brne	.+20     	; 0x2d0c <HLCD_init+0x2be>
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	8f 56       	subi	r24, 0x6F	; 111
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e1 58       	subi	r30, 0x81	; 129
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 83       	st	Z, r24
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e0 58       	subi	r30, 0x80	; 128
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    2d16:	fe 01       	movw	r30, r28
    2d18:	e1 58       	subi	r30, 0x81	; 129
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 23       	and	r24, r24
    2d20:	51 f4       	brne	.+20     	; 0x2d36 <HLCD_init+0x2e8>
    2d22:	ce 01       	movw	r24, r28
    2d24:	8b 56       	subi	r24, 0x6B	; 107
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e1 58       	subi	r30, 0x81	; 129
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 83       	st	Z, r24
    2d34:	05 c0       	rjmp	.+10     	; 0x2d40 <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    2d36:	fe 01       	movw	r30, r28
    2d38:	e0 58       	subi	r30, 0x80	; 128
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    2d40:	fe 01       	movw	r30, r28
    2d42:	e1 58       	subi	r30, 0x81	; 129
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	88 23       	and	r24, r24
    2d4a:	51 f4       	brne	.+20     	; 0x2d60 <HLCD_init+0x312>
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	87 56       	subi	r24, 0x67	; 103
    2d50:	9f 4f       	sbci	r25, 0xFF	; 255
    2d52:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    2d56:	fe 01       	movw	r30, r28
    2d58:	e1 58       	subi	r30, 0x81	; 129
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 83       	st	Z, r24
    2d5e:	05 c0       	rjmp	.+10     	; 0x2d6a <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    2d60:	fe 01       	movw	r30, r28
    2d62:	e0 58       	subi	r30, 0x80	; 128
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	80 83       	st	Z, r24
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e5 58       	subi	r30, 0x85	; 133
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 ef       	ldi	r26, 0xF0	; 240
    2d76:	b1 e4       	ldi	r27, 0x41	; 65
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d80:	8e 01       	movw	r16, r28
    2d82:	09 58       	subi	r16, 0x89	; 137
    2d84:	1f 4f       	sbci	r17, 0xFF	; 255
    2d86:	fe 01       	movw	r30, r28
    2d88:	e5 58       	subi	r30, 0x85	; 133
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	f8 01       	movw	r30, r16
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e9 58       	subi	r30, 0x89	; 137
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	44 f4       	brge	.+16     	; 0x2ddc <HLCD_init+0x38e>
		__ticks = 1;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 58       	subi	r30, 0x8B	; 139
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	64 c0       	rjmp	.+200    	; 0x2ea4 <HLCD_init+0x456>
	else if (__tmp > 65535)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e9 58       	subi	r30, 0x89	; 137
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	0c f0       	brlt	.+2      	; 0x2dfc <HLCD_init+0x3ae>
    2dfa:	43 c0       	rjmp	.+134    	; 0x2e82 <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e5 58       	subi	r30, 0x85	; 133
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	0b 58       	subi	r16, 0x8B	; 139
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
    2e32:	1f c0       	rjmp	.+62     	; 0x2e72 <HLCD_init+0x424>
    2e34:	fe 01       	movw	r30, r28
    2e36:	ed 58       	subi	r30, 0x8D	; 141
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	88 ec       	ldi	r24, 0xC8	; 200
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e42:	fe 01       	movw	r30, r28
    2e44:	ed 58       	subi	r30, 0x8D	; 141
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <HLCD_init+0x3fe>
    2e50:	fe 01       	movw	r30, r28
    2e52:	ed 58       	subi	r30, 0x8D	; 141
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	de 01       	movw	r26, r28
    2e5c:	ab 58       	subi	r26, 0x8B	; 139
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	eb 58       	subi	r30, 0x8B	; 139
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	11 96       	adiw	r26, 0x01	; 1
    2e6e:	9c 93       	st	X, r25
    2e70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e72:	fe 01       	movw	r30, r28
    2e74:	eb 58       	subi	r30, 0x8B	; 139
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	d1 f6       	brne	.-76     	; 0x2e34 <HLCD_init+0x3e6>
    2e80:	27 c0       	rjmp	.+78     	; 0x2ed0 <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e82:	8e 01       	movw	r16, r28
    2e84:	0b 58       	subi	r16, 0x8B	; 139
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e9 58       	subi	r30, 0x89	; 137
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	de 01       	movw	r26, r28
    2ea6:	af 58       	subi	r26, 0x8F	; 143
    2ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	eb 58       	subi	r30, 0x8B	; 139
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	91 81       	ldd	r25, Z+1	; 0x01
    2eb4:	8d 93       	st	X+, r24
    2eb6:	9c 93       	st	X, r25
    2eb8:	fe 01       	movw	r30, r28
    2eba:	ef 58       	subi	r30, 0x8F	; 143
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <HLCD_init+0x474>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ef 58       	subi	r30, 0x8F	; 143
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e3 56       	subi	r30, 0x63	; 99
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	68 e2       	ldi	r22, 0x28	; 40
    2edc:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e3 59       	subi	r30, 0x93	; 147
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a8 e4       	ldi	r26, 0x48	; 72
    2eec:	b2 e4       	ldi	r27, 0x42	; 66
    2eee:	80 83       	st	Z, r24
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	a2 83       	std	Z+2, r26	; 0x02
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	07 59       	subi	r16, 0x97	; 151
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	e3 59       	subi	r30, 0x93	; 147
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	a2 83       	std	Z+2, r26	; 0x02
    2f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 59       	subi	r30, 0x97	; 151
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	44 f4       	brge	.+16     	; 0x2f52 <HLCD_init+0x504>
		__ticks = 1;
    2f42:	fe 01       	movw	r30, r28
    2f44:	e9 59       	subi	r30, 0x99	; 153
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
    2f50:	64 c0       	rjmp	.+200    	; 0x301a <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e7 59       	subi	r30, 0x97	; 151
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	0c f0       	brlt	.+2      	; 0x2f72 <HLCD_init+0x524>
    2f70:	43 c0       	rjmp	.+134    	; 0x2ff8 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	fe 01       	movw	r30, r28
    2f74:	e3 59       	subi	r30, 0x93	; 147
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8e 01       	movw	r16, r28
    2f92:	09 59       	subi	r16, 0x99	; 153
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	1f c0       	rjmp	.+62     	; 0x2fe8 <HLCD_init+0x59a>
    2faa:	fe 01       	movw	r30, r28
    2fac:	eb 59       	subi	r30, 0x9B	; 155
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	88 ec       	ldi	r24, 0xC8	; 200
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
    2fb8:	fe 01       	movw	r30, r28
    2fba:	eb 59       	subi	r30, 0x9B	; 155
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <HLCD_init+0x574>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	eb 59       	subi	r30, 0x9B	; 155
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd0:	de 01       	movw	r26, r28
    2fd2:	a9 59       	subi	r26, 0x99	; 153
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e9 59       	subi	r30, 0x99	; 153
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e9 59       	subi	r30, 0x99	; 153
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	d1 f6       	brne	.-76     	; 0x2faa <HLCD_init+0x55c>
    2ff6:	27 c0       	rjmp	.+78     	; 0x3046 <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	8e 01       	movw	r16, r28
    2ffa:	09 59       	subi	r16, 0x99	; 153
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	fe 01       	movw	r30, r28
    3000:	e7 59       	subi	r30, 0x97	; 151
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	f8 01       	movw	r30, r16
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	de 01       	movw	r26, r28
    301c:	ad 59       	subi	r26, 0x9D	; 157
    301e:	bf 4f       	sbci	r27, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	e9 59       	subi	r30, 0x99	; 153
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	8d 93       	st	X+, r24
    302c:	9c 93       	st	X, r25
    302e:	fe 01       	movw	r30, r28
    3030:	ed 59       	subi	r30, 0x9D	; 157
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <HLCD_init+0x5ea>
    303c:	fe 01       	movw	r30, r28
    303e:	ed 59       	subi	r30, 0x9D	; 157
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    3046:	fe 01       	movw	r30, r28
    3048:	e3 56       	subi	r30, 0x63	; 99
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	6f e0       	ldi	r22, 0x0F	; 15
    3052:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    3056:	fe 01       	movw	r30, r28
    3058:	e1 5a       	subi	r30, 0xA1	; 161
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	a8 e4       	ldi	r26, 0x48	; 72
    3062:	b2 e4       	ldi	r27, 0x42	; 66
    3064:	80 83       	st	Z, r24
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	8e 01       	movw	r16, r28
    306e:	05 5a       	subi	r16, 0xA5	; 165
    3070:	1f 4f       	sbci	r17, 0xFF	; 255
    3072:	fe 01       	movw	r30, r28
    3074:	e1 5a       	subi	r30, 0xA1	; 161
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	f8 01       	movw	r30, r16
    3092:	80 83       	st	Z, r24
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	a2 83       	std	Z+2, r26	; 0x02
    3098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    309a:	fe 01       	movw	r30, r28
    309c:	e5 5a       	subi	r30, 0xA5	; 165
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	60 81       	ld	r22, Z
    30a2:	71 81       	ldd	r23, Z+1	; 0x01
    30a4:	82 81       	ldd	r24, Z+2	; 0x02
    30a6:	93 81       	ldd	r25, Z+3	; 0x03
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e8       	ldi	r20, 0x80	; 128
    30ae:	5f e3       	ldi	r21, 0x3F	; 63
    30b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b4:	88 23       	and	r24, r24
    30b6:	44 f4       	brge	.+16     	; 0x30c8 <HLCD_init+0x67a>
		__ticks = 1;
    30b8:	fe 01       	movw	r30, r28
    30ba:	e7 5a       	subi	r30, 0xA7	; 167
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
    30c6:	64 c0       	rjmp	.+200    	; 0x3190 <HLCD_init+0x742>
	else if (__tmp > 65535)
    30c8:	fe 01       	movw	r30, r28
    30ca:	e5 5a       	subi	r30, 0xA5	; 165
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	4f e7       	ldi	r20, 0x7F	; 127
    30dc:	57 e4       	ldi	r21, 0x47	; 71
    30de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e2:	18 16       	cp	r1, r24
    30e4:	0c f0       	brlt	.+2      	; 0x30e8 <HLCD_init+0x69a>
    30e6:	43 c0       	rjmp	.+134    	; 0x316e <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	fe 01       	movw	r30, r28
    30ea:	e1 5a       	subi	r30, 0xA1	; 161
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	8e 01       	movw	r16, r28
    3108:	07 5a       	subi	r16, 0xA7	; 167
    310a:	1f 4f       	sbci	r17, 0xFF	; 255
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	f8 01       	movw	r30, r16
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
    311e:	1f c0       	rjmp	.+62     	; 0x315e <HLCD_init+0x710>
    3120:	fe 01       	movw	r30, r28
    3122:	e9 5a       	subi	r30, 0xA9	; 169
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	88 ec       	ldi	r24, 0xC8	; 200
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
    312e:	fe 01       	movw	r30, r28
    3130:	e9 5a       	subi	r30, 0xA9	; 169
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <HLCD_init+0x6ea>
    313c:	fe 01       	movw	r30, r28
    313e:	e9 5a       	subi	r30, 0xA9	; 169
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3146:	de 01       	movw	r26, r28
    3148:	a7 5a       	subi	r26, 0xA7	; 167
    314a:	bf 4f       	sbci	r27, 0xFF	; 255
    314c:	fe 01       	movw	r30, r28
    314e:	e7 5a       	subi	r30, 0xA7	; 167
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	11 96       	adiw	r26, 0x01	; 1
    315a:	9c 93       	st	X, r25
    315c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315e:	fe 01       	movw	r30, r28
    3160:	e7 5a       	subi	r30, 0xA7	; 167
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	d1 f6       	brne	.-76     	; 0x3120 <HLCD_init+0x6d2>
    316c:	27 c0       	rjmp	.+78     	; 0x31bc <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316e:	8e 01       	movw	r16, r28
    3170:	07 5a       	subi	r16, 0xA7	; 167
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	fe 01       	movw	r30, r28
    3176:	e5 5a       	subi	r30, 0xA5	; 165
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	f8 01       	movw	r30, r16
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
    3190:	de 01       	movw	r26, r28
    3192:	ab 5a       	subi	r26, 0xAB	; 171
    3194:	bf 4f       	sbci	r27, 0xFF	; 255
    3196:	fe 01       	movw	r30, r28
    3198:	e7 5a       	subi	r30, 0xA7	; 167
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	8d 93       	st	X+, r24
    31a2:	9c 93       	st	X, r25
    31a4:	fe 01       	movw	r30, r28
    31a6:	eb 5a       	subi	r30, 0xAB	; 171
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <HLCD_init+0x760>
    31b2:	fe 01       	movw	r30, r28
    31b4:	eb 5a       	subi	r30, 0xAB	; 171
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    31bc:	fe 01       	movw	r30, r28
    31be:	e3 56       	subi	r30, 0x63	; 99
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 81       	ld	r24, Z
    31c4:	91 81       	ldd	r25, Z+1	; 0x01
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    31cc:	fe 01       	movw	r30, r28
    31ce:	ef 5a       	subi	r30, 0xAF	; 175
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a8 e4       	ldi	r26, 0x48	; 72
    31d8:	b2 e4       	ldi	r27, 0x42	; 66
    31da:	80 83       	st	Z, r24
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	a2 83       	std	Z+2, r26	; 0x02
    31e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	8e 01       	movw	r16, r28
    31e4:	03 5b       	subi	r16, 0xB3	; 179
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	fe 01       	movw	r30, r28
    31ea:	ef 5a       	subi	r30, 0xAF	; 175
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	4a ef       	ldi	r20, 0xFA	; 250
    31fc:	54 e4       	ldi	r21, 0x44	; 68
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	f8 01       	movw	r30, r16
    3208:	80 83       	st	Z, r24
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	a2 83       	std	Z+2, r26	; 0x02
    320e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3210:	fe 01       	movw	r30, r28
    3212:	e3 5b       	subi	r30, 0xB3	; 179
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	5f e3       	ldi	r21, 0x3F	; 63
    3226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322a:	88 23       	and	r24, r24
    322c:	44 f4       	brge	.+16     	; 0x323e <HLCD_init+0x7f0>
		__ticks = 1;
    322e:	fe 01       	movw	r30, r28
    3230:	e5 5b       	subi	r30, 0xB5	; 181
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
    323c:	64 c0       	rjmp	.+200    	; 0x3306 <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    323e:	fe 01       	movw	r30, r28
    3240:	e3 5b       	subi	r30, 0xB3	; 179
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	0c f0       	brlt	.+2      	; 0x325e <HLCD_init+0x810>
    325c:	43 c0       	rjmp	.+134    	; 0x32e4 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	fe 01       	movw	r30, r28
    3260:	ef 5a       	subi	r30, 0xAF	; 175
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e2       	ldi	r20, 0x20	; 32
    3272:	51 e4       	ldi	r21, 0x41	; 65
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	8e 01       	movw	r16, r28
    327e:	05 5b       	subi	r16, 0xB5	; 181
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	f8 01       	movw	r30, r16
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    3294:	1f c0       	rjmp	.+62     	; 0x32d4 <HLCD_init+0x886>
    3296:	fe 01       	movw	r30, r28
    3298:	e7 5b       	subi	r30, 0xB7	; 183
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	88 ec       	ldi	r24, 0xC8	; 200
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	fe 01       	movw	r30, r28
    32a6:	e7 5b       	subi	r30, 0xB7	; 183
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <HLCD_init+0x860>
    32b2:	fe 01       	movw	r30, r28
    32b4:	e7 5b       	subi	r30, 0xB7	; 183
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32bc:	de 01       	movw	r26, r28
    32be:	a5 5b       	subi	r26, 0xB5	; 181
    32c0:	bf 4f       	sbci	r27, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e5 5b       	subi	r30, 0xB5	; 181
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 81       	ld	r24, Z
    32ca:	91 81       	ldd	r25, Z+1	; 0x01
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	11 96       	adiw	r26, 0x01	; 1
    32d0:	9c 93       	st	X, r25
    32d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d4:	fe 01       	movw	r30, r28
    32d6:	e5 5b       	subi	r30, 0xB5	; 181
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	d1 f6       	brne	.-76     	; 0x3296 <HLCD_init+0x848>
    32e2:	27 c0       	rjmp	.+78     	; 0x3332 <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	8e 01       	movw	r16, r28
    32e6:	05 5b       	subi	r16, 0xB5	; 181
    32e8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	e3 5b       	subi	r30, 0xB3	; 179
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	f8 01       	movw	r30, r16
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	80 83       	st	Z, r24
    3306:	de 01       	movw	r26, r28
    3308:	a9 5b       	subi	r26, 0xB9	; 185
    330a:	bf 4f       	sbci	r27, 0xFF	; 255
    330c:	fe 01       	movw	r30, r28
    330e:	e5 5b       	subi	r30, 0xB5	; 181
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	8d 93       	st	X+, r24
    3318:	9c 93       	st	X, r25
    331a:	fe 01       	movw	r30, r28
    331c:	e9 5b       	subi	r30, 0xB9	; 185
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <HLCD_init+0x8d6>
    3328:	fe 01       	movw	r30, r28
    332a:	e9 5b       	subi	r30, 0xB9	; 185
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    3332:	fe 01       	movw	r30, r28
    3334:	e3 56       	subi	r30, 0x63	; 99
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	66 e0       	ldi	r22, 0x06	; 6
    333e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    3342:	fe 01       	movw	r30, r28
    3344:	ed 5b       	subi	r30, 0xBD	; 189
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	a8 e4       	ldi	r26, 0x48	; 72
    334e:	b2 e4       	ldi	r27, 0x42	; 66
    3350:	80 83       	st	Z, r24
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	a2 83       	std	Z+2, r26	; 0x02
    3356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3358:	8e 01       	movw	r16, r28
    335a:	01 5c       	subi	r16, 0xC1	; 193
    335c:	1f 4f       	sbci	r17, 0xFF	; 255
    335e:	fe 01       	movw	r30, r28
    3360:	ed 5b       	subi	r30, 0xBD	; 189
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	60 81       	ld	r22, Z
    3366:	71 81       	ldd	r23, Z+1	; 0x01
    3368:	82 81       	ldd	r24, Z+2	; 0x02
    336a:	93 81       	ldd	r25, Z+3	; 0x03
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	4a ef       	ldi	r20, 0xFA	; 250
    3372:	54 e4       	ldi	r21, 0x44	; 68
    3374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	f8 01       	movw	r30, r16
    337e:	80 83       	st	Z, r24
    3380:	91 83       	std	Z+1, r25	; 0x01
    3382:	a2 83       	std	Z+2, r26	; 0x02
    3384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3386:	fe 01       	movw	r30, r28
    3388:	ff 96       	adiw	r30, 0x3f	; 63
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e8       	ldi	r20, 0x80	; 128
    3398:	5f e3       	ldi	r21, 0x3F	; 63
    339a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339e:	88 23       	and	r24, r24
    33a0:	2c f4       	brge	.+10     	; 0x33ac <HLCD_init+0x95e>
		__ticks = 1;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9e af       	std	Y+62, r25	; 0x3e
    33a8:	8d af       	std	Y+61, r24	; 0x3d
    33aa:	46 c0       	rjmp	.+140    	; 0x3438 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    33ac:	fe 01       	movw	r30, r28
    33ae:	ff 96       	adiw	r30, 0x3f	; 63
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	3f ef       	ldi	r19, 0xFF	; 255
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	57 e4       	ldi	r21, 0x47	; 71
    33c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	64 f5       	brge	.+88     	; 0x3420 <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c8:	fe 01       	movw	r30, r28
    33ca:	ed 5b       	subi	r30, 0xBD	; 189
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e2       	ldi	r20, 0x20	; 32
    33dc:	51 e4       	ldi	r21, 0x41	; 65
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	bc 01       	movw	r22, r24
    33e8:	cd 01       	movw	r24, r26
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9e af       	std	Y+62, r25	; 0x3e
    33f4:	8d af       	std	Y+61, r24	; 0x3d
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <HLCD_init+0x9c8>
    33f8:	88 ec       	ldi	r24, 0xC8	; 200
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9c af       	std	Y+60, r25	; 0x3c
    33fe:	8b af       	std	Y+59, r24	; 0x3b
    3400:	8b ad       	ldd	r24, Y+59	; 0x3b
    3402:	9c ad       	ldd	r25, Y+60	; 0x3c
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <HLCD_init+0x9b6>
    3408:	9c af       	std	Y+60, r25	; 0x3c
    340a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340c:	8d ad       	ldd	r24, Y+61	; 0x3d
    340e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	9e af       	std	Y+62, r25	; 0x3e
    3414:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	8d ad       	ldd	r24, Y+61	; 0x3d
    3418:	9e ad       	ldd	r25, Y+62	; 0x3e
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	69 f7       	brne	.-38     	; 0x33f8 <HLCD_init+0x9aa>
    341e:	58 c2       	rjmp	.+1200   	; 0x38d0 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	fe 01       	movw	r30, r28
    3422:	ff 96       	adiw	r30, 0x3f	; 63
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e af       	std	Y+62, r25	; 0x3e
    3436:	8d af       	std	Y+61, r24	; 0x3d
    3438:	8d ad       	ldd	r24, Y+61	; 0x3d
    343a:	9e ad       	ldd	r25, Y+62	; 0x3e
    343c:	9a af       	std	Y+58, r25	; 0x3a
    343e:	89 af       	std	Y+57, r24	; 0x39
    3440:	89 ad       	ldd	r24, Y+57	; 0x39
    3442:	9a ad       	ldd	r25, Y+58	; 0x3a
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <HLCD_init+0x9f6>
    3448:	9a af       	std	Y+58, r25	; 0x3a
    344a:	89 af       	std	Y+57, r24	; 0x39
    344c:	41 c2       	rjmp	.+1154   	; 0x38d0 <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    344e:	fe 01       	movw	r30, r28
    3450:	e3 56       	subi	r30, 0x63	; 99
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	01 90       	ld	r0, Z+
    3456:	f0 81       	ld	r31, Z
    3458:	e0 2d       	mov	r30, r0
    345a:	80 81       	ld	r24, Z
    345c:	81 30       	cpi	r24, 0x01	; 1
    345e:	09 f0       	breq	.+2      	; 0x3462 <HLCD_init+0xa14>
    3460:	2c c2       	rjmp	.+1112   	; 0x38ba <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    3462:	fe 01       	movw	r30, r28
    3464:	e1 58       	subi	r30, 0x81	; 129
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 81       	ld	r24, Z
    346a:	88 23       	and	r24, r24
    346c:	81 f4       	brne	.+32     	; 0x348e <HLCD_init+0xa40>
    346e:	fe 01       	movw	r30, r28
    3470:	e3 56       	subi	r30, 0x63	; 99
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	01 90       	ld	r0, Z+
    3476:	f0 81       	ld	r31, Z
    3478:	e0 2d       	mov	r30, r0
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	61 e0       	ldi	r22, 0x01	; 1
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 2f 13 	call	0x265e	; 0x265e <GPIO_initPort>
    3484:	fe 01       	movw	r30, r28
    3486:	e1 58       	subi	r30, 0x81	; 129
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 83       	st	Z, r24
    348c:	05 c0       	rjmp	.+10     	; 0x3498 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    348e:	fe 01       	movw	r30, r28
    3490:	e0 58       	subi	r30, 0x80	; 128
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	80 83       	st	Z, r24
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	a0 e8       	ldi	r26, 0x80	; 128
    349e:	bf e3       	ldi	r27, 0x3F	; 63
    34a0:	8d ab       	std	Y+53, r24	; 0x35
    34a2:	9e ab       	std	Y+54, r25	; 0x36
    34a4:	af ab       	std	Y+55, r26	; 0x37
    34a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a8:	6d a9       	ldd	r22, Y+53	; 0x35
    34aa:	7e a9       	ldd	r23, Y+54	; 0x36
    34ac:	8f a9       	ldd	r24, Y+55	; 0x37
    34ae:	98 ad       	ldd	r25, Y+56	; 0x38
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a ef       	ldi	r20, 0xFA	; 250
    34b6:	54 e4       	ldi	r21, 0x44	; 68
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	89 ab       	std	Y+49, r24	; 0x31
    34c2:	9a ab       	std	Y+50, r25	; 0x32
    34c4:	ab ab       	std	Y+51, r26	; 0x33
    34c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34c8:	69 a9       	ldd	r22, Y+49	; 0x31
    34ca:	7a a9       	ldd	r23, Y+50	; 0x32
    34cc:	8b a9       	ldd	r24, Y+51	; 0x33
    34ce:	9c a9       	ldd	r25, Y+52	; 0x34
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34dc:	88 23       	and	r24, r24
    34de:	2c f4       	brge	.+10     	; 0x34ea <HLCD_init+0xa9c>
		__ticks = 1;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	98 ab       	std	Y+48, r25	; 0x30
    34e6:	8f a7       	std	Y+47, r24	; 0x2f
    34e8:	3f c0       	rjmp	.+126    	; 0x3568 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    34ea:	69 a9       	ldd	r22, Y+49	; 0x31
    34ec:	7a a9       	ldd	r23, Y+50	; 0x32
    34ee:	8b a9       	ldd	r24, Y+51	; 0x33
    34f0:	9c a9       	ldd	r25, Y+52	; 0x34
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	4c f5       	brge	.+82     	; 0x3554 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	6d a9       	ldd	r22, Y+53	; 0x35
    3504:	7e a9       	ldd	r23, Y+54	; 0x36
    3506:	8f a9       	ldd	r24, Y+55	; 0x37
    3508:	98 ad       	ldd	r25, Y+56	; 0x38
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	98 ab       	std	Y+48, r25	; 0x30
    3528:	8f a7       	std	Y+47, r24	; 0x2f
    352a:	0f c0       	rjmp	.+30     	; 0x354a <HLCD_init+0xafc>
    352c:	88 ec       	ldi	r24, 0xC8	; 200
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9e a7       	std	Y+46, r25	; 0x2e
    3532:	8d a7       	std	Y+45, r24	; 0x2d
    3534:	8d a5       	ldd	r24, Y+45	; 0x2d
    3536:	9e a5       	ldd	r25, Y+46	; 0x2e
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <HLCD_init+0xaea>
    353c:	9e a7       	std	Y+46, r25	; 0x2e
    353e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	8f a5       	ldd	r24, Y+47	; 0x2f
    3542:	98 a9       	ldd	r25, Y+48	; 0x30
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	98 ab       	std	Y+48, r25	; 0x30
    3548:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	8f a5       	ldd	r24, Y+47	; 0x2f
    354c:	98 a9       	ldd	r25, Y+48	; 0x30
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f7       	brne	.-38     	; 0x352c <HLCD_init+0xade>
    3552:	14 c0       	rjmp	.+40     	; 0x357c <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3554:	69 a9       	ldd	r22, Y+49	; 0x31
    3556:	7a a9       	ldd	r23, Y+50	; 0x32
    3558:	8b a9       	ldd	r24, Y+51	; 0x33
    355a:	9c a9       	ldd	r25, Y+52	; 0x34
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	98 ab       	std	Y+48, r25	; 0x30
    3566:	8f a7       	std	Y+47, r24	; 0x2f
    3568:	8f a5       	ldd	r24, Y+47	; 0x2f
    356a:	98 a9       	ldd	r25, Y+48	; 0x30
    356c:	9c a7       	std	Y+44, r25	; 0x2c
    356e:	8b a7       	std	Y+43, r24	; 0x2b
    3570:	8b a5       	ldd	r24, Y+43	; 0x2b
    3572:	9c a5       	ldd	r25, Y+44	; 0x2c
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <HLCD_init+0xb26>
    3578:	9c a7       	std	Y+44, r25	; 0x2c
    357a:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    357c:	fe 01       	movw	r30, r28
    357e:	e1 58       	subi	r30, 0x81	; 129
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	88 23       	and	r24, r24
    3586:	69 f4       	brne	.+26     	; 0x35a2 <HLCD_init+0xb54>
    3588:	fe 01       	movw	r30, r28
    358a:	e3 56       	subi	r30, 0x63	; 99
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	68 e3       	ldi	r22, 0x38	; 56
    3594:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    3598:	fe 01       	movw	r30, r28
    359a:	e0 58       	subi	r30, 0x80	; 128
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 83       	st	Z, r24
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    35a2:	fe 01       	movw	r30, r28
    35a4:	e0 58       	subi	r30, 0x80	; 128
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	80 83       	st	Z, r24
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a0 e8       	ldi	r26, 0x80	; 128
    35b2:	bf e3       	ldi	r27, 0x3F	; 63
    35b4:	8f a3       	std	Y+39, r24	; 0x27
    35b6:	98 a7       	std	Y+40, r25	; 0x28
    35b8:	a9 a7       	std	Y+41, r26	; 0x29
    35ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	6f a1       	ldd	r22, Y+39	; 0x27
    35be:	78 a5       	ldd	r23, Y+40	; 0x28
    35c0:	89 a5       	ldd	r24, Y+41	; 0x29
    35c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a ef       	ldi	r20, 0xFA	; 250
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	8b a3       	std	Y+35, r24	; 0x23
    35d6:	9c a3       	std	Y+36, r25	; 0x24
    35d8:	ad a3       	std	Y+37, r26	; 0x25
    35da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35dc:	6b a1       	ldd	r22, Y+35	; 0x23
    35de:	7c a1       	ldd	r23, Y+36	; 0x24
    35e0:	8d a1       	ldd	r24, Y+37	; 0x25
    35e2:	9e a1       	ldd	r25, Y+38	; 0x26
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <HLCD_init+0xbb0>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	9a a3       	std	Y+34, r25	; 0x22
    35fa:	89 a3       	std	Y+33, r24	; 0x21
    35fc:	3f c0       	rjmp	.+126    	; 0x367c <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    35fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3600:	7c a1       	ldd	r23, Y+36	; 0x24
    3602:	8d a1       	ldd	r24, Y+37	; 0x25
    3604:	9e a1       	ldd	r25, Y+38	; 0x26
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	4c f5       	brge	.+82     	; 0x3668 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3616:	6f a1       	ldd	r22, Y+39	; 0x27
    3618:	78 a5       	ldd	r23, Y+40	; 0x28
    361a:	89 a5       	ldd	r24, Y+41	; 0x29
    361c:	9a a5       	ldd	r25, Y+42	; 0x2a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	51 e4       	ldi	r21, 0x41	; 65
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9a a3       	std	Y+34, r25	; 0x22
    363c:	89 a3       	std	Y+33, r24	; 0x21
    363e:	0f c0       	rjmp	.+30     	; 0x365e <HLCD_init+0xc10>
    3640:	88 ec       	ldi	r24, 0xC8	; 200
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	98 a3       	std	Y+32, r25	; 0x20
    3646:	8f 8f       	std	Y+31, r24	; 0x1f
    3648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    364a:	98 a1       	ldd	r25, Y+32	; 0x20
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <HLCD_init+0xbfe>
    3650:	98 a3       	std	Y+32, r25	; 0x20
    3652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	89 a1       	ldd	r24, Y+33	; 0x21
    3656:	9a a1       	ldd	r25, Y+34	; 0x22
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	9a a3       	std	Y+34, r25	; 0x22
    365c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	89 a1       	ldd	r24, Y+33	; 0x21
    3660:	9a a1       	ldd	r25, Y+34	; 0x22
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	69 f7       	brne	.-38     	; 0x3640 <HLCD_init+0xbf2>
    3666:	14 c0       	rjmp	.+40     	; 0x3690 <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3668:	6b a1       	ldd	r22, Y+35	; 0x23
    366a:	7c a1       	ldd	r23, Y+36	; 0x24
    366c:	8d a1       	ldd	r24, Y+37	; 0x25
    366e:	9e a1       	ldd	r25, Y+38	; 0x26
    3670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	9a a3       	std	Y+34, r25	; 0x22
    367a:	89 a3       	std	Y+33, r24	; 0x21
    367c:	89 a1       	ldd	r24, Y+33	; 0x21
    367e:	9a a1       	ldd	r25, Y+34	; 0x22
    3680:	9e 8f       	std	Y+30, r25	; 0x1e
    3682:	8d 8f       	std	Y+29, r24	; 0x1d
    3684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <HLCD_init+0xc3a>
    368c:	9e 8f       	std	Y+30, r25	; 0x1e
    368e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_OFF);
    3690:	fe 01       	movw	r30, r28
    3692:	e0 58       	subi	r30, 0x80	; 128
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	88 23       	and	r24, r24
    369a:	69 f4       	brne	.+26     	; 0x36b6 <HLCD_init+0xc68>
    369c:	fe 01       	movw	r30, r28
    369e:	e3 56       	subi	r30, 0x63	; 99
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	80 81       	ld	r24, Z
    36a4:	91 81       	ldd	r25, Z+1	; 0x01
    36a6:	6c e0       	ldi	r22, 0x0C	; 12
    36a8:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    36ac:	fe 01       	movw	r30, r28
    36ae:	e0 58       	subi	r30, 0x80	; 128
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 83       	st	Z, r24
    36b4:	05 c0       	rjmp	.+10     	; 0x36c0 <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    36b6:	fe 01       	movw	r30, r28
    36b8:	e0 58       	subi	r30, 0x80	; 128
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	80 83       	st	Z, r24
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a0 e8       	ldi	r26, 0x80	; 128
    36c6:	bf e3       	ldi	r27, 0x3F	; 63
    36c8:	89 8f       	std	Y+25, r24	; 0x19
    36ca:	9a 8f       	std	Y+26, r25	; 0x1a
    36cc:	ab 8f       	std	Y+27, r26	; 0x1b
    36ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	69 8d       	ldd	r22, Y+25	; 0x19
    36d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a ef       	ldi	r20, 0xFA	; 250
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8d 8b       	std	Y+21, r24	; 0x15
    36ea:	9e 8b       	std	Y+22, r25	; 0x16
    36ec:	af 8b       	std	Y+23, r26	; 0x17
    36ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36f0:	6d 89       	ldd	r22, Y+21	; 0x15
    36f2:	7e 89       	ldd	r23, Y+22	; 0x16
    36f4:	8f 89       	ldd	r24, Y+23	; 0x17
    36f6:	98 8d       	ldd	r25, Y+24	; 0x18
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e8       	ldi	r20, 0x80	; 128
    36fe:	5f e3       	ldi	r21, 0x3F	; 63
    3700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3704:	88 23       	and	r24, r24
    3706:	2c f4       	brge	.+10     	; 0x3712 <HLCD_init+0xcc4>
		__ticks = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9c 8b       	std	Y+20, r25	; 0x14
    370e:	8b 8b       	std	Y+19, r24	; 0x13
    3710:	3f c0       	rjmp	.+126    	; 0x3790 <HLCD_init+0xd42>
	else if (__tmp > 65535)
    3712:	6d 89       	ldd	r22, Y+21	; 0x15
    3714:	7e 89       	ldd	r23, Y+22	; 0x16
    3716:	8f 89       	ldd	r24, Y+23	; 0x17
    3718:	98 8d       	ldd	r25, Y+24	; 0x18
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	4c f5       	brge	.+82     	; 0x377c <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	69 8d       	ldd	r22, Y+25	; 0x19
    372c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    372e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9c 8b       	std	Y+20, r25	; 0x14
    3750:	8b 8b       	std	Y+19, r24	; 0x13
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <HLCD_init+0xd24>
    3754:	88 ec       	ldi	r24, 0xC8	; 200
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9a 8b       	std	Y+18, r25	; 0x12
    375a:	89 8b       	std	Y+17, r24	; 0x11
    375c:	89 89       	ldd	r24, Y+17	; 0x11
    375e:	9a 89       	ldd	r25, Y+18	; 0x12
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <HLCD_init+0xd12>
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8b 89       	ldd	r24, Y+19	; 0x13
    376a:	9c 89       	ldd	r25, Y+20	; 0x14
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	9c 8b       	std	Y+20, r25	; 0x14
    3770:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8b 89       	ldd	r24, Y+19	; 0x13
    3774:	9c 89       	ldd	r25, Y+20	; 0x14
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <HLCD_init+0xd06>
    377a:	14 c0       	rjmp	.+40     	; 0x37a4 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	6d 89       	ldd	r22, Y+21	; 0x15
    377e:	7e 89       	ldd	r23, Y+22	; 0x16
    3780:	8f 89       	ldd	r24, Y+23	; 0x17
    3782:	98 8d       	ldd	r25, Y+24	; 0x18
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9c 8b       	std	Y+20, r25	; 0x14
    378e:	8b 8b       	std	Y+19, r24	; 0x13
    3790:	8b 89       	ldd	r24, Y+19	; 0x13
    3792:	9c 89       	ldd	r25, Y+20	; 0x14
    3794:	98 8b       	std	Y+16, r25	; 0x10
    3796:	8f 87       	std	Y+15, r24	; 0x0f
    3798:	8f 85       	ldd	r24, Y+15	; 0x0f
    379a:	98 89       	ldd	r25, Y+16	; 0x10
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <HLCD_init+0xd4e>
    37a0:	98 8b       	std	Y+16, r25	; 0x10
    37a2:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    37a4:	fe 01       	movw	r30, r28
    37a6:	e0 58       	subi	r30, 0x80	; 128
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 81       	ld	r24, Z
    37ac:	88 23       	and	r24, r24
    37ae:	69 f4       	brne	.+26     	; 0x37ca <HLCD_init+0xd7c>
    37b0:	fe 01       	movw	r30, r28
    37b2:	e3 56       	subi	r30, 0x63	; 99
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    37c0:	fe 01       	movw	r30, r28
    37c2:	e0 58       	subi	r30, 0x80	; 128
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	80 83       	st	Z, r24
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    37ca:	fe 01       	movw	r30, r28
    37cc:	e0 58       	subi	r30, 0x80	; 128
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	80 83       	st	Z, r24
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 e8       	ldi	r26, 0x80	; 128
    37da:	bf e3       	ldi	r27, 0x3F	; 63
    37dc:	8b 87       	std	Y+11, r24	; 0x0b
    37de:	9c 87       	std	Y+12, r25	; 0x0c
    37e0:	ad 87       	std	Y+13, r26	; 0x0d
    37e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	4a ef       	ldi	r20, 0xFA	; 250
    37f2:	54 e4       	ldi	r21, 0x44	; 68
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8f 83       	std	Y+7, r24	; 0x07
    37fe:	98 87       	std	Y+8, r25	; 0x08
    3800:	a9 87       	std	Y+9, r26	; 0x09
    3802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	40 e8       	ldi	r20, 0x80	; 128
    3812:	5f e3       	ldi	r21, 0x3F	; 63
    3814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3818:	88 23       	and	r24, r24
    381a:	2c f4       	brge	.+10     	; 0x3826 <HLCD_init+0xdd8>
		__ticks = 1;
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9e 83       	std	Y+6, r25	; 0x06
    3822:	8d 83       	std	Y+5, r24	; 0x05
    3824:	3f c0       	rjmp	.+126    	; 0x38a4 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	3f ef       	ldi	r19, 0xFF	; 255
    3832:	4f e7       	ldi	r20, 0x7F	; 127
    3834:	57 e4       	ldi	r21, 0x47	; 71
    3836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383a:	18 16       	cp	r1, r24
    383c:	4c f5       	brge	.+82     	; 0x3890 <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3840:	7c 85       	ldd	r23, Y+12	; 0x0c
    3842:	8d 85       	ldd	r24, Y+13	; 0x0d
    3844:	9e 85       	ldd	r25, Y+14	; 0x0e
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e2       	ldi	r20, 0x20	; 32
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	9e 83       	std	Y+6, r25	; 0x06
    3864:	8d 83       	std	Y+5, r24	; 0x05
    3866:	0f c0       	rjmp	.+30     	; 0x3886 <HLCD_init+0xe38>
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9c 83       	std	Y+4, r25	; 0x04
    386e:	8b 83       	std	Y+3, r24	; 0x03
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	9c 81       	ldd	r25, Y+4	; 0x04
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <HLCD_init+0xe26>
    3878:	9c 83       	std	Y+4, r25	; 0x04
    387a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387c:	8d 81       	ldd	r24, Y+5	; 0x05
    387e:	9e 81       	ldd	r25, Y+6	; 0x06
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	9e 83       	std	Y+6, r25	; 0x06
    3884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	69 f7       	brne	.-38     	; 0x3868 <HLCD_init+0xe1a>
    388e:	20 c0       	rjmp	.+64     	; 0x38d0 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3890:	6f 81       	ldd	r22, Y+7	; 0x07
    3892:	78 85       	ldd	r23, Y+8	; 0x08
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	9e 81       	ldd	r25, Y+6	; 0x06
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <HLCD_init+0xe62>
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    38b6:	89 83       	std	Y+1, r24	; 0x01
    38b8:	0b c0       	rjmp	.+22     	; 0x38d0 <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    38ba:	fe 01       	movw	r30, r28
    38bc:	e0 58       	subi	r30, 0x80	; 128
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	83 e0       	ldi	r24, 0x03	; 3
    38c2:	80 83       	st	Z, r24
    38c4:	05 c0       	rjmp	.+10     	; 0x38d0 <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    38c6:	fe 01       	movw	r30, r28
    38c8:	e0 58       	subi	r30, 0x80	; 128
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	80 83       	st	Z, r24
	}

	return lcdRet;
    38d0:	fe 01       	movw	r30, r28
    38d2:	e0 58       	subi	r30, 0x80	; 128
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 81       	ld	r24, Z
}
    38d8:	c2 56       	subi	r28, 0x62	; 98
    38da:	df 4f       	sbci	r29, 0xFF	; 255
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	08 95       	ret

000038f0 <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	cd 59       	subi	r28, 0x9D	; 157
    38fe:	d0 40       	sbci	r29, 0x00	; 0
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
    390a:	fe 01       	movw	r30, r28
    390c:	e5 56       	subi	r30, 0x65	; 101
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	80 83       	st	Z, r24
    3914:	fe 01       	movw	r30, r28
    3916:	e3 56       	subi	r30, 0x63	; 99
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    391c:	fe 01       	movw	r30, r28
    391e:	e2 57       	subi	r30, 0x72	; 114
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3926:	fe 01       	movw	r30, r28
    3928:	e3 57       	subi	r30, 0x73	; 115
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    3930:	fe 01       	movw	r30, r28
    3932:	e5 56       	subi	r30, 0x65	; 101
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 81       	ld	r24, Z
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	09 f4       	brne	.+2      	; 0x3940 <HLCD_sendCmd+0x50>
    393e:	2f c7       	rjmp	.+3678   	; 0x479e <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3940:	fe 01       	movw	r30, r28
    3942:	e5 56       	subi	r30, 0x65	; 101
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	01 90       	ld	r0, Z+
    3948:	f0 81       	ld	r31, Z
    394a:	e0 2d       	mov	r30, r0
    394c:	81 81       	ldd	r24, Z+1	; 0x01
    394e:	fe 01       	movw	r30, r28
    3950:	e5 56       	subi	r30, 0x65	; 101
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	01 90       	ld	r0, Z+
    3956:	f0 81       	ld	r31, Z
    3958:	e0 2d       	mov	r30, r0
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	fe 01       	movw	r30, r28
    395e:	e1 57       	subi	r30, 0x71	; 113
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 83       	st	Z, r24
    3964:	fe 01       	movw	r30, r28
    3966:	e1 57       	subi	r30, 0x71	; 113
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	fe 01       	movw	r30, r28
    396e:	e1 57       	subi	r30, 0x71	; 113
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	82 83       	std	Z+2, r24	; 0x02
    3976:	fe 01       	movw	r30, r28
    3978:	e1 57       	subi	r30, 0x71	; 113
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    397e:	fe 01       	movw	r30, r28
    3980:	e5 56       	subi	r30, 0x65	; 101
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	01 90       	ld	r0, Z+
    3986:	f0 81       	ld	r31, Z
    3988:	e0 2d       	mov	r30, r0
    398a:	81 81       	ldd	r24, Z+1	; 0x01
    398c:	fe 01       	movw	r30, r28
    398e:	e5 56       	subi	r30, 0x65	; 101
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	01 90       	ld	r0, Z+
    3994:	f0 81       	ld	r31, Z
    3996:	e0 2d       	mov	r30, r0
    3998:	94 81       	ldd	r25, Z+4	; 0x04
    399a:	fe 01       	movw	r30, r28
    399c:	ed 56       	subi	r30, 0x6D	; 109
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 83       	st	Z, r24
    39a2:	fe 01       	movw	r30, r28
    39a4:	ed 56       	subi	r30, 0x6D	; 109
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	fe 01       	movw	r30, r28
    39ac:	ed 56       	subi	r30, 0x6D	; 109
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	82 83       	std	Z+2, r24	; 0x02
    39b4:	fe 01       	movw	r30, r28
    39b6:	ed 56       	subi	r30, 0x6D	; 109
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    39bc:	fe 01       	movw	r30, r28
    39be:	e5 56       	subi	r30, 0x65	; 101
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	01 90       	ld	r0, Z+
    39c4:	f0 81       	ld	r31, Z
    39c6:	e0 2d       	mov	r30, r0
    39c8:	81 81       	ldd	r24, Z+1	; 0x01
    39ca:	fe 01       	movw	r30, r28
    39cc:	e5 56       	subi	r30, 0x65	; 101
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	01 90       	ld	r0, Z+
    39d2:	f0 81       	ld	r31, Z
    39d4:	e0 2d       	mov	r30, r0
    39d6:	95 81       	ldd	r25, Z+5	; 0x05
    39d8:	fe 01       	movw	r30, r28
    39da:	e9 56       	subi	r30, 0x69	; 105
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 83       	st	Z, r24
    39e0:	fe 01       	movw	r30, r28
    39e2:	e9 56       	subi	r30, 0x69	; 105
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	fe 01       	movw	r30, r28
    39ea:	e9 56       	subi	r30, 0x69	; 105
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	82 83       	std	Z+2, r24	; 0x02
    39f2:	fe 01       	movw	r30, r28
    39f4:	e9 56       	subi	r30, 0x69	; 105
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    39fa:	ce 01       	movw	r24, r28
    39fc:	81 57       	subi	r24, 0x71	; 113
    39fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    3a06:	fe 01       	movw	r30, r28
    3a08:	e3 57       	subi	r30, 0x73	; 115
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e3 57       	subi	r30, 0x73	; 115
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	88 23       	and	r24, r24
    3a18:	59 f4       	brne	.+22     	; 0x3a30 <HLCD_sendCmd+0x140>
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	8d 56       	subi	r24, 0x6D	; 109
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    3a26:	fe 01       	movw	r30, r28
    3a28:	e3 57       	subi	r30, 0x73	; 115
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 83       	st	Z, r24
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    3a30:	fe 01       	movw	r30, r28
    3a32:	e2 57       	subi	r30, 0x72	; 114
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	80 83       	st	Z, r24
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e7 57       	subi	r30, 0x77	; 119
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 ef       	ldi	r26, 0xF0	; 240
    3a46:	b1 e4       	ldi	r27, 0x41	; 65
    3a48:	80 83       	st	Z, r24
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	a2 83       	std	Z+2, r26	; 0x02
    3a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	8e 01       	movw	r16, r28
    3a52:	0b 57       	subi	r16, 0x7B	; 123
    3a54:	1f 4f       	sbci	r17, 0xFF	; 255
    3a56:	fe 01       	movw	r30, r28
    3a58:	e7 57       	subi	r30, 0x77	; 119
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	60 81       	ld	r22, Z
    3a5e:	71 81       	ldd	r23, Z+1	; 0x01
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	4a ef       	ldi	r20, 0xFA	; 250
    3a6a:	54 e4       	ldi	r21, 0x44	; 68
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	f8 01       	movw	r30, r16
    3a76:	80 83       	st	Z, r24
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	a2 83       	std	Z+2, r26	; 0x02
    3a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a7e:	fe 01       	movw	r30, r28
    3a80:	eb 57       	subi	r30, 0x7B	; 123
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e8       	ldi	r20, 0x80	; 128
    3a92:	5f e3       	ldi	r21, 0x3F	; 63
    3a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a98:	88 23       	and	r24, r24
    3a9a:	44 f4       	brge	.+16     	; 0x3aac <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ed 57       	subi	r30, 0x7D	; 125
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
    3aaa:	64 c0       	rjmp	.+200    	; 0x3b74 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    3aac:	fe 01       	movw	r30, r28
    3aae:	eb 57       	subi	r30, 0x7B	; 123
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	3f ef       	ldi	r19, 0xFF	; 255
    3abe:	4f e7       	ldi	r20, 0x7F	; 127
    3ac0:	57 e4       	ldi	r21, 0x47	; 71
    3ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac6:	18 16       	cp	r1, r24
    3ac8:	0c f0       	brlt	.+2      	; 0x3acc <HLCD_sendCmd+0x1dc>
    3aca:	43 c0       	rjmp	.+134    	; 0x3b52 <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3acc:	fe 01       	movw	r30, r28
    3ace:	e7 57       	subi	r30, 0x77	; 119
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8e 01       	movw	r16, r28
    3aec:	0d 57       	subi	r16, 0x7D	; 125
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
    3af0:	bc 01       	movw	r22, r24
    3af2:	cd 01       	movw	r24, r26
    3af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	f8 01       	movw	r30, r16
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	80 83       	st	Z, r24
    3b02:	1f c0       	rjmp	.+62     	; 0x3b42 <HLCD_sendCmd+0x252>
    3b04:	fe 01       	movw	r30, r28
    3b06:	ef 57       	subi	r30, 0x7F	; 127
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	88 ec       	ldi	r24, 0xC8	; 200
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	80 83       	st	Z, r24
    3b12:	fe 01       	movw	r30, r28
    3b14:	ef 57       	subi	r30, 0x7F	; 127
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <HLCD_sendCmd+0x22c>
    3b20:	fe 01       	movw	r30, r28
    3b22:	ef 57       	subi	r30, 0x7F	; 127
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b2a:	de 01       	movw	r26, r28
    3b2c:	ad 57       	subi	r26, 0x7D	; 125
    3b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b30:	fe 01       	movw	r30, r28
    3b32:	ed 57       	subi	r30, 0x7D	; 125
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	80 81       	ld	r24, Z
    3b38:	91 81       	ldd	r25, Z+1	; 0x01
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	11 96       	adiw	r26, 0x01	; 1
    3b3e:	9c 93       	st	X, r25
    3b40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b42:	fe 01       	movw	r30, r28
    3b44:	ed 57       	subi	r30, 0x7D	; 125
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	d1 f6       	brne	.-76     	; 0x3b04 <HLCD_sendCmd+0x214>
    3b50:	28 c0       	rjmp	.+80     	; 0x3ba2 <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b52:	8e 01       	movw	r16, r28
    3b54:	0d 57       	subi	r16, 0x7D	; 125
    3b56:	1f 4f       	sbci	r17, 0xFF	; 255
    3b58:	fe 01       	movw	r30, r28
    3b5a:	eb 57       	subi	r30, 0x7B	; 123
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	f8 01       	movw	r30, r16
    3b70:	91 83       	std	Z+1, r25	; 0x01
    3b72:	80 83       	st	Z, r24
    3b74:	de 01       	movw	r26, r28
    3b76:	a1 58       	subi	r26, 0x81	; 129
    3b78:	bf 4f       	sbci	r27, 0xFF	; 255
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ed 57       	subi	r30, 0x7D	; 125
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 81       	ld	r24, Z
    3b82:	91 81       	ldd	r25, Z+1	; 0x01
    3b84:	11 96       	adiw	r26, 0x01	; 1
    3b86:	9c 93       	st	X, r25
    3b88:	8e 93       	st	-X, r24
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e1 58       	subi	r30, 0x81	; 129
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 81       	ld	r24, Z
    3b92:	91 81       	ldd	r25, Z+1	; 0x01
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <HLCD_sendCmd+0x2a4>
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e1 58       	subi	r30, 0x81	; 129
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e5 56       	subi	r30, 0x65	; 101
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	01 90       	ld	r0, Z+
    3baa:	f0 81       	ld	r31, Z
    3bac:	e0 2d       	mov	r30, r0
    3bae:	80 81       	ld	r24, Z
    3bb0:	88 23       	and	r24, r24
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <HLCD_sendCmd+0x2c6>
    3bb4:	3d c4       	rjmp	.+2170   	; 0x4430 <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e3 57       	subi	r30, 0x73	; 115
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	88 23       	and	r24, r24
    3bc0:	59 f4       	brne	.+22     	; 0x3bd8 <HLCD_sendCmd+0x2e8>
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	89 56       	subi	r24, 0x69	; 105
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	61 e0       	ldi	r22, 0x01	; 1
    3bca:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e3 57       	subi	r30, 0x73	; 115
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 83       	st	Z, r24
    3bd6:	05 c0       	rjmp	.+10     	; 0x3be2 <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e2 57       	subi	r30, 0x72	; 114
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	80 83       	st	Z, r24
    3be2:	fe 01       	movw	r30, r28
    3be4:	e5 58       	subi	r30, 0x85	; 133
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	a8 e4       	ldi	r26, 0x48	; 72
    3bee:	b2 e4       	ldi	r27, 0x42	; 66
    3bf0:	80 83       	st	Z, r24
    3bf2:	91 83       	std	Z+1, r25	; 0x01
    3bf4:	a2 83       	std	Z+2, r26	; 0x02
    3bf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf8:	8e 01       	movw	r16, r28
    3bfa:	09 58       	subi	r16, 0x89	; 137
    3bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e5 58       	subi	r30, 0x85	; 133
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	60 81       	ld	r22, Z
    3c06:	71 81       	ldd	r23, Z+1	; 0x01
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	93 81       	ldd	r25, Z+3	; 0x03
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	4a ef       	ldi	r20, 0xFA	; 250
    3c12:	54 e4       	ldi	r21, 0x44	; 68
    3c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c26:	fe 01       	movw	r30, r28
    3c28:	e9 58       	subi	r30, 0x89	; 137
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	60 81       	ld	r22, Z
    3c2e:	71 81       	ldd	r23, Z+1	; 0x01
    3c30:	82 81       	ldd	r24, Z+2	; 0x02
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e8       	ldi	r20, 0x80	; 128
    3c3a:	5f e3       	ldi	r21, 0x3F	; 63
    3c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c40:	88 23       	and	r24, r24
    3c42:	44 f4       	brge	.+16     	; 0x3c54 <HLCD_sendCmd+0x364>
		__ticks = 1;
    3c44:	fe 01       	movw	r30, r28
    3c46:	eb 58       	subi	r30, 0x8B	; 139
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
    3c52:	64 c0       	rjmp	.+200    	; 0x3d1c <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e9 58       	subi	r30, 0x89	; 137
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	3f ef       	ldi	r19, 0xFF	; 255
    3c66:	4f e7       	ldi	r20, 0x7F	; 127
    3c68:	57 e4       	ldi	r21, 0x47	; 71
    3c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c6e:	18 16       	cp	r1, r24
    3c70:	0c f0       	brlt	.+2      	; 0x3c74 <HLCD_sendCmd+0x384>
    3c72:	43 c0       	rjmp	.+134    	; 0x3cfa <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c74:	fe 01       	movw	r30, r28
    3c76:	e5 58       	subi	r30, 0x85	; 133
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e2       	ldi	r20, 0x20	; 32
    3c88:	51 e4       	ldi	r21, 0x41	; 65
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	8e 01       	movw	r16, r28
    3c94:	0b 58       	subi	r16, 0x8B	; 139
    3c96:	1f 4f       	sbci	r17, 0xFF	; 255
    3c98:	bc 01       	movw	r22, r24
    3c9a:	cd 01       	movw	r24, r26
    3c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	1f c0       	rjmp	.+62     	; 0x3cea <HLCD_sendCmd+0x3fa>
    3cac:	fe 01       	movw	r30, r28
    3cae:	ed 58       	subi	r30, 0x8D	; 141
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	88 ec       	ldi	r24, 0xC8	; 200
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	91 83       	std	Z+1, r25	; 0x01
    3cb8:	80 83       	st	Z, r24
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 58       	subi	r30, 0x8D	; 141
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <HLCD_sendCmd+0x3d4>
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ed 58       	subi	r30, 0x8D	; 141
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd2:	de 01       	movw	r26, r28
    3cd4:	ab 58       	subi	r26, 0x8B	; 139
    3cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd8:	fe 01       	movw	r30, r28
    3cda:	eb 58       	subi	r30, 0x8B	; 139
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	11 96       	adiw	r26, 0x01	; 1
    3ce6:	9c 93       	st	X, r25
    3ce8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cea:	fe 01       	movw	r30, r28
    3cec:	eb 58       	subi	r30, 0x8B	; 139
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	d1 f6       	brne	.-76     	; 0x3cac <HLCD_sendCmd+0x3bc>
    3cf8:	27 c0       	rjmp	.+78     	; 0x3d48 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cfa:	8e 01       	movw	r16, r28
    3cfc:	0b 58       	subi	r16, 0x8B	; 139
    3cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3d00:	fe 01       	movw	r30, r28
    3d02:	e9 58       	subi	r30, 0x89	; 137
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	60 81       	ld	r22, Z
    3d08:	71 81       	ldd	r23, Z+1	; 0x01
    3d0a:	82 81       	ldd	r24, Z+2	; 0x02
    3d0c:	93 81       	ldd	r25, Z+3	; 0x03
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	f8 01       	movw	r30, r16
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	80 83       	st	Z, r24
    3d1c:	de 01       	movw	r26, r28
    3d1e:	af 58       	subi	r26, 0x8F	; 143
    3d20:	bf 4f       	sbci	r27, 0xFF	; 255
    3d22:	fe 01       	movw	r30, r28
    3d24:	eb 58       	subi	r30, 0x8B	; 139
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	8d 93       	st	X+, r24
    3d2e:	9c 93       	st	X, r25
    3d30:	fe 01       	movw	r30, r28
    3d32:	ef 58       	subi	r30, 0x8F	; 143
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <HLCD_sendCmd+0x44a>
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ef 58       	subi	r30, 0x8F	; 143
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e5 56       	subi	r30, 0x65	; 101
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	01 90       	ld	r0, Z+
    3d50:	f0 81       	ld	r31, Z
    3d52:	e0 2d       	mov	r30, r0
    3d54:	22 81       	ldd	r18, Z+2	; 0x02
    3d56:	fe 01       	movw	r30, r28
    3d58:	e3 56       	subi	r30, 0x63	; 99
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	98 2f       	mov	r25, r24
    3d60:	92 95       	swap	r25
    3d62:	9f 70       	andi	r25, 0x0F	; 15
    3d64:	82 2f       	mov	r24, r18
    3d66:	69 2f       	mov	r22, r25
    3d68:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GPIO_set4msbValue>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e3 59       	subi	r30, 0x93	; 147
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	a8 e4       	ldi	r26, 0x48	; 72
    3d78:	b2 e4       	ldi	r27, 0x42	; 66
    3d7a:	80 83       	st	Z, r24
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	a2 83       	std	Z+2, r26	; 0x02
    3d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d82:	8e 01       	movw	r16, r28
    3d84:	07 59       	subi	r16, 0x97	; 151
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 59       	subi	r30, 0x93	; 147
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	4a ef       	ldi	r20, 0xFA	; 250
    3d9c:	54 e4       	ldi	r21, 0x44	; 68
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	f8 01       	movw	r30, r16
    3da8:	80 83       	st	Z, r24
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	a2 83       	std	Z+2, r26	; 0x02
    3dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db0:	fe 01       	movw	r30, r28
    3db2:	e7 59       	subi	r30, 0x97	; 151
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e8       	ldi	r20, 0x80	; 128
    3dc4:	5f e3       	ldi	r21, 0x3F	; 63
    3dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dca:	88 23       	and	r24, r24
    3dcc:	44 f4       	brge	.+16     	; 0x3dde <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e9 59       	subi	r30, 0x99	; 153
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	64 c0       	rjmp	.+200    	; 0x3ea6 <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    3dde:	fe 01       	movw	r30, r28
    3de0:	e7 59       	subi	r30, 0x97	; 151
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	3f ef       	ldi	r19, 0xFF	; 255
    3df0:	4f e7       	ldi	r20, 0x7F	; 127
    3df2:	57 e4       	ldi	r21, 0x47	; 71
    3df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df8:	18 16       	cp	r1, r24
    3dfa:	0c f0       	brlt	.+2      	; 0x3dfe <HLCD_sendCmd+0x50e>
    3dfc:	43 c0       	rjmp	.+134    	; 0x3e84 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e3 59       	subi	r30, 0x93	; 147
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e2       	ldi	r20, 0x20	; 32
    3e12:	51 e4       	ldi	r21, 0x41	; 65
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	09 59       	subi	r16, 0x99	; 153
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	f8 01       	movw	r30, r16
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	80 83       	st	Z, r24
    3e34:	1f c0       	rjmp	.+62     	; 0x3e74 <HLCD_sendCmd+0x584>
    3e36:	fe 01       	movw	r30, r28
    3e38:	eb 59       	subi	r30, 0x9B	; 155
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	88 ec       	ldi	r24, 0xC8	; 200
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
    3e44:	fe 01       	movw	r30, r28
    3e46:	eb 59       	subi	r30, 0x9B	; 155
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <HLCD_sendCmd+0x55e>
    3e52:	fe 01       	movw	r30, r28
    3e54:	eb 59       	subi	r30, 0x9B	; 155
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	de 01       	movw	r26, r28
    3e5e:	a9 59       	subi	r26, 0x99	; 153
    3e60:	bf 4f       	sbci	r27, 0xFF	; 255
    3e62:	fe 01       	movw	r30, r28
    3e64:	e9 59       	subi	r30, 0x99	; 153
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 81       	ld	r24, Z
    3e6a:	91 81       	ldd	r25, Z+1	; 0x01
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	11 96       	adiw	r26, 0x01	; 1
    3e70:	9c 93       	st	X, r25
    3e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	fe 01       	movw	r30, r28
    3e76:	e9 59       	subi	r30, 0x99	; 153
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	d1 f6       	brne	.-76     	; 0x3e36 <HLCD_sendCmd+0x546>
    3e82:	28 c0       	rjmp	.+80     	; 0x3ed4 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e84:	8e 01       	movw	r16, r28
    3e86:	09 59       	subi	r16, 0x99	; 153
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e7 59       	subi	r30, 0x97	; 151
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	60 81       	ld	r22, Z
    3e92:	71 81       	ldd	r23, Z+1	; 0x01
    3e94:	82 81       	ldd	r24, Z+2	; 0x02
    3e96:	93 81       	ldd	r25, Z+3	; 0x03
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	de 01       	movw	r26, r28
    3ea8:	ad 59       	subi	r26, 0x9D	; 157
    3eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3eac:	fe 01       	movw	r30, r28
    3eae:	e9 59       	subi	r30, 0x99	; 153
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	11 96       	adiw	r26, 0x01	; 1
    3eb8:	9c 93       	st	X, r25
    3eba:	8e 93       	st	-X, r24
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	ed 59       	subi	r30, 0x9D	; 157
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 81       	ld	r24, Z
    3ec4:	91 81       	ldd	r25, Z+1	; 0x01
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <HLCD_sendCmd+0x5d6>
    3eca:	fe 01       	movw	r30, r28
    3ecc:	ed 59       	subi	r30, 0x9D	; 157
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e3 57       	subi	r30, 0x73	; 115
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	88 23       	and	r24, r24
    3ede:	59 f4       	brne	.+22     	; 0x3ef6 <HLCD_sendCmd+0x606>
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	89 56       	subi	r24, 0x69	; 105
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e3 57       	subi	r30, 0x73	; 115
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 83       	st	Z, r24
    3ef4:	05 c0       	rjmp	.+10     	; 0x3f00 <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e2 57       	subi	r30, 0x72	; 114
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	80 83       	st	Z, r24
    3f00:	fe 01       	movw	r30, r28
    3f02:	e1 5a       	subi	r30, 0xA1	; 161
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	a8 e4       	ldi	r26, 0x48	; 72
    3f0c:	b2 e4       	ldi	r27, 0x42	; 66
    3f0e:	80 83       	st	Z, r24
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	a2 83       	std	Z+2, r26	; 0x02
    3f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f16:	8e 01       	movw	r16, r28
    3f18:	05 5a       	subi	r16, 0xA5	; 165
    3f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	e1 5a       	subi	r30, 0xA1	; 161
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	4a ef       	ldi	r20, 0xFA	; 250
    3f30:	54 e4       	ldi	r21, 0x44	; 68
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	80 83       	st	Z, r24
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	a2 83       	std	Z+2, r26	; 0x02
    3f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f44:	fe 01       	movw	r30, r28
    3f46:	e5 5a       	subi	r30, 0xA5	; 165
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e8       	ldi	r20, 0x80	; 128
    3f58:	5f e3       	ldi	r21, 0x3F	; 63
    3f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f5e:	88 23       	and	r24, r24
    3f60:	44 f4       	brge	.+16     	; 0x3f72 <HLCD_sendCmd+0x682>
		__ticks = 1;
    3f62:	fe 01       	movw	r30, r28
    3f64:	e7 5a       	subi	r30, 0xA7	; 167
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24
    3f70:	64 c0       	rjmp	.+200    	; 0x403a <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    3f72:	fe 01       	movw	r30, r28
    3f74:	e5 5a       	subi	r30, 0xA5	; 165
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	60 81       	ld	r22, Z
    3f7a:	71 81       	ldd	r23, Z+1	; 0x01
    3f7c:	82 81       	ldd	r24, Z+2	; 0x02
    3f7e:	93 81       	ldd	r25, Z+3	; 0x03
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	3f ef       	ldi	r19, 0xFF	; 255
    3f84:	4f e7       	ldi	r20, 0x7F	; 127
    3f86:	57 e4       	ldi	r21, 0x47	; 71
    3f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f8c:	18 16       	cp	r1, r24
    3f8e:	0c f0       	brlt	.+2      	; 0x3f92 <HLCD_sendCmd+0x6a2>
    3f90:	43 c0       	rjmp	.+134    	; 0x4018 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f92:	fe 01       	movw	r30, r28
    3f94:	e1 5a       	subi	r30, 0xA1	; 161
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e2       	ldi	r20, 0x20	; 32
    3fa6:	51 e4       	ldi	r21, 0x41	; 65
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	8e 01       	movw	r16, r28
    3fb2:	07 5a       	subi	r16, 0xA7	; 167
    3fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	f8 01       	movw	r30, r16
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
    3fc8:	1f c0       	rjmp	.+62     	; 0x4008 <HLCD_sendCmd+0x718>
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e9 5a       	subi	r30, 0xA9	; 169
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	88 ec       	ldi	r24, 0xC8	; 200
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	91 83       	std	Z+1, r25	; 0x01
    3fd6:	80 83       	st	Z, r24
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e9 5a       	subi	r30, 0xA9	; 169
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	80 81       	ld	r24, Z
    3fe0:	91 81       	ldd	r25, Z+1	; 0x01
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <HLCD_sendCmd+0x6f2>
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e9 5a       	subi	r30, 0xA9	; 169
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff0:	de 01       	movw	r26, r28
    3ff2:	a7 5a       	subi	r26, 0xA7	; 167
    3ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e7 5a       	subi	r30, 0xA7	; 167
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	80 81       	ld	r24, Z
    3ffe:	91 81       	ldd	r25, Z+1	; 0x01
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	11 96       	adiw	r26, 0x01	; 1
    4004:	9c 93       	st	X, r25
    4006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4008:	fe 01       	movw	r30, r28
    400a:	e7 5a       	subi	r30, 0xA7	; 167
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	00 97       	sbiw	r24, 0x00	; 0
    4014:	d1 f6       	brne	.-76     	; 0x3fca <HLCD_sendCmd+0x6da>
    4016:	28 c0       	rjmp	.+80     	; 0x4068 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4018:	8e 01       	movw	r16, r28
    401a:	07 5a       	subi	r16, 0xA7	; 167
    401c:	1f 4f       	sbci	r17, 0xFF	; 255
    401e:	fe 01       	movw	r30, r28
    4020:	e5 5a       	subi	r30, 0xA5	; 165
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	f8 01       	movw	r30, r16
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
    403a:	de 01       	movw	r26, r28
    403c:	ab 5a       	subi	r26, 0xAB	; 171
    403e:	bf 4f       	sbci	r27, 0xFF	; 255
    4040:	fe 01       	movw	r30, r28
    4042:	e7 5a       	subi	r30, 0xA7	; 167
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 81       	ld	r24, Z
    4048:	91 81       	ldd	r25, Z+1	; 0x01
    404a:	11 96       	adiw	r26, 0x01	; 1
    404c:	9c 93       	st	X, r25
    404e:	8e 93       	st	-X, r24
    4050:	fe 01       	movw	r30, r28
    4052:	eb 5a       	subi	r30, 0xAB	; 171
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	f1 f7       	brne	.-4      	; 0x405a <HLCD_sendCmd+0x76a>
    405e:	fe 01       	movw	r30, r28
    4060:	eb 5a       	subi	r30, 0xAB	; 171
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4068:	fe 01       	movw	r30, r28
    406a:	e3 57       	subi	r30, 0x73	; 115
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	80 81       	ld	r24, Z
    4070:	88 23       	and	r24, r24
    4072:	59 f4       	brne	.+22     	; 0x408a <HLCD_sendCmd+0x79a>
    4074:	ce 01       	movw	r24, r28
    4076:	89 56       	subi	r24, 0x69	; 105
    4078:	9f 4f       	sbci	r25, 0xFF	; 255
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4080:	fe 01       	movw	r30, r28
    4082:	e3 57       	subi	r30, 0x73	; 115
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 83       	st	Z, r24
    4088:	05 c0       	rjmp	.+10     	; 0x4094 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    408a:	fe 01       	movw	r30, r28
    408c:	e2 57       	subi	r30, 0x72	; 114
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	80 83       	st	Z, r24
    4094:	fe 01       	movw	r30, r28
    4096:	ef 5a       	subi	r30, 0xAF	; 175
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	a8 e4       	ldi	r26, 0x48	; 72
    40a0:	b2 e4       	ldi	r27, 0x42	; 66
    40a2:	80 83       	st	Z, r24
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	a2 83       	std	Z+2, r26	; 0x02
    40a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40aa:	8e 01       	movw	r16, r28
    40ac:	03 5b       	subi	r16, 0xB3	; 179
    40ae:	1f 4f       	sbci	r17, 0xFF	; 255
    40b0:	fe 01       	movw	r30, r28
    40b2:	ef 5a       	subi	r30, 0xAF	; 175
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	60 81       	ld	r22, Z
    40b8:	71 81       	ldd	r23, Z+1	; 0x01
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	93 81       	ldd	r25, Z+3	; 0x03
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4a ef       	ldi	r20, 0xFA	; 250
    40c4:	54 e4       	ldi	r21, 0x44	; 68
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	f8 01       	movw	r30, r16
    40d0:	80 83       	st	Z, r24
    40d2:	91 83       	std	Z+1, r25	; 0x01
    40d4:	a2 83       	std	Z+2, r26	; 0x02
    40d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d8:	fe 01       	movw	r30, r28
    40da:	e3 5b       	subi	r30, 0xB3	; 179
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	44 f4       	brge	.+16     	; 0x4106 <HLCD_sendCmd+0x816>
		__ticks = 1;
    40f6:	fe 01       	movw	r30, r28
    40f8:	e5 5b       	subi	r30, 0xB5	; 181
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	64 c0       	rjmp	.+200    	; 0x41ce <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    4106:	fe 01       	movw	r30, r28
    4108:	e3 5b       	subi	r30, 0xB3	; 179
    410a:	ff 4f       	sbci	r31, 0xFF	; 255
    410c:	60 81       	ld	r22, Z
    410e:	71 81       	ldd	r23, Z+1	; 0x01
    4110:	82 81       	ldd	r24, Z+2	; 0x02
    4112:	93 81       	ldd	r25, Z+3	; 0x03
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	0c f0       	brlt	.+2      	; 0x4126 <HLCD_sendCmd+0x836>
    4124:	43 c0       	rjmp	.+134    	; 0x41ac <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4126:	fe 01       	movw	r30, r28
    4128:	ef 5a       	subi	r30, 0xAF	; 175
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	60 81       	ld	r22, Z
    412e:	71 81       	ldd	r23, Z+1	; 0x01
    4130:	82 81       	ldd	r24, Z+2	; 0x02
    4132:	93 81       	ldd	r25, Z+3	; 0x03
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e2       	ldi	r20, 0x20	; 32
    413a:	51 e4       	ldi	r21, 0x41	; 65
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8e 01       	movw	r16, r28
    4146:	05 5b       	subi	r16, 0xB5	; 181
    4148:	1f 4f       	sbci	r17, 0xFF	; 255
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	f8 01       	movw	r30, r16
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	80 83       	st	Z, r24
    415c:	1f c0       	rjmp	.+62     	; 0x419c <HLCD_sendCmd+0x8ac>
    415e:	fe 01       	movw	r30, r28
    4160:	e7 5b       	subi	r30, 0xB7	; 183
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	88 ec       	ldi	r24, 0xC8	; 200
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	80 83       	st	Z, r24
    416c:	fe 01       	movw	r30, r28
    416e:	e7 5b       	subi	r30, 0xB7	; 183
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	91 81       	ldd	r25, Z+1	; 0x01
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <HLCD_sendCmd+0x886>
    417a:	fe 01       	movw	r30, r28
    417c:	e7 5b       	subi	r30, 0xB7	; 183
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4184:	de 01       	movw	r26, r28
    4186:	a5 5b       	subi	r26, 0xB5	; 181
    4188:	bf 4f       	sbci	r27, 0xFF	; 255
    418a:	fe 01       	movw	r30, r28
    418c:	e5 5b       	subi	r30, 0xB5	; 181
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	80 81       	ld	r24, Z
    4192:	91 81       	ldd	r25, Z+1	; 0x01
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	11 96       	adiw	r26, 0x01	; 1
    4198:	9c 93       	st	X, r25
    419a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419c:	fe 01       	movw	r30, r28
    419e:	e5 5b       	subi	r30, 0xB5	; 181
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	91 81       	ldd	r25, Z+1	; 0x01
    41a6:	00 97       	sbiw	r24, 0x00	; 0
    41a8:	d1 f6       	brne	.-76     	; 0x415e <HLCD_sendCmd+0x86e>
    41aa:	27 c0       	rjmp	.+78     	; 0x41fa <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ac:	8e 01       	movw	r16, r28
    41ae:	05 5b       	subi	r16, 0xB5	; 181
    41b0:	1f 4f       	sbci	r17, 0xFF	; 255
    41b2:	fe 01       	movw	r30, r28
    41b4:	e3 5b       	subi	r30, 0xB3	; 179
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	60 81       	ld	r22, Z
    41ba:	71 81       	ldd	r23, Z+1	; 0x01
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	93 81       	ldd	r25, Z+3	; 0x03
    41c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	f8 01       	movw	r30, r16
    41ca:	91 83       	std	Z+1, r25	; 0x01
    41cc:	80 83       	st	Z, r24
    41ce:	de 01       	movw	r26, r28
    41d0:	a9 5b       	subi	r26, 0xB9	; 185
    41d2:	bf 4f       	sbci	r27, 0xFF	; 255
    41d4:	fe 01       	movw	r30, r28
    41d6:	e5 5b       	subi	r30, 0xB5	; 181
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	8d 93       	st	X+, r24
    41e0:	9c 93       	st	X, r25
    41e2:	fe 01       	movw	r30, r28
    41e4:	e9 5b       	subi	r30, 0xB9	; 185
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <HLCD_sendCmd+0x8fc>
    41f0:	fe 01       	movw	r30, r28
    41f2:	e9 5b       	subi	r30, 0xB9	; 185
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    41fa:	fe 01       	movw	r30, r28
    41fc:	e5 56       	subi	r30, 0x65	; 101
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	01 90       	ld	r0, Z+
    4202:	f0 81       	ld	r31, Z
    4204:	e0 2d       	mov	r30, r0
    4206:	82 81       	ldd	r24, Z+2	; 0x02
    4208:	fe 01       	movw	r30, r28
    420a:	e3 56       	subi	r30, 0x63	; 99
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	60 81       	ld	r22, Z
    4210:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GPIO_set4msbValue>
    4214:	fe 01       	movw	r30, r28
    4216:	ed 5b       	subi	r30, 0xBD	; 189
    4218:	ff 4f       	sbci	r31, 0xFF	; 255
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	a8 e4       	ldi	r26, 0x48	; 72
    4220:	b2 e4       	ldi	r27, 0x42	; 66
    4222:	80 83       	st	Z, r24
    4224:	91 83       	std	Z+1, r25	; 0x01
    4226:	a2 83       	std	Z+2, r26	; 0x02
    4228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422a:	8e 01       	movw	r16, r28
    422c:	01 5c       	subi	r16, 0xC1	; 193
    422e:	1f 4f       	sbci	r17, 0xFF	; 255
    4230:	fe 01       	movw	r30, r28
    4232:	ed 5b       	subi	r30, 0xBD	; 189
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	60 81       	ld	r22, Z
    4238:	71 81       	ldd	r23, Z+1	; 0x01
    423a:	82 81       	ldd	r24, Z+2	; 0x02
    423c:	93 81       	ldd	r25, Z+3	; 0x03
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	4a ef       	ldi	r20, 0xFA	; 250
    4244:	54 e4       	ldi	r21, 0x44	; 68
    4246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	f8 01       	movw	r30, r16
    4250:	80 83       	st	Z, r24
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	a2 83       	std	Z+2, r26	; 0x02
    4256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4258:	fe 01       	movw	r30, r28
    425a:	ff 96       	adiw	r30, 0x3f	; 63
    425c:	60 81       	ld	r22, Z
    425e:	71 81       	ldd	r23, Z+1	; 0x01
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e8       	ldi	r20, 0x80	; 128
    426a:	5f e3       	ldi	r21, 0x3F	; 63
    426c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4270:	88 23       	and	r24, r24
    4272:	2c f4       	brge	.+10     	; 0x427e <HLCD_sendCmd+0x98e>
		__ticks = 1;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	9e af       	std	Y+62, r25	; 0x3e
    427a:	8d af       	std	Y+61, r24	; 0x3d
    427c:	46 c0       	rjmp	.+140    	; 0x430a <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    427e:	fe 01       	movw	r30, r28
    4280:	ff 96       	adiw	r30, 0x3f	; 63
    4282:	60 81       	ld	r22, Z
    4284:	71 81       	ldd	r23, Z+1	; 0x01
    4286:	82 81       	ldd	r24, Z+2	; 0x02
    4288:	93 81       	ldd	r25, Z+3	; 0x03
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	3f ef       	ldi	r19, 0xFF	; 255
    428e:	4f e7       	ldi	r20, 0x7F	; 127
    4290:	57 e4       	ldi	r21, 0x47	; 71
    4292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4296:	18 16       	cp	r1, r24
    4298:	64 f5       	brge	.+88     	; 0x42f2 <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    429a:	fe 01       	movw	r30, r28
    429c:	ed 5b       	subi	r30, 0xBD	; 189
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	60 81       	ld	r22, Z
    42a2:	71 81       	ldd	r23, Z+1	; 0x01
    42a4:	82 81       	ldd	r24, Z+2	; 0x02
    42a6:	93 81       	ldd	r25, Z+3	; 0x03
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	40 e2       	ldi	r20, 0x20	; 32
    42ae:	51 e4       	ldi	r21, 0x41	; 65
    42b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	9e af       	std	Y+62, r25	; 0x3e
    42c6:	8d af       	std	Y+61, r24	; 0x3d
    42c8:	0f c0       	rjmp	.+30     	; 0x42e8 <HLCD_sendCmd+0x9f8>
    42ca:	88 ec       	ldi	r24, 0xC8	; 200
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	9c af       	std	Y+60, r25	; 0x3c
    42d0:	8b af       	std	Y+59, r24	; 0x3b
    42d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    42d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	f1 f7       	brne	.-4      	; 0x42d6 <HLCD_sendCmd+0x9e6>
    42da:	9c af       	std	Y+60, r25	; 0x3c
    42dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42de:	8d ad       	ldd	r24, Y+61	; 0x3d
    42e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	9e af       	std	Y+62, r25	; 0x3e
    42e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    42ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	69 f7       	brne	.-38     	; 0x42ca <HLCD_sendCmd+0x9da>
    42f0:	16 c0       	rjmp	.+44     	; 0x431e <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f2:	fe 01       	movw	r30, r28
    42f4:	ff 96       	adiw	r30, 0x3f	; 63
    42f6:	60 81       	ld	r22, Z
    42f8:	71 81       	ldd	r23, Z+1	; 0x01
    42fa:	82 81       	ldd	r24, Z+2	; 0x02
    42fc:	93 81       	ldd	r25, Z+3	; 0x03
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9e af       	std	Y+62, r25	; 0x3e
    4308:	8d af       	std	Y+61, r24	; 0x3d
    430a:	8d ad       	ldd	r24, Y+61	; 0x3d
    430c:	9e ad       	ldd	r25, Y+62	; 0x3e
    430e:	9a af       	std	Y+58, r25	; 0x3a
    4310:	89 af       	std	Y+57, r24	; 0x39
    4312:	89 ad       	ldd	r24, Y+57	; 0x39
    4314:	9a ad       	ldd	r25, Y+58	; 0x3a
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <HLCD_sendCmd+0xa26>
    431a:	9a af       	std	Y+58, r25	; 0x3a
    431c:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    431e:	fe 01       	movw	r30, r28
    4320:	e3 57       	subi	r30, 0x73	; 115
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	88 23       	and	r24, r24
    4328:	59 f4       	brne	.+22     	; 0x4340 <HLCD_sendCmd+0xa50>
    432a:	ce 01       	movw	r24, r28
    432c:	89 56       	subi	r24, 0x69	; 105
    432e:	9f 4f       	sbci	r25, 0xFF	; 255
    4330:	60 e0       	ldi	r22, 0x00	; 0
    4332:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4336:	fe 01       	movw	r30, r28
    4338:	e3 57       	subi	r30, 0x73	; 115
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	80 83       	st	Z, r24
    433e:	05 c0       	rjmp	.+10     	; 0x434a <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    4340:	fe 01       	movw	r30, r28
    4342:	e2 57       	subi	r30, 0x72	; 114
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	80 83       	st	Z, r24
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	a8 e4       	ldi	r26, 0x48	; 72
    4350:	b2 e4       	ldi	r27, 0x42	; 66
    4352:	8d ab       	std	Y+53, r24	; 0x35
    4354:	9e ab       	std	Y+54, r25	; 0x36
    4356:	af ab       	std	Y+55, r26	; 0x37
    4358:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    435a:	6d a9       	ldd	r22, Y+53	; 0x35
    435c:	7e a9       	ldd	r23, Y+54	; 0x36
    435e:	8f a9       	ldd	r24, Y+55	; 0x37
    4360:	98 ad       	ldd	r25, Y+56	; 0x38
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	4a ef       	ldi	r20, 0xFA	; 250
    4368:	54 e4       	ldi	r21, 0x44	; 68
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	89 ab       	std	Y+49, r24	; 0x31
    4374:	9a ab       	std	Y+50, r25	; 0x32
    4376:	ab ab       	std	Y+51, r26	; 0x33
    4378:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    437a:	69 a9       	ldd	r22, Y+49	; 0x31
    437c:	7a a9       	ldd	r23, Y+50	; 0x32
    437e:	8b a9       	ldd	r24, Y+51	; 0x33
    4380:	9c a9       	ldd	r25, Y+52	; 0x34
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	40 e8       	ldi	r20, 0x80	; 128
    4388:	5f e3       	ldi	r21, 0x3F	; 63
    438a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    438e:	88 23       	and	r24, r24
    4390:	2c f4       	brge	.+10     	; 0x439c <HLCD_sendCmd+0xaac>
		__ticks = 1;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	98 ab       	std	Y+48, r25	; 0x30
    4398:	8f a7       	std	Y+47, r24	; 0x2f
    439a:	3f c0       	rjmp	.+126    	; 0x441a <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    439c:	69 a9       	ldd	r22, Y+49	; 0x31
    439e:	7a a9       	ldd	r23, Y+50	; 0x32
    43a0:	8b a9       	ldd	r24, Y+51	; 0x33
    43a2:	9c a9       	ldd	r25, Y+52	; 0x34
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	3f ef       	ldi	r19, 0xFF	; 255
    43a8:	4f e7       	ldi	r20, 0x7F	; 127
    43aa:	57 e4       	ldi	r21, 0x47	; 71
    43ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43b0:	18 16       	cp	r1, r24
    43b2:	4c f5       	brge	.+82     	; 0x4406 <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b4:	6d a9       	ldd	r22, Y+53	; 0x35
    43b6:	7e a9       	ldd	r23, Y+54	; 0x36
    43b8:	8f a9       	ldd	r24, Y+55	; 0x37
    43ba:	98 ad       	ldd	r25, Y+56	; 0x38
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	40 e2       	ldi	r20, 0x20	; 32
    43c2:	51 e4       	ldi	r21, 0x41	; 65
    43c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	bc 01       	movw	r22, r24
    43ce:	cd 01       	movw	r24, r26
    43d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	98 ab       	std	Y+48, r25	; 0x30
    43da:	8f a7       	std	Y+47, r24	; 0x2f
    43dc:	0f c0       	rjmp	.+30     	; 0x43fc <HLCD_sendCmd+0xb0c>
    43de:	88 ec       	ldi	r24, 0xC8	; 200
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	9e a7       	std	Y+46, r25	; 0x2e
    43e4:	8d a7       	std	Y+45, r24	; 0x2d
    43e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    43e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	f1 f7       	brne	.-4      	; 0x43ea <HLCD_sendCmd+0xafa>
    43ee:	9e a7       	std	Y+46, r25	; 0x2e
    43f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43f4:	98 a9       	ldd	r25, Y+48	; 0x30
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4400:	00 97       	sbiw	r24, 0x00	; 0
    4402:	69 f7       	brne	.-38     	; 0x43de <HLCD_sendCmd+0xaee>
    4404:	bb c1       	rjmp	.+886    	; 0x477c <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4406:	69 a9       	ldd	r22, Y+49	; 0x31
    4408:	7a a9       	ldd	r23, Y+50	; 0x32
    440a:	8b a9       	ldd	r24, Y+51	; 0x33
    440c:	9c a9       	ldd	r25, Y+52	; 0x34
    440e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	98 ab       	std	Y+48, r25	; 0x30
    4418:	8f a7       	std	Y+47, r24	; 0x2f
    441a:	8f a5       	ldd	r24, Y+47	; 0x2f
    441c:	98 a9       	ldd	r25, Y+48	; 0x30
    441e:	9c a7       	std	Y+44, r25	; 0x2c
    4420:	8b a7       	std	Y+43, r24	; 0x2b
    4422:	8b a5       	ldd	r24, Y+43	; 0x2b
    4424:	9c a5       	ldd	r25, Y+44	; 0x2c
    4426:	01 97       	sbiw	r24, 0x01	; 1
    4428:	f1 f7       	brne	.-4      	; 0x4426 <HLCD_sendCmd+0xb36>
    442a:	9c a7       	std	Y+44, r25	; 0x2c
    442c:	8b a7       	std	Y+43, r24	; 0x2b
    442e:	a6 c1       	rjmp	.+844    	; 0x477c <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4430:	fe 01       	movw	r30, r28
    4432:	e5 56       	subi	r30, 0x65	; 101
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	01 90       	ld	r0, Z+
    4438:	f0 81       	ld	r31, Z
    443a:	e0 2d       	mov	r30, r0
    443c:	80 81       	ld	r24, Z
    443e:	81 30       	cpi	r24, 0x01	; 1
    4440:	09 f0       	breq	.+2      	; 0x4444 <HLCD_sendCmd+0xb54>
    4442:	97 c1       	rjmp	.+814    	; 0x4772 <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4444:	fe 01       	movw	r30, r28
    4446:	e3 57       	subi	r30, 0x73	; 115
    4448:	ff 4f       	sbci	r31, 0xFF	; 255
    444a:	80 81       	ld	r24, Z
    444c:	88 23       	and	r24, r24
    444e:	59 f4       	brne	.+22     	; 0x4466 <HLCD_sendCmd+0xb76>
    4450:	ce 01       	movw	r24, r28
    4452:	89 56       	subi	r24, 0x69	; 105
    4454:	9f 4f       	sbci	r25, 0xFF	; 255
    4456:	61 e0       	ldi	r22, 0x01	; 1
    4458:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    445c:	fe 01       	movw	r30, r28
    445e:	e3 57       	subi	r30, 0x73	; 115
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 83       	st	Z, r24
    4464:	05 c0       	rjmp	.+10     	; 0x4470 <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    4466:	fe 01       	movw	r30, r28
    4468:	e2 57       	subi	r30, 0x72	; 114
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	80 83       	st	Z, r24
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	a0 e8       	ldi	r26, 0x80	; 128
    4476:	bf e3       	ldi	r27, 0x3F	; 63
    4478:	8f a3       	std	Y+39, r24	; 0x27
    447a:	98 a7       	std	Y+40, r25	; 0x28
    447c:	a9 a7       	std	Y+41, r26	; 0x29
    447e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4480:	6f a1       	ldd	r22, Y+39	; 0x27
    4482:	78 a5       	ldd	r23, Y+40	; 0x28
    4484:	89 a5       	ldd	r24, Y+41	; 0x29
    4486:	9a a5       	ldd	r25, Y+42	; 0x2a
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	4a ef       	ldi	r20, 0xFA	; 250
    448e:	54 e4       	ldi	r21, 0x44	; 68
    4490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	8b a3       	std	Y+35, r24	; 0x23
    449a:	9c a3       	std	Y+36, r25	; 0x24
    449c:	ad a3       	std	Y+37, r26	; 0x25
    449e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44a0:	6b a1       	ldd	r22, Y+35	; 0x23
    44a2:	7c a1       	ldd	r23, Y+36	; 0x24
    44a4:	8d a1       	ldd	r24, Y+37	; 0x25
    44a6:	9e a1       	ldd	r25, Y+38	; 0x26
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e8       	ldi	r20, 0x80	; 128
    44ae:	5f e3       	ldi	r21, 0x3F	; 63
    44b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44b4:	88 23       	and	r24, r24
    44b6:	2c f4       	brge	.+10     	; 0x44c2 <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	9a a3       	std	Y+34, r25	; 0x22
    44be:	89 a3       	std	Y+33, r24	; 0x21
    44c0:	3f c0       	rjmp	.+126    	; 0x4540 <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    44c2:	6b a1       	ldd	r22, Y+35	; 0x23
    44c4:	7c a1       	ldd	r23, Y+36	; 0x24
    44c6:	8d a1       	ldd	r24, Y+37	; 0x25
    44c8:	9e a1       	ldd	r25, Y+38	; 0x26
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	3f ef       	ldi	r19, 0xFF	; 255
    44ce:	4f e7       	ldi	r20, 0x7F	; 127
    44d0:	57 e4       	ldi	r21, 0x47	; 71
    44d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44d6:	18 16       	cp	r1, r24
    44d8:	4c f5       	brge	.+82     	; 0x452c <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44da:	6f a1       	ldd	r22, Y+39	; 0x27
    44dc:	78 a5       	ldd	r23, Y+40	; 0x28
    44de:	89 a5       	ldd	r24, Y+41	; 0x29
    44e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e2       	ldi	r20, 0x20	; 32
    44e8:	51 e4       	ldi	r21, 0x41	; 65
    44ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9a a3       	std	Y+34, r25	; 0x22
    4500:	89 a3       	std	Y+33, r24	; 0x21
    4502:	0f c0       	rjmp	.+30     	; 0x4522 <HLCD_sendCmd+0xc32>
    4504:	88 ec       	ldi	r24, 0xC8	; 200
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	98 a3       	std	Y+32, r25	; 0x20
    450a:	8f 8f       	std	Y+31, r24	; 0x1f
    450c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    450e:	98 a1       	ldd	r25, Y+32	; 0x20
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <HLCD_sendCmd+0xc20>
    4514:	98 a3       	std	Y+32, r25	; 0x20
    4516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4518:	89 a1       	ldd	r24, Y+33	; 0x21
    451a:	9a a1       	ldd	r25, Y+34	; 0x22
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	9a a3       	std	Y+34, r25	; 0x22
    4520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4522:	89 a1       	ldd	r24, Y+33	; 0x21
    4524:	9a a1       	ldd	r25, Y+34	; 0x22
    4526:	00 97       	sbiw	r24, 0x00	; 0
    4528:	69 f7       	brne	.-38     	; 0x4504 <HLCD_sendCmd+0xc14>
    452a:	14 c0       	rjmp	.+40     	; 0x4554 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452c:	6b a1       	ldd	r22, Y+35	; 0x23
    452e:	7c a1       	ldd	r23, Y+36	; 0x24
    4530:	8d a1       	ldd	r24, Y+37	; 0x25
    4532:	9e a1       	ldd	r25, Y+38	; 0x26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9a a3       	std	Y+34, r25	; 0x22
    453e:	89 a3       	std	Y+33, r24	; 0x21
    4540:	89 a1       	ldd	r24, Y+33	; 0x21
    4542:	9a a1       	ldd	r25, Y+34	; 0x22
    4544:	9e 8f       	std	Y+30, r25	; 0x1e
    4546:	8d 8f       	std	Y+29, r24	; 0x1d
    4548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    454a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <HLCD_sendCmd+0xc5c>
    4550:	9e 8f       	std	Y+30, r25	; 0x1e
    4552:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    4554:	fe 01       	movw	r30, r28
    4556:	e5 56       	subi	r30, 0x65	; 101
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	01 90       	ld	r0, Z+
    455c:	f0 81       	ld	r31, Z
    455e:	e0 2d       	mov	r30, r0
    4560:	92 81       	ldd	r25, Z+2	; 0x02
    4562:	fe 01       	movw	r30, r28
    4564:	e3 56       	subi	r30, 0x63	; 99
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	28 2f       	mov	r18, r24
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	89 2f       	mov	r24, r25
    4574:	ba 01       	movw	r22, r20
    4576:	a9 01       	movw	r20, r18
    4578:	0e 94 be 14 	call	0x297c	; 0x297c <GPIO_SetPortValue>
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	a0 e8       	ldi	r26, 0x80	; 128
    4582:	bf e3       	ldi	r27, 0x3F	; 63
    4584:	89 8f       	std	Y+25, r24	; 0x19
    4586:	9a 8f       	std	Y+26, r25	; 0x1a
    4588:	ab 8f       	std	Y+27, r26	; 0x1b
    458a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    458c:	69 8d       	ldd	r22, Y+25	; 0x19
    458e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	4a ef       	ldi	r20, 0xFA	; 250
    459a:	54 e4       	ldi	r21, 0x44	; 68
    459c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	8d 8b       	std	Y+21, r24	; 0x15
    45a6:	9e 8b       	std	Y+22, r25	; 0x16
    45a8:	af 8b       	std	Y+23, r26	; 0x17
    45aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45ac:	6d 89       	ldd	r22, Y+21	; 0x15
    45ae:	7e 89       	ldd	r23, Y+22	; 0x16
    45b0:	8f 89       	ldd	r24, Y+23	; 0x17
    45b2:	98 8d       	ldd	r25, Y+24	; 0x18
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	40 e8       	ldi	r20, 0x80	; 128
    45ba:	5f e3       	ldi	r21, 0x3F	; 63
    45bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45c0:	88 23       	and	r24, r24
    45c2:	2c f4       	brge	.+10     	; 0x45ce <HLCD_sendCmd+0xcde>
		__ticks = 1;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	9c 8b       	std	Y+20, r25	; 0x14
    45ca:	8b 8b       	std	Y+19, r24	; 0x13
    45cc:	3f c0       	rjmp	.+126    	; 0x464c <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    45ce:	6d 89       	ldd	r22, Y+21	; 0x15
    45d0:	7e 89       	ldd	r23, Y+22	; 0x16
    45d2:	8f 89       	ldd	r24, Y+23	; 0x17
    45d4:	98 8d       	ldd	r25, Y+24	; 0x18
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	3f ef       	ldi	r19, 0xFF	; 255
    45da:	4f e7       	ldi	r20, 0x7F	; 127
    45dc:	57 e4       	ldi	r21, 0x47	; 71
    45de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45e2:	18 16       	cp	r1, r24
    45e4:	4c f5       	brge	.+82     	; 0x4638 <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e6:	69 8d       	ldd	r22, Y+25	; 0x19
    45e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e2       	ldi	r20, 0x20	; 32
    45f4:	51 e4       	ldi	r21, 0x41	; 65
    45f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	bc 01       	movw	r22, r24
    4600:	cd 01       	movw	r24, r26
    4602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4606:	dc 01       	movw	r26, r24
    4608:	cb 01       	movw	r24, r22
    460a:	9c 8b       	std	Y+20, r25	; 0x14
    460c:	8b 8b       	std	Y+19, r24	; 0x13
    460e:	0f c0       	rjmp	.+30     	; 0x462e <HLCD_sendCmd+0xd3e>
    4610:	88 ec       	ldi	r24, 0xC8	; 200
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	9a 8b       	std	Y+18, r25	; 0x12
    4616:	89 8b       	std	Y+17, r24	; 0x11
    4618:	89 89       	ldd	r24, Y+17	; 0x11
    461a:	9a 89       	ldd	r25, Y+18	; 0x12
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	f1 f7       	brne	.-4      	; 0x461c <HLCD_sendCmd+0xd2c>
    4620:	9a 8b       	std	Y+18, r25	; 0x12
    4622:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4624:	8b 89       	ldd	r24, Y+19	; 0x13
    4626:	9c 89       	ldd	r25, Y+20	; 0x14
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	9c 8b       	std	Y+20, r25	; 0x14
    462c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    462e:	8b 89       	ldd	r24, Y+19	; 0x13
    4630:	9c 89       	ldd	r25, Y+20	; 0x14
    4632:	00 97       	sbiw	r24, 0x00	; 0
    4634:	69 f7       	brne	.-38     	; 0x4610 <HLCD_sendCmd+0xd20>
    4636:	14 c0       	rjmp	.+40     	; 0x4660 <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4638:	6d 89       	ldd	r22, Y+21	; 0x15
    463a:	7e 89       	ldd	r23, Y+22	; 0x16
    463c:	8f 89       	ldd	r24, Y+23	; 0x17
    463e:	98 8d       	ldd	r25, Y+24	; 0x18
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	9c 8b       	std	Y+20, r25	; 0x14
    464a:	8b 8b       	std	Y+19, r24	; 0x13
    464c:	8b 89       	ldd	r24, Y+19	; 0x13
    464e:	9c 89       	ldd	r25, Y+20	; 0x14
    4650:	98 8b       	std	Y+16, r25	; 0x10
    4652:	8f 87       	std	Y+15, r24	; 0x0f
    4654:	8f 85       	ldd	r24, Y+15	; 0x0f
    4656:	98 89       	ldd	r25, Y+16	; 0x10
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	f1 f7       	brne	.-4      	; 0x4658 <HLCD_sendCmd+0xd68>
    465c:	98 8b       	std	Y+16, r25	; 0x10
    465e:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4660:	fe 01       	movw	r30, r28
    4662:	e3 57       	subi	r30, 0x73	; 115
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	88 23       	and	r24, r24
    466a:	59 f4       	brne	.+22     	; 0x4682 <HLCD_sendCmd+0xd92>
    466c:	ce 01       	movw	r24, r28
    466e:	89 56       	subi	r24, 0x69	; 105
    4670:	9f 4f       	sbci	r25, 0xFF	; 255
    4672:	60 e0       	ldi	r22, 0x00	; 0
    4674:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4678:	fe 01       	movw	r30, r28
    467a:	e3 57       	subi	r30, 0x73	; 115
    467c:	ff 4f       	sbci	r31, 0xFF	; 255
    467e:	80 83       	st	Z, r24
    4680:	05 c0       	rjmp	.+10     	; 0x468c <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    4682:	fe 01       	movw	r30, r28
    4684:	e2 57       	subi	r30, 0x72	; 114
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	80 83       	st	Z, r24
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	a0 e8       	ldi	r26, 0x80	; 128
    4692:	bf e3       	ldi	r27, 0x3F	; 63
    4694:	8b 87       	std	Y+11, r24	; 0x0b
    4696:	9c 87       	std	Y+12, r25	; 0x0c
    4698:	ad 87       	std	Y+13, r26	; 0x0d
    469a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469c:	6b 85       	ldd	r22, Y+11	; 0x0b
    469e:	7c 85       	ldd	r23, Y+12	; 0x0c
    46a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	4a ef       	ldi	r20, 0xFA	; 250
    46aa:	54 e4       	ldi	r21, 0x44	; 68
    46ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	8f 83       	std	Y+7, r24	; 0x07
    46b6:	98 87       	std	Y+8, r25	; 0x08
    46b8:	a9 87       	std	Y+9, r26	; 0x09
    46ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46bc:	6f 81       	ldd	r22, Y+7	; 0x07
    46be:	78 85       	ldd	r23, Y+8	; 0x08
    46c0:	89 85       	ldd	r24, Y+9	; 0x09
    46c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	40 e8       	ldi	r20, 0x80	; 128
    46ca:	5f e3       	ldi	r21, 0x3F	; 63
    46cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46d0:	88 23       	and	r24, r24
    46d2:	2c f4       	brge	.+10     	; 0x46de <HLCD_sendCmd+0xdee>
		__ticks = 1;
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	9e 83       	std	Y+6, r25	; 0x06
    46da:	8d 83       	std	Y+5, r24	; 0x05
    46dc:	3f c0       	rjmp	.+126    	; 0x475c <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    46de:	6f 81       	ldd	r22, Y+7	; 0x07
    46e0:	78 85       	ldd	r23, Y+8	; 0x08
    46e2:	89 85       	ldd	r24, Y+9	; 0x09
    46e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	3f ef       	ldi	r19, 0xFF	; 255
    46ea:	4f e7       	ldi	r20, 0x7F	; 127
    46ec:	57 e4       	ldi	r21, 0x47	; 71
    46ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46f2:	18 16       	cp	r1, r24
    46f4:	4c f5       	brge	.+82     	; 0x4748 <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    46fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e2       	ldi	r20, 0x20	; 32
    4704:	51 e4       	ldi	r21, 0x41	; 65
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	bc 01       	movw	r22, r24
    4710:	cd 01       	movw	r24, r26
    4712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	9e 83       	std	Y+6, r25	; 0x06
    471c:	8d 83       	std	Y+5, r24	; 0x05
    471e:	0f c0       	rjmp	.+30     	; 0x473e <HLCD_sendCmd+0xe4e>
    4720:	88 ec       	ldi	r24, 0xC8	; 200
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	9c 83       	std	Y+4, r25	; 0x04
    4726:	8b 83       	std	Y+3, r24	; 0x03
    4728:	8b 81       	ldd	r24, Y+3	; 0x03
    472a:	9c 81       	ldd	r25, Y+4	; 0x04
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <HLCD_sendCmd+0xe3c>
    4730:	9c 83       	std	Y+4, r25	; 0x04
    4732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4734:	8d 81       	ldd	r24, Y+5	; 0x05
    4736:	9e 81       	ldd	r25, Y+6	; 0x06
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	9e 83       	std	Y+6, r25	; 0x06
    473c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473e:	8d 81       	ldd	r24, Y+5	; 0x05
    4740:	9e 81       	ldd	r25, Y+6	; 0x06
    4742:	00 97       	sbiw	r24, 0x00	; 0
    4744:	69 f7       	brne	.-38     	; 0x4720 <HLCD_sendCmd+0xe30>
    4746:	1a c0       	rjmp	.+52     	; 0x477c <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4748:	6f 81       	ldd	r22, Y+7	; 0x07
    474a:	78 85       	ldd	r23, Y+8	; 0x08
    474c:	89 85       	ldd	r24, Y+9	; 0x09
    474e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	9e 83       	std	Y+6, r25	; 0x06
    475a:	8d 83       	std	Y+5, r24	; 0x05
    475c:	8d 81       	ldd	r24, Y+5	; 0x05
    475e:	9e 81       	ldd	r25, Y+6	; 0x06
    4760:	9a 83       	std	Y+2, r25	; 0x02
    4762:	89 83       	std	Y+1, r24	; 0x01
    4764:	89 81       	ldd	r24, Y+1	; 0x01
    4766:	9a 81       	ldd	r25, Y+2	; 0x02
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	f1 f7       	brne	.-4      	; 0x4768 <HLCD_sendCmd+0xe78>
    476c:	9a 83       	std	Y+2, r25	; 0x02
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	05 c0       	rjmp	.+10     	; 0x477c <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4772:	fe 01       	movw	r30, r28
    4774:	e2 57       	subi	r30, 0x72	; 114
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	83 e0       	ldi	r24, 0x03	; 3
    477a:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    477c:	fe 01       	movw	r30, r28
    477e:	e3 57       	subi	r30, 0x73	; 115
    4780:	ff 4f       	sbci	r31, 0xFF	; 255
    4782:	80 81       	ld	r24, Z
    4784:	88 23       	and	r24, r24
    4786:	29 f4       	brne	.+10     	; 0x4792 <HLCD_sendCmd+0xea2>
    4788:	fe 01       	movw	r30, r28
    478a:	e2 57       	subi	r30, 0x72	; 114
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	10 82       	st	Z, r1
    4790:	0b c0       	rjmp	.+22     	; 0x47a8 <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    4792:	fe 01       	movw	r30, r28
    4794:	e2 57       	subi	r30, 0x72	; 114
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	80 83       	st	Z, r24
    479c:	05 c0       	rjmp	.+10     	; 0x47a8 <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    479e:	fe 01       	movw	r30, r28
    47a0:	e2 57       	subi	r30, 0x72	; 114
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	80 83       	st	Z, r24
	}

	return lcdRet;
    47a8:	fe 01       	movw	r30, r28
    47aa:	e2 57       	subi	r30, 0x72	; 114
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	80 81       	ld	r24, Z
}
    47b0:	c3 56       	subi	r28, 0x63	; 99
    47b2:	df 4f       	sbci	r29, 0xFF	; 255
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	f8 94       	cli
    47b8:	de bf       	out	0x3e, r29	; 62
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	cd bf       	out	0x3d, r28	; 61
    47be:	cf 91       	pop	r28
    47c0:	df 91       	pop	r29
    47c2:	1f 91       	pop	r17
    47c4:	0f 91       	pop	r16
    47c6:	08 95       	ret

000047c8 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    47c8:	0f 93       	push	r16
    47ca:	1f 93       	push	r17
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
    47d4:	cd 59       	subi	r28, 0x9D	; 157
    47d6:	d0 40       	sbci	r29, 0x00	; 0
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
    47e2:	fe 01       	movw	r30, r28
    47e4:	e5 56       	subi	r30, 0x65	; 101
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	91 83       	std	Z+1, r25	; 0x01
    47ea:	80 83       	st	Z, r24
    47ec:	fe 01       	movw	r30, r28
    47ee:	e3 56       	subi	r30, 0x63	; 99
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    47f4:	fe 01       	movw	r30, r28
    47f6:	e2 57       	subi	r30, 0x72	; 114
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    47fe:	fe 01       	movw	r30, r28
    4800:	e3 57       	subi	r30, 0x73	; 115
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4808:	fe 01       	movw	r30, r28
    480a:	e5 56       	subi	r30, 0x65	; 101
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	80 81       	ld	r24, Z
    4810:	91 81       	ldd	r25, Z+1	; 0x01
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	09 f4       	brne	.+2      	; 0x4818 <HLCD_displayChar+0x50>
    4816:	2f c7       	rjmp	.+3678   	; 0x5676 <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4818:	fe 01       	movw	r30, r28
    481a:	e5 56       	subi	r30, 0x65	; 101
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	01 90       	ld	r0, Z+
    4820:	f0 81       	ld	r31, Z
    4822:	e0 2d       	mov	r30, r0
    4824:	81 81       	ldd	r24, Z+1	; 0x01
    4826:	fe 01       	movw	r30, r28
    4828:	e5 56       	subi	r30, 0x65	; 101
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	01 90       	ld	r0, Z+
    482e:	f0 81       	ld	r31, Z
    4830:	e0 2d       	mov	r30, r0
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	fe 01       	movw	r30, r28
    4836:	e1 57       	subi	r30, 0x71	; 113
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 83       	st	Z, r24
    483c:	fe 01       	movw	r30, r28
    483e:	e1 57       	subi	r30, 0x71	; 113
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	fe 01       	movw	r30, r28
    4846:	e1 57       	subi	r30, 0x71	; 113
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	82 83       	std	Z+2, r24	; 0x02
    484e:	fe 01       	movw	r30, r28
    4850:	e1 57       	subi	r30, 0x71	; 113
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4856:	fe 01       	movw	r30, r28
    4858:	e5 56       	subi	r30, 0x65	; 101
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	01 90       	ld	r0, Z+
    485e:	f0 81       	ld	r31, Z
    4860:	e0 2d       	mov	r30, r0
    4862:	81 81       	ldd	r24, Z+1	; 0x01
    4864:	fe 01       	movw	r30, r28
    4866:	e5 56       	subi	r30, 0x65	; 101
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	01 90       	ld	r0, Z+
    486c:	f0 81       	ld	r31, Z
    486e:	e0 2d       	mov	r30, r0
    4870:	94 81       	ldd	r25, Z+4	; 0x04
    4872:	fe 01       	movw	r30, r28
    4874:	ed 56       	subi	r30, 0x6D	; 109
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	80 83       	st	Z, r24
    487a:	fe 01       	movw	r30, r28
    487c:	ed 56       	subi	r30, 0x6D	; 109
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	91 83       	std	Z+1, r25	; 0x01
    4882:	fe 01       	movw	r30, r28
    4884:	ed 56       	subi	r30, 0x6D	; 109
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	82 83       	std	Z+2, r24	; 0x02
    488c:	fe 01       	movw	r30, r28
    488e:	ed 56       	subi	r30, 0x6D	; 109
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4894:	fe 01       	movw	r30, r28
    4896:	e5 56       	subi	r30, 0x65	; 101
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	01 90       	ld	r0, Z+
    489c:	f0 81       	ld	r31, Z
    489e:	e0 2d       	mov	r30, r0
    48a0:	81 81       	ldd	r24, Z+1	; 0x01
    48a2:	fe 01       	movw	r30, r28
    48a4:	e5 56       	subi	r30, 0x65	; 101
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	01 90       	ld	r0, Z+
    48aa:	f0 81       	ld	r31, Z
    48ac:	e0 2d       	mov	r30, r0
    48ae:	95 81       	ldd	r25, Z+5	; 0x05
    48b0:	fe 01       	movw	r30, r28
    48b2:	e9 56       	subi	r30, 0x69	; 105
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	80 83       	st	Z, r24
    48b8:	fe 01       	movw	r30, r28
    48ba:	e9 56       	subi	r30, 0x69	; 105
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	91 83       	std	Z+1, r25	; 0x01
    48c0:	fe 01       	movw	r30, r28
    48c2:	e9 56       	subi	r30, 0x69	; 105
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	82 83       	std	Z+2, r24	; 0x02
    48ca:	fe 01       	movw	r30, r28
    48cc:	e9 56       	subi	r30, 0x69	; 105
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    48d2:	ce 01       	movw	r24, r28
    48d4:	81 57       	subi	r24, 0x71	; 113
    48d6:	9f 4f       	sbci	r25, 0xFF	; 255
    48d8:	61 e0       	ldi	r22, 0x01	; 1
    48da:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    48de:	fe 01       	movw	r30, r28
    48e0:	e3 57       	subi	r30, 0x73	; 115
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    48e6:	fe 01       	movw	r30, r28
    48e8:	e3 57       	subi	r30, 0x73	; 115
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	80 81       	ld	r24, Z
    48ee:	88 23       	and	r24, r24
    48f0:	59 f4       	brne	.+22     	; 0x4908 <HLCD_displayChar+0x140>
    48f2:	ce 01       	movw	r24, r28
    48f4:	8d 56       	subi	r24, 0x6D	; 109
    48f6:	9f 4f       	sbci	r25, 0xFF	; 255
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    48fe:	fe 01       	movw	r30, r28
    4900:	e3 57       	subi	r30, 0x73	; 115
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	80 83       	st	Z, r24
    4906:	05 c0       	rjmp	.+10     	; 0x4912 <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    4908:	fe 01       	movw	r30, r28
    490a:	e2 57       	subi	r30, 0x72	; 114
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	80 83       	st	Z, r24
    4912:	fe 01       	movw	r30, r28
    4914:	e7 57       	subi	r30, 0x77	; 119
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	80 e0       	ldi	r24, 0x00	; 0
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	a0 ef       	ldi	r26, 0xF0	; 240
    491e:	b1 e4       	ldi	r27, 0x41	; 65
    4920:	80 83       	st	Z, r24
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	a2 83       	std	Z+2, r26	; 0x02
    4926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4928:	8e 01       	movw	r16, r28
    492a:	0b 57       	subi	r16, 0x7B	; 123
    492c:	1f 4f       	sbci	r17, 0xFF	; 255
    492e:	fe 01       	movw	r30, r28
    4930:	e7 57       	subi	r30, 0x77	; 119
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	60 81       	ld	r22, Z
    4936:	71 81       	ldd	r23, Z+1	; 0x01
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a ef       	ldi	r20, 0xFA	; 250
    4942:	54 e4       	ldi	r21, 0x44	; 68
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	f8 01       	movw	r30, r16
    494e:	80 83       	st	Z, r24
    4950:	91 83       	std	Z+1, r25	; 0x01
    4952:	a2 83       	std	Z+2, r26	; 0x02
    4954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4956:	fe 01       	movw	r30, r28
    4958:	eb 57       	subi	r30, 0x7B	; 123
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	60 81       	ld	r22, Z
    495e:	71 81       	ldd	r23, Z+1	; 0x01
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	93 81       	ldd	r25, Z+3	; 0x03
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	40 e8       	ldi	r20, 0x80	; 128
    496a:	5f e3       	ldi	r21, 0x3F	; 63
    496c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4970:	88 23       	and	r24, r24
    4972:	44 f4       	brge	.+16     	; 0x4984 <HLCD_displayChar+0x1bc>
		__ticks = 1;
    4974:	fe 01       	movw	r30, r28
    4976:	ed 57       	subi	r30, 0x7D	; 125
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	80 83       	st	Z, r24
    4982:	64 c0       	rjmp	.+200    	; 0x4a4c <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    4984:	fe 01       	movw	r30, r28
    4986:	eb 57       	subi	r30, 0x7B	; 123
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	60 81       	ld	r22, Z
    498c:	71 81       	ldd	r23, Z+1	; 0x01
    498e:	82 81       	ldd	r24, Z+2	; 0x02
    4990:	93 81       	ldd	r25, Z+3	; 0x03
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	3f ef       	ldi	r19, 0xFF	; 255
    4996:	4f e7       	ldi	r20, 0x7F	; 127
    4998:	57 e4       	ldi	r21, 0x47	; 71
    499a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    499e:	18 16       	cp	r1, r24
    49a0:	0c f0       	brlt	.+2      	; 0x49a4 <HLCD_displayChar+0x1dc>
    49a2:	43 c0       	rjmp	.+134    	; 0x4a2a <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a4:	fe 01       	movw	r30, r28
    49a6:	e7 57       	subi	r30, 0x77	; 119
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	40 e2       	ldi	r20, 0x20	; 32
    49b8:	51 e4       	ldi	r21, 0x41	; 65
    49ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	8e 01       	movw	r16, r28
    49c4:	0d 57       	subi	r16, 0x7D	; 125
    49c6:	1f 4f       	sbci	r17, 0xFF	; 255
    49c8:	bc 01       	movw	r22, r24
    49ca:	cd 01       	movw	r24, r26
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	f8 01       	movw	r30, r16
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
    49da:	1f c0       	rjmp	.+62     	; 0x4a1a <HLCD_displayChar+0x252>
    49dc:	fe 01       	movw	r30, r28
    49de:	ef 57       	subi	r30, 0x7F	; 127
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	88 ec       	ldi	r24, 0xC8	; 200
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	80 83       	st	Z, r24
    49ea:	fe 01       	movw	r30, r28
    49ec:	ef 57       	subi	r30, 0x7F	; 127
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	80 81       	ld	r24, Z
    49f2:	91 81       	ldd	r25, Z+1	; 0x01
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <HLCD_displayChar+0x22c>
    49f8:	fe 01       	movw	r30, r28
    49fa:	ef 57       	subi	r30, 0x7F	; 127
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	91 83       	std	Z+1, r25	; 0x01
    4a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a02:	de 01       	movw	r26, r28
    4a04:	ad 57       	subi	r26, 0x7D	; 125
    4a06:	bf 4f       	sbci	r27, 0xFF	; 255
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ed 57       	subi	r30, 0x7D	; 125
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	80 81       	ld	r24, Z
    4a10:	91 81       	ldd	r25, Z+1	; 0x01
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	11 96       	adiw	r26, 0x01	; 1
    4a16:	9c 93       	st	X, r25
    4a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	ed 57       	subi	r30, 0x7D	; 125
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	91 81       	ldd	r25, Z+1	; 0x01
    4a24:	00 97       	sbiw	r24, 0x00	; 0
    4a26:	d1 f6       	brne	.-76     	; 0x49dc <HLCD_displayChar+0x214>
    4a28:	28 c0       	rjmp	.+80     	; 0x4a7a <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2a:	8e 01       	movw	r16, r28
    4a2c:	0d 57       	subi	r16, 0x7D	; 125
    4a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a30:	fe 01       	movw	r30, r28
    4a32:	eb 57       	subi	r30, 0x7B	; 123
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	60 81       	ld	r22, Z
    4a38:	71 81       	ldd	r23, Z+1	; 0x01
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a42:	dc 01       	movw	r26, r24
    4a44:	cb 01       	movw	r24, r22
    4a46:	f8 01       	movw	r30, r16
    4a48:	91 83       	std	Z+1, r25	; 0x01
    4a4a:	80 83       	st	Z, r24
    4a4c:	de 01       	movw	r26, r28
    4a4e:	a1 58       	subi	r26, 0x81	; 129
    4a50:	bf 4f       	sbci	r27, 0xFF	; 255
    4a52:	fe 01       	movw	r30, r28
    4a54:	ed 57       	subi	r30, 0x7D	; 125
    4a56:	ff 4f       	sbci	r31, 0xFF	; 255
    4a58:	80 81       	ld	r24, Z
    4a5a:	91 81       	ldd	r25, Z+1	; 0x01
    4a5c:	11 96       	adiw	r26, 0x01	; 1
    4a5e:	9c 93       	st	X, r25
    4a60:	8e 93       	st	-X, r24
    4a62:	fe 01       	movw	r30, r28
    4a64:	e1 58       	subi	r30, 0x81	; 129
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	80 81       	ld	r24, Z
    4a6a:	91 81       	ldd	r25, Z+1	; 0x01
    4a6c:	01 97       	sbiw	r24, 0x01	; 1
    4a6e:	f1 f7       	brne	.-4      	; 0x4a6c <HLCD_displayChar+0x2a4>
    4a70:	fe 01       	movw	r30, r28
    4a72:	e1 58       	subi	r30, 0x81	; 129
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	91 83       	std	Z+1, r25	; 0x01
    4a78:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4a7a:	fe 01       	movw	r30, r28
    4a7c:	e5 56       	subi	r30, 0x65	; 101
    4a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a80:	01 90       	ld	r0, Z+
    4a82:	f0 81       	ld	r31, Z
    4a84:	e0 2d       	mov	r30, r0
    4a86:	80 81       	ld	r24, Z
    4a88:	88 23       	and	r24, r24
    4a8a:	09 f0       	breq	.+2      	; 0x4a8e <HLCD_displayChar+0x2c6>
    4a8c:	3d c4       	rjmp	.+2170   	; 0x5308 <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e3 57       	subi	r30, 0x73	; 115
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	88 23       	and	r24, r24
    4a98:	59 f4       	brne	.+22     	; 0x4ab0 <HLCD_displayChar+0x2e8>
    4a9a:	ce 01       	movw	r24, r28
    4a9c:	89 56       	subi	r24, 0x69	; 105
    4a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa0:	61 e0       	ldi	r22, 0x01	; 1
    4aa2:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	e3 57       	subi	r30, 0x73	; 115
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	80 83       	st	Z, r24
    4aae:	05 c0       	rjmp	.+10     	; 0x4aba <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	e2 57       	subi	r30, 0x72	; 114
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	80 83       	st	Z, r24
    4aba:	fe 01       	movw	r30, r28
    4abc:	e5 58       	subi	r30, 0x85	; 133
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	a0 ef       	ldi	r26, 0xF0	; 240
    4ac6:	b1 e4       	ldi	r27, 0x41	; 65
    4ac8:	80 83       	st	Z, r24
    4aca:	91 83       	std	Z+1, r25	; 0x01
    4acc:	a2 83       	std	Z+2, r26	; 0x02
    4ace:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad0:	8e 01       	movw	r16, r28
    4ad2:	09 58       	subi	r16, 0x89	; 137
    4ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	e5 58       	subi	r30, 0x85	; 133
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	60 81       	ld	r22, Z
    4ade:	71 81       	ldd	r23, Z+1	; 0x01
    4ae0:	82 81       	ldd	r24, Z+2	; 0x02
    4ae2:	93 81       	ldd	r25, Z+3	; 0x03
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	4a ef       	ldi	r20, 0xFA	; 250
    4aea:	54 e4       	ldi	r21, 0x44	; 68
    4aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	f8 01       	movw	r30, r16
    4af6:	80 83       	st	Z, r24
    4af8:	91 83       	std	Z+1, r25	; 0x01
    4afa:	a2 83       	std	Z+2, r26	; 0x02
    4afc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4afe:	fe 01       	movw	r30, r28
    4b00:	e9 58       	subi	r30, 0x89	; 137
    4b02:	ff 4f       	sbci	r31, 0xFF	; 255
    4b04:	60 81       	ld	r22, Z
    4b06:	71 81       	ldd	r23, Z+1	; 0x01
    4b08:	82 81       	ldd	r24, Z+2	; 0x02
    4b0a:	93 81       	ldd	r25, Z+3	; 0x03
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e8       	ldi	r20, 0x80	; 128
    4b12:	5f e3       	ldi	r21, 0x3F	; 63
    4b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b18:	88 23       	and	r24, r24
    4b1a:	44 f4       	brge	.+16     	; 0x4b2c <HLCD_displayChar+0x364>
		__ticks = 1;
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	eb 58       	subi	r30, 0x8B	; 139
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	91 83       	std	Z+1, r25	; 0x01
    4b28:	80 83       	st	Z, r24
    4b2a:	64 c0       	rjmp	.+200    	; 0x4bf4 <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e9 58       	subi	r30, 0x89	; 137
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	60 81       	ld	r22, Z
    4b34:	71 81       	ldd	r23, Z+1	; 0x01
    4b36:	82 81       	ldd	r24, Z+2	; 0x02
    4b38:	93 81       	ldd	r25, Z+3	; 0x03
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	3f ef       	ldi	r19, 0xFF	; 255
    4b3e:	4f e7       	ldi	r20, 0x7F	; 127
    4b40:	57 e4       	ldi	r21, 0x47	; 71
    4b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b46:	18 16       	cp	r1, r24
    4b48:	0c f0       	brlt	.+2      	; 0x4b4c <HLCD_displayChar+0x384>
    4b4a:	43 c0       	rjmp	.+134    	; 0x4bd2 <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e5 58       	subi	r30, 0x85	; 133
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	60 81       	ld	r22, Z
    4b54:	71 81       	ldd	r23, Z+1	; 0x01
    4b56:	82 81       	ldd	r24, Z+2	; 0x02
    4b58:	93 81       	ldd	r25, Z+3	; 0x03
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	40 e2       	ldi	r20, 0x20	; 32
    4b60:	51 e4       	ldi	r21, 0x41	; 65
    4b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b66:	dc 01       	movw	r26, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	8e 01       	movw	r16, r28
    4b6c:	0b 58       	subi	r16, 0x8B	; 139
    4b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	f8 01       	movw	r30, r16
    4b7e:	91 83       	std	Z+1, r25	; 0x01
    4b80:	80 83       	st	Z, r24
    4b82:	1f c0       	rjmp	.+62     	; 0x4bc2 <HLCD_displayChar+0x3fa>
    4b84:	fe 01       	movw	r30, r28
    4b86:	ed 58       	subi	r30, 0x8D	; 141
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	88 ec       	ldi	r24, 0xC8	; 200
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	80 83       	st	Z, r24
    4b92:	fe 01       	movw	r30, r28
    4b94:	ed 58       	subi	r30, 0x8D	; 141
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <HLCD_displayChar+0x3d4>
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	ed 58       	subi	r30, 0x8D	; 141
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4baa:	de 01       	movw	r26, r28
    4bac:	ab 58       	subi	r26, 0x8B	; 139
    4bae:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	eb 58       	subi	r30, 0x8B	; 139
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	80 81       	ld	r24, Z
    4bb8:	91 81       	ldd	r25, Z+1	; 0x01
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	11 96       	adiw	r26, 0x01	; 1
    4bbe:	9c 93       	st	X, r25
    4bc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	eb 58       	subi	r30, 0x8B	; 139
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	80 81       	ld	r24, Z
    4bca:	91 81       	ldd	r25, Z+1	; 0x01
    4bcc:	00 97       	sbiw	r24, 0x00	; 0
    4bce:	d1 f6       	brne	.-76     	; 0x4b84 <HLCD_displayChar+0x3bc>
    4bd0:	27 c0       	rjmp	.+78     	; 0x4c20 <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd2:	8e 01       	movw	r16, r28
    4bd4:	0b 58       	subi	r16, 0x8B	; 139
    4bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd8:	fe 01       	movw	r30, r28
    4bda:	e9 58       	subi	r30, 0x89	; 137
    4bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bde:	60 81       	ld	r22, Z
    4be0:	71 81       	ldd	r23, Z+1	; 0x01
    4be2:	82 81       	ldd	r24, Z+2	; 0x02
    4be4:	93 81       	ldd	r25, Z+3	; 0x03
    4be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	f8 01       	movw	r30, r16
    4bf0:	91 83       	std	Z+1, r25	; 0x01
    4bf2:	80 83       	st	Z, r24
    4bf4:	de 01       	movw	r26, r28
    4bf6:	af 58       	subi	r26, 0x8F	; 143
    4bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	eb 58       	subi	r30, 0x8B	; 139
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	8d 93       	st	X+, r24
    4c06:	9c 93       	st	X, r25
    4c08:	fe 01       	movw	r30, r28
    4c0a:	ef 58       	subi	r30, 0x8F	; 143
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	80 81       	ld	r24, Z
    4c10:	91 81       	ldd	r25, Z+1	; 0x01
    4c12:	01 97       	sbiw	r24, 0x01	; 1
    4c14:	f1 f7       	brne	.-4      	; 0x4c12 <HLCD_displayChar+0x44a>
    4c16:	fe 01       	movw	r30, r28
    4c18:	ef 58       	subi	r30, 0x8F	; 143
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	91 83       	std	Z+1, r25	; 0x01
    4c1e:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    4c20:	fe 01       	movw	r30, r28
    4c22:	e5 56       	subi	r30, 0x65	; 101
    4c24:	ff 4f       	sbci	r31, 0xFF	; 255
    4c26:	01 90       	ld	r0, Z+
    4c28:	f0 81       	ld	r31, Z
    4c2a:	e0 2d       	mov	r30, r0
    4c2c:	22 81       	ldd	r18, Z+2	; 0x02
    4c2e:	fe 01       	movw	r30, r28
    4c30:	e3 56       	subi	r30, 0x63	; 99
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	80 81       	ld	r24, Z
    4c36:	98 2f       	mov	r25, r24
    4c38:	92 95       	swap	r25
    4c3a:	9f 70       	andi	r25, 0x0F	; 15
    4c3c:	82 2f       	mov	r24, r18
    4c3e:	69 2f       	mov	r22, r25
    4c40:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GPIO_set4msbValue>
    4c44:	fe 01       	movw	r30, r28
    4c46:	e3 59       	subi	r30, 0x93	; 147
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	a0 ef       	ldi	r26, 0xF0	; 240
    4c50:	b1 e4       	ldi	r27, 0x41	; 65
    4c52:	80 83       	st	Z, r24
    4c54:	91 83       	std	Z+1, r25	; 0x01
    4c56:	a2 83       	std	Z+2, r26	; 0x02
    4c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5a:	8e 01       	movw	r16, r28
    4c5c:	07 59       	subi	r16, 0x97	; 151
    4c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c60:	fe 01       	movw	r30, r28
    4c62:	e3 59       	subi	r30, 0x93	; 147
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	60 81       	ld	r22, Z
    4c68:	71 81       	ldd	r23, Z+1	; 0x01
    4c6a:	82 81       	ldd	r24, Z+2	; 0x02
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a ef       	ldi	r20, 0xFA	; 250
    4c74:	54 e4       	ldi	r21, 0x44	; 68
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	f8 01       	movw	r30, r16
    4c80:	80 83       	st	Z, r24
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	a2 83       	std	Z+2, r26	; 0x02
    4c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e7 59       	subi	r30, 0x97	; 151
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	60 81       	ld	r22, Z
    4c90:	71 81       	ldd	r23, Z+1	; 0x01
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e8       	ldi	r20, 0x80	; 128
    4c9c:	5f e3       	ldi	r21, 0x3F	; 63
    4c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	44 f4       	brge	.+16     	; 0x4cb6 <HLCD_displayChar+0x4ee>
		__ticks = 1;
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e9 59       	subi	r30, 0x99	; 153
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	64 c0       	rjmp	.+200    	; 0x4d7e <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e7 59       	subi	r30, 0x97	; 151
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	3f ef       	ldi	r19, 0xFF	; 255
    4cc8:	4f e7       	ldi	r20, 0x7F	; 127
    4cca:	57 e4       	ldi	r21, 0x47	; 71
    4ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cd0:	18 16       	cp	r1, r24
    4cd2:	0c f0       	brlt	.+2      	; 0x4cd6 <HLCD_displayChar+0x50e>
    4cd4:	43 c0       	rjmp	.+134    	; 0x4d5c <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e3 59       	subi	r30, 0x93	; 147
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e2       	ldi	r20, 0x20	; 32
    4cea:	51 e4       	ldi	r21, 0x41	; 65
    4cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8e 01       	movw	r16, r28
    4cf6:	09 59       	subi	r16, 0x99	; 153
    4cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfa:	bc 01       	movw	r22, r24
    4cfc:	cd 01       	movw	r24, r26
    4cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	f8 01       	movw	r30, r16
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	1f c0       	rjmp	.+62     	; 0x4d4c <HLCD_displayChar+0x584>
    4d0e:	fe 01       	movw	r30, r28
    4d10:	eb 59       	subi	r30, 0x9B	; 155
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	88 ec       	ldi	r24, 0xC8	; 200
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	eb 59       	subi	r30, 0x9B	; 155
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <HLCD_displayChar+0x55e>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	eb 59       	subi	r30, 0x9B	; 155
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d34:	de 01       	movw	r26, r28
    4d36:	a9 59       	subi	r26, 0x99	; 153
    4d38:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e9 59       	subi	r30, 0x99	; 153
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	11 96       	adiw	r26, 0x01	; 1
    4d48:	9c 93       	st	X, r25
    4d4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e9 59       	subi	r30, 0x99	; 153
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	80 81       	ld	r24, Z
    4d54:	91 81       	ldd	r25, Z+1	; 0x01
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	d1 f6       	brne	.-76     	; 0x4d0e <HLCD_displayChar+0x546>
    4d5a:	28 c0       	rjmp	.+80     	; 0x4dac <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	09 59       	subi	r16, 0x99	; 153
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	fe 01       	movw	r30, r28
    4d64:	e7 59       	subi	r30, 0x97	; 151
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	60 81       	ld	r22, Z
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	93 81       	ldd	r25, Z+3	; 0x03
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	f8 01       	movw	r30, r16
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	de 01       	movw	r26, r28
    4d80:	ad 59       	subi	r26, 0x9D	; 157
    4d82:	bf 4f       	sbci	r27, 0xFF	; 255
    4d84:	fe 01       	movw	r30, r28
    4d86:	e9 59       	subi	r30, 0x99	; 153
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	11 96       	adiw	r26, 0x01	; 1
    4d90:	9c 93       	st	X, r25
    4d92:	8e 93       	st	-X, r24
    4d94:	fe 01       	movw	r30, r28
    4d96:	ed 59       	subi	r30, 0x9D	; 157
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	01 97       	sbiw	r24, 0x01	; 1
    4da0:	f1 f7       	brne	.-4      	; 0x4d9e <HLCD_displayChar+0x5d6>
    4da2:	fe 01       	movw	r30, r28
    4da4:	ed 59       	subi	r30, 0x9D	; 157
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	91 83       	std	Z+1, r25	; 0x01
    4daa:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4dac:	fe 01       	movw	r30, r28
    4dae:	e3 57       	subi	r30, 0x73	; 115
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	80 81       	ld	r24, Z
    4db4:	88 23       	and	r24, r24
    4db6:	59 f4       	brne	.+22     	; 0x4dce <HLCD_displayChar+0x606>
    4db8:	ce 01       	movw	r24, r28
    4dba:	89 56       	subi	r24, 0x69	; 105
    4dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dbe:	60 e0       	ldi	r22, 0x00	; 0
    4dc0:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	e3 57       	subi	r30, 0x73	; 115
    4dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dca:	80 83       	st	Z, r24
    4dcc:	05 c0       	rjmp	.+10     	; 0x4dd8 <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    4dce:	fe 01       	movw	r30, r28
    4dd0:	e2 57       	subi	r30, 0x72	; 114
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	80 83       	st	Z, r24
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e1 5a       	subi	r30, 0xA1	; 161
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	a0 ef       	ldi	r26, 0xF0	; 240
    4de4:	b1 e4       	ldi	r27, 0x41	; 65
    4de6:	80 83       	st	Z, r24
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	a2 83       	std	Z+2, r26	; 0x02
    4dec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dee:	8e 01       	movw	r16, r28
    4df0:	05 5a       	subi	r16, 0xA5	; 165
    4df2:	1f 4f       	sbci	r17, 0xFF	; 255
    4df4:	fe 01       	movw	r30, r28
    4df6:	e1 5a       	subi	r30, 0xA1	; 161
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	60 81       	ld	r22, Z
    4dfc:	71 81       	ldd	r23, Z+1	; 0x01
    4dfe:	82 81       	ldd	r24, Z+2	; 0x02
    4e00:	93 81       	ldd	r25, Z+3	; 0x03
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	4a ef       	ldi	r20, 0xFA	; 250
    4e08:	54 e4       	ldi	r21, 0x44	; 68
    4e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	f8 01       	movw	r30, r16
    4e14:	80 83       	st	Z, r24
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	a2 83       	std	Z+2, r26	; 0x02
    4e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e5 5a       	subi	r30, 0xA5	; 165
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	60 81       	ld	r22, Z
    4e24:	71 81       	ldd	r23, Z+1	; 0x01
    4e26:	82 81       	ldd	r24, Z+2	; 0x02
    4e28:	93 81       	ldd	r25, Z+3	; 0x03
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	40 e8       	ldi	r20, 0x80	; 128
    4e30:	5f e3       	ldi	r21, 0x3F	; 63
    4e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e36:	88 23       	and	r24, r24
    4e38:	44 f4       	brge	.+16     	; 0x4e4a <HLCD_displayChar+0x682>
		__ticks = 1;
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e7 5a       	subi	r30, 0xA7	; 167
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	91 83       	std	Z+1, r25	; 0x01
    4e46:	80 83       	st	Z, r24
    4e48:	64 c0       	rjmp	.+200    	; 0x4f12 <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	e5 5a       	subi	r30, 0xA5	; 165
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	60 81       	ld	r22, Z
    4e52:	71 81       	ldd	r23, Z+1	; 0x01
    4e54:	82 81       	ldd	r24, Z+2	; 0x02
    4e56:	93 81       	ldd	r25, Z+3	; 0x03
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	3f ef       	ldi	r19, 0xFF	; 255
    4e5c:	4f e7       	ldi	r20, 0x7F	; 127
    4e5e:	57 e4       	ldi	r21, 0x47	; 71
    4e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e64:	18 16       	cp	r1, r24
    4e66:	0c f0       	brlt	.+2      	; 0x4e6a <HLCD_displayChar+0x6a2>
    4e68:	43 c0       	rjmp	.+134    	; 0x4ef0 <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	e1 5a       	subi	r30, 0xA1	; 161
    4e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e70:	60 81       	ld	r22, Z
    4e72:	71 81       	ldd	r23, Z+1	; 0x01
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e2       	ldi	r20, 0x20	; 32
    4e7e:	51 e4       	ldi	r21, 0x41	; 65
    4e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	8e 01       	movw	r16, r28
    4e8a:	07 5a       	subi	r16, 0xA7	; 167
    4e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8e:	bc 01       	movw	r22, r24
    4e90:	cd 01       	movw	r24, r26
    4e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	f8 01       	movw	r30, r16
    4e9c:	91 83       	std	Z+1, r25	; 0x01
    4e9e:	80 83       	st	Z, r24
    4ea0:	1f c0       	rjmp	.+62     	; 0x4ee0 <HLCD_displayChar+0x718>
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e9 5a       	subi	r30, 0xA9	; 169
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	88 ec       	ldi	r24, 0xC8	; 200
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	91 83       	std	Z+1, r25	; 0x01
    4eae:	80 83       	st	Z, r24
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	e9 5a       	subi	r30, 0xA9	; 169
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	80 81       	ld	r24, Z
    4eb8:	91 81       	ldd	r25, Z+1	; 0x01
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	f1 f7       	brne	.-4      	; 0x4eba <HLCD_displayChar+0x6f2>
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e9 5a       	subi	r30, 0xA9	; 169
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec8:	de 01       	movw	r26, r28
    4eca:	a7 5a       	subi	r26, 0xA7	; 167
    4ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    4ece:	fe 01       	movw	r30, r28
    4ed0:	e7 5a       	subi	r30, 0xA7	; 167
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	11 96       	adiw	r26, 0x01	; 1
    4edc:	9c 93       	st	X, r25
    4ede:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e7 5a       	subi	r30, 0xA7	; 167
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	00 97       	sbiw	r24, 0x00	; 0
    4eec:	d1 f6       	brne	.-76     	; 0x4ea2 <HLCD_displayChar+0x6da>
    4eee:	28 c0       	rjmp	.+80     	; 0x4f40 <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef0:	8e 01       	movw	r16, r28
    4ef2:	07 5a       	subi	r16, 0xA7	; 167
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	fe 01       	movw	r30, r28
    4ef8:	e5 5a       	subi	r30, 0xA5	; 165
    4efa:	ff 4f       	sbci	r31, 0xFF	; 255
    4efc:	60 81       	ld	r22, Z
    4efe:	71 81       	ldd	r23, Z+1	; 0x01
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	93 81       	ldd	r25, Z+3	; 0x03
    4f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	cb 01       	movw	r24, r22
    4f0c:	f8 01       	movw	r30, r16
    4f0e:	91 83       	std	Z+1, r25	; 0x01
    4f10:	80 83       	st	Z, r24
    4f12:	de 01       	movw	r26, r28
    4f14:	ab 5a       	subi	r26, 0xAB	; 171
    4f16:	bf 4f       	sbci	r27, 0xFF	; 255
    4f18:	fe 01       	movw	r30, r28
    4f1a:	e7 5a       	subi	r30, 0xA7	; 167
    4f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1e:	80 81       	ld	r24, Z
    4f20:	91 81       	ldd	r25, Z+1	; 0x01
    4f22:	11 96       	adiw	r26, 0x01	; 1
    4f24:	9c 93       	st	X, r25
    4f26:	8e 93       	st	-X, r24
    4f28:	fe 01       	movw	r30, r28
    4f2a:	eb 5a       	subi	r30, 0xAB	; 171
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	80 81       	ld	r24, Z
    4f30:	91 81       	ldd	r25, Z+1	; 0x01
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <HLCD_displayChar+0x76a>
    4f36:	fe 01       	movw	r30, r28
    4f38:	eb 5a       	subi	r30, 0xAB	; 171
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	91 83       	std	Z+1, r25	; 0x01
    4f3e:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    4f40:	fe 01       	movw	r30, r28
    4f42:	e3 57       	subi	r30, 0x73	; 115
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	80 81       	ld	r24, Z
    4f48:	88 23       	and	r24, r24
    4f4a:	59 f4       	brne	.+22     	; 0x4f62 <HLCD_displayChar+0x79a>
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	89 56       	subi	r24, 0x69	; 105
    4f50:	9f 4f       	sbci	r25, 0xFF	; 255
    4f52:	61 e0       	ldi	r22, 0x01	; 1
    4f54:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e3 57       	subi	r30, 0x73	; 115
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	80 83       	st	Z, r24
    4f60:	05 c0       	rjmp	.+10     	; 0x4f6c <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    4f62:	fe 01       	movw	r30, r28
    4f64:	e2 57       	subi	r30, 0x72	; 114
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	80 83       	st	Z, r24
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	ef 5a       	subi	r30, 0xAF	; 175
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	a0 ef       	ldi	r26, 0xF0	; 240
    4f78:	b1 e4       	ldi	r27, 0x41	; 65
    4f7a:	80 83       	st	Z, r24
    4f7c:	91 83       	std	Z+1, r25	; 0x01
    4f7e:	a2 83       	std	Z+2, r26	; 0x02
    4f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f82:	8e 01       	movw	r16, r28
    4f84:	03 5b       	subi	r16, 0xB3	; 179
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	fe 01       	movw	r30, r28
    4f8a:	ef 5a       	subi	r30, 0xAF	; 175
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	60 81       	ld	r22, Z
    4f90:	71 81       	ldd	r23, Z+1	; 0x01
    4f92:	82 81       	ldd	r24, Z+2	; 0x02
    4f94:	93 81       	ldd	r25, Z+3	; 0x03
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	4a ef       	ldi	r20, 0xFA	; 250
    4f9c:	54 e4       	ldi	r21, 0x44	; 68
    4f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	80 83       	st	Z, r24
    4faa:	91 83       	std	Z+1, r25	; 0x01
    4fac:	a2 83       	std	Z+2, r26	; 0x02
    4fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e3 5b       	subi	r30, 0xB3	; 179
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	60 81       	ld	r22, Z
    4fb8:	71 81       	ldd	r23, Z+1	; 0x01
    4fba:	82 81       	ldd	r24, Z+2	; 0x02
    4fbc:	93 81       	ldd	r25, Z+3	; 0x03
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e8       	ldi	r20, 0x80	; 128
    4fc4:	5f e3       	ldi	r21, 0x3F	; 63
    4fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fca:	88 23       	and	r24, r24
    4fcc:	44 f4       	brge	.+16     	; 0x4fde <HLCD_displayChar+0x816>
		__ticks = 1;
    4fce:	fe 01       	movw	r30, r28
    4fd0:	e5 5b       	subi	r30, 0xB5	; 181
    4fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
    4fdc:	64 c0       	rjmp	.+200    	; 0x50a6 <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    4fde:	fe 01       	movw	r30, r28
    4fe0:	e3 5b       	subi	r30, 0xB3	; 179
    4fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe4:	60 81       	ld	r22, Z
    4fe6:	71 81       	ldd	r23, Z+1	; 0x01
    4fe8:	82 81       	ldd	r24, Z+2	; 0x02
    4fea:	93 81       	ldd	r25, Z+3	; 0x03
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	3f ef       	ldi	r19, 0xFF	; 255
    4ff0:	4f e7       	ldi	r20, 0x7F	; 127
    4ff2:	57 e4       	ldi	r21, 0x47	; 71
    4ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ff8:	18 16       	cp	r1, r24
    4ffa:	0c f0       	brlt	.+2      	; 0x4ffe <HLCD_displayChar+0x836>
    4ffc:	43 c0       	rjmp	.+134    	; 0x5084 <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ffe:	fe 01       	movw	r30, r28
    5000:	ef 5a       	subi	r30, 0xAF	; 175
    5002:	ff 4f       	sbci	r31, 0xFF	; 255
    5004:	60 81       	ld	r22, Z
    5006:	71 81       	ldd	r23, Z+1	; 0x01
    5008:	82 81       	ldd	r24, Z+2	; 0x02
    500a:	93 81       	ldd	r25, Z+3	; 0x03
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	40 e2       	ldi	r20, 0x20	; 32
    5012:	51 e4       	ldi	r21, 0x41	; 65
    5014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5018:	dc 01       	movw	r26, r24
    501a:	cb 01       	movw	r24, r22
    501c:	8e 01       	movw	r16, r28
    501e:	05 5b       	subi	r16, 0xB5	; 181
    5020:	1f 4f       	sbci	r17, 0xFF	; 255
    5022:	bc 01       	movw	r22, r24
    5024:	cd 01       	movw	r24, r26
    5026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	f8 01       	movw	r30, r16
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	80 83       	st	Z, r24
    5034:	1f c0       	rjmp	.+62     	; 0x5074 <HLCD_displayChar+0x8ac>
    5036:	fe 01       	movw	r30, r28
    5038:	e7 5b       	subi	r30, 0xB7	; 183
    503a:	ff 4f       	sbci	r31, 0xFF	; 255
    503c:	88 ec       	ldi	r24, 0xC8	; 200
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	91 83       	std	Z+1, r25	; 0x01
    5042:	80 83       	st	Z, r24
    5044:	fe 01       	movw	r30, r28
    5046:	e7 5b       	subi	r30, 0xB7	; 183
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <HLCD_displayChar+0x886>
    5052:	fe 01       	movw	r30, r28
    5054:	e7 5b       	subi	r30, 0xB7	; 183
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	91 83       	std	Z+1, r25	; 0x01
    505a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505c:	de 01       	movw	r26, r28
    505e:	a5 5b       	subi	r26, 0xB5	; 181
    5060:	bf 4f       	sbci	r27, 0xFF	; 255
    5062:	fe 01       	movw	r30, r28
    5064:	e5 5b       	subi	r30, 0xB5	; 181
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	80 81       	ld	r24, Z
    506a:	91 81       	ldd	r25, Z+1	; 0x01
    506c:	01 97       	sbiw	r24, 0x01	; 1
    506e:	11 96       	adiw	r26, 0x01	; 1
    5070:	9c 93       	st	X, r25
    5072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5074:	fe 01       	movw	r30, r28
    5076:	e5 5b       	subi	r30, 0xB5	; 181
    5078:	ff 4f       	sbci	r31, 0xFF	; 255
    507a:	80 81       	ld	r24, Z
    507c:	91 81       	ldd	r25, Z+1	; 0x01
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	d1 f6       	brne	.-76     	; 0x5036 <HLCD_displayChar+0x86e>
    5082:	27 c0       	rjmp	.+78     	; 0x50d2 <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	8e 01       	movw	r16, r28
    5086:	05 5b       	subi	r16, 0xB5	; 181
    5088:	1f 4f       	sbci	r17, 0xFF	; 255
    508a:	fe 01       	movw	r30, r28
    508c:	e3 5b       	subi	r30, 0xB3	; 179
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	60 81       	ld	r22, Z
    5092:	71 81       	ldd	r23, Z+1	; 0x01
    5094:	82 81       	ldd	r24, Z+2	; 0x02
    5096:	93 81       	ldd	r25, Z+3	; 0x03
    5098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509c:	dc 01       	movw	r26, r24
    509e:	cb 01       	movw	r24, r22
    50a0:	f8 01       	movw	r30, r16
    50a2:	91 83       	std	Z+1, r25	; 0x01
    50a4:	80 83       	st	Z, r24
    50a6:	de 01       	movw	r26, r28
    50a8:	a9 5b       	subi	r26, 0xB9	; 185
    50aa:	bf 4f       	sbci	r27, 0xFF	; 255
    50ac:	fe 01       	movw	r30, r28
    50ae:	e5 5b       	subi	r30, 0xB5	; 181
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	8d 93       	st	X+, r24
    50b8:	9c 93       	st	X, r25
    50ba:	fe 01       	movw	r30, r28
    50bc:	e9 5b       	subi	r30, 0xB9	; 185
    50be:	ff 4f       	sbci	r31, 0xFF	; 255
    50c0:	80 81       	ld	r24, Z
    50c2:	91 81       	ldd	r25, Z+1	; 0x01
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	f1 f7       	brne	.-4      	; 0x50c4 <HLCD_displayChar+0x8fc>
    50c8:	fe 01       	movw	r30, r28
    50ca:	e9 5b       	subi	r30, 0xB9	; 185
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	91 83       	std	Z+1, r25	; 0x01
    50d0:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    50d2:	fe 01       	movw	r30, r28
    50d4:	e5 56       	subi	r30, 0x65	; 101
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	01 90       	ld	r0, Z+
    50da:	f0 81       	ld	r31, Z
    50dc:	e0 2d       	mov	r30, r0
    50de:	82 81       	ldd	r24, Z+2	; 0x02
    50e0:	fe 01       	movw	r30, r28
    50e2:	e3 56       	subi	r30, 0x63	; 99
    50e4:	ff 4f       	sbci	r31, 0xFF	; 255
    50e6:	60 81       	ld	r22, Z
    50e8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GPIO_set4msbValue>
    50ec:	fe 01       	movw	r30, r28
    50ee:	ed 5b       	subi	r30, 0xBD	; 189
    50f0:	ff 4f       	sbci	r31, 0xFF	; 255
    50f2:	80 e0       	ldi	r24, 0x00	; 0
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	a0 ef       	ldi	r26, 0xF0	; 240
    50f8:	b1 e4       	ldi	r27, 0x41	; 65
    50fa:	80 83       	st	Z, r24
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	a2 83       	std	Z+2, r26	; 0x02
    5100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5102:	8e 01       	movw	r16, r28
    5104:	01 5c       	subi	r16, 0xC1	; 193
    5106:	1f 4f       	sbci	r17, 0xFF	; 255
    5108:	fe 01       	movw	r30, r28
    510a:	ed 5b       	subi	r30, 0xBD	; 189
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	60 81       	ld	r22, Z
    5110:	71 81       	ldd	r23, Z+1	; 0x01
    5112:	82 81       	ldd	r24, Z+2	; 0x02
    5114:	93 81       	ldd	r25, Z+3	; 0x03
    5116:	20 e0       	ldi	r18, 0x00	; 0
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	4a ef       	ldi	r20, 0xFA	; 250
    511c:	54 e4       	ldi	r21, 0x44	; 68
    511e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5122:	dc 01       	movw	r26, r24
    5124:	cb 01       	movw	r24, r22
    5126:	f8 01       	movw	r30, r16
    5128:	80 83       	st	Z, r24
    512a:	91 83       	std	Z+1, r25	; 0x01
    512c:	a2 83       	std	Z+2, r26	; 0x02
    512e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5130:	fe 01       	movw	r30, r28
    5132:	ff 96       	adiw	r30, 0x3f	; 63
    5134:	60 81       	ld	r22, Z
    5136:	71 81       	ldd	r23, Z+1	; 0x01
    5138:	82 81       	ldd	r24, Z+2	; 0x02
    513a:	93 81       	ldd	r25, Z+3	; 0x03
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	40 e8       	ldi	r20, 0x80	; 128
    5142:	5f e3       	ldi	r21, 0x3F	; 63
    5144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5148:	88 23       	and	r24, r24
    514a:	2c f4       	brge	.+10     	; 0x5156 <HLCD_displayChar+0x98e>
		__ticks = 1;
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	9e af       	std	Y+62, r25	; 0x3e
    5152:	8d af       	std	Y+61, r24	; 0x3d
    5154:	46 c0       	rjmp	.+140    	; 0x51e2 <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    5156:	fe 01       	movw	r30, r28
    5158:	ff 96       	adiw	r30, 0x3f	; 63
    515a:	60 81       	ld	r22, Z
    515c:	71 81       	ldd	r23, Z+1	; 0x01
    515e:	82 81       	ldd	r24, Z+2	; 0x02
    5160:	93 81       	ldd	r25, Z+3	; 0x03
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	3f ef       	ldi	r19, 0xFF	; 255
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	57 e4       	ldi	r21, 0x47	; 71
    516a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	64 f5       	brge	.+88     	; 0x51ca <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5172:	fe 01       	movw	r30, r28
    5174:	ed 5b       	subi	r30, 0xBD	; 189
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e2       	ldi	r20, 0x20	; 32
    5186:	51 e4       	ldi	r21, 0x41	; 65
    5188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518c:	dc 01       	movw	r26, r24
    518e:	cb 01       	movw	r24, r22
    5190:	bc 01       	movw	r22, r24
    5192:	cd 01       	movw	r24, r26
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	9e af       	std	Y+62, r25	; 0x3e
    519e:	8d af       	std	Y+61, r24	; 0x3d
    51a0:	0f c0       	rjmp	.+30     	; 0x51c0 <HLCD_displayChar+0x9f8>
    51a2:	88 ec       	ldi	r24, 0xC8	; 200
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	9c af       	std	Y+60, r25	; 0x3c
    51a8:	8b af       	std	Y+59, r24	; 0x3b
    51aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    51ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	f1 f7       	brne	.-4      	; 0x51ae <HLCD_displayChar+0x9e6>
    51b2:	9c af       	std	Y+60, r25	; 0x3c
    51b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    51b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	9e af       	std	Y+62, r25	; 0x3e
    51be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    51c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    51c4:	00 97       	sbiw	r24, 0x00	; 0
    51c6:	69 f7       	brne	.-38     	; 0x51a2 <HLCD_displayChar+0x9da>
    51c8:	16 c0       	rjmp	.+44     	; 0x51f6 <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ca:	fe 01       	movw	r30, r28
    51cc:	ff 96       	adiw	r30, 0x3f	; 63
    51ce:	60 81       	ld	r22, Z
    51d0:	71 81       	ldd	r23, Z+1	; 0x01
    51d2:	82 81       	ldd	r24, Z+2	; 0x02
    51d4:	93 81       	ldd	r25, Z+3	; 0x03
    51d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	9e af       	std	Y+62, r25	; 0x3e
    51e0:	8d af       	std	Y+61, r24	; 0x3d
    51e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    51e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    51e6:	9a af       	std	Y+58, r25	; 0x3a
    51e8:	89 af       	std	Y+57, r24	; 0x39
    51ea:	89 ad       	ldd	r24, Y+57	; 0x39
    51ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	f1 f7       	brne	.-4      	; 0x51ee <HLCD_displayChar+0xa26>
    51f2:	9a af       	std	Y+58, r25	; 0x3a
    51f4:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    51f6:	fe 01       	movw	r30, r28
    51f8:	e3 57       	subi	r30, 0x73	; 115
    51fa:	ff 4f       	sbci	r31, 0xFF	; 255
    51fc:	80 81       	ld	r24, Z
    51fe:	88 23       	and	r24, r24
    5200:	59 f4       	brne	.+22     	; 0x5218 <HLCD_displayChar+0xa50>
    5202:	ce 01       	movw	r24, r28
    5204:	89 56       	subi	r24, 0x69	; 105
    5206:	9f 4f       	sbci	r25, 0xFF	; 255
    5208:	60 e0       	ldi	r22, 0x00	; 0
    520a:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    520e:	fe 01       	movw	r30, r28
    5210:	e3 57       	subi	r30, 0x73	; 115
    5212:	ff 4f       	sbci	r31, 0xFF	; 255
    5214:	80 83       	st	Z, r24
    5216:	05 c0       	rjmp	.+10     	; 0x5222 <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    5218:	fe 01       	movw	r30, r28
    521a:	e2 57       	subi	r30, 0x72	; 114
    521c:	ff 4f       	sbci	r31, 0xFF	; 255
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	80 83       	st	Z, r24
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	a0 ef       	ldi	r26, 0xF0	; 240
    5228:	b1 e4       	ldi	r27, 0x41	; 65
    522a:	8d ab       	std	Y+53, r24	; 0x35
    522c:	9e ab       	std	Y+54, r25	; 0x36
    522e:	af ab       	std	Y+55, r26	; 0x37
    5230:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5232:	6d a9       	ldd	r22, Y+53	; 0x35
    5234:	7e a9       	ldd	r23, Y+54	; 0x36
    5236:	8f a9       	ldd	r24, Y+55	; 0x37
    5238:	98 ad       	ldd	r25, Y+56	; 0x38
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	4a ef       	ldi	r20, 0xFA	; 250
    5240:	54 e4       	ldi	r21, 0x44	; 68
    5242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5246:	dc 01       	movw	r26, r24
    5248:	cb 01       	movw	r24, r22
    524a:	89 ab       	std	Y+49, r24	; 0x31
    524c:	9a ab       	std	Y+50, r25	; 0x32
    524e:	ab ab       	std	Y+51, r26	; 0x33
    5250:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5252:	69 a9       	ldd	r22, Y+49	; 0x31
    5254:	7a a9       	ldd	r23, Y+50	; 0x32
    5256:	8b a9       	ldd	r24, Y+51	; 0x33
    5258:	9c a9       	ldd	r25, Y+52	; 0x34
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	40 e8       	ldi	r20, 0x80	; 128
    5260:	5f e3       	ldi	r21, 0x3F	; 63
    5262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5266:	88 23       	and	r24, r24
    5268:	2c f4       	brge	.+10     	; 0x5274 <HLCD_displayChar+0xaac>
		__ticks = 1;
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	98 ab       	std	Y+48, r25	; 0x30
    5270:	8f a7       	std	Y+47, r24	; 0x2f
    5272:	3f c0       	rjmp	.+126    	; 0x52f2 <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    5274:	69 a9       	ldd	r22, Y+49	; 0x31
    5276:	7a a9       	ldd	r23, Y+50	; 0x32
    5278:	8b a9       	ldd	r24, Y+51	; 0x33
    527a:	9c a9       	ldd	r25, Y+52	; 0x34
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	3f ef       	ldi	r19, 0xFF	; 255
    5280:	4f e7       	ldi	r20, 0x7F	; 127
    5282:	57 e4       	ldi	r21, 0x47	; 71
    5284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5288:	18 16       	cp	r1, r24
    528a:	4c f5       	brge	.+82     	; 0x52de <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    528c:	6d a9       	ldd	r22, Y+53	; 0x35
    528e:	7e a9       	ldd	r23, Y+54	; 0x36
    5290:	8f a9       	ldd	r24, Y+55	; 0x37
    5292:	98 ad       	ldd	r25, Y+56	; 0x38
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	40 e2       	ldi	r20, 0x20	; 32
    529a:	51 e4       	ldi	r21, 0x41	; 65
    529c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a0:	dc 01       	movw	r26, r24
    52a2:	cb 01       	movw	r24, r22
    52a4:	bc 01       	movw	r22, r24
    52a6:	cd 01       	movw	r24, r26
    52a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ac:	dc 01       	movw	r26, r24
    52ae:	cb 01       	movw	r24, r22
    52b0:	98 ab       	std	Y+48, r25	; 0x30
    52b2:	8f a7       	std	Y+47, r24	; 0x2f
    52b4:	0f c0       	rjmp	.+30     	; 0x52d4 <HLCD_displayChar+0xb0c>
    52b6:	88 ec       	ldi	r24, 0xC8	; 200
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	9e a7       	std	Y+46, r25	; 0x2e
    52bc:	8d a7       	std	Y+45, r24	; 0x2d
    52be:	8d a5       	ldd	r24, Y+45	; 0x2d
    52c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    52c2:	01 97       	sbiw	r24, 0x01	; 1
    52c4:	f1 f7       	brne	.-4      	; 0x52c2 <HLCD_displayChar+0xafa>
    52c6:	9e a7       	std	Y+46, r25	; 0x2e
    52c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    52cc:	98 a9       	ldd	r25, Y+48	; 0x30
    52ce:	01 97       	sbiw	r24, 0x01	; 1
    52d0:	98 ab       	std	Y+48, r25	; 0x30
    52d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    52d6:	98 a9       	ldd	r25, Y+48	; 0x30
    52d8:	00 97       	sbiw	r24, 0x00	; 0
    52da:	69 f7       	brne	.-38     	; 0x52b6 <HLCD_displayChar+0xaee>
    52dc:	bb c1       	rjmp	.+886    	; 0x5654 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52de:	69 a9       	ldd	r22, Y+49	; 0x31
    52e0:	7a a9       	ldd	r23, Y+50	; 0x32
    52e2:	8b a9       	ldd	r24, Y+51	; 0x33
    52e4:	9c a9       	ldd	r25, Y+52	; 0x34
    52e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	98 ab       	std	Y+48, r25	; 0x30
    52f0:	8f a7       	std	Y+47, r24	; 0x2f
    52f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    52f4:	98 a9       	ldd	r25, Y+48	; 0x30
    52f6:	9c a7       	std	Y+44, r25	; 0x2c
    52f8:	8b a7       	std	Y+43, r24	; 0x2b
    52fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    52fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	f1 f7       	brne	.-4      	; 0x52fe <HLCD_displayChar+0xb36>
    5302:	9c a7       	std	Y+44, r25	; 0x2c
    5304:	8b a7       	std	Y+43, r24	; 0x2b
    5306:	a6 c1       	rjmp	.+844    	; 0x5654 <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    5308:	fe 01       	movw	r30, r28
    530a:	e5 56       	subi	r30, 0x65	; 101
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	01 90       	ld	r0, Z+
    5310:	f0 81       	ld	r31, Z
    5312:	e0 2d       	mov	r30, r0
    5314:	80 81       	ld	r24, Z
    5316:	81 30       	cpi	r24, 0x01	; 1
    5318:	09 f0       	breq	.+2      	; 0x531c <HLCD_displayChar+0xb54>
    531a:	97 c1       	rjmp	.+814    	; 0x564a <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    531c:	fe 01       	movw	r30, r28
    531e:	e3 57       	subi	r30, 0x73	; 115
    5320:	ff 4f       	sbci	r31, 0xFF	; 255
    5322:	80 81       	ld	r24, Z
    5324:	88 23       	and	r24, r24
    5326:	59 f4       	brne	.+22     	; 0x533e <HLCD_displayChar+0xb76>
    5328:	ce 01       	movw	r24, r28
    532a:	89 56       	subi	r24, 0x69	; 105
    532c:	9f 4f       	sbci	r25, 0xFF	; 255
    532e:	61 e0       	ldi	r22, 0x01	; 1
    5330:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    5334:	fe 01       	movw	r30, r28
    5336:	e3 57       	subi	r30, 0x73	; 115
    5338:	ff 4f       	sbci	r31, 0xFF	; 255
    533a:	80 83       	st	Z, r24
    533c:	05 c0       	rjmp	.+10     	; 0x5348 <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    533e:	fe 01       	movw	r30, r28
    5340:	e2 57       	subi	r30, 0x72	; 114
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	80 83       	st	Z, r24
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	a0 e8       	ldi	r26, 0x80	; 128
    534e:	bf e3       	ldi	r27, 0x3F	; 63
    5350:	8f a3       	std	Y+39, r24	; 0x27
    5352:	98 a7       	std	Y+40, r25	; 0x28
    5354:	a9 a7       	std	Y+41, r26	; 0x29
    5356:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5358:	6f a1       	ldd	r22, Y+39	; 0x27
    535a:	78 a5       	ldd	r23, Y+40	; 0x28
    535c:	89 a5       	ldd	r24, Y+41	; 0x29
    535e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	4a ef       	ldi	r20, 0xFA	; 250
    5366:	54 e4       	ldi	r21, 0x44	; 68
    5368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    536c:	dc 01       	movw	r26, r24
    536e:	cb 01       	movw	r24, r22
    5370:	8b a3       	std	Y+35, r24	; 0x23
    5372:	9c a3       	std	Y+36, r25	; 0x24
    5374:	ad a3       	std	Y+37, r26	; 0x25
    5376:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5378:	6b a1       	ldd	r22, Y+35	; 0x23
    537a:	7c a1       	ldd	r23, Y+36	; 0x24
    537c:	8d a1       	ldd	r24, Y+37	; 0x25
    537e:	9e a1       	ldd	r25, Y+38	; 0x26
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	40 e8       	ldi	r20, 0x80	; 128
    5386:	5f e3       	ldi	r21, 0x3F	; 63
    5388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    538c:	88 23       	and	r24, r24
    538e:	2c f4       	brge	.+10     	; 0x539a <HLCD_displayChar+0xbd2>
		__ticks = 1;
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	9a a3       	std	Y+34, r25	; 0x22
    5396:	89 a3       	std	Y+33, r24	; 0x21
    5398:	3f c0       	rjmp	.+126    	; 0x5418 <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    539a:	6b a1       	ldd	r22, Y+35	; 0x23
    539c:	7c a1       	ldd	r23, Y+36	; 0x24
    539e:	8d a1       	ldd	r24, Y+37	; 0x25
    53a0:	9e a1       	ldd	r25, Y+38	; 0x26
    53a2:	20 e0       	ldi	r18, 0x00	; 0
    53a4:	3f ef       	ldi	r19, 0xFF	; 255
    53a6:	4f e7       	ldi	r20, 0x7F	; 127
    53a8:	57 e4       	ldi	r21, 0x47	; 71
    53aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53ae:	18 16       	cp	r1, r24
    53b0:	4c f5       	brge	.+82     	; 0x5404 <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53b2:	6f a1       	ldd	r22, Y+39	; 0x27
    53b4:	78 a5       	ldd	r23, Y+40	; 0x28
    53b6:	89 a5       	ldd	r24, Y+41	; 0x29
    53b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	40 e2       	ldi	r20, 0x20	; 32
    53c0:	51 e4       	ldi	r21, 0x41	; 65
    53c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	bc 01       	movw	r22, r24
    53cc:	cd 01       	movw	r24, r26
    53ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d2:	dc 01       	movw	r26, r24
    53d4:	cb 01       	movw	r24, r22
    53d6:	9a a3       	std	Y+34, r25	; 0x22
    53d8:	89 a3       	std	Y+33, r24	; 0x21
    53da:	0f c0       	rjmp	.+30     	; 0x53fa <HLCD_displayChar+0xc32>
    53dc:	88 ec       	ldi	r24, 0xC8	; 200
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	98 a3       	std	Y+32, r25	; 0x20
    53e2:	8f 8f       	std	Y+31, r24	; 0x1f
    53e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53e6:	98 a1       	ldd	r25, Y+32	; 0x20
    53e8:	01 97       	sbiw	r24, 0x01	; 1
    53ea:	f1 f7       	brne	.-4      	; 0x53e8 <HLCD_displayChar+0xc20>
    53ec:	98 a3       	std	Y+32, r25	; 0x20
    53ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53f0:	89 a1       	ldd	r24, Y+33	; 0x21
    53f2:	9a a1       	ldd	r25, Y+34	; 0x22
    53f4:	01 97       	sbiw	r24, 0x01	; 1
    53f6:	9a a3       	std	Y+34, r25	; 0x22
    53f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53fa:	89 a1       	ldd	r24, Y+33	; 0x21
    53fc:	9a a1       	ldd	r25, Y+34	; 0x22
    53fe:	00 97       	sbiw	r24, 0x00	; 0
    5400:	69 f7       	brne	.-38     	; 0x53dc <HLCD_displayChar+0xc14>
    5402:	14 c0       	rjmp	.+40     	; 0x542c <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5404:	6b a1       	ldd	r22, Y+35	; 0x23
    5406:	7c a1       	ldd	r23, Y+36	; 0x24
    5408:	8d a1       	ldd	r24, Y+37	; 0x25
    540a:	9e a1       	ldd	r25, Y+38	; 0x26
    540c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5410:	dc 01       	movw	r26, r24
    5412:	cb 01       	movw	r24, r22
    5414:	9a a3       	std	Y+34, r25	; 0x22
    5416:	89 a3       	std	Y+33, r24	; 0x21
    5418:	89 a1       	ldd	r24, Y+33	; 0x21
    541a:	9a a1       	ldd	r25, Y+34	; 0x22
    541c:	9e 8f       	std	Y+30, r25	; 0x1e
    541e:	8d 8f       	std	Y+29, r24	; 0x1d
    5420:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5422:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5424:	01 97       	sbiw	r24, 0x01	; 1
    5426:	f1 f7       	brne	.-4      	; 0x5424 <HLCD_displayChar+0xc5c>
    5428:	9e 8f       	std	Y+30, r25	; 0x1e
    542a:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    542c:	fe 01       	movw	r30, r28
    542e:	e5 56       	subi	r30, 0x65	; 101
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	01 90       	ld	r0, Z+
    5434:	f0 81       	ld	r31, Z
    5436:	e0 2d       	mov	r30, r0
    5438:	92 81       	ldd	r25, Z+2	; 0x02
    543a:	fe 01       	movw	r30, r28
    543c:	e3 56       	subi	r30, 0x63	; 99
    543e:	ff 4f       	sbci	r31, 0xFF	; 255
    5440:	80 81       	ld	r24, Z
    5442:	28 2f       	mov	r18, r24
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	50 e0       	ldi	r21, 0x00	; 0
    544a:	89 2f       	mov	r24, r25
    544c:	ba 01       	movw	r22, r20
    544e:	a9 01       	movw	r20, r18
    5450:	0e 94 be 14 	call	0x297c	; 0x297c <GPIO_SetPortValue>
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	a0 e8       	ldi	r26, 0x80	; 128
    545a:	bf e3       	ldi	r27, 0x3F	; 63
    545c:	89 8f       	std	Y+25, r24	; 0x19
    545e:	9a 8f       	std	Y+26, r25	; 0x1a
    5460:	ab 8f       	std	Y+27, r26	; 0x1b
    5462:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5464:	69 8d       	ldd	r22, Y+25	; 0x19
    5466:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    546a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	4a ef       	ldi	r20, 0xFA	; 250
    5472:	54 e4       	ldi	r21, 0x44	; 68
    5474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	8d 8b       	std	Y+21, r24	; 0x15
    547e:	9e 8b       	std	Y+22, r25	; 0x16
    5480:	af 8b       	std	Y+23, r26	; 0x17
    5482:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5484:	6d 89       	ldd	r22, Y+21	; 0x15
    5486:	7e 89       	ldd	r23, Y+22	; 0x16
    5488:	8f 89       	ldd	r24, Y+23	; 0x17
    548a:	98 8d       	ldd	r25, Y+24	; 0x18
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	40 e8       	ldi	r20, 0x80	; 128
    5492:	5f e3       	ldi	r21, 0x3F	; 63
    5494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5498:	88 23       	and	r24, r24
    549a:	2c f4       	brge	.+10     	; 0x54a6 <HLCD_displayChar+0xcde>
		__ticks = 1;
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	9c 8b       	std	Y+20, r25	; 0x14
    54a2:	8b 8b       	std	Y+19, r24	; 0x13
    54a4:	3f c0       	rjmp	.+126    	; 0x5524 <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    54a6:	6d 89       	ldd	r22, Y+21	; 0x15
    54a8:	7e 89       	ldd	r23, Y+22	; 0x16
    54aa:	8f 89       	ldd	r24, Y+23	; 0x17
    54ac:	98 8d       	ldd	r25, Y+24	; 0x18
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	3f ef       	ldi	r19, 0xFF	; 255
    54b2:	4f e7       	ldi	r20, 0x7F	; 127
    54b4:	57 e4       	ldi	r21, 0x47	; 71
    54b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54ba:	18 16       	cp	r1, r24
    54bc:	4c f5       	brge	.+82     	; 0x5510 <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54be:	69 8d       	ldd	r22, Y+25	; 0x19
    54c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e2       	ldi	r20, 0x20	; 32
    54cc:	51 e4       	ldi	r21, 0x41	; 65
    54ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d2:	dc 01       	movw	r26, r24
    54d4:	cb 01       	movw	r24, r22
    54d6:	bc 01       	movw	r22, r24
    54d8:	cd 01       	movw	r24, r26
    54da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	9c 8b       	std	Y+20, r25	; 0x14
    54e4:	8b 8b       	std	Y+19, r24	; 0x13
    54e6:	0f c0       	rjmp	.+30     	; 0x5506 <HLCD_displayChar+0xd3e>
    54e8:	88 ec       	ldi	r24, 0xC8	; 200
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	9a 8b       	std	Y+18, r25	; 0x12
    54ee:	89 8b       	std	Y+17, r24	; 0x11
    54f0:	89 89       	ldd	r24, Y+17	; 0x11
    54f2:	9a 89       	ldd	r25, Y+18	; 0x12
    54f4:	01 97       	sbiw	r24, 0x01	; 1
    54f6:	f1 f7       	brne	.-4      	; 0x54f4 <HLCD_displayChar+0xd2c>
    54f8:	9a 8b       	std	Y+18, r25	; 0x12
    54fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54fc:	8b 89       	ldd	r24, Y+19	; 0x13
    54fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5500:	01 97       	sbiw	r24, 0x01	; 1
    5502:	9c 8b       	std	Y+20, r25	; 0x14
    5504:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5506:	8b 89       	ldd	r24, Y+19	; 0x13
    5508:	9c 89       	ldd	r25, Y+20	; 0x14
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	69 f7       	brne	.-38     	; 0x54e8 <HLCD_displayChar+0xd20>
    550e:	14 c0       	rjmp	.+40     	; 0x5538 <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5510:	6d 89       	ldd	r22, Y+21	; 0x15
    5512:	7e 89       	ldd	r23, Y+22	; 0x16
    5514:	8f 89       	ldd	r24, Y+23	; 0x17
    5516:	98 8d       	ldd	r25, Y+24	; 0x18
    5518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	9c 8b       	std	Y+20, r25	; 0x14
    5522:	8b 8b       	std	Y+19, r24	; 0x13
    5524:	8b 89       	ldd	r24, Y+19	; 0x13
    5526:	9c 89       	ldd	r25, Y+20	; 0x14
    5528:	98 8b       	std	Y+16, r25	; 0x10
    552a:	8f 87       	std	Y+15, r24	; 0x0f
    552c:	8f 85       	ldd	r24, Y+15	; 0x0f
    552e:	98 89       	ldd	r25, Y+16	; 0x10
    5530:	01 97       	sbiw	r24, 0x01	; 1
    5532:	f1 f7       	brne	.-4      	; 0x5530 <HLCD_displayChar+0xd68>
    5534:	98 8b       	std	Y+16, r25	; 0x10
    5536:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    5538:	fe 01       	movw	r30, r28
    553a:	e3 57       	subi	r30, 0x73	; 115
    553c:	ff 4f       	sbci	r31, 0xFF	; 255
    553e:	80 81       	ld	r24, Z
    5540:	88 23       	and	r24, r24
    5542:	59 f4       	brne	.+22     	; 0x555a <HLCD_displayChar+0xd92>
    5544:	ce 01       	movw	r24, r28
    5546:	89 56       	subi	r24, 0x69	; 105
    5548:	9f 4f       	sbci	r25, 0xFF	; 255
    554a:	60 e0       	ldi	r22, 0x00	; 0
    554c:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    5550:	fe 01       	movw	r30, r28
    5552:	e3 57       	subi	r30, 0x73	; 115
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 83       	st	Z, r24
    5558:	05 c0       	rjmp	.+10     	; 0x5564 <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    555a:	fe 01       	movw	r30, r28
    555c:	e2 57       	subi	r30, 0x72	; 114
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	80 83       	st	Z, r24
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	a0 e8       	ldi	r26, 0x80	; 128
    556a:	bf e3       	ldi	r27, 0x3F	; 63
    556c:	8b 87       	std	Y+11, r24	; 0x0b
    556e:	9c 87       	std	Y+12, r25	; 0x0c
    5570:	ad 87       	std	Y+13, r26	; 0x0d
    5572:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5574:	6b 85       	ldd	r22, Y+11	; 0x0b
    5576:	7c 85       	ldd	r23, Y+12	; 0x0c
    5578:	8d 85       	ldd	r24, Y+13	; 0x0d
    557a:	9e 85       	ldd	r25, Y+14	; 0x0e
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	4a ef       	ldi	r20, 0xFA	; 250
    5582:	54 e4       	ldi	r21, 0x44	; 68
    5584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	8f 83       	std	Y+7, r24	; 0x07
    558e:	98 87       	std	Y+8, r25	; 0x08
    5590:	a9 87       	std	Y+9, r26	; 0x09
    5592:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5594:	6f 81       	ldd	r22, Y+7	; 0x07
    5596:	78 85       	ldd	r23, Y+8	; 0x08
    5598:	89 85       	ldd	r24, Y+9	; 0x09
    559a:	9a 85       	ldd	r25, Y+10	; 0x0a
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	40 e8       	ldi	r20, 0x80	; 128
    55a2:	5f e3       	ldi	r21, 0x3F	; 63
    55a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55a8:	88 23       	and	r24, r24
    55aa:	2c f4       	brge	.+10     	; 0x55b6 <HLCD_displayChar+0xdee>
		__ticks = 1;
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	9e 83       	std	Y+6, r25	; 0x06
    55b2:	8d 83       	std	Y+5, r24	; 0x05
    55b4:	3f c0       	rjmp	.+126    	; 0x5634 <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    55b6:	6f 81       	ldd	r22, Y+7	; 0x07
    55b8:	78 85       	ldd	r23, Y+8	; 0x08
    55ba:	89 85       	ldd	r24, Y+9	; 0x09
    55bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	3f ef       	ldi	r19, 0xFF	; 255
    55c2:	4f e7       	ldi	r20, 0x7F	; 127
    55c4:	57 e4       	ldi	r21, 0x47	; 71
    55c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ca:	18 16       	cp	r1, r24
    55cc:	4c f5       	brge	.+82     	; 0x5620 <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e2       	ldi	r20, 0x20	; 32
    55dc:	51 e4       	ldi	r21, 0x41	; 65
    55de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	bc 01       	movw	r22, r24
    55e8:	cd 01       	movw	r24, r26
    55ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	9e 83       	std	Y+6, r25	; 0x06
    55f4:	8d 83       	std	Y+5, r24	; 0x05
    55f6:	0f c0       	rjmp	.+30     	; 0x5616 <HLCD_displayChar+0xe4e>
    55f8:	88 ec       	ldi	r24, 0xC8	; 200
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	9c 83       	std	Y+4, r25	; 0x04
    55fe:	8b 83       	std	Y+3, r24	; 0x03
    5600:	8b 81       	ldd	r24, Y+3	; 0x03
    5602:	9c 81       	ldd	r25, Y+4	; 0x04
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	f1 f7       	brne	.-4      	; 0x5604 <HLCD_displayChar+0xe3c>
    5608:	9c 83       	std	Y+4, r25	; 0x04
    560a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    560c:	8d 81       	ldd	r24, Y+5	; 0x05
    560e:	9e 81       	ldd	r25, Y+6	; 0x06
    5610:	01 97       	sbiw	r24, 0x01	; 1
    5612:	9e 83       	std	Y+6, r25	; 0x06
    5614:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5616:	8d 81       	ldd	r24, Y+5	; 0x05
    5618:	9e 81       	ldd	r25, Y+6	; 0x06
    561a:	00 97       	sbiw	r24, 0x00	; 0
    561c:	69 f7       	brne	.-38     	; 0x55f8 <HLCD_displayChar+0xe30>
    561e:	1a c0       	rjmp	.+52     	; 0x5654 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5620:	6f 81       	ldd	r22, Y+7	; 0x07
    5622:	78 85       	ldd	r23, Y+8	; 0x08
    5624:	89 85       	ldd	r24, Y+9	; 0x09
    5626:	9a 85       	ldd	r25, Y+10	; 0x0a
    5628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562c:	dc 01       	movw	r26, r24
    562e:	cb 01       	movw	r24, r22
    5630:	9e 83       	std	Y+6, r25	; 0x06
    5632:	8d 83       	std	Y+5, r24	; 0x05
    5634:	8d 81       	ldd	r24, Y+5	; 0x05
    5636:	9e 81       	ldd	r25, Y+6	; 0x06
    5638:	9a 83       	std	Y+2, r25	; 0x02
    563a:	89 83       	std	Y+1, r24	; 0x01
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	9a 81       	ldd	r25, Y+2	; 0x02
    5640:	01 97       	sbiw	r24, 0x01	; 1
    5642:	f1 f7       	brne	.-4      	; 0x5640 <HLCD_displayChar+0xe78>
    5644:	9a 83       	std	Y+2, r25	; 0x02
    5646:	89 83       	std	Y+1, r24	; 0x01
    5648:	05 c0       	rjmp	.+10     	; 0x5654 <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    564a:	fe 01       	movw	r30, r28
    564c:	e2 57       	subi	r30, 0x72	; 114
    564e:	ff 4f       	sbci	r31, 0xFF	; 255
    5650:	83 e0       	ldi	r24, 0x03	; 3
    5652:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    5654:	fe 01       	movw	r30, r28
    5656:	e3 57       	subi	r30, 0x73	; 115
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	80 81       	ld	r24, Z
    565c:	88 23       	and	r24, r24
    565e:	29 f4       	brne	.+10     	; 0x566a <HLCD_displayChar+0xea2>
    5660:	fe 01       	movw	r30, r28
    5662:	e2 57       	subi	r30, 0x72	; 114
    5664:	ff 4f       	sbci	r31, 0xFF	; 255
    5666:	10 82       	st	Z, r1
    5668:	0b c0       	rjmp	.+22     	; 0x5680 <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    566a:	fe 01       	movw	r30, r28
    566c:	e2 57       	subi	r30, 0x72	; 114
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	80 83       	st	Z, r24
    5674:	05 c0       	rjmp	.+10     	; 0x5680 <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    5676:	fe 01       	movw	r30, r28
    5678:	e2 57       	subi	r30, 0x72	; 114
    567a:	ff 4f       	sbci	r31, 0xFF	; 255
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	80 83       	st	Z, r24
	}

	return lcdRet;
    5680:	fe 01       	movw	r30, r28
    5682:	e2 57       	subi	r30, 0x72	; 114
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	80 81       	ld	r24, Z
}
    5688:	c3 56       	subi	r28, 0x63	; 99
    568a:	df 4f       	sbci	r29, 0xFF	; 255
    568c:	0f b6       	in	r0, 0x3f	; 63
    568e:	f8 94       	cli
    5690:	de bf       	out	0x3e, r29	; 62
    5692:	0f be       	out	0x3f, r0	; 63
    5694:	cd bf       	out	0x3d, r28	; 61
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	1f 91       	pop	r17
    569c:	0f 91       	pop	r16
    569e:	08 95       	ret

000056a0 <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    56a0:	df 93       	push	r29
    56a2:	cf 93       	push	r28
    56a4:	00 d0       	rcall	.+0      	; 0x56a6 <HLCD_displayString+0x6>
    56a6:	00 d0       	rcall	.+0      	; 0x56a8 <HLCD_displayString+0x8>
    56a8:	00 d0       	rcall	.+0      	; 0x56aa <HLCD_displayString+0xa>
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	9c 83       	std	Y+4, r25	; 0x04
    56b0:	8b 83       	std	Y+3, r24	; 0x03
    56b2:	7e 83       	std	Y+6, r23	; 0x06
    56b4:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    56ba:	8b 81       	ldd	r24, Y+3	; 0x03
    56bc:	9c 81       	ldd	r25, Y+4	; 0x04
    56be:	00 97       	sbiw	r24, 0x00	; 0
    56c0:	69 f1       	breq	.+90     	; 0x571c <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    56c2:	eb 81       	ldd	r30, Y+3	; 0x03
    56c4:	fc 81       	ldd	r31, Y+4	; 0x04
    56c6:	80 81       	ld	r24, Z
    56c8:	88 23       	and	r24, r24
    56ca:	51 f1       	breq	.+84     	; 0x5720 <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    56cc:	eb 81       	ldd	r30, Y+3	; 0x03
    56ce:	fc 81       	ldd	r31, Y+4	; 0x04
    56d0:	80 81       	ld	r24, Z
    56d2:	81 30       	cpi	r24, 0x01	; 1
    56d4:	01 f5       	brne	.+64     	; 0x5716 <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    56d6:	19 82       	std	Y+1, r1	; 0x01
    56d8:	12 c0       	rjmp	.+36     	; 0x56fe <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	28 2f       	mov	r18, r24
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	8d 81       	ldd	r24, Y+5	; 0x05
    56e2:	9e 81       	ldd	r25, Y+6	; 0x06
    56e4:	fc 01       	movw	r30, r24
    56e6:	e2 0f       	add	r30, r18
    56e8:	f3 1f       	adc	r31, r19
    56ea:	20 81       	ld	r18, Z
    56ec:	8b 81       	ldd	r24, Y+3	; 0x03
    56ee:	9c 81       	ldd	r25, Y+4	; 0x04
    56f0:	62 2f       	mov	r22, r18
    56f2:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <HLCD_displayChar>
    56f6:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	8f 5f       	subi	r24, 0xFF	; 255
    56fc:	89 83       	std	Y+1, r24	; 0x01
    56fe:	89 81       	ldd	r24, Y+1	; 0x01
    5700:	28 2f       	mov	r18, r24
    5702:	30 e0       	ldi	r19, 0x00	; 0
    5704:	8d 81       	ldd	r24, Y+5	; 0x05
    5706:	9e 81       	ldd	r25, Y+6	; 0x06
    5708:	fc 01       	movw	r30, r24
    570a:	e2 0f       	add	r30, r18
    570c:	f3 1f       	adc	r31, r19
    570e:	80 81       	ld	r24, Z
    5710:	88 23       	and	r24, r24
    5712:	19 f7       	brne	.-58     	; 0x56da <HLCD_displayString+0x3a>
    5714:	05 c0       	rjmp	.+10     	; 0x5720 <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5716:	83 e0       	ldi	r24, 0x03	; 3
    5718:	8a 83       	std	Y+2, r24	; 0x02
    571a:	02 c0       	rjmp	.+4      	; 0x5720 <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    571c:	82 e0       	ldi	r24, 0x02	; 2
    571e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    5720:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5722:	26 96       	adiw	r28, 0x06	; 6
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	cd bf       	out	0x3d, r28	; 61
    572e:	cf 91       	pop	r28
    5730:	df 91       	pop	r29
    5732:	08 95       	ret

00005734 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    5734:	df 93       	push	r29
    5736:	cf 93       	push	r28
    5738:	cd b7       	in	r28, 0x3d	; 61
    573a:	de b7       	in	r29, 0x3e	; 62
    573c:	6b 97       	sbiw	r28, 0x1b	; 27
    573e:	0f b6       	in	r0, 0x3f	; 63
    5740:	f8 94       	cli
    5742:	de bf       	out	0x3e, r29	; 62
    5744:	0f be       	out	0x3f, r0	; 63
    5746:	cd bf       	out	0x3d, r28	; 61
    5748:	9f 8b       	std	Y+23, r25	; 0x17
    574a:	8e 8b       	std	Y+22, r24	; 0x16
    574c:	48 8f       	std	Y+24, r20	; 0x18
    574e:	59 8f       	std	Y+25, r21	; 0x19
    5750:	6a 8f       	std	Y+26, r22	; 0x1a
    5752:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    5758:	8e 89       	ldd	r24, Y+22	; 0x16
    575a:	9f 89       	ldd	r25, Y+23	; 0x17
    575c:	00 97       	sbiw	r24, 0x00	; 0
    575e:	01 f1       	breq	.+64     	; 0x57a0 <HLCD_displayNumber+0x6c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5760:	ee 89       	ldd	r30, Y+22	; 0x16
    5762:	ff 89       	ldd	r31, Y+23	; 0x17
    5764:	80 81       	ld	r24, Z
    5766:	88 23       	and	r24, r24
    5768:	e9 f0       	breq	.+58     	; 0x57a4 <HLCD_displayNumber+0x70>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    576a:	ee 89       	ldd	r30, Y+22	; 0x16
    576c:	ff 89       	ldd	r31, Y+23	; 0x17
    576e:	80 81       	ld	r24, Z
    5770:	81 30       	cpi	r24, 0x01	; 1
    5772:	99 f4       	brne	.+38     	; 0x579a <HLCD_displayNumber+0x66>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    5774:	88 8d       	ldd	r24, Y+24	; 0x18
    5776:	99 8d       	ldd	r25, Y+25	; 0x19
    5778:	9e 01       	movw	r18, r28
    577a:	2e 5f       	subi	r18, 0xFE	; 254
    577c:	3f 4f       	sbci	r19, 0xFF	; 255
    577e:	b9 01       	movw	r22, r18
    5780:	4a e0       	ldi	r20, 0x0A	; 10
    5782:	50 e0       	ldi	r21, 0x00	; 0
    5784:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    5788:	8e 89       	ldd	r24, Y+22	; 0x16
    578a:	9f 89       	ldd	r25, Y+23	; 0x17
    578c:	9e 01       	movw	r18, r28
    578e:	2e 5f       	subi	r18, 0xFE	; 254
    5790:	3f 4f       	sbci	r19, 0xFF	; 255
    5792:	b9 01       	movw	r22, r18
    5794:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <HLCD_displayString>
    5798:	05 c0       	rjmp	.+10     	; 0x57a4 <HLCD_displayNumber+0x70>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    579a:	83 e0       	ldi	r24, 0x03	; 3
    579c:	89 83       	std	Y+1, r24	; 0x01
    579e:	02 c0       	rjmp	.+4      	; 0x57a4 <HLCD_displayNumber+0x70>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    57a0:	82 e0       	ldi	r24, 0x02	; 2
    57a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    57a6:	6b 96       	adiw	r28, 0x1b	; 27
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	cf 91       	pop	r28
    57b4:	df 91       	pop	r29
    57b6:	08 95       	ret

000057b8 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    57b8:	df 93       	push	r29
    57ba:	cf 93       	push	r28
    57bc:	00 d0       	rcall	.+0      	; 0x57be <HLCD_changeCursorPosation+0x6>
    57be:	00 d0       	rcall	.+0      	; 0x57c0 <HLCD_changeCursorPosation+0x8>
    57c0:	0f 92       	push	r0
    57c2:	cd b7       	in	r28, 0x3d	; 61
    57c4:	de b7       	in	r29, 0x3e	; 62
    57c6:	9b 83       	std	Y+3, r25	; 0x03
    57c8:	8a 83       	std	Y+2, r24	; 0x02
    57ca:	6c 83       	std	Y+4, r22	; 0x04
    57cc:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    57d2:	8a 81       	ldd	r24, Y+2	; 0x02
    57d4:	9b 81       	ldd	r25, Y+3	; 0x03
    57d6:	00 97       	sbiw	r24, 0x00	; 0
    57d8:	91 f1       	breq	.+100    	; 0x583e <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    57da:	ea 81       	ldd	r30, Y+2	; 0x02
    57dc:	fb 81       	ldd	r31, Y+3	; 0x03
    57de:	80 81       	ld	r24, Z
    57e0:	88 23       	and	r24, r24
    57e2:	79 f1       	breq	.+94     	; 0x5842 <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    57e4:	ea 81       	ldd	r30, Y+2	; 0x02
    57e6:	fb 81       	ldd	r31, Y+3	; 0x03
    57e8:	80 81       	ld	r24, Z
    57ea:	81 30       	cpi	r24, 0x01	; 1
    57ec:	29 f5       	brne	.+74     	; 0x5838 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    57ee:	8c 81       	ldd	r24, Y+4	; 0x04
    57f0:	88 23       	and	r24, r24
    57f2:	71 f4       	brne	.+28     	; 0x5810 <HLCD_changeCursorPosation+0x58>
    57f4:	8d 81       	ldd	r24, Y+5	; 0x05
    57f6:	80 31       	cpi	r24, 0x10	; 16
    57f8:	58 f4       	brcc	.+22     	; 0x5810 <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    57fa:	8d 81       	ldd	r24, Y+5	; 0x05
    57fc:	8f 70       	andi	r24, 0x0F	; 15
    57fe:	80 68       	ori	r24, 0x80	; 128
    5800:	28 2f       	mov	r18, r24
    5802:	8a 81       	ldd	r24, Y+2	; 0x02
    5804:	9b 81       	ldd	r25, Y+3	; 0x03
    5806:	62 2f       	mov	r22, r18
    5808:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    580c:	89 83       	std	Y+1, r24	; 0x01
    580e:	19 c0       	rjmp	.+50     	; 0x5842 <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    5810:	8c 81       	ldd	r24, Y+4	; 0x04
    5812:	81 30       	cpi	r24, 0x01	; 1
    5814:	71 f4       	brne	.+28     	; 0x5832 <HLCD_changeCursorPosation+0x7a>
    5816:	8d 81       	ldd	r24, Y+5	; 0x05
    5818:	80 31       	cpi	r24, 0x10	; 16
    581a:	58 f4       	brcc	.+22     	; 0x5832 <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    581c:	8d 81       	ldd	r24, Y+5	; 0x05
    581e:	8f 70       	andi	r24, 0x0F	; 15
    5820:	80 6c       	ori	r24, 0xC0	; 192
    5822:	28 2f       	mov	r18, r24
    5824:	8a 81       	ldd	r24, Y+2	; 0x02
    5826:	9b 81       	ldd	r25, Y+3	; 0x03
    5828:	62 2f       	mov	r22, r18
    582a:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    582e:	89 83       	std	Y+1, r24	; 0x01
    5830:	08 c0       	rjmp	.+16     	; 0x5842 <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    5832:	84 e0       	ldi	r24, 0x04	; 4
    5834:	89 83       	std	Y+1, r24	; 0x01
    5836:	05 c0       	rjmp	.+10     	; 0x5842 <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5838:	83 e0       	ldi	r24, 0x03	; 3
    583a:	89 83       	std	Y+1, r24	; 0x01
    583c:	02 c0       	rjmp	.+4      	; 0x5842 <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    583e:	82 e0       	ldi	r24, 0x02	; 2
    5840:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    5842:	89 81       	ldd	r24, Y+1	; 0x01
}
    5844:	0f 90       	pop	r0
    5846:	0f 90       	pop	r0
    5848:	0f 90       	pop	r0
    584a:	0f 90       	pop	r0
    584c:	0f 90       	pop	r0
    584e:	cf 91       	pop	r28
    5850:	df 91       	pop	r29
    5852:	08 95       	ret

00005854 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    5854:	df 93       	push	r29
    5856:	cf 93       	push	r28
    5858:	00 d0       	rcall	.+0      	; 0x585a <HLCD_shiftDisplay+0x6>
    585a:	00 d0       	rcall	.+0      	; 0x585c <HLCD_shiftDisplay+0x8>
    585c:	00 d0       	rcall	.+0      	; 0x585e <HLCD_shiftDisplay+0xa>
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	9c 83       	std	Y+4, r25	; 0x04
    5864:	8b 83       	std	Y+3, r24	; 0x03
    5866:	6d 83       	std	Y+5, r22	; 0x05
    5868:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    586e:	8b 81       	ldd	r24, Y+3	; 0x03
    5870:	9c 81       	ldd	r25, Y+4	; 0x04
    5872:	00 97       	sbiw	r24, 0x00	; 0
    5874:	31 f1       	breq	.+76     	; 0x58c2 <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    5876:	8e 81       	ldd	r24, Y+6	; 0x06
    5878:	8c 31       	cpi	r24, 0x1C	; 28
    587a:	19 f0       	breq	.+6      	; 0x5882 <HLCD_shiftDisplay+0x2e>
    587c:	8e 81       	ldd	r24, Y+6	; 0x06
    587e:	88 31       	cpi	r24, 0x18	; 24
    5880:	e9 f4       	brne	.+58     	; 0x58bc <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5882:	eb 81       	ldd	r30, Y+3	; 0x03
    5884:	fc 81       	ldd	r31, Y+4	; 0x04
    5886:	80 81       	ld	r24, Z
    5888:	88 23       	and	r24, r24
    588a:	e9 f0       	breq	.+58     	; 0x58c6 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    588c:	eb 81       	ldd	r30, Y+3	; 0x03
    588e:	fc 81       	ldd	r31, Y+4	; 0x04
    5890:	80 81       	ld	r24, Z
    5892:	81 30       	cpi	r24, 0x01	; 1
    5894:	81 f4       	brne	.+32     	; 0x58b6 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    5896:	19 82       	std	Y+1, r1	; 0x01
    5898:	09 c0       	rjmp	.+18     	; 0x58ac <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    589a:	8b 81       	ldd	r24, Y+3	; 0x03
    589c:	9c 81       	ldd	r25, Y+4	; 0x04
    589e:	6e 81       	ldd	r22, Y+6	; 0x06
    58a0:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    58a4:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	8f 5f       	subi	r24, 0xFF	; 255
    58aa:	89 83       	std	Y+1, r24	; 0x01
    58ac:	99 81       	ldd	r25, Y+1	; 0x01
    58ae:	8d 81       	ldd	r24, Y+5	; 0x05
    58b0:	98 17       	cp	r25, r24
    58b2:	98 f3       	brcs	.-26     	; 0x589a <HLCD_shiftDisplay+0x46>
    58b4:	08 c0       	rjmp	.+16     	; 0x58c6 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    58b6:	83 e0       	ldi	r24, 0x03	; 3
    58b8:	8a 83       	std	Y+2, r24	; 0x02
    58ba:	05 c0       	rjmp	.+10     	; 0x58c6 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    58bc:	84 e0       	ldi	r24, 0x04	; 4
    58be:	8a 83       	std	Y+2, r24	; 0x02
    58c0:	02 c0       	rjmp	.+4      	; 0x58c6 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    58c2:	82 e0       	ldi	r24, 0x02	; 2
    58c4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    58c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    58c8:	26 96       	adiw	r28, 0x06	; 6
    58ca:	0f b6       	in	r0, 0x3f	; 63
    58cc:	f8 94       	cli
    58ce:	de bf       	out	0x3e, r29	; 62
    58d0:	0f be       	out	0x3f, r0	; 63
    58d2:	cd bf       	out	0x3d, r28	; 61
    58d4:	cf 91       	pop	r28
    58d6:	df 91       	pop	r29
    58d8:	08 95       	ret

000058da <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	cd b7       	in	r28, 0x3d	; 61
    58e0:	de b7       	in	r29, 0x3e	; 62
    58e2:	27 97       	sbiw	r28, 0x07	; 7
    58e4:	0f b6       	in	r0, 0x3f	; 63
    58e6:	f8 94       	cli
    58e8:	de bf       	out	0x3e, r29	; 62
    58ea:	0f be       	out	0x3f, r0	; 63
    58ec:	cd bf       	out	0x3d, r28	; 61
    58ee:	9c 83       	std	Y+4, r25	; 0x04
    58f0:	8b 83       	std	Y+3, r24	; 0x03
    58f2:	7e 83       	std	Y+6, r23	; 0x06
    58f4:	6d 83       	std	Y+5, r22	; 0x05
    58f6:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    58fc:	8b 81       	ldd	r24, Y+3	; 0x03
    58fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5900:	00 97       	sbiw	r24, 0x00	; 0
    5902:	09 f4       	brne	.+2      	; 0x5906 <HLCD_createNewCustomChar+0x2c>
    5904:	4f c0       	rjmp	.+158    	; 0x59a4 <HLCD_createNewCustomChar+0xca>
    5906:	8d 81       	ldd	r24, Y+5	; 0x05
    5908:	9e 81       	ldd	r25, Y+6	; 0x06
    590a:	00 97       	sbiw	r24, 0x00	; 0
    590c:	09 f4       	brne	.+2      	; 0x5910 <HLCD_createNewCustomChar+0x36>
    590e:	4a c0       	rjmp	.+148    	; 0x59a4 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    5910:	8f 81       	ldd	r24, Y+7	; 0x07
    5912:	88 30       	cpi	r24, 0x08	; 8
    5914:	08 f0       	brcs	.+2      	; 0x5918 <HLCD_createNewCustomChar+0x3e>
    5916:	43 c0       	rjmp	.+134    	; 0x599e <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5918:	eb 81       	ldd	r30, Y+3	; 0x03
    591a:	fc 81       	ldd	r31, Y+4	; 0x04
    591c:	80 81       	ld	r24, Z
    591e:	88 23       	and	r24, r24
    5920:	09 f4       	brne	.+2      	; 0x5924 <HLCD_createNewCustomChar+0x4a>
    5922:	42 c0       	rjmp	.+132    	; 0x59a8 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    5924:	eb 81       	ldd	r30, Y+3	; 0x03
    5926:	fc 81       	ldd	r31, Y+4	; 0x04
    5928:	80 81       	ld	r24, Z
    592a:	81 30       	cpi	r24, 0x01	; 1
    592c:	a9 f5       	brne	.+106    	; 0x5998 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    592e:	8f 81       	ldd	r24, Y+7	; 0x07
    5930:	88 2f       	mov	r24, r24
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	88 0f       	add	r24, r24
    5936:	99 1f       	adc	r25, r25
    5938:	88 0f       	add	r24, r24
    593a:	99 1f       	adc	r25, r25
    593c:	88 0f       	add	r24, r24
    593e:	99 1f       	adc	r25, r25
    5940:	80 64       	ori	r24, 0x40	; 64
    5942:	28 2f       	mov	r18, r24
    5944:	8b 81       	ldd	r24, Y+3	; 0x03
    5946:	9c 81       	ldd	r25, Y+4	; 0x04
    5948:	62 2f       	mov	r22, r18
    594a:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    594e:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    5950:	8a 81       	ldd	r24, Y+2	; 0x02
    5952:	88 23       	and	r24, r24
    5954:	d1 f4       	brne	.+52     	; 0x598a <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    5956:	19 82       	std	Y+1, r1	; 0x01
    5958:	15 c0       	rjmp	.+42     	; 0x5984 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    595a:	89 81       	ldd	r24, Y+1	; 0x01
    595c:	28 2f       	mov	r18, r24
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	8d 81       	ldd	r24, Y+5	; 0x05
    5962:	9e 81       	ldd	r25, Y+6	; 0x06
    5964:	fc 01       	movw	r30, r24
    5966:	e2 0f       	add	r30, r18
    5968:	f3 1f       	adc	r31, r19
    596a:	20 81       	ld	r18, Z
    596c:	8b 81       	ldd	r24, Y+3	; 0x03
    596e:	9c 81       	ldd	r25, Y+4	; 0x04
    5970:	62 2f       	mov	r22, r18
    5972:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <HLCD_displayChar>
    5976:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    5978:	8a 81       	ldd	r24, Y+2	; 0x02
    597a:	88 23       	and	r24, r24
    597c:	31 f4       	brne	.+12     	; 0x598a <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    597e:	89 81       	ldd	r24, Y+1	; 0x01
    5980:	8f 5f       	subi	r24, 0xFF	; 255
    5982:	89 83       	std	Y+1, r24	; 0x01
    5984:	89 81       	ldd	r24, Y+1	; 0x01
    5986:	88 30       	cpi	r24, 0x08	; 8
    5988:	40 f3       	brcs	.-48     	; 0x595a <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    598a:	8b 81       	ldd	r24, Y+3	; 0x03
    598c:	9c 81       	ldd	r25, Y+4	; 0x04
    598e:	60 e8       	ldi	r22, 0x80	; 128
    5990:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    5994:	8a 83       	std	Y+2, r24	; 0x02
    5996:	08 c0       	rjmp	.+16     	; 0x59a8 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5998:	83 e0       	ldi	r24, 0x03	; 3
    599a:	8a 83       	std	Y+2, r24	; 0x02
    599c:	05 c0       	rjmp	.+10     	; 0x59a8 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    599e:	84 e0       	ldi	r24, 0x04	; 4
    59a0:	8a 83       	std	Y+2, r24	; 0x02
    59a2:	02 c0       	rjmp	.+4      	; 0x59a8 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    59a4:	82 e0       	ldi	r24, 0x02	; 2
    59a6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    59a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    59aa:	27 96       	adiw	r28, 0x07	; 7
    59ac:	0f b6       	in	r0, 0x3f	; 63
    59ae:	f8 94       	cli
    59b0:	de bf       	out	0x3e, r29	; 62
    59b2:	0f be       	out	0x3f, r0	; 63
    59b4:	cd bf       	out	0x3d, r28	; 61
    59b6:	cf 91       	pop	r28
    59b8:	df 91       	pop	r29
    59ba:	08 95       	ret

000059bc <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    59bc:	df 93       	push	r29
    59be:	cf 93       	push	r28
    59c0:	00 d0       	rcall	.+0      	; 0x59c2 <HLCD_Clr+0x6>
    59c2:	0f 92       	push	r0
    59c4:	cd b7       	in	r28, 0x3d	; 61
    59c6:	de b7       	in	r29, 0x3e	; 62
    59c8:	9b 83       	std	Y+3, r25	; 0x03
    59ca:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    59cc:	81 e0       	ldi	r24, 0x01	; 1
    59ce:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    59d0:	8a 81       	ldd	r24, Y+2	; 0x02
    59d2:	9b 81       	ldd	r25, Y+3	; 0x03
    59d4:	61 e0       	ldi	r22, 0x01	; 1
    59d6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <HLCD_sendCmd>
    59da:	89 83       	std	Y+1, r24	; 0x01

	return lcdRet;
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    59de:	0f 90       	pop	r0
    59e0:	0f 90       	pop	r0
    59e2:	0f 90       	pop	r0
    59e4:	cf 91       	pop	r28
    59e6:	df 91       	pop	r29
    59e8:	08 95       	ret

000059ea <HKP_init>:

static ST_GPIO_cfg_t arrOfRows[KEYPAD_ROWS_SIZE];
static ST_GPIO_cfg_t arrOfColumns[KEYPAD_COLUMNS_SIZE];


EN_HKP_systemStatus_t HKP_init(ST_HKP_cfg_t const *ST_ptrKeypadInstance) {
    59ea:	df 93       	push	r29
    59ec:	cf 93       	push	r28
    59ee:	cd b7       	in	r28, 0x3d	; 61
    59f0:	de b7       	in	r29, 0x3e	; 62
    59f2:	2e 97       	sbiw	r28, 0x0e	; 14
    59f4:	0f b6       	in	r0, 0x3f	; 63
    59f6:	f8 94       	cli
    59f8:	de bf       	out	0x3e, r29	; 62
    59fa:	0f be       	out	0x3f, r0	; 63
    59fc:	cd bf       	out	0x3d, r28	; 61
    59fe:	9e 87       	std	Y+14, r25	; 0x0e
    5a00:	8d 87       	std	Y+13, r24	; 0x0d

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
    5a02:	81 e0       	ldi	r24, 0x01	; 1
    5a04:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	8b 83       	std	Y+3, r24	; 0x03
	if (PTR_NULL != ST_ptrKeypadInstance) {
    5a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a0e:	00 97       	sbiw	r24, 0x00	; 0
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <HKP_init+0x2a>
    5a12:	88 c0       	rjmp	.+272    	; 0x5b24 <HKP_init+0x13a>
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    5a14:	1a 82       	std	Y+2, r1	; 0x02
    5a16:	3b c0       	rjmp	.+118    	; 0x5a8e <HKP_init+0xa4>
			{
					.pinDirection = GPIO_OUTPUT,
					.logicOnPin = GPIO_HIGH,
					.portName = ST_ptrKeypadInstance->arrOfRowPorts[Rowscounter],
					.pinNumber = ST_ptrKeypadInstance->arrOfRowPins[Rowscounter]
			};
    5a18:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1a:	28 2f       	mov	r18, r24
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a22:	82 0f       	add	r24, r18
    5a24:	93 1f       	adc	r25, r19
    5a26:	fc 01       	movw	r30, r24
    5a28:	34 96       	adiw	r30, 0x04	; 4
    5a2a:	40 81       	ld	r20, Z
    5a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a2e:	28 2f       	mov	r18, r24
    5a30:	30 e0       	ldi	r19, 0x00	; 0
    5a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a36:	fc 01       	movw	r30, r24
    5a38:	e2 0f       	add	r30, r18
    5a3a:	f3 1f       	adc	r31, r19
    5a3c:	80 81       	ld	r24, Z
    5a3e:	4d 83       	std	Y+5, r20	; 0x05
    5a40:	8e 83       	std	Y+6, r24	; 0x06
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	8f 83       	std	Y+7, r24	; 0x07
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	88 87       	std	Y+8, r24	; 0x08
			gpioRet = GPIO_initPin(&tempStructForRowPin);
    5a4a:	ce 01       	movw	r24, r28
    5a4c:	05 96       	adiw	r24, 0x05	; 5
    5a4e:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    5a52:	8b 83       	std	Y+3, r24	; 0x03
			if (gpioRet == GPIO_OK)
    5a54:	8b 81       	ldd	r24, Y+3	; 0x03
    5a56:	88 23       	and	r24, r24
    5a58:	b9 f4       	brne	.+46     	; 0x5a88 <HKP_init+0x9e>
			{
				arrOfRows[Rowscounter] = tempStructForRowPin;
    5a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5c:	88 2f       	mov	r24, r24
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	88 0f       	add	r24, r24
    5a62:	99 1f       	adc	r25, r25
    5a64:	88 0f       	add	r24, r24
    5a66:	99 1f       	adc	r25, r25
    5a68:	fc 01       	movw	r30, r24
    5a6a:	ed 55       	subi	r30, 0x5D	; 93
    5a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a70:	9e 81       	ldd	r25, Y+6	; 0x06
    5a72:	af 81       	ldd	r26, Y+7	; 0x07
    5a74:	b8 85       	ldd	r27, Y+8	; 0x08
    5a76:	80 83       	st	Z, r24
    5a78:	91 83       	std	Z+1, r25	; 0x01
    5a7a:	a2 83       	std	Z+2, r26	; 0x02
    5a7c:	b3 83       	std	Z+3, r27	; 0x03
				kpRet = HKP_OK;
    5a7e:	1c 82       	std	Y+4, r1	; 0x04

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    5a80:	8a 81       	ldd	r24, Y+2	; 0x02
    5a82:	8f 5f       	subi	r24, 0xFF	; 255
    5a84:	8a 83       	std	Y+2, r24	; 0x02
    5a86:	03 c0       	rjmp	.+6      	; 0x5a8e <HKP_init+0xa4>
				arrOfRows[Rowscounter] = tempStructForRowPin;
				kpRet = HKP_OK;
			}
			else
			{
				kpRet = HKP_NOK;
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	8c 83       	std	Y+4, r24	; 0x04
    5a8c:	03 c0       	rjmp	.+6      	; 0x5a94 <HKP_init+0xaa>

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    5a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a90:	84 30       	cpi	r24, 0x04	; 4
    5a92:	10 f2       	brcs	.-124    	; 0x5a18 <HKP_init+0x2e>
			{
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
    5a94:	8b 81       	ldd	r24, Y+3	; 0x03
    5a96:	88 23       	and	r24, r24
    5a98:	09 f0       	breq	.+2      	; 0x5a9c <HKP_init+0xb2>
    5a9a:	41 c0       	rjmp	.+130    	; 0x5b1e <HKP_init+0x134>
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5a9c:	19 82       	std	Y+1, r1	; 0x01
    5a9e:	3b c0       	rjmp	.+118    	; 0x5b16 <HKP_init+0x12c>
				{
						.pinDirection = GPIO_INPUT,
						.logicOnPin = GPIO_HIGH,
						.portName = ST_ptrKeypadInstance->arrOfColumnPorts[Colscounter],
						.pinNumber = ST_ptrKeypadInstance->arrOfColumnPins[Colscounter]
				};
    5aa0:	89 81       	ldd	r24, Y+1	; 0x01
    5aa2:	28 2f       	mov	r18, r24
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aaa:	82 0f       	add	r24, r18
    5aac:	93 1f       	adc	r25, r19
    5aae:	fc 01       	movw	r30, r24
    5ab0:	3c 96       	adiw	r30, 0x0c	; 12
    5ab2:	40 81       	ld	r20, Z
    5ab4:	89 81       	ldd	r24, Y+1	; 0x01
    5ab6:	28 2f       	mov	r18, r24
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5abe:	82 0f       	add	r24, r18
    5ac0:	93 1f       	adc	r25, r19
    5ac2:	fc 01       	movw	r30, r24
    5ac4:	38 96       	adiw	r30, 0x08	; 8
    5ac6:	80 81       	ld	r24, Z
    5ac8:	49 87       	std	Y+9, r20	; 0x09
    5aca:	8a 87       	std	Y+10, r24	; 0x0a
    5acc:	1b 86       	std	Y+11, r1	; 0x0b
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	8c 87       	std	Y+12, r24	; 0x0c
				gpioRet = GPIO_initPin(&tempStructForColPin);
    5ad2:	ce 01       	movw	r24, r28
    5ad4:	09 96       	adiw	r24, 0x09	; 9
    5ad6:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_initPin>
    5ada:	8b 83       	std	Y+3, r24	; 0x03
				if (gpioRet == GPIO_OK)
    5adc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ade:	88 23       	and	r24, r24
    5ae0:	b9 f4       	brne	.+46     	; 0x5b10 <HKP_init+0x126>
				{
					arrOfColumns[Colscounter] = tempStructForColPin;
    5ae2:	89 81       	ldd	r24, Y+1	; 0x01
    5ae4:	88 2f       	mov	r24, r24
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	fc 01       	movw	r30, r24
    5af2:	ed 54       	subi	r30, 0x4D	; 77
    5af4:	fe 4f       	sbci	r31, 0xFE	; 254
    5af6:	89 85       	ldd	r24, Y+9	; 0x09
    5af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5afa:	ab 85       	ldd	r26, Y+11	; 0x0b
    5afc:	bc 85       	ldd	r27, Y+12	; 0x0c
    5afe:	80 83       	st	Z, r24
    5b00:	91 83       	std	Z+1, r25	; 0x01
    5b02:	a2 83       	std	Z+2, r26	; 0x02
    5b04:	b3 83       	std	Z+3, r27	; 0x03
					kpRet = HKP_OK;
    5b06:	1c 82       	std	Y+4, r1	; 0x04
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5b08:	89 81       	ldd	r24, Y+1	; 0x01
    5b0a:	8f 5f       	subi	r24, 0xFF	; 255
    5b0c:	89 83       	std	Y+1, r24	; 0x01
    5b0e:	03 c0       	rjmp	.+6      	; 0x5b16 <HKP_init+0x12c>
					arrOfColumns[Colscounter] = tempStructForColPin;
					kpRet = HKP_OK;
				}
				else
				{
					kpRet = HKP_NOK;
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	8c 83       	std	Y+4, r24	; 0x04
    5b14:	09 c0       	rjmp	.+18     	; 0x5b28 <HKP_init+0x13e>
				kpRet = HKP_NOK;
				break;
			}
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	84 30       	cpi	r24, 0x04	; 4
    5b1a:	10 f2       	brcs	.-124    	; 0x5aa0 <HKP_init+0xb6>
    5b1c:	05 c0       	rjmp	.+10     	; 0x5b28 <HKP_init+0x13e>

			}
		}
		else
		{
			kpRet = HKP_NOK;
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	8c 83       	std	Y+4, r24	; 0x04
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <HKP_init+0x13e>
		}

	}
	else
	{
		kpRet = HKP_PTR_NULL;
    5b24:	82 e0       	ldi	r24, 0x02	; 2
    5b26:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    5b28:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5b2a:	2e 96       	adiw	r28, 0x0e	; 14
    5b2c:	0f b6       	in	r0, 0x3f	; 63
    5b2e:	f8 94       	cli
    5b30:	de bf       	out	0x3e, r29	; 62
    5b32:	0f be       	out	0x3f, r0	; 63
    5b34:	cd bf       	out	0x3d, r28	; 61
    5b36:	cf 91       	pop	r28
    5b38:	df 91       	pop	r29
    5b3a:	08 95       	ret

00005b3c <HKP_scanningForPressedBtn>:


EN_HKP_systemStatus_t
HKP_scanningForPressedBtn(uint8_t *pressedBtnVal) {
    5b3c:	df 93       	push	r29
    5b3e:	cf 93       	push	r28
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	27 97       	sbiw	r28, 0x07	; 7
    5b46:	0f b6       	in	r0, 0x3f	; 63
    5b48:	f8 94       	cli
    5b4a:	de bf       	out	0x3e, r29	; 62
    5b4c:	0f be       	out	0x3f, r0	; 63
    5b4e:	cd bf       	out	0x3d, r28	; 61
    5b50:	9f 83       	std	Y+7, r25	; 0x07
    5b52:	8e 83       	std	Y+6, r24	; 0x06

	EN_HKP_systemStatus_t kpRet = HKP_NOK;
    5b54:	81 e0       	ldi	r24, 0x01	; 1
    5b56:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5b58:	81 e0       	ldi	r24, 0x01	; 1
    5b5a:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
    5b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b5e:	9f 81       	ldd	r25, Y+7	; 0x07
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	09 f4       	brne	.+2      	; 0x5b66 <HKP_scanningForPressedBtn+0x2a>
    5b64:	69 c0       	rjmp	.+210    	; 0x5c38 <HKP_scanningForPressedBtn+0xfc>
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    5b66:	1a 82       	std	Y+2, r1	; 0x02
    5b68:	62 c0       	rjmp	.+196    	; 0x5c2e <HKP_scanningForPressedBtn+0xf2>

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	88 2f       	mov	r24, r24
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	88 0f       	add	r24, r24
    5b72:	99 1f       	adc	r25, r25
    5b74:	88 0f       	add	r24, r24
    5b76:	99 1f       	adc	r25, r25
    5b78:	8d 55       	subi	r24, 0x5D	; 93
    5b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    5b7c:	60 e0       	ldi	r22, 0x00	; 0
    5b7e:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    5b82:	8b 83       	std	Y+3, r24	; 0x03

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5b84:	19 82       	std	Y+1, r1	; 0x01
    5b86:	3f c0       	rjmp	.+126    	; 0x5c06 <HKP_scanningForPressedBtn+0xca>

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    5b88:	89 81       	ldd	r24, Y+1	; 0x01
    5b8a:	88 2f       	mov	r24, r24
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	88 0f       	add	r24, r24
    5b90:	99 1f       	adc	r25, r25
    5b92:	88 0f       	add	r24, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	8d 54       	subi	r24, 0x4D	; 77
    5b98:	9e 4f       	sbci	r25, 0xFE	; 254
    5b9a:	9e 01       	movw	r18, r28
    5b9c:	2b 5f       	subi	r18, 0xFB	; 251
    5b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba0:	b9 01       	movw	r22, r18
    5ba2:	0e 94 ae 12 	call	0x255c	; 0x255c <GPIO_readPinLogic>
    5ba6:	8b 83       	std	Y+3, r24	; 0x03

				if (valOfPressedBtn == GPIO_LOW) {
    5ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    5baa:	88 23       	and	r24, r24
    5bac:	49 f5       	brne	.+82     	; 0x5c00 <HKP_scanningForPressedBtn+0xc4>
    5bae:	10 c0       	rjmp	.+32     	; 0x5bd0 <HKP_scanningForPressedBtn+0x94>
					while(valOfPressedBtn == GPIO_LOW)
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
    5bb0:	89 81       	ldd	r24, Y+1	; 0x01
    5bb2:	88 2f       	mov	r24, r24
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	88 0f       	add	r24, r24
    5bb8:	99 1f       	adc	r25, r25
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	8d 54       	subi	r24, 0x4D	; 77
    5bc0:	9e 4f       	sbci	r25, 0xFE	; 254
    5bc2:	9e 01       	movw	r18, r28
    5bc4:	2b 5f       	subi	r18, 0xFB	; 251
    5bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc8:	b9 01       	movw	r22, r18
    5bca:	0e 94 ae 12 	call	0x255c	; 0x255c <GPIO_readPinLogic>
    5bce:	8b 83       	std	Y+3, r24	; 0x03
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {

				gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);

				if (valOfPressedBtn == GPIO_LOW) {
					while(valOfPressedBtn == GPIO_LOW)
    5bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bd2:	88 23       	and	r24, r24
    5bd4:	69 f3       	breq	.-38     	; 0x5bb0 <HKP_scanningForPressedBtn+0x74>
					{
						gpioRet = GPIO_readPinLogic(&(arrOfColumns[Colscounter]),&valOfPressedBtn);
					}
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
    5bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd8:	48 2f       	mov	r20, r24
    5bda:	50 e0       	ldi	r21, 0x00	; 0
    5bdc:	89 81       	ldd	r24, Y+1	; 0x01
    5bde:	28 2f       	mov	r18, r24
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	ca 01       	movw	r24, r20
    5be4:	88 0f       	add	r24, r24
    5be6:	99 1f       	adc	r25, r25
    5be8:	88 0f       	add	r24, r24
    5bea:	99 1f       	adc	r25, r25
    5bec:	82 0f       	add	r24, r18
    5bee:	93 1f       	adc	r25, r19
    5bf0:	fc 01       	movw	r30, r24
    5bf2:	e8 5b       	subi	r30, 0xB8	; 184
    5bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    5bf6:	80 81       	ld	r24, Z
    5bf8:	ee 81       	ldd	r30, Y+6	; 0x06
    5bfa:	ff 81       	ldd	r31, Y+7	; 0x07
    5bfc:	80 83       	st	Z, r24
    5bfe:	07 c0       	rjmp	.+14     	; 0x5c0e <HKP_scanningForPressedBtn+0xd2>

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_LOW);

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    5c00:	89 81       	ldd	r24, Y+1	; 0x01
    5c02:	8f 5f       	subi	r24, 0xFF	; 255
    5c04:	89 83       	std	Y+1, r24	; 0x01
    5c06:	89 81       	ldd	r24, Y+1	; 0x01
    5c08:	84 30       	cpi	r24, 0x04	; 4
    5c0a:	08 f4       	brcc	.+2      	; 0x5c0e <HKP_scanningForPressedBtn+0xd2>
    5c0c:	bd cf       	rjmp	.-134    	; 0x5b88 <HKP_scanningForPressedBtn+0x4c>
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
					break;
				}
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
    5c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c10:	88 2f       	mov	r24, r24
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	8d 55       	subi	r24, 0x5D	; 93
    5c1e:	9e 4f       	sbci	r25, 0xFE	; 254
    5c20:	61 e0       	ldi	r22, 0x01	; 1
    5c22:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePinLogic>
    5c26:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != pressedBtnVal) {
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    5c28:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2a:	8f 5f       	subi	r24, 0xFF	; 255
    5c2c:	8a 83       	std	Y+2, r24	; 0x02
    5c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c30:	84 30       	cpi	r24, 0x04	; 4
    5c32:	08 f4       	brcc	.+2      	; 0x5c36 <HKP_scanningForPressedBtn+0xfa>
    5c34:	9a cf       	rjmp	.-204    	; 0x5b6a <HKP_scanningForPressedBtn+0x2e>
    5c36:	02 c0       	rjmp	.+4      	; 0x5c3c <HKP_scanningForPressedBtn+0x100>
			}

			gpioRet = GPIO_writePinLogic(&(arrOfRows[Rowscounter]),GPIO_HIGH);
		}
	} else {
		kpRet = HKP_PTR_NULL;
    5c38:	82 e0       	ldi	r24, 0x02	; 2
    5c3a:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    5c3c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5c3e:	27 96       	adiw	r28, 0x07	; 7
    5c40:	0f b6       	in	r0, 0x3f	; 63
    5c42:	f8 94       	cli
    5c44:	de bf       	out	0x3e, r29	; 62
    5c46:	0f be       	out	0x3f, r0	; 63
    5c48:	cd bf       	out	0x3d, r28	; 61
    5c4a:	cf 91       	pop	r28
    5c4c:	df 91       	pop	r29
    5c4e:	08 95       	ret

00005c50 <appInit>:
/*************************************************************************/

#include "app.h"

void appInit(void)
{
    5c50:	df 93       	push	r29
    5c52:	cf 93       	push	r28
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
	CLOCK_init();
    5c58:	0e 94 c9 05 	call	0xb92	; 0xb92 <CLOCK_init>
}
    5c5c:	cf 91       	pop	r28
    5c5e:	df 91       	pop	r29
    5c60:	08 95       	ret

00005c62 <appMain>:
void appMain(void)
{
    5c62:	df 93       	push	r29
    5c64:	cf 93       	push	r28
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		CLOCK_interface();
    5c6a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <CLOCK_interface>
    5c6e:	fd cf       	rjmp	.-6      	; 0x5c6a <appMain+0x8>

00005c70 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    5c70:	df 93       	push	r29
    5c72:	cf 93       	push	r28
    5c74:	cd b7       	in	r28, 0x3d	; 61
    5c76:	de b7       	in	r29, 0x3e	; 62
	appInit();
    5c78:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <appInit>
	appMain();
    5c7c:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <appMain>
}
    5c80:	cf 91       	pop	r28
    5c82:	df 91       	pop	r29
    5c84:	08 95       	ret

00005c86 <__prologue_saves__>:
    5c86:	2f 92       	push	r2
    5c88:	3f 92       	push	r3
    5c8a:	4f 92       	push	r4
    5c8c:	5f 92       	push	r5
    5c8e:	6f 92       	push	r6
    5c90:	7f 92       	push	r7
    5c92:	8f 92       	push	r8
    5c94:	9f 92       	push	r9
    5c96:	af 92       	push	r10
    5c98:	bf 92       	push	r11
    5c9a:	cf 92       	push	r12
    5c9c:	df 92       	push	r13
    5c9e:	ef 92       	push	r14
    5ca0:	ff 92       	push	r15
    5ca2:	0f 93       	push	r16
    5ca4:	1f 93       	push	r17
    5ca6:	cf 93       	push	r28
    5ca8:	df 93       	push	r29
    5caa:	cd b7       	in	r28, 0x3d	; 61
    5cac:	de b7       	in	r29, 0x3e	; 62
    5cae:	ca 1b       	sub	r28, r26
    5cb0:	db 0b       	sbc	r29, r27
    5cb2:	0f b6       	in	r0, 0x3f	; 63
    5cb4:	f8 94       	cli
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	0f be       	out	0x3f, r0	; 63
    5cba:	cd bf       	out	0x3d, r28	; 61
    5cbc:	09 94       	ijmp

00005cbe <__epilogue_restores__>:
    5cbe:	2a 88       	ldd	r2, Y+18	; 0x12
    5cc0:	39 88       	ldd	r3, Y+17	; 0x11
    5cc2:	48 88       	ldd	r4, Y+16	; 0x10
    5cc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5cc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5cc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cca:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ccc:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cce:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cd0:	b9 84       	ldd	r11, Y+9	; 0x09
    5cd2:	c8 84       	ldd	r12, Y+8	; 0x08
    5cd4:	df 80       	ldd	r13, Y+7	; 0x07
    5cd6:	ee 80       	ldd	r14, Y+6	; 0x06
    5cd8:	fd 80       	ldd	r15, Y+5	; 0x05
    5cda:	0c 81       	ldd	r16, Y+4	; 0x04
    5cdc:	1b 81       	ldd	r17, Y+3	; 0x03
    5cde:	aa 81       	ldd	r26, Y+2	; 0x02
    5ce0:	b9 81       	ldd	r27, Y+1	; 0x01
    5ce2:	ce 0f       	add	r28, r30
    5ce4:	d1 1d       	adc	r29, r1
    5ce6:	0f b6       	in	r0, 0x3f	; 63
    5ce8:	f8 94       	cli
    5cea:	de bf       	out	0x3e, r29	; 62
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	cd bf       	out	0x3d, r28	; 61
    5cf0:	ed 01       	movw	r28, r26
    5cf2:	08 95       	ret

00005cf4 <itoa>:
    5cf4:	fb 01       	movw	r30, r22
    5cf6:	9f 01       	movw	r18, r30
    5cf8:	e8 94       	clt
    5cfa:	42 30       	cpi	r20, 0x02	; 2
    5cfc:	c4 f0       	brlt	.+48     	; 0x5d2e <itoa+0x3a>
    5cfe:	45 32       	cpi	r20, 0x25	; 37
    5d00:	b4 f4       	brge	.+44     	; 0x5d2e <itoa+0x3a>
    5d02:	4a 30       	cpi	r20, 0x0A	; 10
    5d04:	29 f4       	brne	.+10     	; 0x5d10 <itoa+0x1c>
    5d06:	97 fb       	bst	r25, 7
    5d08:	1e f4       	brtc	.+6      	; 0x5d10 <itoa+0x1c>
    5d0a:	90 95       	com	r25
    5d0c:	81 95       	neg	r24
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	64 2f       	mov	r22, r20
    5d12:	77 27       	eor	r23, r23
    5d14:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodhi4>
    5d18:	80 5d       	subi	r24, 0xD0	; 208
    5d1a:	8a 33       	cpi	r24, 0x3A	; 58
    5d1c:	0c f0       	brlt	.+2      	; 0x5d20 <itoa+0x2c>
    5d1e:	89 5d       	subi	r24, 0xD9	; 217
    5d20:	81 93       	st	Z+, r24
    5d22:	cb 01       	movw	r24, r22
    5d24:	00 97       	sbiw	r24, 0x00	; 0
    5d26:	a1 f7       	brne	.-24     	; 0x5d10 <itoa+0x1c>
    5d28:	16 f4       	brtc	.+4      	; 0x5d2e <itoa+0x3a>
    5d2a:	5d e2       	ldi	r21, 0x2D	; 45
    5d2c:	51 93       	st	Z+, r21
    5d2e:	10 82       	st	Z, r1
    5d30:	c9 01       	movw	r24, r18
    5d32:	0c 94 9b 2e 	jmp	0x5d36	; 0x5d36 <strrev>

00005d36 <strrev>:
    5d36:	dc 01       	movw	r26, r24
    5d38:	fc 01       	movw	r30, r24
    5d3a:	67 2f       	mov	r22, r23
    5d3c:	71 91       	ld	r23, Z+
    5d3e:	77 23       	and	r23, r23
    5d40:	e1 f7       	brne	.-8      	; 0x5d3a <strrev+0x4>
    5d42:	32 97       	sbiw	r30, 0x02	; 2
    5d44:	04 c0       	rjmp	.+8      	; 0x5d4e <strrev+0x18>
    5d46:	7c 91       	ld	r23, X
    5d48:	6d 93       	st	X+, r22
    5d4a:	70 83       	st	Z, r23
    5d4c:	62 91       	ld	r22, -Z
    5d4e:	ae 17       	cp	r26, r30
    5d50:	bf 07       	cpc	r27, r31
    5d52:	c8 f3       	brcs	.-14     	; 0x5d46 <strrev+0x10>
    5d54:	08 95       	ret

00005d56 <__udivmodhi4>:
    5d56:	aa 1b       	sub	r26, r26
    5d58:	bb 1b       	sub	r27, r27
    5d5a:	51 e1       	ldi	r21, 0x11	; 17
    5d5c:	07 c0       	rjmp	.+14     	; 0x5d6c <__udivmodhi4_ep>

00005d5e <__udivmodhi4_loop>:
    5d5e:	aa 1f       	adc	r26, r26
    5d60:	bb 1f       	adc	r27, r27
    5d62:	a6 17       	cp	r26, r22
    5d64:	b7 07       	cpc	r27, r23
    5d66:	10 f0       	brcs	.+4      	; 0x5d6c <__udivmodhi4_ep>
    5d68:	a6 1b       	sub	r26, r22
    5d6a:	b7 0b       	sbc	r27, r23

00005d6c <__udivmodhi4_ep>:
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	5a 95       	dec	r21
    5d72:	a9 f7       	brne	.-22     	; 0x5d5e <__udivmodhi4_loop>
    5d74:	80 95       	com	r24
    5d76:	90 95       	com	r25
    5d78:	bc 01       	movw	r22, r24
    5d7a:	cd 01       	movw	r24, r26
    5d7c:	08 95       	ret

00005d7e <_exit>:
    5d7e:	f8 94       	cli

00005d80 <__stop_program>:
    5d80:	ff cf       	rjmp	.-2      	; 0x5d80 <__stop_program>
