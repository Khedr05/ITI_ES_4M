
08_Lec_1_Assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00003f96  0000402a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a6  008000a6  00004070  2**0
                  ALLOC
  3 .stab         00003fa8  00000000  00000000  00004070  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022eb  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a303  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a443  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000de94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <main>
      8a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
                                             &PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
                                            &PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_initPin+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	b1 f0       	breq	.+44     	; 0xb8e <GPIO_initPin+0x48>
    ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b62:	ea 81       	ldd	r30, Y+2	; 0x02
     b64:	fb 81       	ldd	r31, Y+3	; 0x03
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	62 2f       	mov	r22, r18
     b6e:	0e 94 d0 05 	call	0xba0	; 0xba0 <GPIO_changePinDir>
     b72:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == ret) {
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 23       	and	r24, r24
     b78:	61 f4       	brne	.+24     	; 0xb92 <GPIO_initPin+0x4c>
      ret =
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	23 81       	ldd	r18, Z+3	; 0x03
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	9b 81       	ldd	r25, Y+3	; 0x03
     b84:	62 2f       	mov	r22, r18
     b86:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <GPIO_initPin+0x4c>
          GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
    } else {
      /*Do Nothin*/
    }
  } else {
    ret = GPIO_NULL_PTR;
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                        EN_GPIO_pinDir_t copyNewPinDir) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <GPIO_changePinDir+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_changePinDir+0x8>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_changePinDir+0xa>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	9b 83       	std	Y+3, r25	; 0x03
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <GPIO_changePinDir+0x22>
     bc0:	68 c0       	rjmp	.+208    	; 0xc92 <GPIO_changePinDir+0xf2>
    switch (copyNewPinDir) {
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3e 83       	std	Y+6, r19	; 0x06
     bca:	2d 83       	std	Y+5, r18	; 0x05
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <GPIO_changePinDir+0x40>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	31 05       	cpc	r19, r1
     bdc:	71 f1       	breq	.+92     	; 0xc3a <GPIO_changePinDir+0x9a>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <GPIO_changePinDir+0xf6>
    case GPIO_INPUT: {
      CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	fc 01       	movw	r30, r24
     bf0:	e8 59       	subi	r30, 0x98	; 152
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	a0 81       	ld	r26, Z
     bf6:	b1 81       	ldd	r27, Z+1	; 0x01
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	fb 81       	ldd	r31, Y+3	; 0x03
     bfc:	80 81       	ld	r24, Z
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	fc 01       	movw	r30, r24
     c08:	e8 59       	subi	r30, 0x98	; 152
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	01 90       	ld	r0, Z+
     c0e:	f0 81       	ld	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <GPIO_changePinDir+0x8c>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <GPIO_changePinDir+0x88>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	2e c0       	rjmp	.+92     	; 0xc96 <GPIO_changePinDir+0xf6>
      break;
    }
    case GPIO_OUTPUT: {
      SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c3a:	ea 81       	ldd	r30, Y+2	; 0x02
     c3c:	fb 81       	ldd	r31, Y+3	; 0x03
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	fc 01       	movw	r30, r24
     c4a:	e8 59       	subi	r30, 0x98	; 152
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	a0 81       	ld	r26, Z
     c50:	b1 81       	ldd	r27, Z+1	; 0x01
     c52:	ea 81       	ldd	r30, Y+2	; 0x02
     c54:	fb 81       	ldd	r31, Y+3	; 0x03
     c56:	80 81       	ld	r24, Z
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	fc 01       	movw	r30, r24
     c62:	e8 59       	subi	r30, 0x98	; 152
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	01 90       	ld	r0, Z+
     c68:	f0 81       	ld	r31, Z
     c6a:	e0 2d       	mov	r30, r0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xe6>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_changePinDir+0xe2>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <GPIO_changePinDir+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	26 96       	adiw	r28, 0x06	; 6
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                         EN_GPIO_pinLogic_t copyNewPinLogic) {
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <GPIO_writePinLogic+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <GPIO_writePinLogic+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <GPIO_writePinLogic+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9b 83       	std	Y+3, r25	; 0x03
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <GPIO_writePinLogic+0x22>
     cca:	68 c0       	rjmp	.+208    	; 0xd9c <GPIO_writePinLogic+0xf2>
    switch (copyNewPinLogic) {
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	2d 83       	std	Y+5, r18	; 0x05
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <GPIO_writePinLogic+0x40>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	71 f1       	breq	.+92     	; 0xd44 <GPIO_writePinLogic+0x9a>
     ce8:	5b c0       	rjmp	.+182    	; 0xda0 <GPIO_writePinLogic+0xf6>
    case GPIO_LOW: {
      CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cea:	ea 81       	ldd	r30, Y+2	; 0x02
     cec:	fb 81       	ldd	r31, Y+3	; 0x03
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e0 59       	subi	r30, 0x90	; 144
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	a0 81       	ld	r26, Z
     d00:	b1 81       	ldd	r27, Z+1	; 0x01
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	fc 01       	movw	r30, r24
     d12:	e0 59       	subi	r30, 0x90	; 144
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_writePinLogic+0x8c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_writePinLogic+0x88>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	2e c0       	rjmp	.+92     	; 0xda0 <GPIO_writePinLogic+0xf6>
      break;
    }
    case GPIO_HIGH: {
      SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	fc 01       	movw	r30, r24
     d54:	e0 59       	subi	r30, 0x90	; 144
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	ea 81       	ldd	r30, Y+2	; 0x02
     d5e:	fb 81       	ldd	r31, Y+3	; 0x03
     d60:	80 81       	ld	r24, Z
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	fc 01       	movw	r30, r24
     d6c:	e0 59       	subi	r30, 0x90	; 144
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xe6>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_writePinLogic+0xe2>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_writePinLogic+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	26 96       	adiw	r28, 0x06	; 6
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                  EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <GPIO_readPinLogic+0x6>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <GPIO_readPinLogic+0x8>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7d 83       	std	Y+5, r23	; 0x05
     dc8:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	11 f1       	breq	.+68     	; 0xe1a <GPIO_readPinLogic+0x66>
    *retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	fc 01       	movw	r30, r24
     de6:	e8 58       	subi	r30, 0x88	; 136
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_readPinLogic+0x54>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_readPinLogic+0x50>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	ec 81       	ldd	r30, Y+4	; 0x04
     e12:	fd 81       	ldd	r31, Y+5	; 0x05
     e14:	80 83       	st	Z, r24
                                  ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <GPIO_readPinLogic+0x6a>
  } else {
    ret = GPIO_NULL_PTR;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_togglePinLogic+0x6>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f1       	breq	.+88     	; 0xea4 <GPIO_togglePinLogic+0x74>
    TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	e0 59       	subi	r30, 0x90	; 144
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	ea 81       	ldd	r30, Y+2	; 0x02
     e66:	fb 81       	ldd	r31, Y+3	; 0x03
     e68:	80 81       	ld	r24, Z
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	fc 01       	movw	r30, r24
     e74:	e0 59       	subi	r30, 0x90	; 144
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x68>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_togglePinLogic+0x64>
     e9c:	84 27       	eor	r24, r20
     e9e:	8c 93       	st	X, r24
            ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_togglePinLogic+0x78>
  } else {
    ret = GPIO_NULL_PTR;
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 83       	std	Y+1, r24	; 0x01
  }

  return ret;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
                                    EN_GPIO_pinDir_t copyPortDir,
                                    EN_GPIO_pinLogic_t copyPortLogic) {
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	4c 83       	std	Y+4, r20	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01

  switch (copyPortDir) {
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	38 87       	std	Y+8, r19	; 0x08
     edc:	2f 83       	std	Y+7, r18	; 0x07
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	31 f0       	breq	.+12     	; 0xef2 <GPIO_initPort+0x3c>
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	31 05       	cpc	r19, r1
     eee:	79 f0       	breq	.+30     	; 0xf0e <GPIO_initPort+0x58>
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <GPIO_initPort+0x74>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e8 59       	subi	r30, 0x98	; 152
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	01 90       	ld	r0, Z+
     f04:	f0 81       	ld	r31, Z
     f06:	e0 2d       	mov	r30, r0
     f08:	10 82       	st	Z, r1
    ret = GPIO_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <GPIO_initPort+0x74>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 59       	subi	r30, 0x98	; 152
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  switch (copyPortLogic) {
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	31 f0       	breq	.+12     	; 0xf48 <GPIO_initPort+0x92>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	79 f0       	breq	.+30     	; 0xf64 <GPIO_initPort+0xae>
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <GPIO_initPort+0xca>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e0 59       	subi	r30, 0x90	; 144
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	10 82       	st	Z, r1
    ret = GPIO_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <GPIO_initPort+0xca>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	fc 01       	movw	r30, r24
     f70:	e0 59       	subi	r30, 0x90	; 144
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	01 90       	ld	r0, Z+
     f76:	f0 81       	ld	r31, Z
     f78:	e0 2d       	mov	r30, r0
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f7e:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
                                         EN_GPIO_pinDir_t copyNewPortDir) {
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_changePortDir+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GPIO_changePortDir+0x8>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01

  switch (copyNewPortDir) {
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 83       	std	Y+5, r19	; 0x05
     fb2:	2c 83       	std	Y+4, r18	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	31 f0       	breq	.+12     	; 0xfc8 <GPIO_changePortDir+0x34>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <GPIO_changePortDir+0x50>
     fc6:	1c c0       	rjmp	.+56     	; 0x1000 <GPIO_changePortDir+0x6c>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	10 82       	st	Z, r1
    ret = GPIO_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <GPIO_changePortDir+0x6c>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	e8 59       	subi	r30, 0x98	; 152
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	01 90       	ld	r0, Z+
     ff6:	f0 81       	ld	r31, Z
     ff8:	e0 2d       	mov	r30, r0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
    ret = GPIO_OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
                                          EN_GPIO_pinLogic_t copyNewPortLogic) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_writePortLogic+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_writePortLogic+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
  switch (copyNewPortLogic) {
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <GPIO_writePortLogic+0x34>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	79 f0       	breq	.+30     	; 0x1062 <GPIO_writePortLogic+0x50>
    1044:	1c c0       	rjmp	.+56     	; 0x107e <GPIO_writePortLogic+0x6c>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	fc 01       	movw	r30, r24
    1052:	e0 59       	subi	r30, 0x90	; 144
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	01 90       	ld	r0, Z+
    1058:	f0 81       	ld	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	10 82       	st	Z, r1
    ret = GPIO_OK;
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0e c0       	rjmp	.+28     	; 0x107e <GPIO_writePortLogic+0x6c>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e0 59       	subi	r30, 0x90	; 144
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 83       	st	Z, r24
    ret = GPIO_OK;
    107c:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
                   EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPortLogic+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPortLogic+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	7c 83       	std	Y+4, r23	; 0x04
    10a0:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01

  *retCurrentPortLogic = *pin_registers[copyPortName];
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e8 58       	subi	r30, 0x88	; 136
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	80 83       	st	Z, r24
  ret = GPIO_OK;
    10c4:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_togglePortLogic+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
  *ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	a0 81       	ld	r26, Z
    10f8:	b1 81       	ldd	r27, Z+1	; 0x01
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e8 59       	subi	r30, 0x98	; 152
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	20 81       	ld	r18, Z
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e8 59       	subi	r30, 0x98	; 152
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	80 81       	ld	r24, Z
    112a:	82 27       	eor	r24, r18
    112c:	8c 93       	st	X, r24
  ret = GPIO_OK;
    112e:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	28 97       	sbiw	r28, 0x08	; 8
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	98 87       	std	Y+8, r25	; 0x08
    1152:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	98 85       	ldd	r25, Y+8	; 0x08
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	d9 f0       	breq	.+54     	; 0x119a <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1164:	ef 81       	ldd	r30, Y+7	; 0x07
    1166:	f8 85       	ldd	r31, Y+8	; 0x08
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	ef 81       	ldd	r30, Y+7	; 0x07
    116c:	f8 85       	ldd	r31, Y+8	; 0x08
    116e:	92 81       	ldd	r25, Z+2	; 0x02
    1170:	ef 81       	ldd	r30, Y+7	; 0x07
    1172:	f8 85       	ldd	r31, Y+8	; 0x08
    1174:	20 81       	ld	r18, Z
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    1180:	ce 01       	movw	r24, r28
    1182:	03 96       	adiw	r24, 0x03	; 3
    1184:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1188:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 23       	and	r24, r24
    118e:	11 f4       	brne	.+4      	; 0x1194 <LED_init+0x58>
      ledRet = LED_OK;
    1190:	1a 82       	std	Y+2, r1	; 0x02
    1192:	05 c0       	rjmp	.+10     	; 0x119e <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	02 c0       	rjmp	.+4      	; 0x119e <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11a0:	28 96       	adiw	r28, 0x08	; 8
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	28 97       	sbiw	r28, 0x08	; 8
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
    11d4:	98 85       	ldd	r25, Y+8	; 0x08
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	e1 f0       	breq	.+56     	; 0x1212 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    11da:	ef 81       	ldd	r30, Y+7	; 0x07
    11dc:	f8 85       	ldd	r31, Y+8	; 0x08
    11de:	81 81       	ldd	r24, Z+1	; 0x01
    11e0:	ef 81       	ldd	r30, Y+7	; 0x07
    11e2:	f8 85       	ldd	r31, Y+8	; 0x08
    11e4:	92 81       	ldd	r25, Z+2	; 0x02
    11e6:	ef 81       	ldd	r30, Y+7	; 0x07
    11e8:	f8 85       	ldd	r31, Y+8	; 0x08
    11ea:	20 81       	ld	r18, Z
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    11f6:	ce 01       	movw	r24, r28
    11f8:	03 96       	adiw	r24, 0x03	; 3
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1200:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 23       	and	r24, r24
    1206:	11 f4       	brne	.+4      	; 0x120c <LED_turnOn+0x5a>
      ledRet = LED_OK;
    1208:	1a 82       	std	Y+2, r1	; 0x02
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1218:	28 96       	adiw	r28, 0x08	; 8
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	28 97       	sbiw	r28, 0x08	; 8
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	98 87       	std	Y+8, r25	; 0x08
    1240:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	e1 f0       	breq	.+56     	; 0x128a <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1252:	ef 81       	ldd	r30, Y+7	; 0x07
    1254:	f8 85       	ldd	r31, Y+8	; 0x08
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	ef 81       	ldd	r30, Y+7	; 0x07
    125a:	f8 85       	ldd	r31, Y+8	; 0x08
    125c:	92 81       	ldd	r25, Z+2	; 0x02
    125e:	ef 81       	ldd	r30, Y+7	; 0x07
    1260:	f8 85       	ldd	r31, Y+8	; 0x08
    1262:	20 81       	ld	r18, Z
    1264:	8b 83       	std	Y+3, r24	; 0x03
    1266:	9c 83       	std	Y+4, r25	; 0x04
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    126e:	ce 01       	movw	r24, r28
    1270:	03 96       	adiw	r24, 0x03	; 3
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1278:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	88 23       	and	r24, r24
    127e:	11 f4       	brne	.+4      	; 0x1284 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    1280:	1a 82       	std	Y+2, r1	; 0x02
    1282:	05 c0       	rjmp	.+10     	; 0x128e <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	02 c0       	rjmp	.+4      	; 0x128e <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1290:	28 96       	adiw	r28, 0x08	; 8
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	28 97       	sbiw	r28, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	98 87       	std	Y+8, r25	; 0x08
    12b8:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	d9 f0       	breq	.+54     	; 0x1300 <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    12ca:	ef 81       	ldd	r30, Y+7	; 0x07
    12cc:	f8 85       	ldd	r31, Y+8	; 0x08
    12ce:	81 81       	ldd	r24, Z+1	; 0x01
    12d0:	ef 81       	ldd	r30, Y+7	; 0x07
    12d2:	f8 85       	ldd	r31, Y+8	; 0x08
    12d4:	92 81       	ldd	r25, Z+2	; 0x02
    12d6:	ef 81       	ldd	r30, Y+7	; 0x07
    12d8:	f8 85       	ldd	r31, Y+8	; 0x08
    12da:	20 81       	ld	r18, Z
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	8d 83       	std	Y+5, r24	; 0x05
    12e4:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    12e6:	ce 01       	movw	r24, r28
    12e8:	03 96       	adiw	r24, 0x03	; 3
    12ea:	0e 94 18 07 	call	0xe30	; 0xe30 <GPIO_togglePinLogic>
    12ee:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	88 23       	and	r24, r24
    12f4:	11 f4       	brne	.+4      	; 0x12fa <LED_toggle+0x58>
      ledRet = LED_OK;
    12f6:	1a 82       	std	Y+2, r1	; 0x02
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 96       	adiw	r28, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <EDIP_init>:
// GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "dip_interface.h"

EN_EDIP_systemState_t EDIP_init(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance) {
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	28 97       	sbiw	r28, 0x08	; 8
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	98 87       	std	Y+8, r25	; 0x08
    132e:	8f 83       	std	Y+7, r24	; 0x07
  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	c1 f0       	breq	.+48     	; 0x1370 <EDIP_init+0x58>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort,
                               .logicOnPin = GPIO_HIGH};
    1340:	ef 81       	ldd	r30, Y+7	; 0x07
    1342:	f8 85       	ldd	r31, Y+8	; 0x08
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	ef 81       	ldd	r30, Y+7	; 0x07
    1348:	f8 85       	ldd	r31, Y+8	; 0x08
    134a:	80 81       	ld	r24, Z
    134c:	9b 83       	std	Y+3, r25	; 0x03
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	1d 82       	std	Y+5, r1	; 0x05
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8e 83       	std	Y+6, r24	; 0x06

    gpioRet = GPIO_initPin(&dipPinCfg);
    1356:	ce 01       	movw	r24, r28
    1358:	03 96       	adiw	r24, 0x03	; 3
    135a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    135e:	89 83       	std	Y+1, r24	; 0x01

    if (gpioRet == GPIO_OK) {
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 23       	and	r24, r24
    1364:	11 f4       	brne	.+4      	; 0x136a <EDIP_init+0x52>
      dipRet = EDIP_OK;
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <EDIP_init+0x5c>
    } else {
      dipRet = EDIP_NOK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <EDIP_init+0x5c>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1376:	28 96       	adiw	r28, 0x08	; 8
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <EDIP_readStates>:

EN_EDIP_systemState_t
EDIP_readStates(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance,
                EN_EDIP_logicStatus_t *retOfEdipStatus) {
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	2b 97       	sbiw	r28, 0x0b	; 11
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	99 87       	std	Y+9, r25	; 0x09
    139e:	88 87       	std	Y+8, r24	; 0x08
    13a0:	7b 87       	std	Y+11, r23	; 0x0b
    13a2:	6a 87       	std	Y+10, r22	; 0x0a

  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    13ac:	88 85       	ldd	r24, Y+8	; 0x08
    13ae:	99 85       	ldd	r25, Y+9	; 0x09
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	79 f1       	breq	.+94     	; 0x1412 <EDIP_readStates+0x8a>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort};
    13b4:	e8 85       	ldd	r30, Y+8	; 0x08
    13b6:	f9 85       	ldd	r31, Y+9	; 0x09
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	e8 85       	ldd	r30, Y+8	; 0x08
    13bc:	f9 85       	ldd	r31, Y+9	; 0x09
    13be:	80 81       	ld	r24, Z
    13c0:	1b 82       	std	Y+3, r1	; 0x03
    13c2:	1c 82       	std	Y+4, r1	; 0x04
    13c4:	1d 82       	std	Y+5, r1	; 0x05
    13c6:	1e 82       	std	Y+6, r1	; 0x06
    13c8:	9b 83       	std	Y+3, r25	; 0x03
    13ca:	8c 83       	std	Y+4, r24	; 0x04

    EN_GPIO_pinLogic_t currentSwitchStatus;
    gpioRet = GPIO_readPinLogic(&dipPinCfg, &currentSwitchStatus);
    13cc:	ce 01       	movw	r24, r28
    13ce:	03 96       	adiw	r24, 0x03	; 3
    13d0:	9e 01       	movw	r18, r28
    13d2:	29 5f       	subi	r18, 0xF9	; 249
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	b9 01       	movw	r22, r18
    13d8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <GPIO_readPinLogic>
    13dc:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	88 23       	and	r24, r24
    13e2:	a1 f4       	brne	.+40     	; 0x140c <EDIP_readStates+0x84>
      if (currentSwitchStatus == GPIO_LOW) {
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	88 23       	and	r24, r24
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <EDIP_readStates+0x6e>
        *retOfEdipStatus = EDIP_IS_ON;
    13ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    13ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
        dipRet = EDIP_OK;
    13f2:	1a 82       	std	Y+2, r1	; 0x02
    13f4:	10 c0       	rjmp	.+32     	; 0x1416 <EDIP_readStates+0x8e>
      } else if (currentSwitchStatus == GPIO_HIGH) {
    13f6:	8f 81       	ldd	r24, Y+7	; 0x07
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	29 f4       	brne	.+10     	; 0x1406 <EDIP_readStates+0x7e>
        *retOfEdipStatus = EDIP_IS_OFF;
    13fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    13fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    1400:	10 82       	st	Z, r1
        dipRet = EDIP_OK;
    1402:	1a 82       	std	Y+2, r1	; 0x02
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <EDIP_readStates+0x8e>
      } else {
        dipRet = EDIP_NOK;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <EDIP_readStates+0x8e>
      }
    } else {
      dipRet = EDIP_NOK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	8a 83       	std	Y+2, r24	; 0x02
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <EDIP_readStates+0x8e>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	2b 96       	adiw	r28, 0x0b	; 11
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <appInit>:
extern ST_EDIP_cfg_t dipSwitchSeven;
extern ST_EDIP_cfg_t dipSwitchEight;


void appInit(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	LED_init(&ledOne);
    1432:	86 ea       	ldi	r24, 0xA6	; 166
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledTwo);
    143a:	80 e8       	ldi	r24, 0x80	; 128
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledThree);
    1442:	83 e8       	ldi	r24, 0x83	; 131
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledFour);
    144a:	86 e8       	ldi	r24, 0x86	; 134
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledFive);
    1452:	89 e8       	ldi	r24, 0x89	; 137
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledSix);
    145a:	8c e8       	ldi	r24, 0x8C	; 140
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledSeven);
    1462:	8f e8       	ldi	r24, 0x8F	; 143
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	LED_init(&ledEight);
    146a:	82 e9       	ldi	r24, 0x92	; 146
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 9e 08 	call	0x113c	; 0x113c <LED_init>
	EDIP_init(&dipSwitchOne);
    1472:	85 e9       	ldi	r24, 0x95	; 149
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchTwo);
    147a:	87 e9       	ldi	r24, 0x97	; 151
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchThree);
    1482:	89 e9       	ldi	r24, 0x99	; 153
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchFour);
    148a:	8b e9       	ldi	r24, 0x9B	; 155
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchFive);
    1492:	8d e9       	ldi	r24, 0x9D	; 157
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchSix);
    149a:	8f e9       	ldi	r24, 0x9F	; 159
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchSeven);
    14a2:	81 ea       	ldi	r24, 0xA1	; 161
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
	EDIP_init(&dipSwitchEight);
    14aa:	83 ea       	ldi	r24, 0xA3	; 163
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 8c 09 	call	0x1318	; 0x1318 <EDIP_init>
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <appMain>:

void appMain(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	EN_EDIP_logicStatus_t  dipSwitchState;
	EDIP_readStates(&dipSwitchOne,&dipSwitchState);
    14c2:	85 e9       	ldi	r24, 0x95	; 149
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9e 01       	movw	r18, r28
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	b9 01       	movw	r22, r18
    14ce:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	11 f4       	brne	.+4      	; 0x14dc <appMain+0x24>
	{
		flashingMode();
    14d8:	0e 94 cd 0a 	call	0x159a	; 0x159a <flashingMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchTwo,&dipSwitchState);
    14dc:	87 e9       	ldi	r24, 0x97	; 151
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9e 01       	movw	r18, r28
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <appMain+0x3e>
	{
		shiftingLeftMode();
    14f2:	0e 94 04 0c 	call	0x1808	; 0x1808 <shiftingLeftMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchThree,&dipSwitchState);
    14f6:	89 e9       	ldi	r24, 0x99	; 153
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9e 01       	movw	r18, r28
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	b9 01       	movw	r22, r18
    1502:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	11 f4       	brne	.+4      	; 0x1510 <appMain+0x58>
	{
		shiftingRightMode();
    150c:	0e 94 c3 10 	call	0x2186	; 0x2186 <shiftingRightMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchFour,&dipSwitchState);
    1510:	8b e9       	ldi	r24, 0x9B	; 155
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9e 01       	movw	r18, r28
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	b9 01       	movw	r22, r18
    151c:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	11 f4       	brne	.+4      	; 0x152a <appMain+0x72>
	{
		convergingMode();
    1526:	0e 94 82 15 	call	0x2b04	; 0x2b04 <convergingMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchFive,&dipSwitchState);
    152a:	8d e9       	ldi	r24, 0x9D	; 157
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e 01       	movw	r18, r28
    1530:	2f 5f       	subi	r18, 0xFF	; 255
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
    1534:	b9 01       	movw	r22, r18
    1536:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	11 f4       	brne	.+4      	; 0x1544 <appMain+0x8c>
	{
		divergingMode();
    1540:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <divergingMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchSix,&dipSwitchState);
    1544:	8f e9       	ldi	r24, 0x9F	; 159
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9e 01       	movw	r18, r28
    154a:	2f 5f       	subi	r18, 0xFF	; 255
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	b9 01       	movw	r22, r18
    1550:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	11 f4       	brne	.+4      	; 0x155e <appMain+0xa6>
	{
		pingPongMode();
    155a:	0e 94 b8 19 	call	0x3370	; 0x3370 <pingPongMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchSeven,&dipSwitchState);
    155e:	81 ea       	ldi	r24, 0xA1	; 161
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9e 01       	movw	r18, r28
    1564:	2f 5f       	subi	r18, 0xFF	; 255
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	b9 01       	movw	r22, r18
    156a:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	11 f4       	brne	.+4      	; 0x1578 <appMain+0xc0>
	{
		incrementingMode();
    1574:	0e 94 41 1a 	call	0x3482	; 0x3482 <incrementingMode>
	else
	{
		/*Do Nothing */
	}

	EDIP_readStates(&dipSwitchEight,&dipSwitchState);
    1578:	83 ea       	ldi	r24, 0xA3	; 163
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9e 01       	movw	r18, r28
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	b9 01       	movw	r22, r18
    1584:	0e 94 c4 09 	call	0x1388	; 0x1388 <EDIP_readStates>

	if(dipSwitchState == EDIP_IS_ON)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	11 f4       	brne	.+4      	; 0x1592 <appMain+0xda>
	{
		convergingDivergingMode();
    158e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <convergingDivergingMode>
	}
	else
	{
		/*Do Nothing */
	}
}
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <flashingMode>:



void flashingMode(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	6c 97       	sbiw	r28, 0x1c	; 28
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledOne);
    15ae:	86 ea       	ldi	r24, 0xA6	; 166
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledTwo);
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledThree);
    15be:	83 e8       	ldi	r24, 0x83	; 131
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledFour);
    15c6:	86 e8       	ldi	r24, 0x86	; 134
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledFive);
    15ce:	89 e8       	ldi	r24, 0x89	; 137
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSix);
    15d6:	8c e8       	ldi	r24, 0x8C	; 140
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSeven);
    15de:	8f e8       	ldi	r24, 0x8F	; 143
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledEight);
    15e6:	82 e9       	ldi	r24, 0x92	; 146
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	aa ef       	ldi	r26, 0xFA	; 250
    15f4:	b3 e4       	ldi	r27, 0x43	; 67
    15f6:	89 8f       	std	Y+25, r24	; 0x19
    15f8:	9a 8f       	std	Y+26, r25	; 0x1a
    15fa:	ab 8f       	std	Y+27, r26	; 0x1b
    15fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8d 8b       	std	Y+21, r24	; 0x15
    1618:	9e 8b       	std	Y+22, r25	; 0x16
    161a:	af 8b       	std	Y+23, r26	; 0x17
    161c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    161e:	6d 89       	ldd	r22, Y+21	; 0x15
    1620:	7e 89       	ldd	r23, Y+22	; 0x16
    1622:	8f 89       	ldd	r24, Y+23	; 0x17
    1624:	98 8d       	ldd	r25, Y+24	; 0x18
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <flashingMode+0xa6>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9c 8b       	std	Y+20, r25	; 0x14
    163c:	8b 8b       	std	Y+19, r24	; 0x13
    163e:	3f c0       	rjmp	.+126    	; 0x16be <flashingMode+0x124>
	else if (__tmp > 65535)
    1640:	6d 89       	ldd	r22, Y+21	; 0x15
    1642:	7e 89       	ldd	r23, Y+22	; 0x16
    1644:	8f 89       	ldd	r24, Y+23	; 0x17
    1646:	98 8d       	ldd	r25, Y+24	; 0x18
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <flashingMode+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	69 8d       	ldd	r22, Y+25	; 0x19
    165a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9c 8b       	std	Y+20, r25	; 0x14
    167e:	8b 8b       	std	Y+19, r24	; 0x13
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <flashingMode+0x106>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9a 8b       	std	Y+18, r25	; 0x12
    1688:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168a:	89 89       	ldd	r24, Y+17	; 0x11
    168c:	9a 89       	ldd	r25, Y+18	; 0x12
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <flashingMode+0xf4>
    1692:	9a 8b       	std	Y+18, r25	; 0x12
    1694:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8b 89       	ldd	r24, Y+19	; 0x13
    1698:	9c 89       	ldd	r25, Y+20	; 0x14
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <flashingMode+0xe8>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <flashingMode+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	98 8b       	std	Y+16, r25	; 0x10
    16c4:	8f 87       	std	Y+15, r24	; 0x0f
    16c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c8:	98 89       	ldd	r25, Y+16	; 0x10
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <flashingMode+0x130>
    16ce:	98 8b       	std	Y+16, r25	; 0x10
    16d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LED_turnOff(&ledOne);
    16d2:	86 ea       	ldi	r24, 0xA6	; 166
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledTwo);
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledThree);
    16e2:	83 e8       	ldi	r24, 0x83	; 131
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFour);
    16ea:	86 e8       	ldi	r24, 0x86	; 134
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFive);
    16f2:	89 e8       	ldi	r24, 0x89	; 137
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSix);
    16fa:	8c e8       	ldi	r24, 0x8C	; 140
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSeven);
    1702:	8f e8       	ldi	r24, 0x8F	; 143
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledEight);
    170a:	82 e9       	ldi	r24, 0x92	; 146
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	aa ef       	ldi	r26, 0xFA	; 250
    1718:	b3 e4       	ldi	r27, 0x43	; 67
    171a:	8b 87       	std	Y+11, r24	; 0x0b
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	ad 87       	std	Y+13, r26	; 0x0d
    1720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6b 85       	ldd	r22, Y+11	; 0x0b
    1724:	7c 85       	ldd	r23, Y+12	; 0x0c
    1726:	8d 85       	ldd	r24, Y+13	; 0x0d
    1728:	9e 85       	ldd	r25, Y+14	; 0x0e
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8f 83       	std	Y+7, r24	; 0x07
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	a9 87       	std	Y+9, r26	; 0x09
    1740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <flashingMode+0x1ca>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <flashingMode+0x248>
	else if (__tmp > 65535)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <flashingMode+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <flashingMode+0x22a>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <flashingMode+0x218>
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <flashingMode+0x20c>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <flashingMode+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <flashingMode+0x254>
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    17f6:	6c 96       	adiw	r28, 0x1c	; 28
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <shiftingLeftMode>:

void shiftingLeftMode(void)
{
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	c0 57       	subi	r28, 0x70	; 112
    1816:	d0 40       	sbci	r29, 0x00	; 0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledOne);
    1822:	86 ea       	ldi	r24, 0xA6	; 166
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    182a:	fe 01       	movw	r30, r28
    182c:	e3 59       	subi	r30, 0x93	; 147
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	aa e7       	ldi	r26, 0x7A	; 122
    1836:	b3 e4       	ldi	r27, 0x43	; 67
    1838:	80 83       	st	Z, r24
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	a2 83       	std	Z+2, r26	; 0x02
    183e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1840:	8e 01       	movw	r16, r28
    1842:	07 59       	subi	r16, 0x97	; 151
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	fe 01       	movw	r30, r28
    1848:	e3 59       	subi	r30, 0x93	; 147
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a ef       	ldi	r20, 0xFA	; 250
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	f8 01       	movw	r30, r16
    1866:	80 83       	st	Z, r24
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186e:	fe 01       	movw	r30, r28
    1870:	e7 59       	subi	r30, 0x97	; 151
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	44 f4       	brge	.+16     	; 0x189c <shiftingLeftMode+0x94>
		__ticks = 1;
    188c:	fe 01       	movw	r30, r28
    188e:	e9 59       	subi	r30, 0x99	; 153
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
    189a:	64 c0       	rjmp	.+200    	; 0x1964 <shiftingLeftMode+0x15c>
	else if (__tmp > 65535)
    189c:	fe 01       	movw	r30, r28
    189e:	e7 59       	subi	r30, 0x97	; 151
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	0c f0       	brlt	.+2      	; 0x18bc <shiftingLeftMode+0xb4>
    18ba:	43 c0       	rjmp	.+134    	; 0x1942 <shiftingLeftMode+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	fe 01       	movw	r30, r28
    18be:	e3 59       	subi	r30, 0x93	; 147
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	8e 01       	movw	r16, r28
    18dc:	09 59       	subi	r16, 0x99	; 153
    18de:	1f 4f       	sbci	r17, 0xFF	; 255
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	f8 01       	movw	r30, r16
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
    18f2:	1f c0       	rjmp	.+62     	; 0x1932 <shiftingLeftMode+0x12a>
    18f4:	fe 01       	movw	r30, r28
    18f6:	eb 59       	subi	r30, 0x9B	; 155
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	88 ec       	ldi	r24, 0xC8	; 200
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	fe 01       	movw	r30, r28
    1904:	eb 59       	subi	r30, 0x9B	; 155
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <shiftingLeftMode+0x104>
    1910:	fe 01       	movw	r30, r28
    1912:	eb 59       	subi	r30, 0x9B	; 155
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	de 01       	movw	r26, r28
    191c:	a9 59       	subi	r26, 0x99	; 153
    191e:	bf 4f       	sbci	r27, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	e9 59       	subi	r30, 0x99	; 153
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	11 96       	adiw	r26, 0x01	; 1
    192e:	9c 93       	st	X, r25
    1930:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	fe 01       	movw	r30, r28
    1934:	e9 59       	subi	r30, 0x99	; 153
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	d1 f6       	brne	.-76     	; 0x18f4 <shiftingLeftMode+0xec>
    1940:	27 c0       	rjmp	.+78     	; 0x1990 <shiftingLeftMode+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	8e 01       	movw	r16, r28
    1944:	09 59       	subi	r16, 0x99	; 153
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	fe 01       	movw	r30, r28
    194a:	e7 59       	subi	r30, 0x97	; 151
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	f8 01       	movw	r30, r16
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	de 01       	movw	r26, r28
    1966:	ad 59       	subi	r26, 0x9D	; 157
    1968:	bf 4f       	sbci	r27, 0xFF	; 255
    196a:	fe 01       	movw	r30, r28
    196c:	e9 59       	subi	r30, 0x99	; 153
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	8d 93       	st	X+, r24
    1976:	9c 93       	st	X, r25
    1978:	fe 01       	movw	r30, r28
    197a:	ed 59       	subi	r30, 0x9D	; 157
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <shiftingLeftMode+0x17a>
    1986:	fe 01       	movw	r30, r28
    1988:	ed 59       	subi	r30, 0x9D	; 157
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledOne);
    1990:	86 ea       	ldi	r24, 0xA6	; 166
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledTwo);
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e1 5a       	subi	r30, 0xA1	; 161
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	aa e7       	ldi	r26, 0x7A	; 122
    19ac:	b3 e4       	ldi	r27, 0x43	; 67
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	8e 01       	movw	r16, r28
    19b8:	05 5a       	subi	r16, 0xA5	; 165
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e1 5a       	subi	r30, 0xA1	; 161
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e4:	fe 01       	movw	r30, r28
    19e6:	e5 5a       	subi	r30, 0xA5	; 165
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	44 f4       	brge	.+16     	; 0x1a12 <shiftingLeftMode+0x20a>
		__ticks = 1;
    1a02:	fe 01       	movw	r30, r28
    1a04:	e7 5a       	subi	r30, 0xA7	; 167
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	64 c0       	rjmp	.+200    	; 0x1ada <shiftingLeftMode+0x2d2>
	else if (__tmp > 65535)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e5 5a       	subi	r30, 0xA5	; 165
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <shiftingLeftMode+0x22a>
    1a30:	43 c0       	rjmp	.+134    	; 0x1ab8 <shiftingLeftMode+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	fe 01       	movw	r30, r28
    1a34:	e1 5a       	subi	r30, 0xA1	; 161
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8e 01       	movw	r16, r28
    1a52:	07 5a       	subi	r16, 0xA7	; 167
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	f8 01       	movw	r30, r16
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <shiftingLeftMode+0x2a0>
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e9 5a       	subi	r30, 0xA9	; 169
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e9 5a       	subi	r30, 0xA9	; 169
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <shiftingLeftMode+0x27a>
    1a86:	fe 01       	movw	r30, r28
    1a88:	e9 5a       	subi	r30, 0xA9	; 169
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	de 01       	movw	r26, r28
    1a92:	a7 5a       	subi	r26, 0xA7	; 167
    1a94:	bf 4f       	sbci	r27, 0xFF	; 255
    1a96:	fe 01       	movw	r30, r28
    1a98:	e7 5a       	subi	r30, 0xA7	; 167
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	9c 93       	st	X, r25
    1aa6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 5a       	subi	r30, 0xA7	; 167
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	d1 f6       	brne	.-76     	; 0x1a6a <shiftingLeftMode+0x262>
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <shiftingLeftMode+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	07 5a       	subi	r16, 0xA7	; 167
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e5 5a       	subi	r30, 0xA5	; 165
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	de 01       	movw	r26, r28
    1adc:	ab 5a       	subi	r26, 0xAB	; 171
    1ade:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e7 5a       	subi	r30, 0xA7	; 167
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	8d 93       	st	X+, r24
    1aec:	9c 93       	st	X, r25
    1aee:	fe 01       	movw	r30, r28
    1af0:	eb 5a       	subi	r30, 0xAB	; 171
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <shiftingLeftMode+0x2f0>
    1afc:	fe 01       	movw	r30, r28
    1afe:	eb 5a       	subi	r30, 0xAB	; 171
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledTwo);
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledThree);
    1b0e:	83 e8       	ldi	r24, 0x83	; 131
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    1b16:	fe 01       	movw	r30, r28
    1b18:	ef 5a       	subi	r30, 0xAF	; 175
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	aa e7       	ldi	r26, 0x7A	; 122
    1b22:	b3 e4       	ldi	r27, 0x43	; 67
    1b24:	80 83       	st	Z, r24
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	a2 83       	std	Z+2, r26	; 0x02
    1b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	03 5b       	subi	r16, 0xB3	; 179
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	ef 5a       	subi	r30, 0xAF	; 175
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	a2 83       	std	Z+2, r26	; 0x02
    1b58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e3 5b       	subi	r30, 0xB3	; 179
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	44 f4       	brge	.+16     	; 0x1b88 <shiftingLeftMode+0x380>
		__ticks = 1;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e5 5b       	subi	r30, 0xB5	; 181
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	64 c0       	rjmp	.+200    	; 0x1c50 <shiftingLeftMode+0x448>
	else if (__tmp > 65535)
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e3 5b       	subi	r30, 0xB3	; 179
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	0c f0       	brlt	.+2      	; 0x1ba8 <shiftingLeftMode+0x3a0>
    1ba6:	43 c0       	rjmp	.+134    	; 0x1c2e <shiftingLeftMode+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ef 5a       	subi	r30, 0xAF	; 175
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	05 5b       	subi	r16, 0xB5	; 181
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	1f c0       	rjmp	.+62     	; 0x1c1e <shiftingLeftMode+0x416>
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 5b       	subi	r30, 0xB7	; 183
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e7 5b       	subi	r30, 0xB7	; 183
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <shiftingLeftMode+0x3f0>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e7 5b       	subi	r30, 0xB7	; 183
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	de 01       	movw	r26, r28
    1c08:	a5 5b       	subi	r26, 0xB5	; 181
    1c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e5 5b       	subi	r30, 0xB5	; 181
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	11 96       	adiw	r26, 0x01	; 1
    1c1a:	9c 93       	st	X, r25
    1c1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e5 5b       	subi	r30, 0xB5	; 181
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	d1 f6       	brne	.-76     	; 0x1be0 <shiftingLeftMode+0x3d8>
    1c2c:	27 c0       	rjmp	.+78     	; 0x1c7c <shiftingLeftMode+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	8e 01       	movw	r16, r28
    1c30:	05 5b       	subi	r16, 0xB5	; 181
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e3 5b       	subi	r30, 0xB3	; 179
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	80 83       	st	Z, r24
    1c50:	de 01       	movw	r26, r28
    1c52:	a9 5b       	subi	r26, 0xB9	; 185
    1c54:	bf 4f       	sbci	r27, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	e5 5b       	subi	r30, 0xB5	; 181
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	8d 93       	st	X+, r24
    1c62:	9c 93       	st	X, r25
    1c64:	fe 01       	movw	r30, r28
    1c66:	e9 5b       	subi	r30, 0xB9	; 185
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 81       	ld	r24, Z
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <shiftingLeftMode+0x466>
    1c72:	fe 01       	movw	r30, r28
    1c74:	e9 5b       	subi	r30, 0xB9	; 185
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledThree);
    1c7c:	83 e8       	ldi	r24, 0x83	; 131
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledFour);
    1c84:	86 e8       	ldi	r24, 0x86	; 134
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ed 5b       	subi	r30, 0xBD	; 189
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	aa e7       	ldi	r26, 0x7A	; 122
    1c98:	b3 e4       	ldi	r27, 0x43	; 67
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	8e 01       	movw	r16, r28
    1ca4:	01 5c       	subi	r16, 0xC1	; 193
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ed 5b       	subi	r30, 0xBD	; 189
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ff 96       	adiw	r30, 0x3f	; 63
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <shiftingLeftMode+0x4ee>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e af       	std	Y+62, r25	; 0x3e
    1cf2:	8d af       	std	Y+61, r24	; 0x3d
    1cf4:	46 c0       	rjmp	.+140    	; 0x1d82 <shiftingLeftMode+0x57a>
	else if (__tmp > 65535)
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ff 96       	adiw	r30, 0x3f	; 63
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	64 f5       	brge	.+88     	; 0x1d6a <shiftingLeftMode+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	fe 01       	movw	r30, r28
    1d14:	ed 5b       	subi	r30, 0xBD	; 189
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9e af       	std	Y+62, r25	; 0x3e
    1d3e:	8d af       	std	Y+61, r24	; 0x3d
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <shiftingLeftMode+0x558>
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c af       	std	Y+60, r25	; 0x3c
    1d48:	8b af       	std	Y+59, r24	; 0x3b
    1d4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <shiftingLeftMode+0x546>
    1d52:	9c af       	std	Y+60, r25	; 0x3c
    1d54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9e af       	std	Y+62, r25	; 0x3e
    1d5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <shiftingLeftMode+0x53a>
    1d68:	16 c0       	rjmp	.+44     	; 0x1d96 <shiftingLeftMode+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ff 96       	adiw	r30, 0x3f	; 63
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9e af       	std	Y+62, r25	; 0x3e
    1d80:	8d af       	std	Y+61, r24	; 0x3d
    1d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d86:	9a af       	std	Y+58, r25	; 0x3a
    1d88:	89 af       	std	Y+57, r24	; 0x39
    1d8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <shiftingLeftMode+0x586>
    1d92:	9a af       	std	Y+58, r25	; 0x3a
    1d94:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LED_turnOff(&ledFour);
    1d96:	86 e8       	ldi	r24, 0x86	; 134
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledFive);
    1d9e:	89 e8       	ldi	r24, 0x89	; 137
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	aa e7       	ldi	r26, 0x7A	; 122
    1dac:	b3 e4       	ldi	r27, 0x43	; 67
    1dae:	8d ab       	std	Y+53, r24	; 0x35
    1db0:	9e ab       	std	Y+54, r25	; 0x36
    1db2:	af ab       	std	Y+55, r26	; 0x37
    1db4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	6d a9       	ldd	r22, Y+53	; 0x35
    1db8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dba:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a ef       	ldi	r20, 0xFA	; 250
    1dc4:	54 e4       	ldi	r21, 0x44	; 68
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	89 ab       	std	Y+49, r24	; 0x31
    1dd0:	9a ab       	std	Y+50, r25	; 0x32
    1dd2:	ab ab       	std	Y+51, r26	; 0x33
    1dd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dda:	8b a9       	ldd	r24, Y+51	; 0x33
    1ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <shiftingLeftMode+0x5f0>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	98 ab       	std	Y+48, r25	; 0x30
    1df4:	8f a7       	std	Y+47, r24	; 0x2f
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <shiftingLeftMode+0x66e>
	else if (__tmp > 65535)
    1df8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <shiftingLeftMode+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	6d a9       	ldd	r22, Y+53	; 0x35
    1e12:	7e a9       	ldd	r23, Y+54	; 0x36
    1e14:	8f a9       	ldd	r24, Y+55	; 0x37
    1e16:	98 ad       	ldd	r25, Y+56	; 0x38
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	98 ab       	std	Y+48, r25	; 0x30
    1e36:	8f a7       	std	Y+47, r24	; 0x2f
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <shiftingLeftMode+0x650>
    1e3a:	88 ec       	ldi	r24, 0xC8	; 200
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9e a7       	std	Y+46, r25	; 0x2e
    1e40:	8d a7       	std	Y+45, r24	; 0x2d
    1e42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <shiftingLeftMode+0x63e>
    1e4a:	9e a7       	std	Y+46, r25	; 0x2e
    1e4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e50:	98 a9       	ldd	r25, Y+48	; 0x30
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <shiftingLeftMode+0x632>
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <shiftingLeftMode+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	69 a9       	ldd	r22, Y+49	; 0x31
    1e64:	7a a9       	ldd	r23, Y+50	; 0x32
    1e66:	8b a9       	ldd	r24, Y+51	; 0x33
    1e68:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	98 ab       	std	Y+48, r25	; 0x30
    1e74:	8f a7       	std	Y+47, r24	; 0x2f
    1e76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e78:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7a:	9c a7       	std	Y+44, r25	; 0x2c
    1e7c:	8b a7       	std	Y+43, r24	; 0x2b
    1e7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <shiftingLeftMode+0x67a>
    1e86:	9c a7       	std	Y+44, r25	; 0x2c
    1e88:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	LED_turnOff(&ledFive);
    1e8a:	89 e8       	ldi	r24, 0x89	; 137
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledSix);
    1e92:	8c e8       	ldi	r24, 0x8C	; 140
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	aa e7       	ldi	r26, 0x7A	; 122
    1ea0:	b3 e4       	ldi	r27, 0x43	; 67
    1ea2:	8f a3       	std	Y+39, r24	; 0x27
    1ea4:	98 a7       	std	Y+40, r25	; 0x28
    1ea6:	a9 a7       	std	Y+41, r26	; 0x29
    1ea8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1eac:	78 a5       	ldd	r23, Y+40	; 0x28
    1eae:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a ef       	ldi	r20, 0xFA	; 250
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8b a3       	std	Y+35, r24	; 0x23
    1ec4:	9c a3       	std	Y+36, r25	; 0x24
    1ec6:	ad a3       	std	Y+37, r26	; 0x25
    1ec8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ecc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ece:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <shiftingLeftMode+0x6e4>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9a a3       	std	Y+34, r25	; 0x22
    1ee8:	89 a3       	std	Y+33, r24	; 0x21
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <shiftingLeftMode+0x762>
	else if (__tmp > 65535)
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <shiftingLeftMode+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	6f a1       	ldd	r22, Y+39	; 0x27
    1f06:	78 a5       	ldd	r23, Y+40	; 0x28
    1f08:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <shiftingLeftMode+0x744>
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	98 a3       	std	Y+32, r25	; 0x20
    1f34:	8f 8f       	std	Y+31, r24	; 0x1f
    1f36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f38:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <shiftingLeftMode+0x732>
    1f3e:	98 a3       	std	Y+32, r25	; 0x20
    1f40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	9a a1       	ldd	r25, Y+34	; 0x22
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <shiftingLeftMode+0x726>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <shiftingLeftMode+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6b a1       	ldd	r22, Y+35	; 0x23
    1f58:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f70:	8d 8f       	std	Y+29, r24	; 0x1d
    1f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <shiftingLeftMode+0x76e>
    1f7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LED_turnOff(&ledSix);
    1f7e:	8c e8       	ldi	r24, 0x8C	; 140
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledSeven);
    1f86:	8f e8       	ldi	r24, 0x8F	; 143
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	aa e7       	ldi	r26, 0x7A	; 122
    1f94:	b3 e4       	ldi	r27, 0x43	; 67
    1f96:	89 8f       	std	Y+25, r24	; 0x19
    1f98:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8d 8b       	std	Y+21, r24	; 0x15
    1fb8:	9e 8b       	std	Y+22, r25	; 0x16
    1fba:	af 8b       	std	Y+23, r26	; 0x17
    1fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <shiftingLeftMode+0x7d8>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 8b       	std	Y+20, r25	; 0x14
    1fdc:	8b 8b       	std	Y+19, r24	; 0x13
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <shiftingLeftMode+0x856>
	else if (__tmp > 65535)
    1fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <shiftingLeftMode+0x842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <shiftingLeftMode+0x838>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	89 8b       	std	Y+17, r24	; 0x11
    202a:	89 89       	ldd	r24, Y+17	; 0x11
    202c:	9a 89       	ldd	r25, Y+18	; 0x12
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <shiftingLeftMode+0x826>
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <shiftingLeftMode+0x81a>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <shiftingLeftMode+0x86a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6d 89       	ldd	r22, Y+21	; 0x15
    204c:	7e 89       	ldd	r23, Y+22	; 0x16
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	98 8b       	std	Y+16, r25	; 0x10
    2064:	8f 87       	std	Y+15, r24	; 0x0f
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	98 89       	ldd	r25, Y+16	; 0x10
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <shiftingLeftMode+0x862>
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	LED_turnOff(&ledSeven);
    2072:	8f e8       	ldi	r24, 0x8F	; 143
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledEight);
    207a:	82 e9       	ldi	r24, 0x92	; 146
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	aa e7       	ldi	r26, 0x7A	; 122
    2088:	b3 e4       	ldi	r27, 0x43	; 67
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <shiftingLeftMode+0x8cc>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <shiftingLeftMode+0x94a>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <shiftingLeftMode+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <shiftingLeftMode+0x92c>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <shiftingLeftMode+0x91a>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <shiftingLeftMode+0x90e>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <shiftingLeftMode+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <shiftingLeftMode+0x956>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LED_turnOff(&ledEight);
    2166:	82 e9       	ldi	r24, 0x92	; 146
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
}
    216e:	c0 59       	subi	r28, 0x90	; 144
    2170:	df 4f       	sbci	r29, 0xFF	; 255
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	08 95       	ret

00002186 <shiftingRightMode>:

void shiftingRightMode(void)
{
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	c0 57       	subi	r28, 0x70	; 112
    2194:	d0 40       	sbci	r29, 0x00	; 0
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledEight);
    21a0:	82 e9       	ldi	r24, 0x92	; 146
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e3 59       	subi	r30, 0x93	; 147
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	aa e7       	ldi	r26, 0x7A	; 122
    21b4:	b3 e4       	ldi	r27, 0x43	; 67
    21b6:	80 83       	st	Z, r24
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	a2 83       	std	Z+2, r26	; 0x02
    21bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21be:	8e 01       	movw	r16, r28
    21c0:	07 59       	subi	r16, 0x97	; 151
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	fe 01       	movw	r30, r28
    21c6:	e3 59       	subi	r30, 0x93	; 147
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a ef       	ldi	r20, 0xFA	; 250
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	f8 01       	movw	r30, r16
    21e4:	80 83       	st	Z, r24
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	a2 83       	std	Z+2, r26	; 0x02
    21ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ec:	fe 01       	movw	r30, r28
    21ee:	e7 59       	subi	r30, 0x97	; 151
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	44 f4       	brge	.+16     	; 0x221a <shiftingRightMode+0x94>
		__ticks = 1;
    220a:	fe 01       	movw	r30, r28
    220c:	e9 59       	subi	r30, 0x99	; 153
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
    2218:	64 c0       	rjmp	.+200    	; 0x22e2 <shiftingRightMode+0x15c>
	else if (__tmp > 65535)
    221a:	fe 01       	movw	r30, r28
    221c:	e7 59       	subi	r30, 0x97	; 151
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	0c f0       	brlt	.+2      	; 0x223a <shiftingRightMode+0xb4>
    2238:	43 c0       	rjmp	.+134    	; 0x22c0 <shiftingRightMode+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	fe 01       	movw	r30, r28
    223c:	e3 59       	subi	r30, 0x93	; 147
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8e 01       	movw	r16, r28
    225a:	09 59       	subi	r16, 0x99	; 153
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	1f c0       	rjmp	.+62     	; 0x22b0 <shiftingRightMode+0x12a>
    2272:	fe 01       	movw	r30, r28
    2274:	eb 59       	subi	r30, 0x9B	; 155
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	88 ec       	ldi	r24, 0xC8	; 200
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    2280:	fe 01       	movw	r30, r28
    2282:	eb 59       	subi	r30, 0x9B	; 155
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <shiftingRightMode+0x104>
    228e:	fe 01       	movw	r30, r28
    2290:	eb 59       	subi	r30, 0x9B	; 155
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	de 01       	movw	r26, r28
    229a:	a9 59       	subi	r26, 0x99	; 153
    229c:	bf 4f       	sbci	r27, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e9 59       	subi	r30, 0x99	; 153
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	9c 93       	st	X, r25
    22ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	fe 01       	movw	r30, r28
    22b2:	e9 59       	subi	r30, 0x99	; 153
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	d1 f6       	brne	.-76     	; 0x2272 <shiftingRightMode+0xec>
    22be:	27 c0       	rjmp	.+78     	; 0x230e <shiftingRightMode+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	8e 01       	movw	r16, r28
    22c2:	09 59       	subi	r16, 0x99	; 153
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 59       	subi	r30, 0x97	; 151
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	f8 01       	movw	r30, r16
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	de 01       	movw	r26, r28
    22e4:	ad 59       	subi	r26, 0x9D	; 157
    22e6:	bf 4f       	sbci	r27, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 59       	subi	r30, 0x99	; 153
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	8d 93       	st	X+, r24
    22f4:	9c 93       	st	X, r25
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 59       	subi	r30, 0x9D	; 157
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <shiftingRightMode+0x17a>
    2304:	fe 01       	movw	r30, r28
    2306:	ed 59       	subi	r30, 0x9D	; 157
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledEight);
    230e:	82 e9       	ldi	r24, 0x92	; 146
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledSeven);
    2316:	8f e8       	ldi	r24, 0x8F	; 143
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    231e:	fe 01       	movw	r30, r28
    2320:	e1 5a       	subi	r30, 0xA1	; 161
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	aa e7       	ldi	r26, 0x7A	; 122
    232a:	b3 e4       	ldi	r27, 0x43	; 67
    232c:	80 83       	st	Z, r24
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	a2 83       	std	Z+2, r26	; 0x02
    2332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	8e 01       	movw	r16, r28
    2336:	05 5a       	subi	r16, 0xA5	; 165
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e1 5a       	subi	r30, 0xA1	; 161
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a ef       	ldi	r20, 0xFA	; 250
    234e:	54 e4       	ldi	r21, 0x44	; 68
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	f8 01       	movw	r30, r16
    235a:	80 83       	st	Z, r24
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	a2 83       	std	Z+2, r26	; 0x02
    2360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2362:	fe 01       	movw	r30, r28
    2364:	e5 5a       	subi	r30, 0xA5	; 165
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	44 f4       	brge	.+16     	; 0x2390 <shiftingRightMode+0x20a>
		__ticks = 1;
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5a       	subi	r30, 0xA7	; 167
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	64 c0       	rjmp	.+200    	; 0x2458 <shiftingRightMode+0x2d2>
	else if (__tmp > 65535)
    2390:	fe 01       	movw	r30, r28
    2392:	e5 5a       	subi	r30, 0xA5	; 165
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	0c f0       	brlt	.+2      	; 0x23b0 <shiftingRightMode+0x22a>
    23ae:	43 c0       	rjmp	.+134    	; 0x2436 <shiftingRightMode+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	fe 01       	movw	r30, r28
    23b2:	e1 5a       	subi	r30, 0xA1	; 161
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8e 01       	movw	r16, r28
    23d0:	07 5a       	subi	r16, 0xA7	; 167
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	f8 01       	movw	r30, r16
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	1f c0       	rjmp	.+62     	; 0x2426 <shiftingRightMode+0x2a0>
    23e8:	fe 01       	movw	r30, r28
    23ea:	e9 5a       	subi	r30, 0xA9	; 169
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	fe 01       	movw	r30, r28
    23f8:	e9 5a       	subi	r30, 0xA9	; 169
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <shiftingRightMode+0x27a>
    2404:	fe 01       	movw	r30, r28
    2406:	e9 5a       	subi	r30, 0xA9	; 169
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	de 01       	movw	r26, r28
    2410:	a7 5a       	subi	r26, 0xA7	; 167
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e7 5a       	subi	r30, 0xA7	; 167
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	11 96       	adiw	r26, 0x01	; 1
    2422:	9c 93       	st	X, r25
    2424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	fe 01       	movw	r30, r28
    2428:	e7 5a       	subi	r30, 0xA7	; 167
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	d1 f6       	brne	.-76     	; 0x23e8 <shiftingRightMode+0x262>
    2434:	27 c0       	rjmp	.+78     	; 0x2484 <shiftingRightMode+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	8e 01       	movw	r16, r28
    2438:	07 5a       	subi	r16, 0xA7	; 167
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e5 5a       	subi	r30, 0xA5	; 165
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	f8 01       	movw	r30, r16
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	de 01       	movw	r26, r28
    245a:	ab 5a       	subi	r26, 0xAB	; 171
    245c:	bf 4f       	sbci	r27, 0xFF	; 255
    245e:	fe 01       	movw	r30, r28
    2460:	e7 5a       	subi	r30, 0xA7	; 167
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	8d 93       	st	X+, r24
    246a:	9c 93       	st	X, r25
    246c:	fe 01       	movw	r30, r28
    246e:	eb 5a       	subi	r30, 0xAB	; 171
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <shiftingRightMode+0x2f0>
    247a:	fe 01       	movw	r30, r28
    247c:	eb 5a       	subi	r30, 0xAB	; 171
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledSeven);
    2484:	8f e8       	ldi	r24, 0x8F	; 143
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledSix);
    248c:	8c e8       	ldi	r24, 0x8C	; 140
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2494:	fe 01       	movw	r30, r28
    2496:	ef 5a       	subi	r30, 0xAF	; 175
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	aa e7       	ldi	r26, 0x7A	; 122
    24a0:	b3 e4       	ldi	r27, 0x43	; 67
    24a2:	80 83       	st	Z, r24
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	a2 83       	std	Z+2, r26	; 0x02
    24a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	8e 01       	movw	r16, r28
    24ac:	03 5b       	subi	r16, 0xB3	; 179
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	fe 01       	movw	r30, r28
    24b2:	ef 5a       	subi	r30, 0xAF	; 175
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	a2 83       	std	Z+2, r26	; 0x02
    24d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d8:	fe 01       	movw	r30, r28
    24da:	e3 5b       	subi	r30, 0xB3	; 179
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	44 f4       	brge	.+16     	; 0x2506 <shiftingRightMode+0x380>
		__ticks = 1;
    24f6:	fe 01       	movw	r30, r28
    24f8:	e5 5b       	subi	r30, 0xB5	; 181
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
    2504:	64 c0       	rjmp	.+200    	; 0x25ce <shiftingRightMode+0x448>
	else if (__tmp > 65535)
    2506:	fe 01       	movw	r30, r28
    2508:	e3 5b       	subi	r30, 0xB3	; 179
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	0c f0       	brlt	.+2      	; 0x2526 <shiftingRightMode+0x3a0>
    2524:	43 c0       	rjmp	.+134    	; 0x25ac <shiftingRightMode+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	fe 01       	movw	r30, r28
    2528:	ef 5a       	subi	r30, 0xAF	; 175
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8e 01       	movw	r16, r28
    2546:	05 5b       	subi	r16, 0xB5	; 181
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	f8 01       	movw	r30, r16
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
    255c:	1f c0       	rjmp	.+62     	; 0x259c <shiftingRightMode+0x416>
    255e:	fe 01       	movw	r30, r28
    2560:	e7 5b       	subi	r30, 0xB7	; 183
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	fe 01       	movw	r30, r28
    256e:	e7 5b       	subi	r30, 0xB7	; 183
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <shiftingRightMode+0x3f0>
    257a:	fe 01       	movw	r30, r28
    257c:	e7 5b       	subi	r30, 0xB7	; 183
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	de 01       	movw	r26, r28
    2586:	a5 5b       	subi	r26, 0xB5	; 181
    2588:	bf 4f       	sbci	r27, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e5 5b       	subi	r30, 0xB5	; 181
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	11 96       	adiw	r26, 0x01	; 1
    2598:	9c 93       	st	X, r25
    259a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	fe 01       	movw	r30, r28
    259e:	e5 5b       	subi	r30, 0xB5	; 181
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	d1 f6       	brne	.-76     	; 0x255e <shiftingRightMode+0x3d8>
    25aa:	27 c0       	rjmp	.+78     	; 0x25fa <shiftingRightMode+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	8e 01       	movw	r16, r28
    25ae:	05 5b       	subi	r16, 0xB5	; 181
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	e3 5b       	subi	r30, 0xB3	; 179
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	f8 01       	movw	r30, r16
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	de 01       	movw	r26, r28
    25d0:	a9 5b       	subi	r26, 0xB9	; 185
    25d2:	bf 4f       	sbci	r27, 0xFF	; 255
    25d4:	fe 01       	movw	r30, r28
    25d6:	e5 5b       	subi	r30, 0xB5	; 181
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	8d 93       	st	X+, r24
    25e0:	9c 93       	st	X, r25
    25e2:	fe 01       	movw	r30, r28
    25e4:	e9 5b       	subi	r30, 0xB9	; 185
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <shiftingRightMode+0x466>
    25f0:	fe 01       	movw	r30, r28
    25f2:	e9 5b       	subi	r30, 0xB9	; 185
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_turnOff(&ledSix);
    25fa:	8c e8       	ldi	r24, 0x8C	; 140
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledFive);
    2602:	89 e8       	ldi	r24, 0x89	; 137
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    260a:	fe 01       	movw	r30, r28
    260c:	ed 5b       	subi	r30, 0xBD	; 189
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	aa e7       	ldi	r26, 0x7A	; 122
    2616:	b3 e4       	ldi	r27, 0x43	; 67
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	8e 01       	movw	r16, r28
    2622:	01 5c       	subi	r16, 0xC1	; 193
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	fe 01       	movw	r30, r28
    2628:	ed 5b       	subi	r30, 0xBD	; 189
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264e:	fe 01       	movw	r30, r28
    2650:	ff 96       	adiw	r30, 0x3f	; 63
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <shiftingRightMode+0x4ee>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e af       	std	Y+62, r25	; 0x3e
    2670:	8d af       	std	Y+61, r24	; 0x3d
    2672:	46 c0       	rjmp	.+140    	; 0x2700 <shiftingRightMode+0x57a>
	else if (__tmp > 65535)
    2674:	fe 01       	movw	r30, r28
    2676:	ff 96       	adiw	r30, 0x3f	; 63
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	64 f5       	brge	.+88     	; 0x26e8 <shiftingRightMode+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	fe 01       	movw	r30, r28
    2692:	ed 5b       	subi	r30, 0xBD	; 189
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9e af       	std	Y+62, r25	; 0x3e
    26bc:	8d af       	std	Y+61, r24	; 0x3d
    26be:	0f c0       	rjmp	.+30     	; 0x26de <shiftingRightMode+0x558>
    26c0:	88 ec       	ldi	r24, 0xC8	; 200
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c af       	std	Y+60, r25	; 0x3c
    26c6:	8b af       	std	Y+59, r24	; 0x3b
    26c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    26ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <shiftingRightMode+0x546>
    26d0:	9c af       	std	Y+60, r25	; 0x3c
    26d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9e af       	std	Y+62, r25	; 0x3e
    26dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <shiftingRightMode+0x53a>
    26e6:	16 c0       	rjmp	.+44     	; 0x2714 <shiftingRightMode+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	fe 01       	movw	r30, r28
    26ea:	ff 96       	adiw	r30, 0x3f	; 63
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e af       	std	Y+62, r25	; 0x3e
    26fe:	8d af       	std	Y+61, r24	; 0x3d
    2700:	8d ad       	ldd	r24, Y+61	; 0x3d
    2702:	9e ad       	ldd	r25, Y+62	; 0x3e
    2704:	9a af       	std	Y+58, r25	; 0x3a
    2706:	89 af       	std	Y+57, r24	; 0x39
    2708:	89 ad       	ldd	r24, Y+57	; 0x39
    270a:	9a ad       	ldd	r25, Y+58	; 0x3a
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <shiftingRightMode+0x586>
    2710:	9a af       	std	Y+58, r25	; 0x3a
    2712:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LED_turnOff(&ledFive);
    2714:	89 e8       	ldi	r24, 0x89	; 137
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledFour);
    271c:	86 e8       	ldi	r24, 0x86	; 134
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	aa e7       	ldi	r26, 0x7A	; 122
    272a:	b3 e4       	ldi	r27, 0x43	; 67
    272c:	8d ab       	std	Y+53, r24	; 0x35
    272e:	9e ab       	std	Y+54, r25	; 0x36
    2730:	af ab       	std	Y+55, r26	; 0x37
    2732:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	6d a9       	ldd	r22, Y+53	; 0x35
    2736:	7e a9       	ldd	r23, Y+54	; 0x36
    2738:	8f a9       	ldd	r24, Y+55	; 0x37
    273a:	98 ad       	ldd	r25, Y+56	; 0x38
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	89 ab       	std	Y+49, r24	; 0x31
    274e:	9a ab       	std	Y+50, r25	; 0x32
    2750:	ab ab       	std	Y+51, r26	; 0x33
    2752:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2754:	69 a9       	ldd	r22, Y+49	; 0x31
    2756:	7a a9       	ldd	r23, Y+50	; 0x32
    2758:	8b a9       	ldd	r24, Y+51	; 0x33
    275a:	9c a9       	ldd	r25, Y+52	; 0x34
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	2c f4       	brge	.+10     	; 0x2776 <shiftingRightMode+0x5f0>
		__ticks = 1;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	98 ab       	std	Y+48, r25	; 0x30
    2772:	8f a7       	std	Y+47, r24	; 0x2f
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <shiftingRightMode+0x66e>
	else if (__tmp > 65535)
    2776:	69 a9       	ldd	r22, Y+49	; 0x31
    2778:	7a a9       	ldd	r23, Y+50	; 0x32
    277a:	8b a9       	ldd	r24, Y+51	; 0x33
    277c:	9c a9       	ldd	r25, Y+52	; 0x34
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	4c f5       	brge	.+82     	; 0x27e0 <shiftingRightMode+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	6d a9       	ldd	r22, Y+53	; 0x35
    2790:	7e a9       	ldd	r23, Y+54	; 0x36
    2792:	8f a9       	ldd	r24, Y+55	; 0x37
    2794:	98 ad       	ldd	r25, Y+56	; 0x38
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e2       	ldi	r20, 0x20	; 32
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <shiftingRightMode+0x650>
    27b8:	88 ec       	ldi	r24, 0xC8	; 200
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e a7       	std	Y+46, r25	; 0x2e
    27be:	8d a7       	std	Y+45, r24	; 0x2d
    27c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <shiftingRightMode+0x63e>
    27c8:	9e a7       	std	Y+46, r25	; 0x2e
    27ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ce:	98 a9       	ldd	r25, Y+48	; 0x30
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	98 ab       	std	Y+48, r25	; 0x30
    27d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d8:	98 a9       	ldd	r25, Y+48	; 0x30
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <shiftingRightMode+0x632>
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <shiftingRightMode+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e0:	69 a9       	ldd	r22, Y+49	; 0x31
    27e2:	7a a9       	ldd	r23, Y+50	; 0x32
    27e4:	8b a9       	ldd	r24, Y+51	; 0x33
    27e6:	9c a9       	ldd	r25, Y+52	; 0x34
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	98 ab       	std	Y+48, r25	; 0x30
    27f2:	8f a7       	std	Y+47, r24	; 0x2f
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	98 a9       	ldd	r25, Y+48	; 0x30
    27f8:	9c a7       	std	Y+44, r25	; 0x2c
    27fa:	8b a7       	std	Y+43, r24	; 0x2b
    27fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <shiftingRightMode+0x67a>
    2804:	9c a7       	std	Y+44, r25	; 0x2c
    2806:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	LED_turnOff(&ledFour);
    2808:	86 e8       	ldi	r24, 0x86	; 134
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledThree);
    2810:	83 e8       	ldi	r24, 0x83	; 131
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	aa e7       	ldi	r26, 0x7A	; 122
    281e:	b3 e4       	ldi	r27, 0x43	; 67
    2820:	8f a3       	std	Y+39, r24	; 0x27
    2822:	98 a7       	std	Y+40, r25	; 0x28
    2824:	a9 a7       	std	Y+41, r26	; 0x29
    2826:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	6f a1       	ldd	r22, Y+39	; 0x27
    282a:	78 a5       	ldd	r23, Y+40	; 0x28
    282c:	89 a5       	ldd	r24, Y+41	; 0x29
    282e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8b a3       	std	Y+35, r24	; 0x23
    2842:	9c a3       	std	Y+36, r25	; 0x24
    2844:	ad a3       	std	Y+37, r26	; 0x25
    2846:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2848:	6b a1       	ldd	r22, Y+35	; 0x23
    284a:	7c a1       	ldd	r23, Y+36	; 0x24
    284c:	8d a1       	ldd	r24, Y+37	; 0x25
    284e:	9e a1       	ldd	r25, Y+38	; 0x26
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <shiftingRightMode+0x6e4>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9a a3       	std	Y+34, r25	; 0x22
    2866:	89 a3       	std	Y+33, r24	; 0x21
    2868:	3f c0       	rjmp	.+126    	; 0x28e8 <shiftingRightMode+0x762>
	else if (__tmp > 65535)
    286a:	6b a1       	ldd	r22, Y+35	; 0x23
    286c:	7c a1       	ldd	r23, Y+36	; 0x24
    286e:	8d a1       	ldd	r24, Y+37	; 0x25
    2870:	9e a1       	ldd	r25, Y+38	; 0x26
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	4c f5       	brge	.+82     	; 0x28d4 <shiftingRightMode+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	6f a1       	ldd	r22, Y+39	; 0x27
    2884:	78 a5       	ldd	r23, Y+40	; 0x28
    2886:	89 a5       	ldd	r24, Y+41	; 0x29
    2888:	9a a5       	ldd	r25, Y+42	; 0x2a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9a a3       	std	Y+34, r25	; 0x22
    28a8:	89 a3       	std	Y+33, r24	; 0x21
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <shiftingRightMode+0x744>
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	98 a3       	std	Y+32, r25	; 0x20
    28b2:	8f 8f       	std	Y+31, r24	; 0x1f
    28b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28b6:	98 a1       	ldd	r25, Y+32	; 0x20
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <shiftingRightMode+0x732>
    28bc:	98 a3       	std	Y+32, r25	; 0x20
    28be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	89 a1       	ldd	r24, Y+33	; 0x21
    28c2:	9a a1       	ldd	r25, Y+34	; 0x22
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	9a a3       	std	Y+34, r25	; 0x22
    28c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	89 a1       	ldd	r24, Y+33	; 0x21
    28cc:	9a a1       	ldd	r25, Y+34	; 0x22
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	69 f7       	brne	.-38     	; 0x28ac <shiftingRightMode+0x726>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <shiftingRightMode+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	6b a1       	ldd	r22, Y+35	; 0x23
    28d6:	7c a1       	ldd	r23, Y+36	; 0x24
    28d8:	8d a1       	ldd	r24, Y+37	; 0x25
    28da:	9e a1       	ldd	r25, Y+38	; 0x26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
    28e8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ea:	9a a1       	ldd	r25, Y+34	; 0x22
    28ec:	9e 8f       	std	Y+30, r25	; 0x1e
    28ee:	8d 8f       	std	Y+29, r24	; 0x1d
    28f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <shiftingRightMode+0x76e>
    28f8:	9e 8f       	std	Y+30, r25	; 0x1e
    28fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LED_turnOff(&ledThree);
    28fc:	83 e8       	ldi	r24, 0x83	; 131
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledTwo);
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	aa e7       	ldi	r26, 0x7A	; 122
    2912:	b3 e4       	ldi	r27, 0x43	; 67
    2914:	89 8f       	std	Y+25, r24	; 0x19
    2916:	9a 8f       	std	Y+26, r25	; 0x1a
    2918:	ab 8f       	std	Y+27, r26	; 0x1b
    291a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	69 8d       	ldd	r22, Y+25	; 0x19
    291e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8d 8b       	std	Y+21, r24	; 0x15
    2936:	9e 8b       	std	Y+22, r25	; 0x16
    2938:	af 8b       	std	Y+23, r26	; 0x17
    293a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    293c:	6d 89       	ldd	r22, Y+21	; 0x15
    293e:	7e 89       	ldd	r23, Y+22	; 0x16
    2940:	8f 89       	ldd	r24, Y+23	; 0x17
    2942:	98 8d       	ldd	r25, Y+24	; 0x18
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <shiftingRightMode+0x7d8>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <shiftingRightMode+0x856>
	else if (__tmp > 65535)
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	98 8d       	ldd	r25, Y+24	; 0x18
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <shiftingRightMode+0x842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	69 8d       	ldd	r22, Y+25	; 0x19
    2978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	0f c0       	rjmp	.+30     	; 0x29be <shiftingRightMode+0x838>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9a 8b       	std	Y+18, r25	; 0x12
    29a6:	89 8b       	std	Y+17, r24	; 0x11
    29a8:	89 89       	ldd	r24, Y+17	; 0x11
    29aa:	9a 89       	ldd	r25, Y+18	; 0x12
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <shiftingRightMode+0x826>
    29b0:	9a 8b       	std	Y+18, r25	; 0x12
    29b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8b 89       	ldd	r24, Y+19	; 0x13
    29b6:	9c 89       	ldd	r25, Y+20	; 0x14
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8b 89       	ldd	r24, Y+19	; 0x13
    29c0:	9c 89       	ldd	r25, Y+20	; 0x14
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <shiftingRightMode+0x81a>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <shiftingRightMode+0x86a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6d 89       	ldd	r22, Y+21	; 0x15
    29ca:	7e 89       	ldd	r23, Y+22	; 0x16
    29cc:	8f 89       	ldd	r24, Y+23	; 0x17
    29ce:	98 8d       	ldd	r25, Y+24	; 0x18
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9c 8b       	std	Y+20, r25	; 0x14
    29da:	8b 8b       	std	Y+19, r24	; 0x13
    29dc:	8b 89       	ldd	r24, Y+19	; 0x13
    29de:	9c 89       	ldd	r25, Y+20	; 0x14
    29e0:	98 8b       	std	Y+16, r25	; 0x10
    29e2:	8f 87       	std	Y+15, r24	; 0x0f
    29e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e6:	98 89       	ldd	r25, Y+16	; 0x10
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <shiftingRightMode+0x862>
    29ec:	98 8b       	std	Y+16, r25	; 0x10
    29ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	LED_turnOff(&ledTwo);
    29f0:	80 e8       	ldi	r24, 0x80	; 128
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledOne);
    29f8:	86 ea       	ldi	r24, 0xA6	; 166
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	aa e7       	ldi	r26, 0x7A	; 122
    2a06:	b3 e4       	ldi	r27, 0x43	; 67
    2a08:	8b 87       	std	Y+11, r24	; 0x0b
    2a0a:	9c 87       	std	Y+12, r25	; 0x0c
    2a0c:	ad 87       	std	Y+13, r26	; 0x0d
    2a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a ef       	ldi	r20, 0xFA	; 250
    2a1e:	54 e4       	ldi	r21, 0x44	; 68
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	98 87       	std	Y+8, r25	; 0x08
    2a2c:	a9 87       	std	Y+9, r26	; 0x09
    2a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <shiftingRightMode+0x8cc>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <shiftingRightMode+0x94a>
	else if (__tmp > 65535)
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <shiftingRightMode+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <shiftingRightMode+0x92c>
    2a94:	88 ec       	ldi	r24, 0xC8	; 200
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 83       	std	Y+4, r25	; 0x04
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <shiftingRightMode+0x91a>
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <shiftingRightMode+0x90e>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <shiftingRightMode+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <shiftingRightMode+0x956>
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LED_turnOff(&ledOne);
    2ae4:	86 ea       	ldi	r24, 0xA6	; 166
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
}
    2aec:	c0 59       	subi	r28, 0x90	; 144
    2aee:	df 4f       	sbci	r29, 0xFF	; 255
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <convergingMode>:

void convergingMode(void)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	e8 97       	sbiw	r28, 0x38	; 56
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledOne);
    2b18:	86 ea       	ldi	r24, 0xA6	; 166
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledEight);
    2b20:	82 e9       	ldi	r24, 0x92	; 146
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a6 e9       	ldi	r26, 0x96	; 150
    2b2e:	b3 e4       	ldi	r27, 0x43	; 67
    2b30:	8d ab       	std	Y+53, r24	; 0x35
    2b32:	9e ab       	std	Y+54, r25	; 0x36
    2b34:	af ab       	std	Y+55, r26	; 0x37
    2b36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b38:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	4a ef       	ldi	r20, 0xFA	; 250
    2b46:	54 e4       	ldi	r21, 0x44	; 68
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	89 ab       	std	Y+49, r24	; 0x31
    2b52:	9a ab       	std	Y+50, r25	; 0x32
    2b54:	ab ab       	std	Y+51, r26	; 0x33
    2b56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b58:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	2c f4       	brge	.+10     	; 0x2b7a <convergingMode+0x76>
		__ticks = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	98 ab       	std	Y+48, r25	; 0x30
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
    2b78:	3f c0       	rjmp	.+126    	; 0x2bf8 <convergingMode+0xf4>
	else if (__tmp > 65535)
    2b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b80:	9c a9       	ldd	r25, Y+52	; 0x34
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	3f ef       	ldi	r19, 0xFF	; 255
    2b86:	4f e7       	ldi	r20, 0x7F	; 127
    2b88:	57 e4       	ldi	r21, 0x47	; 71
    2b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8e:	18 16       	cp	r1, r24
    2b90:	4c f5       	brge	.+82     	; 0x2be4 <convergingMode+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	6d a9       	ldd	r22, Y+53	; 0x35
    2b94:	7e a9       	ldd	r23, Y+54	; 0x36
    2b96:	8f a9       	ldd	r24, Y+55	; 0x37
    2b98:	98 ad       	ldd	r25, Y+56	; 0x38
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	51 e4       	ldi	r21, 0x41	; 65
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	98 ab       	std	Y+48, r25	; 0x30
    2bb8:	8f a7       	std	Y+47, r24	; 0x2f
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <convergingMode+0xd6>
    2bbc:	88 ec       	ldi	r24, 0xC8	; 200
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e a7       	std	Y+46, r25	; 0x2e
    2bc2:	8d a7       	std	Y+45, r24	; 0x2d
    2bc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <convergingMode+0xc4>
    2bcc:	9e a7       	std	Y+46, r25	; 0x2e
    2bce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	98 ab       	std	Y+48, r25	; 0x30
    2bd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	69 f7       	brne	.-38     	; 0x2bbc <convergingMode+0xb8>
    2be2:	14 c0       	rjmp	.+40     	; 0x2c0c <convergingMode+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	69 a9       	ldd	r22, Y+49	; 0x31
    2be6:	7a a9       	ldd	r23, Y+50	; 0x32
    2be8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bea:	9c a9       	ldd	r25, Y+52	; 0x34
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	98 ab       	std	Y+48, r25	; 0x30
    2bf6:	8f a7       	std	Y+47, r24	; 0x2f
    2bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfc:	9c a7       	std	Y+44, r25	; 0x2c
    2bfe:	8b a7       	std	Y+43, r24	; 0x2b
    2c00:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c02:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <convergingMode+0x100>
    2c08:	9c a7       	std	Y+44, r25	; 0x2c
    2c0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	LED_turnOff(&ledOne);
    2c0c:	86 ea       	ldi	r24, 0xA6	; 166
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledEight);
    2c14:	82 e9       	ldi	r24, 0x92	; 146
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledTwo);
    2c1c:	80 e8       	ldi	r24, 0x80	; 128
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSeven);
    2c24:	8f e8       	ldi	r24, 0x8F	; 143
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a6 e9       	ldi	r26, 0x96	; 150
    2c32:	b3 e4       	ldi	r27, 0x43	; 67
    2c34:	8f a3       	std	Y+39, r24	; 0x27
    2c36:	98 a7       	std	Y+40, r25	; 0x28
    2c38:	a9 a7       	std	Y+41, r26	; 0x29
    2c3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c40:	89 a5       	ldd	r24, Y+41	; 0x29
    2c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a ef       	ldi	r20, 0xFA	; 250
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8b a3       	std	Y+35, r24	; 0x23
    2c56:	9c a3       	std	Y+36, r25	; 0x24
    2c58:	ad a3       	std	Y+37, r26	; 0x25
    2c5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c60:	8d a1       	ldd	r24, Y+37	; 0x25
    2c62:	9e a1       	ldd	r25, Y+38	; 0x26
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e8       	ldi	r20, 0x80	; 128
    2c6a:	5f e3       	ldi	r21, 0x3F	; 63
    2c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c70:	88 23       	and	r24, r24
    2c72:	2c f4       	brge	.+10     	; 0x2c7e <convergingMode+0x17a>
		__ticks = 1;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9a a3       	std	Y+34, r25	; 0x22
    2c7a:	89 a3       	std	Y+33, r24	; 0x21
    2c7c:	3f c0       	rjmp	.+126    	; 0x2cfc <convergingMode+0x1f8>
	else if (__tmp > 65535)
    2c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c80:	7c a1       	ldd	r23, Y+36	; 0x24
    2c82:	8d a1       	ldd	r24, Y+37	; 0x25
    2c84:	9e a1       	ldd	r25, Y+38	; 0x26
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	4c f5       	brge	.+82     	; 0x2ce8 <convergingMode+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	6f a1       	ldd	r22, Y+39	; 0x27
    2c98:	78 a5       	ldd	r23, Y+40	; 0x28
    2c9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9a a3       	std	Y+34, r25	; 0x22
    2cbc:	89 a3       	std	Y+33, r24	; 0x21
    2cbe:	0f c0       	rjmp	.+30     	; 0x2cde <convergingMode+0x1da>
    2cc0:	88 ec       	ldi	r24, 0xC8	; 200
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	98 a3       	std	Y+32, r25	; 0x20
    2cc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2cc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cca:	98 a1       	ldd	r25, Y+32	; 0x20
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <convergingMode+0x1c8>
    2cd0:	98 a3       	std	Y+32, r25	; 0x20
    2cd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	9a a3       	std	Y+34, r25	; 0x22
    2cdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	69 f7       	brne	.-38     	; 0x2cc0 <convergingMode+0x1bc>
    2ce6:	14 c0       	rjmp	.+40     	; 0x2d10 <convergingMode+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cea:	7c a1       	ldd	r23, Y+36	; 0x24
    2cec:	8d a1       	ldd	r24, Y+37	; 0x25
    2cee:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9a a3       	std	Y+34, r25	; 0x22
    2cfa:	89 a3       	std	Y+33, r24	; 0x21
    2cfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2d00:	9e 8f       	std	Y+30, r25	; 0x1e
    2d02:	8d 8f       	std	Y+29, r24	; 0x1d
    2d04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <convergingMode+0x204>
    2d0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	LED_turnOff(&ledTwo);
    2d10:	80 e8       	ldi	r24, 0x80	; 128
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSeven);
    2d18:	8f e8       	ldi	r24, 0x8F	; 143
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledThree);
    2d20:	83 e8       	ldi	r24, 0x83	; 131
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSix);
    2d28:	8c e8       	ldi	r24, 0x8C	; 140
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a6 e9       	ldi	r26, 0x96	; 150
    2d36:	b3 e4       	ldi	r27, 0x43	; 67
    2d38:	89 8f       	std	Y+25, r24	; 0x19
    2d3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	69 8d       	ldd	r22, Y+25	; 0x19
    2d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a ef       	ldi	r20, 0xFA	; 250
    2d4e:	54 e4       	ldi	r21, 0x44	; 68
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8d 8b       	std	Y+21, r24	; 0x15
    2d5a:	9e 8b       	std	Y+22, r25	; 0x16
    2d5c:	af 8b       	std	Y+23, r26	; 0x17
    2d5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d60:	6d 89       	ldd	r22, Y+21	; 0x15
    2d62:	7e 89       	ldd	r23, Y+22	; 0x16
    2d64:	8f 89       	ldd	r24, Y+23	; 0x17
    2d66:	98 8d       	ldd	r25, Y+24	; 0x18
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <convergingMode+0x27e>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9c 8b       	std	Y+20, r25	; 0x14
    2d7e:	8b 8b       	std	Y+19, r24	; 0x13
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <convergingMode+0x2fc>
	else if (__tmp > 65535)
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <convergingMode+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9c 8b       	std	Y+20, r25	; 0x14
    2dc0:	8b 8b       	std	Y+19, r24	; 0x13
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <convergingMode+0x2de>
    2dc4:	88 ec       	ldi	r24, 0xC8	; 200
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9a 8b       	std	Y+18, r25	; 0x12
    2dca:	89 8b       	std	Y+17, r24	; 0x11
    2dcc:	89 89       	ldd	r24, Y+17	; 0x11
    2dce:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <convergingMode+0x2cc>
    2dd4:	9a 8b       	std	Y+18, r25	; 0x12
    2dd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	9c 89       	ldd	r25, Y+20	; 0x14
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9c 8b       	std	Y+20, r25	; 0x14
    2de0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8b 89       	ldd	r24, Y+19	; 0x13
    2de4:	9c 89       	ldd	r25, Y+20	; 0x14
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <convergingMode+0x2c0>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <convergingMode+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6d 89       	ldd	r22, Y+21	; 0x15
    2dee:	7e 89       	ldd	r23, Y+22	; 0x16
    2df0:	8f 89       	ldd	r24, Y+23	; 0x17
    2df2:	98 8d       	ldd	r25, Y+24	; 0x18
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9c 8b       	std	Y+20, r25	; 0x14
    2dfe:	8b 8b       	std	Y+19, r24	; 0x13
    2e00:	8b 89       	ldd	r24, Y+19	; 0x13
    2e02:	9c 89       	ldd	r25, Y+20	; 0x14
    2e04:	98 8b       	std	Y+16, r25	; 0x10
    2e06:	8f 87       	std	Y+15, r24	; 0x0f
    2e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0a:	98 89       	ldd	r25, Y+16	; 0x10
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <convergingMode+0x308>
    2e10:	98 8b       	std	Y+16, r25	; 0x10
    2e12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LED_turnOff(&ledThree);
    2e14:	83 e8       	ldi	r24, 0x83	; 131
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSix);
    2e1c:	8c e8       	ldi	r24, 0x8C	; 140
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledFour);
    2e24:	86 e8       	ldi	r24, 0x86	; 134
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledFive);
    2e2c:	89 e8       	ldi	r24, 0x89	; 137
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a6 e9       	ldi	r26, 0x96	; 150
    2e3a:	b3 e4       	ldi	r27, 0x43	; 67
    2e3c:	8b 87       	std	Y+11, r24	; 0x0b
    2e3e:	9c 87       	std	Y+12, r25	; 0x0c
    2e40:	ad 87       	std	Y+13, r26	; 0x0d
    2e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8f 83       	std	Y+7, r24	; 0x07
    2e5e:	98 87       	std	Y+8, r25	; 0x08
    2e60:	a9 87       	std	Y+9, r26	; 0x09
    2e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e64:	6f 81       	ldd	r22, Y+7	; 0x07
    2e66:	78 85       	ldd	r23, Y+8	; 0x08
    2e68:	89 85       	ldd	r24, Y+9	; 0x09
    2e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <convergingMode+0x382>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <convergingMode+0x400>
	else if (__tmp > 65535)
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <convergingMode+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <convergingMode+0x3e2>
    2ec8:	88 ec       	ldi	r24, 0xC8	; 200
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <convergingMode+0x3d0>
    2ed8:	9c 83       	std	Y+4, r25	; 0x04
    2eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9e 83       	std	Y+6, r25	; 0x06
    2ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <convergingMode+0x3c4>
    2eee:	14 c0       	rjmp	.+40     	; 0x2f18 <convergingMode+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef2:	78 85       	ldd	r23, Y+8	; 0x08
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <convergingMode+0x40c>
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LED_turnOff(&ledFour);
    2f18:	86 e8       	ldi	r24, 0x86	; 134
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFive);
    2f20:	89 e8       	ldi	r24, 0x89	; 137
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
}
    2f28:	e8 96       	adiw	r28, 0x38	; 56
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <divergingMode>:

void divergingMode(void)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	e8 97       	sbiw	r28, 0x38	; 56
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledFour);
    2f4e:	86 e8       	ldi	r24, 0x86	; 134
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledFive);
    2f56:	89 e8       	ldi	r24, 0x89	; 137
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a6 e9       	ldi	r26, 0x96	; 150
    2f64:	b3 e4       	ldi	r27, 0x43	; 67
    2f66:	8d ab       	std	Y+53, r24	; 0x35
    2f68:	9e ab       	std	Y+54, r25	; 0x36
    2f6a:	af ab       	std	Y+55, r26	; 0x37
    2f6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f70:	7e a9       	ldd	r23, Y+54	; 0x36
    2f72:	8f a9       	ldd	r24, Y+55	; 0x37
    2f74:	98 ad       	ldd	r25, Y+56	; 0x38
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	89 ab       	std	Y+49, r24	; 0x31
    2f88:	9a ab       	std	Y+50, r25	; 0x32
    2f8a:	ab ab       	std	Y+51, r26	; 0x33
    2f8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f90:	7a a9       	ldd	r23, Y+50	; 0x32
    2f92:	8b a9       	ldd	r24, Y+51	; 0x33
    2f94:	9c a9       	ldd	r25, Y+52	; 0x34
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	2c f4       	brge	.+10     	; 0x2fb0 <divergingMode+0x76>
		__ticks = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	98 ab       	std	Y+48, r25	; 0x30
    2fac:	8f a7       	std	Y+47, r24	; 0x2f
    2fae:	3f c0       	rjmp	.+126    	; 0x302e <divergingMode+0xf4>
	else if (__tmp > 65535)
    2fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	4c f5       	brge	.+82     	; 0x301a <divergingMode+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fca:	7e a9       	ldd	r23, Y+54	; 0x36
    2fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    2fce:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	98 ab       	std	Y+48, r25	; 0x30
    2fee:	8f a7       	std	Y+47, r24	; 0x2f
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <divergingMode+0xd6>
    2ff2:	88 ec       	ldi	r24, 0xC8	; 200
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9e a7       	std	Y+46, r25	; 0x2e
    2ff8:	8d a7       	std	Y+45, r24	; 0x2d
    2ffa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ffc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <divergingMode+0xc4>
    3002:	9e a7       	std	Y+46, r25	; 0x2e
    3004:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	8f a5       	ldd	r24, Y+47	; 0x2f
    3008:	98 a9       	ldd	r25, Y+48	; 0x30
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	98 ab       	std	Y+48, r25	; 0x30
    300e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3010:	8f a5       	ldd	r24, Y+47	; 0x2f
    3012:	98 a9       	ldd	r25, Y+48	; 0x30
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <divergingMode+0xb8>
    3018:	14 c0       	rjmp	.+40     	; 0x3042 <divergingMode+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	69 a9       	ldd	r22, Y+49	; 0x31
    301c:	7a a9       	ldd	r23, Y+50	; 0x32
    301e:	8b a9       	ldd	r24, Y+51	; 0x33
    3020:	9c a9       	ldd	r25, Y+52	; 0x34
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	98 ab       	std	Y+48, r25	; 0x30
    302c:	8f a7       	std	Y+47, r24	; 0x2f
    302e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3030:	98 a9       	ldd	r25, Y+48	; 0x30
    3032:	9c a7       	std	Y+44, r25	; 0x2c
    3034:	8b a7       	std	Y+43, r24	; 0x2b
    3036:	8b a5       	ldd	r24, Y+43	; 0x2b
    3038:	9c a5       	ldd	r25, Y+44	; 0x2c
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <divergingMode+0x100>
    303e:	9c a7       	std	Y+44, r25	; 0x2c
    3040:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	LED_turnOff(&ledFour);
    3042:	86 e8       	ldi	r24, 0x86	; 134
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFive);
    304a:	89 e8       	ldi	r24, 0x89	; 137
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledThree);
    3052:	83 e8       	ldi	r24, 0x83	; 131
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSix);
    305a:	8c e8       	ldi	r24, 0x8C	; 140
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a6 e9       	ldi	r26, 0x96	; 150
    3068:	b3 e4       	ldi	r27, 0x43	; 67
    306a:	8f a3       	std	Y+39, r24	; 0x27
    306c:	98 a7       	std	Y+40, r25	; 0x28
    306e:	a9 a7       	std	Y+41, r26	; 0x29
    3070:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3072:	6f a1       	ldd	r22, Y+39	; 0x27
    3074:	78 a5       	ldd	r23, Y+40	; 0x28
    3076:	89 a5       	ldd	r24, Y+41	; 0x29
    3078:	9a a5       	ldd	r25, Y+42	; 0x2a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a ef       	ldi	r20, 0xFA	; 250
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8b a3       	std	Y+35, r24	; 0x23
    308c:	9c a3       	std	Y+36, r25	; 0x24
    308e:	ad a3       	std	Y+37, r26	; 0x25
    3090:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3092:	6b a1       	ldd	r22, Y+35	; 0x23
    3094:	7c a1       	ldd	r23, Y+36	; 0x24
    3096:	8d a1       	ldd	r24, Y+37	; 0x25
    3098:	9e a1       	ldd	r25, Y+38	; 0x26
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <divergingMode+0x17a>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9a a3       	std	Y+34, r25	; 0x22
    30b0:	89 a3       	std	Y+33, r24	; 0x21
    30b2:	3f c0       	rjmp	.+126    	; 0x3132 <divergingMode+0x1f8>
	else if (__tmp > 65535)
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	4c f5       	brge	.+82     	; 0x311e <divergingMode+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30cc:	6f a1       	ldd	r22, Y+39	; 0x27
    30ce:	78 a5       	ldd	r23, Y+40	; 0x28
    30d0:	89 a5       	ldd	r24, Y+41	; 0x29
    30d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9a a3       	std	Y+34, r25	; 0x22
    30f2:	89 a3       	std	Y+33, r24	; 0x21
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <divergingMode+0x1da>
    30f6:	88 ec       	ldi	r24, 0xC8	; 200
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	98 a3       	std	Y+32, r25	; 0x20
    30fc:	8f 8f       	std	Y+31, r24	; 0x1f
    30fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3100:	98 a1       	ldd	r25, Y+32	; 0x20
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <divergingMode+0x1c8>
    3106:	98 a3       	std	Y+32, r25	; 0x20
    3108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310a:	89 a1       	ldd	r24, Y+33	; 0x21
    310c:	9a a1       	ldd	r25, Y+34	; 0x22
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	89 a1       	ldd	r24, Y+33	; 0x21
    3116:	9a a1       	ldd	r25, Y+34	; 0x22
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	69 f7       	brne	.-38     	; 0x30f6 <divergingMode+0x1bc>
    311c:	14 c0       	rjmp	.+40     	; 0x3146 <divergingMode+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	6b a1       	ldd	r22, Y+35	; 0x23
    3120:	7c a1       	ldd	r23, Y+36	; 0x24
    3122:	8d a1       	ldd	r24, Y+37	; 0x25
    3124:	9e a1       	ldd	r25, Y+38	; 0x26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
    3132:	89 a1       	ldd	r24, Y+33	; 0x21
    3134:	9a a1       	ldd	r25, Y+34	; 0x22
    3136:	9e 8f       	std	Y+30, r25	; 0x1e
    3138:	8d 8f       	std	Y+29, r24	; 0x1d
    313a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <divergingMode+0x204>
    3142:	9e 8f       	std	Y+30, r25	; 0x1e
    3144:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	LED_turnOff(&ledThree);
    3146:	83 e8       	ldi	r24, 0x83	; 131
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSix);
    314e:	8c e8       	ldi	r24, 0x8C	; 140
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledTwo);
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledSeven);
    315e:	8f e8       	ldi	r24, 0x8F	; 143
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a6 e9       	ldi	r26, 0x96	; 150
    316c:	b3 e4       	ldi	r27, 0x43	; 67
    316e:	89 8f       	std	Y+25, r24	; 0x19
    3170:	9a 8f       	std	Y+26, r25	; 0x1a
    3172:	ab 8f       	std	Y+27, r26	; 0x1b
    3174:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3176:	69 8d       	ldd	r22, Y+25	; 0x19
    3178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4a ef       	ldi	r20, 0xFA	; 250
    3184:	54 e4       	ldi	r21, 0x44	; 68
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	8d 8b       	std	Y+21, r24	; 0x15
    3190:	9e 8b       	std	Y+22, r25	; 0x16
    3192:	af 8b       	std	Y+23, r26	; 0x17
    3194:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3196:	6d 89       	ldd	r22, Y+21	; 0x15
    3198:	7e 89       	ldd	r23, Y+22	; 0x16
    319a:	8f 89       	ldd	r24, Y+23	; 0x17
    319c:	98 8d       	ldd	r25, Y+24	; 0x18
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e8       	ldi	r20, 0x80	; 128
    31a4:	5f e3       	ldi	r21, 0x3F	; 63
    31a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31aa:	88 23       	and	r24, r24
    31ac:	2c f4       	brge	.+10     	; 0x31b8 <divergingMode+0x27e>
		__ticks = 1;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	3f c0       	rjmp	.+126    	; 0x3236 <divergingMode+0x2fc>
	else if (__tmp > 65535)
    31b8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ba:	7e 89       	ldd	r23, Y+22	; 0x16
    31bc:	8f 89       	ldd	r24, Y+23	; 0x17
    31be:	98 8d       	ldd	r25, Y+24	; 0x18
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	4c f5       	brge	.+82     	; 0x3222 <divergingMode+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d0:	69 8d       	ldd	r22, Y+25	; 0x19
    31d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9c 8b       	std	Y+20, r25	; 0x14
    31f6:	8b 8b       	std	Y+19, r24	; 0x13
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <divergingMode+0x2de>
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	9a 8b       	std	Y+18, r25	; 0x12
    3200:	89 8b       	std	Y+17, r24	; 0x11
    3202:	89 89       	ldd	r24, Y+17	; 0x11
    3204:	9a 89       	ldd	r25, Y+18	; 0x12
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <divergingMode+0x2cc>
    320a:	9a 8b       	std	Y+18, r25	; 0x12
    320c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320e:	8b 89       	ldd	r24, Y+19	; 0x13
    3210:	9c 89       	ldd	r25, Y+20	; 0x14
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	9c 8b       	std	Y+20, r25	; 0x14
    3216:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3218:	8b 89       	ldd	r24, Y+19	; 0x13
    321a:	9c 89       	ldd	r25, Y+20	; 0x14
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	69 f7       	brne	.-38     	; 0x31fa <divergingMode+0x2c0>
    3220:	14 c0       	rjmp	.+40     	; 0x324a <divergingMode+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3222:	6d 89       	ldd	r22, Y+21	; 0x15
    3224:	7e 89       	ldd	r23, Y+22	; 0x16
    3226:	8f 89       	ldd	r24, Y+23	; 0x17
    3228:	98 8d       	ldd	r25, Y+24	; 0x18
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
    3236:	8b 89       	ldd	r24, Y+19	; 0x13
    3238:	9c 89       	ldd	r25, Y+20	; 0x14
    323a:	98 8b       	std	Y+16, r25	; 0x10
    323c:	8f 87       	std	Y+15, r24	; 0x0f
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	98 89       	ldd	r25, Y+16	; 0x10
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <divergingMode+0x308>
    3246:	98 8b       	std	Y+16, r25	; 0x10
    3248:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LED_turnOff(&ledTwo);
    324a:	80 e8       	ldi	r24, 0x80	; 128
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSeven);
    3252:	8f e8       	ldi	r24, 0x8F	; 143
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOn(&ledOne);
    325a:	86 ea       	ldi	r24, 0xA6	; 166
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
	LED_turnOn(&ledEight);
    3262:	82 e9       	ldi	r24, 0x92	; 146
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	a6 e9       	ldi	r26, 0x96	; 150
    3270:	b3 e4       	ldi	r27, 0x43	; 67
    3272:	8b 87       	std	Y+11, r24	; 0x0b
    3274:	9c 87       	std	Y+12, r25	; 0x0c
    3276:	ad 87       	std	Y+13, r26	; 0x0d
    3278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6b 85       	ldd	r22, Y+11	; 0x0b
    327c:	7c 85       	ldd	r23, Y+12	; 0x0c
    327e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3280:	9e 85       	ldd	r25, Y+14	; 0x0e
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	8f 83       	std	Y+7, r24	; 0x07
    3294:	98 87       	std	Y+8, r25	; 0x08
    3296:	a9 87       	std	Y+9, r26	; 0x09
    3298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    329a:	6f 81       	ldd	r22, Y+7	; 0x07
    329c:	78 85       	ldd	r23, Y+8	; 0x08
    329e:	89 85       	ldd	r24, Y+9	; 0x09
    32a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <divergingMode+0x382>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <divergingMode+0x400>
	else if (__tmp > 65535)
    32bc:	6f 81       	ldd	r22, Y+7	; 0x07
    32be:	78 85       	ldd	r23, Y+8	; 0x08
    32c0:	89 85       	ldd	r24, Y+9	; 0x09
    32c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <divergingMode+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32da:	9e 85       	ldd	r25, Y+14	; 0x0e
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <divergingMode+0x3e2>
    32fe:	88 ec       	ldi	r24, 0xC8	; 200
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	9c 81       	ldd	r25, Y+4	; 0x04
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <divergingMode+0x3d0>
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <divergingMode+0x3c4>
    3324:	14 c0       	rjmp	.+40     	; 0x334e <divergingMode+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <divergingMode+0x40c>
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LED_turnOff(&ledOne);
    334e:	86 ea       	ldi	r24, 0xA6	; 166
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledEight);
    3356:	82 e9       	ldi	r24, 0x92	; 146
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
}
    335e:	e8 96       	adiw	r28, 0x38	; 56
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <pingPongMode>:

void pingPongMode(void)
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	2e 97       	sbiw	r28, 0x0e	; 14
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
	shiftingLeftMode();
    3384:	0e 94 04 0c 	call	0x1808	; 0x1808 <shiftingLeftMode>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	aa e7       	ldi	r26, 0x7A	; 122
    338e:	b3 e4       	ldi	r27, 0x43	; 67
    3390:	8b 87       	std	Y+11, r24	; 0x0b
    3392:	9c 87       	std	Y+12, r25	; 0x0c
    3394:	ad 87       	std	Y+13, r26	; 0x0d
    3396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3398:	6b 85       	ldd	r22, Y+11	; 0x0b
    339a:	7c 85       	ldd	r23, Y+12	; 0x0c
    339c:	8d 85       	ldd	r24, Y+13	; 0x0d
    339e:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a ef       	ldi	r20, 0xFA	; 250
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8f 83       	std	Y+7, r24	; 0x07
    33b2:	98 87       	std	Y+8, r25	; 0x08
    33b4:	a9 87       	std	Y+9, r26	; 0x09
    33b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ba:	78 85       	ldd	r23, Y+8	; 0x08
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e8       	ldi	r20, 0x80	; 128
    33c6:	5f e3       	ldi	r21, 0x3F	; 63
    33c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	2c f4       	brge	.+10     	; 0x33da <pingPongMode+0x6a>
		__ticks = 1;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	3f c0       	rjmp	.+126    	; 0x3458 <pingPongMode+0xe8>
	else if (__tmp > 65535)
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	3f ef       	ldi	r19, 0xFF	; 255
    33e6:	4f e7       	ldi	r20, 0x7F	; 127
    33e8:	57 e4       	ldi	r21, 0x47	; 71
    33ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ee:	18 16       	cp	r1, r24
    33f0:	4c f5       	brge	.+82     	; 0x3444 <pingPongMode+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e2       	ldi	r20, 0x20	; 32
    3400:	51 e4       	ldi	r21, 0x41	; 65
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
    341a:	0f c0       	rjmp	.+30     	; 0x343a <pingPongMode+0xca>
    341c:	88 ec       	ldi	r24, 0xC8	; 200
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9c 83       	std	Y+4, r25	; 0x04
    3422:	8b 83       	std	Y+3, r24	; 0x03
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <pingPongMode+0xb8>
    342c:	9c 83       	std	Y+4, r25	; 0x04
    342e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3430:	8d 81       	ldd	r24, Y+5	; 0x05
    3432:	9e 81       	ldd	r25, Y+6	; 0x06
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	9e 83       	std	Y+6, r25	; 0x06
    3438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	9e 81       	ldd	r25, Y+6	; 0x06
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	69 f7       	brne	.-38     	; 0x341c <pingPongMode+0xac>
    3442:	14 c0       	rjmp	.+40     	; 0x346c <pingPongMode+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <pingPongMode+0xf4>
    3468:	9a 83       	std	Y+2, r25	; 0x02
    346a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	shiftingRightMode();
    346c:	0e 94 c3 10 	call	0x2186	; 0x2186 <shiftingRightMode>
}
    3470:	2e 96       	adiw	r28, 0x0e	; 14
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <incrementingMode>:

void incrementingMode(void)
{
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	c0 57       	subi	r28, 0x70	; 112
    3490:	d0 40       	sbci	r29, 0x00	; 0
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
	LED_turnOn(&ledOne);
    349c:	86 ea       	ldi	r24, 0xA6	; 166
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    34a4:	fe 01       	movw	r30, r28
    34a6:	e3 59       	subi	r30, 0x93	; 147
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a6 e9       	ldi	r26, 0x96	; 150
    34b0:	b3 e4       	ldi	r27, 0x43	; 67
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	8e 01       	movw	r16, r28
    34bc:	07 59       	subi	r16, 0x97	; 151
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	fe 01       	movw	r30, r28
    34c2:	e3 59       	subi	r30, 0x93	; 147
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	60 81       	ld	r22, Z
    34c8:	71 81       	ldd	r23, Z+1	; 0x01
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	93 81       	ldd	r25, Z+3	; 0x03
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4a ef       	ldi	r20, 0xFA	; 250
    34d4:	54 e4       	ldi	r21, 0x44	; 68
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	f8 01       	movw	r30, r16
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e8:	fe 01       	movw	r30, r28
    34ea:	e7 59       	subi	r30, 0x97	; 151
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	44 f4       	brge	.+16     	; 0x3516 <incrementingMode+0x94>
		__ticks = 1;
    3506:	fe 01       	movw	r30, r28
    3508:	e9 59       	subi	r30, 0x99	; 153
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	80 83       	st	Z, r24
    3514:	64 c0       	rjmp	.+200    	; 0x35de <incrementingMode+0x15c>
	else if (__tmp > 65535)
    3516:	fe 01       	movw	r30, r28
    3518:	e7 59       	subi	r30, 0x97	; 151
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	3f ef       	ldi	r19, 0xFF	; 255
    3528:	4f e7       	ldi	r20, 0x7F	; 127
    352a:	57 e4       	ldi	r21, 0x47	; 71
    352c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3530:	18 16       	cp	r1, r24
    3532:	0c f0       	brlt	.+2      	; 0x3536 <incrementingMode+0xb4>
    3534:	43 c0       	rjmp	.+134    	; 0x35bc <incrementingMode+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	fe 01       	movw	r30, r28
    3538:	e3 59       	subi	r30, 0x93	; 147
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8e 01       	movw	r16, r28
    3556:	09 59       	subi	r16, 0x99	; 153
    3558:	1f 4f       	sbci	r17, 0xFF	; 255
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
    356c:	1f c0       	rjmp	.+62     	; 0x35ac <incrementingMode+0x12a>
    356e:	fe 01       	movw	r30, r28
    3570:	eb 59       	subi	r30, 0x9B	; 155
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	88 ec       	ldi	r24, 0xC8	; 200
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
    357c:	fe 01       	movw	r30, r28
    357e:	eb 59       	subi	r30, 0x9B	; 155
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <incrementingMode+0x104>
    358a:	fe 01       	movw	r30, r28
    358c:	eb 59       	subi	r30, 0x9B	; 155
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	de 01       	movw	r26, r28
    3596:	a9 59       	subi	r26, 0x99	; 153
    3598:	bf 4f       	sbci	r27, 0xFF	; 255
    359a:	fe 01       	movw	r30, r28
    359c:	e9 59       	subi	r30, 0x99	; 153
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	11 96       	adiw	r26, 0x01	; 1
    35a8:	9c 93       	st	X, r25
    35aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	fe 01       	movw	r30, r28
    35ae:	e9 59       	subi	r30, 0x99	; 153
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	d1 f6       	brne	.-76     	; 0x356e <incrementingMode+0xec>
    35ba:	27 c0       	rjmp	.+78     	; 0x360a <incrementingMode+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35bc:	8e 01       	movw	r16, r28
    35be:	09 59       	subi	r16, 0x99	; 153
    35c0:	1f 4f       	sbci	r17, 0xFF	; 255
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 59       	subi	r30, 0x97	; 151
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	f8 01       	movw	r30, r16
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	de 01       	movw	r26, r28
    35e0:	ad 59       	subi	r26, 0x9D	; 157
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e9 59       	subi	r30, 0x99	; 153
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	8d 93       	st	X+, r24
    35f0:	9c 93       	st	X, r25
    35f2:	fe 01       	movw	r30, r28
    35f4:	ed 59       	subi	r30, 0x9D	; 157
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <incrementingMode+0x17a>
    3600:	fe 01       	movw	r30, r28
    3602:	ed 59       	subi	r30, 0x9D	; 157
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	80 83       	st	Z, r24
	_delay_ms(300);
	LED_turnOn(&ledTwo);
    360a:	80 e8       	ldi	r24, 0x80	; 128
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3612:	fe 01       	movw	r30, r28
    3614:	e1 5a       	subi	r30, 0xA1	; 161
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a6 e9       	ldi	r26, 0x96	; 150
    361e:	b3 e4       	ldi	r27, 0x43	; 67
    3620:	80 83       	st	Z, r24
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	a2 83       	std	Z+2, r26	; 0x02
    3626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	8e 01       	movw	r16, r28
    362a:	05 5a       	subi	r16, 0xA5	; 165
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	e1 5a       	subi	r30, 0xA1	; 161
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a ef       	ldi	r20, 0xFA	; 250
    3642:	54 e4       	ldi	r21, 0x44	; 68
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	f8 01       	movw	r30, r16
    364e:	80 83       	st	Z, r24
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	a2 83       	std	Z+2, r26	; 0x02
    3654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3656:	fe 01       	movw	r30, r28
    3658:	e5 5a       	subi	r30, 0xA5	; 165
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e8       	ldi	r20, 0x80	; 128
    366a:	5f e3       	ldi	r21, 0x3F	; 63
    366c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3670:	88 23       	and	r24, r24
    3672:	44 f4       	brge	.+16     	; 0x3684 <incrementingMode+0x202>
		__ticks = 1;
    3674:	fe 01       	movw	r30, r28
    3676:	e7 5a       	subi	r30, 0xA7	; 167
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	64 c0       	rjmp	.+200    	; 0x374c <incrementingMode+0x2ca>
	else if (__tmp > 65535)
    3684:	fe 01       	movw	r30, r28
    3686:	e5 5a       	subi	r30, 0xA5	; 165
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	60 81       	ld	r22, Z
    368c:	71 81       	ldd	r23, Z+1	; 0x01
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	93 81       	ldd	r25, Z+3	; 0x03
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <incrementingMode+0x222>
    36a2:	43 c0       	rjmp	.+134    	; 0x372a <incrementingMode+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	fe 01       	movw	r30, r28
    36a6:	e1 5a       	subi	r30, 0xA1	; 161
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8e 01       	movw	r16, r28
    36c4:	07 5a       	subi	r16, 0xA7	; 167
    36c6:	1f 4f       	sbci	r17, 0xFF	; 255
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	1f c0       	rjmp	.+62     	; 0x371a <incrementingMode+0x298>
    36dc:	fe 01       	movw	r30, r28
    36de:	e9 5a       	subi	r30, 0xA9	; 169
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	88 ec       	ldi	r24, 0xC8	; 200
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	fe 01       	movw	r30, r28
    36ec:	e9 5a       	subi	r30, 0xA9	; 169
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <incrementingMode+0x272>
    36f8:	fe 01       	movw	r30, r28
    36fa:	e9 5a       	subi	r30, 0xA9	; 169
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3702:	de 01       	movw	r26, r28
    3704:	a7 5a       	subi	r26, 0xA7	; 167
    3706:	bf 4f       	sbci	r27, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	e7 5a       	subi	r30, 0xA7	; 167
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	11 96       	adiw	r26, 0x01	; 1
    3716:	9c 93       	st	X, r25
    3718:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371a:	fe 01       	movw	r30, r28
    371c:	e7 5a       	subi	r30, 0xA7	; 167
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	d1 f6       	brne	.-76     	; 0x36dc <incrementingMode+0x25a>
    3728:	27 c0       	rjmp	.+78     	; 0x3778 <incrementingMode+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	8e 01       	movw	r16, r28
    372c:	07 5a       	subi	r16, 0xA7	; 167
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	fe 01       	movw	r30, r28
    3732:	e5 5a       	subi	r30, 0xA5	; 165
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    374c:	de 01       	movw	r26, r28
    374e:	ab 5a       	subi	r26, 0xAB	; 171
    3750:	bf 4f       	sbci	r27, 0xFF	; 255
    3752:	fe 01       	movw	r30, r28
    3754:	e7 5a       	subi	r30, 0xA7	; 167
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	8d 93       	st	X+, r24
    375e:	9c 93       	st	X, r25
    3760:	fe 01       	movw	r30, r28
    3762:	eb 5a       	subi	r30, 0xAB	; 171
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <incrementingMode+0x2e8>
    376e:	fe 01       	movw	r30, r28
    3770:	eb 5a       	subi	r30, 0xAB	; 171
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	80 83       	st	Z, r24
	_delay_ms(300);
	LED_turnOn(&ledThree);
    3778:	83 e8       	ldi	r24, 0x83	; 131
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3780:	fe 01       	movw	r30, r28
    3782:	ef 5a       	subi	r30, 0xAF	; 175
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a6 e9       	ldi	r26, 0x96	; 150
    378c:	b3 e4       	ldi	r27, 0x43	; 67
    378e:	80 83       	st	Z, r24
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	a2 83       	std	Z+2, r26	; 0x02
    3794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3796:	8e 01       	movw	r16, r28
    3798:	03 5b       	subi	r16, 0xB3	; 179
    379a:	1f 4f       	sbci	r17, 0xFF	; 255
    379c:	fe 01       	movw	r30, r28
    379e:	ef 5a       	subi	r30, 0xAF	; 175
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	4a ef       	ldi	r20, 0xFA	; 250
    37b0:	54 e4       	ldi	r21, 0x44	; 68
    37b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	f8 01       	movw	r30, r16
    37bc:	80 83       	st	Z, r24
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	a2 83       	std	Z+2, r26	; 0x02
    37c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37c4:	fe 01       	movw	r30, r28
    37c6:	e3 5b       	subi	r30, 0xB3	; 179
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	60 81       	ld	r22, Z
    37cc:	71 81       	ldd	r23, Z+1	; 0x01
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e8       	ldi	r20, 0x80	; 128
    37d8:	5f e3       	ldi	r21, 0x3F	; 63
    37da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37de:	88 23       	and	r24, r24
    37e0:	44 f4       	brge	.+16     	; 0x37f2 <incrementingMode+0x370>
		__ticks = 1;
    37e2:	fe 01       	movw	r30, r28
    37e4:	e5 5b       	subi	r30, 0xB5	; 181
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
    37f0:	64 c0       	rjmp	.+200    	; 0x38ba <incrementingMode+0x438>
	else if (__tmp > 65535)
    37f2:	fe 01       	movw	r30, r28
    37f4:	e3 5b       	subi	r30, 0xB3	; 179
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	0c f0       	brlt	.+2      	; 0x3812 <incrementingMode+0x390>
    3810:	43 c0       	rjmp	.+134    	; 0x3898 <incrementingMode+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3812:	fe 01       	movw	r30, r28
    3814:	ef 5a       	subi	r30, 0xAF	; 175
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	8e 01       	movw	r16, r28
    3832:	05 5b       	subi	r16, 0xB5	; 181
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	1f c0       	rjmp	.+62     	; 0x3888 <incrementingMode+0x406>
    384a:	fe 01       	movw	r30, r28
    384c:	e7 5b       	subi	r30, 0xB7	; 183
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	88 ec       	ldi	r24, 0xC8	; 200
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	80 83       	st	Z, r24
    3858:	fe 01       	movw	r30, r28
    385a:	e7 5b       	subi	r30, 0xB7	; 183
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <incrementingMode+0x3e0>
    3866:	fe 01       	movw	r30, r28
    3868:	e7 5b       	subi	r30, 0xB7	; 183
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3870:	de 01       	movw	r26, r28
    3872:	a5 5b       	subi	r26, 0xB5	; 181
    3874:	bf 4f       	sbci	r27, 0xFF	; 255
    3876:	fe 01       	movw	r30, r28
    3878:	e5 5b       	subi	r30, 0xB5	; 181
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	80 81       	ld	r24, Z
    387e:	91 81       	ldd	r25, Z+1	; 0x01
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	11 96       	adiw	r26, 0x01	; 1
    3884:	9c 93       	st	X, r25
    3886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3888:	fe 01       	movw	r30, r28
    388a:	e5 5b       	subi	r30, 0xB5	; 181
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	d1 f6       	brne	.-76     	; 0x384a <incrementingMode+0x3c8>
    3896:	27 c0       	rjmp	.+78     	; 0x38e6 <incrementingMode+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3898:	8e 01       	movw	r16, r28
    389a:	05 5b       	subi	r16, 0xB5	; 181
    389c:	1f 4f       	sbci	r17, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e3 5b       	subi	r30, 0xB3	; 179
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	80 83       	st	Z, r24
    38ba:	de 01       	movw	r26, r28
    38bc:	a9 5b       	subi	r26, 0xB9	; 185
    38be:	bf 4f       	sbci	r27, 0xFF	; 255
    38c0:	fe 01       	movw	r30, r28
    38c2:	e5 5b       	subi	r30, 0xB5	; 181
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	8d 93       	st	X+, r24
    38cc:	9c 93       	st	X, r25
    38ce:	fe 01       	movw	r30, r28
    38d0:	e9 5b       	subi	r30, 0xB9	; 185
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <incrementingMode+0x456>
    38dc:	fe 01       	movw	r30, r28
    38de:	e9 5b       	subi	r30, 0xB9	; 185
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	80 83       	st	Z, r24
	_delay_ms(300);
	LED_turnOn(&ledFour);
    38e6:	86 e8       	ldi	r24, 0x86	; 134
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    38ee:	fe 01       	movw	r30, r28
    38f0:	ed 5b       	subi	r30, 0xBD	; 189
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a6 e9       	ldi	r26, 0x96	; 150
    38fa:	b3 e4       	ldi	r27, 0x43	; 67
    38fc:	80 83       	st	Z, r24
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	a2 83       	std	Z+2, r26	; 0x02
    3902:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3904:	8e 01       	movw	r16, r28
    3906:	01 5c       	subi	r16, 0xC1	; 193
    3908:	1f 4f       	sbci	r17, 0xFF	; 255
    390a:	fe 01       	movw	r30, r28
    390c:	ed 5b       	subi	r30, 0xBD	; 189
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	60 81       	ld	r22, Z
    3912:	71 81       	ldd	r23, Z+1	; 0x01
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	93 81       	ldd	r25, Z+3	; 0x03
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	f8 01       	movw	r30, r16
    392a:	80 83       	st	Z, r24
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	a2 83       	std	Z+2, r26	; 0x02
    3930:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3932:	fe 01       	movw	r30, r28
    3934:	ff 96       	adiw	r30, 0x3f	; 63
    3936:	60 81       	ld	r22, Z
    3938:	71 81       	ldd	r23, Z+1	; 0x01
    393a:	82 81       	ldd	r24, Z+2	; 0x02
    393c:	93 81       	ldd	r25, Z+3	; 0x03
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	2c f4       	brge	.+10     	; 0x3958 <incrementingMode+0x4d6>
		__ticks = 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	9e af       	std	Y+62, r25	; 0x3e
    3954:	8d af       	std	Y+61, r24	; 0x3d
    3956:	46 c0       	rjmp	.+140    	; 0x39e4 <incrementingMode+0x562>
	else if (__tmp > 65535)
    3958:	fe 01       	movw	r30, r28
    395a:	ff 96       	adiw	r30, 0x3f	; 63
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	64 f5       	brge	.+88     	; 0x39cc <incrementingMode+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	fe 01       	movw	r30, r28
    3976:	ed 5b       	subi	r30, 0xBD	; 189
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	82 81       	ldd	r24, Z+2	; 0x02
    3980:	93 81       	ldd	r25, Z+3	; 0x03
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9e af       	std	Y+62, r25	; 0x3e
    39a0:	8d af       	std	Y+61, r24	; 0x3d
    39a2:	0f c0       	rjmp	.+30     	; 0x39c2 <incrementingMode+0x540>
    39a4:	88 ec       	ldi	r24, 0xC8	; 200
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	9c af       	std	Y+60, r25	; 0x3c
    39aa:	8b af       	std	Y+59, r24	; 0x3b
    39ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    39ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <incrementingMode+0x52e>
    39b4:	9c af       	std	Y+60, r25	; 0x3c
    39b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    39ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	9e af       	std	Y+62, r25	; 0x3e
    39c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    39c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	69 f7       	brne	.-38     	; 0x39a4 <incrementingMode+0x522>
    39ca:	16 c0       	rjmp	.+44     	; 0x39f8 <incrementingMode+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39cc:	fe 01       	movw	r30, r28
    39ce:	ff 96       	adiw	r30, 0x3f	; 63
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	9e af       	std	Y+62, r25	; 0x3e
    39e2:	8d af       	std	Y+61, r24	; 0x3d
    39e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    39e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    39e8:	9a af       	std	Y+58, r25	; 0x3a
    39ea:	89 af       	std	Y+57, r24	; 0x39
    39ec:	89 ad       	ldd	r24, Y+57	; 0x39
    39ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <incrementingMode+0x56e>
    39f4:	9a af       	std	Y+58, r25	; 0x3a
    39f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);
	LED_turnOn(&ledFive);
    39f8:	89 e8       	ldi	r24, 0x89	; 137
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	a6 e9       	ldi	r26, 0x96	; 150
    3a06:	b3 e4       	ldi	r27, 0x43	; 67
    3a08:	8d ab       	std	Y+53, r24	; 0x35
    3a0a:	9e ab       	std	Y+54, r25	; 0x36
    3a0c:	af ab       	std	Y+55, r26	; 0x37
    3a0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a10:	6d a9       	ldd	r22, Y+53	; 0x35
    3a12:	7e a9       	ldd	r23, Y+54	; 0x36
    3a14:	8f a9       	ldd	r24, Y+55	; 0x37
    3a16:	98 ad       	ldd	r25, Y+56	; 0x38
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	4a ef       	ldi	r20, 0xFA	; 250
    3a1e:	54 e4       	ldi	r21, 0x44	; 68
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	89 ab       	std	Y+49, r24	; 0x31
    3a2a:	9a ab       	std	Y+50, r25	; 0x32
    3a2c:	ab ab       	std	Y+51, r26	; 0x33
    3a2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a30:	69 a9       	ldd	r22, Y+49	; 0x31
    3a32:	7a a9       	ldd	r23, Y+50	; 0x32
    3a34:	8b a9       	ldd	r24, Y+51	; 0x33
    3a36:	9c a9       	ldd	r25, Y+52	; 0x34
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e8       	ldi	r20, 0x80	; 128
    3a3e:	5f e3       	ldi	r21, 0x3F	; 63
    3a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a44:	88 23       	and	r24, r24
    3a46:	2c f4       	brge	.+10     	; 0x3a52 <incrementingMode+0x5d0>
		__ticks = 1;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	98 ab       	std	Y+48, r25	; 0x30
    3a4e:	8f a7       	std	Y+47, r24	; 0x2f
    3a50:	3f c0       	rjmp	.+126    	; 0x3ad0 <incrementingMode+0x64e>
	else if (__tmp > 65535)
    3a52:	69 a9       	ldd	r22, Y+49	; 0x31
    3a54:	7a a9       	ldd	r23, Y+50	; 0x32
    3a56:	8b a9       	ldd	r24, Y+51	; 0x33
    3a58:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	3f ef       	ldi	r19, 0xFF	; 255
    3a5e:	4f e7       	ldi	r20, 0x7F	; 127
    3a60:	57 e4       	ldi	r21, 0x47	; 71
    3a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a66:	18 16       	cp	r1, r24
    3a68:	4c f5       	brge	.+82     	; 0x3abc <incrementingMode+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a70:	98 ad       	ldd	r25, Y+56	; 0x38
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	98 ab       	std	Y+48, r25	; 0x30
    3a90:	8f a7       	std	Y+47, r24	; 0x2f
    3a92:	0f c0       	rjmp	.+30     	; 0x3ab2 <incrementingMode+0x630>
    3a94:	88 ec       	ldi	r24, 0xC8	; 200
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9e a7       	std	Y+46, r25	; 0x2e
    3a9a:	8d a7       	std	Y+45, r24	; 0x2d
    3a9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <incrementingMode+0x61e>
    3aa4:	9e a7       	std	Y+46, r25	; 0x2e
    3aa6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	98 ab       	std	Y+48, r25	; 0x30
    3ab0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	69 f7       	brne	.-38     	; 0x3a94 <incrementingMode+0x612>
    3aba:	14 c0       	rjmp	.+40     	; 0x3ae4 <incrementingMode+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	69 a9       	ldd	r22, Y+49	; 0x31
    3abe:	7a a9       	ldd	r23, Y+50	; 0x32
    3ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	98 ab       	std	Y+48, r25	; 0x30
    3ace:	8f a7       	std	Y+47, r24	; 0x2f
    3ad0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ad2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ad4:	9c a7       	std	Y+44, r25	; 0x2c
    3ad6:	8b a7       	std	Y+43, r24	; 0x2b
    3ad8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ada:	9c a5       	ldd	r25, Y+44	; 0x2c
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <incrementingMode+0x65a>
    3ae0:	9c a7       	std	Y+44, r25	; 0x2c
    3ae2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	LED_turnOn(&ledSix);
    3ae4:	8c e8       	ldi	r24, 0x8C	; 140
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	a6 e9       	ldi	r26, 0x96	; 150
    3af2:	b3 e4       	ldi	r27, 0x43	; 67
    3af4:	8f a3       	std	Y+39, r24	; 0x27
    3af6:	98 a7       	std	Y+40, r25	; 0x28
    3af8:	a9 a7       	std	Y+41, r26	; 0x29
    3afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afc:	6f a1       	ldd	r22, Y+39	; 0x27
    3afe:	78 a5       	ldd	r23, Y+40	; 0x28
    3b00:	89 a5       	ldd	r24, Y+41	; 0x29
    3b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	4a ef       	ldi	r20, 0xFA	; 250
    3b0a:	54 e4       	ldi	r21, 0x44	; 68
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	8b a3       	std	Y+35, r24	; 0x23
    3b16:	9c a3       	std	Y+36, r25	; 0x24
    3b18:	ad a3       	std	Y+37, r26	; 0x25
    3b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b20:	8d a1       	ldd	r24, Y+37	; 0x25
    3b22:	9e a1       	ldd	r25, Y+38	; 0x26
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e8       	ldi	r20, 0x80	; 128
    3b2a:	5f e3       	ldi	r21, 0x3F	; 63
    3b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b30:	88 23       	and	r24, r24
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <incrementingMode+0x6bc>
		__ticks = 1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9a a3       	std	Y+34, r25	; 0x22
    3b3a:	89 a3       	std	Y+33, r24	; 0x21
    3b3c:	3f c0       	rjmp	.+126    	; 0x3bbc <incrementingMode+0x73a>
	else if (__tmp > 65535)
    3b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b40:	7c a1       	ldd	r23, Y+36	; 0x24
    3b42:	8d a1       	ldd	r24, Y+37	; 0x25
    3b44:	9e a1       	ldd	r25, Y+38	; 0x26
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	4c f5       	brge	.+82     	; 0x3ba8 <incrementingMode+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b56:	6f a1       	ldd	r22, Y+39	; 0x27
    3b58:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9a a3       	std	Y+34, r25	; 0x22
    3b7c:	89 a3       	std	Y+33, r24	; 0x21
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <incrementingMode+0x71c>
    3b80:	88 ec       	ldi	r24, 0xC8	; 200
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	98 a3       	std	Y+32, r25	; 0x20
    3b86:	8f 8f       	std	Y+31, r24	; 0x1f
    3b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <incrementingMode+0x70a>
    3b90:	98 a3       	std	Y+32, r25	; 0x20
    3b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b94:	89 a1       	ldd	r24, Y+33	; 0x21
    3b96:	9a a1       	ldd	r25, Y+34	; 0x22
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9a a3       	std	Y+34, r25	; 0x22
    3b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    3ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f7       	brne	.-38     	; 0x3b80 <incrementingMode+0x6fe>
    3ba6:	14 c0       	rjmp	.+40     	; 0x3bd0 <incrementingMode+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    3baa:	7c a1       	ldd	r23, Y+36	; 0x24
    3bac:	8d a1       	ldd	r24, Y+37	; 0x25
    3bae:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	9a a3       	std	Y+34, r25	; 0x22
    3bba:	89 a3       	std	Y+33, r24	; 0x21
    3bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    3bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    3bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <incrementingMode+0x746>
    3bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    3bce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	LED_turnOn(&ledSeven);
    3bd0:	8f e8       	ldi	r24, 0x8F	; 143
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	a6 e9       	ldi	r26, 0x96	; 150
    3bde:	b3 e4       	ldi	r27, 0x43	; 67
    3be0:	89 8f       	std	Y+25, r24	; 0x19
    3be2:	9a 8f       	std	Y+26, r25	; 0x1a
    3be4:	ab 8f       	std	Y+27, r26	; 0x1b
    3be6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be8:	69 8d       	ldd	r22, Y+25	; 0x19
    3bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	4a ef       	ldi	r20, 0xFA	; 250
    3bf6:	54 e4       	ldi	r21, 0x44	; 68
    3bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	8d 8b       	std	Y+21, r24	; 0x15
    3c02:	9e 8b       	std	Y+22, r25	; 0x16
    3c04:	af 8b       	std	Y+23, r26	; 0x17
    3c06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c08:	6d 89       	ldd	r22, Y+21	; 0x15
    3c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	2c f4       	brge	.+10     	; 0x3c2a <incrementingMode+0x7a8>
		__ticks = 1;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	9c 8b       	std	Y+20, r25	; 0x14
    3c26:	8b 8b       	std	Y+19, r24	; 0x13
    3c28:	3f c0       	rjmp	.+126    	; 0x3ca8 <incrementingMode+0x826>
	else if (__tmp > 65535)
    3c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c30:	98 8d       	ldd	r25, Y+24	; 0x18
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	3f ef       	ldi	r19, 0xFF	; 255
    3c36:	4f e7       	ldi	r20, 0x7F	; 127
    3c38:	57 e4       	ldi	r21, 0x47	; 71
    3c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c3e:	18 16       	cp	r1, r24
    3c40:	4c f5       	brge	.+82     	; 0x3c94 <incrementingMode+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c42:	69 8d       	ldd	r22, Y+25	; 0x19
    3c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	40 e2       	ldi	r20, 0x20	; 32
    3c50:	51 e4       	ldi	r21, 0x41	; 65
    3c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	cd 01       	movw	r24, r26
    3c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	9c 8b       	std	Y+20, r25	; 0x14
    3c68:	8b 8b       	std	Y+19, r24	; 0x13
    3c6a:	0f c0       	rjmp	.+30     	; 0x3c8a <incrementingMode+0x808>
    3c6c:	88 ec       	ldi	r24, 0xC8	; 200
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	9a 8b       	std	Y+18, r25	; 0x12
    3c72:	89 8b       	std	Y+17, r24	; 0x11
    3c74:	89 89       	ldd	r24, Y+17	; 0x11
    3c76:	9a 89       	ldd	r25, Y+18	; 0x12
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <incrementingMode+0x7f6>
    3c7c:	9a 8b       	std	Y+18, r25	; 0x12
    3c7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c80:	8b 89       	ldd	r24, Y+19	; 0x13
    3c82:	9c 89       	ldd	r25, Y+20	; 0x14
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	9c 8b       	std	Y+20, r25	; 0x14
    3c88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8e:	00 97       	sbiw	r24, 0x00	; 0
    3c90:	69 f7       	brne	.-38     	; 0x3c6c <incrementingMode+0x7ea>
    3c92:	14 c0       	rjmp	.+40     	; 0x3cbc <incrementingMode+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c94:	6d 89       	ldd	r22, Y+21	; 0x15
    3c96:	7e 89       	ldd	r23, Y+22	; 0x16
    3c98:	8f 89       	ldd	r24, Y+23	; 0x17
    3c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	9c 8b       	std	Y+20, r25	; 0x14
    3ca6:	8b 8b       	std	Y+19, r24	; 0x13
    3ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    3caa:	9c 89       	ldd	r25, Y+20	; 0x14
    3cac:	98 8b       	std	Y+16, r25	; 0x10
    3cae:	8f 87       	std	Y+15, r24	; 0x0f
    3cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb2:	98 89       	ldd	r25, Y+16	; 0x10
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	f1 f7       	brne	.-4      	; 0x3cb4 <incrementingMode+0x832>
    3cb8:	98 8b       	std	Y+16, r25	; 0x10
    3cba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LED_turnOn(&ledEight);
    3cbc:	82 e9       	ldi	r24, 0x92	; 146
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LED_turnOn>
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	a6 e9       	ldi	r26, 0x96	; 150
    3cca:	b3 e4       	ldi	r27, 0x43	; 67
    3ccc:	8b 87       	std	Y+11, r24	; 0x0b
    3cce:	9c 87       	std	Y+12, r25	; 0x0c
    3cd0:	ad 87       	std	Y+13, r26	; 0x0d
    3cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	4a ef       	ldi	r20, 0xFA	; 250
    3ce2:	54 e4       	ldi	r21, 0x44	; 68
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	8f 83       	std	Y+7, r24	; 0x07
    3cee:	98 87       	std	Y+8, r25	; 0x08
    3cf0:	a9 87       	std	Y+9, r26	; 0x09
    3cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cf6:	78 85       	ldd	r23, Y+8	; 0x08
    3cf8:	89 85       	ldd	r24, Y+9	; 0x09
    3cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	40 e8       	ldi	r20, 0x80	; 128
    3d02:	5f e3       	ldi	r21, 0x3F	; 63
    3d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d08:	88 23       	and	r24, r24
    3d0a:	2c f4       	brge	.+10     	; 0x3d16 <incrementingMode+0x894>
		__ticks = 1;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	8d 83       	std	Y+5, r24	; 0x05
    3d14:	3f c0       	rjmp	.+126    	; 0x3d94 <incrementingMode+0x912>
	else if (__tmp > 65535)
    3d16:	6f 81       	ldd	r22, Y+7	; 0x07
    3d18:	78 85       	ldd	r23, Y+8	; 0x08
    3d1a:	89 85       	ldd	r24, Y+9	; 0x09
    3d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	3f ef       	ldi	r19, 0xFF	; 255
    3d22:	4f e7       	ldi	r20, 0x7F	; 127
    3d24:	57 e4       	ldi	r21, 0x47	; 71
    3d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d2a:	18 16       	cp	r1, r24
    3d2c:	4c f5       	brge	.+82     	; 0x3d80 <incrementingMode+0x8fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	40 e2       	ldi	r20, 0x20	; 32
    3d3c:	51 e4       	ldi	r21, 0x41	; 65
    3d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	bc 01       	movw	r22, r24
    3d48:	cd 01       	movw	r24, r26
    3d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	9e 83       	std	Y+6, r25	; 0x06
    3d54:	8d 83       	std	Y+5, r24	; 0x05
    3d56:	0f c0       	rjmp	.+30     	; 0x3d76 <incrementingMode+0x8f4>
    3d58:	88 ec       	ldi	r24, 0xC8	; 200
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	9c 83       	std	Y+4, r25	; 0x04
    3d5e:	8b 83       	std	Y+3, r24	; 0x03
    3d60:	8b 81       	ldd	r24, Y+3	; 0x03
    3d62:	9c 81       	ldd	r25, Y+4	; 0x04
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <incrementingMode+0x8e2>
    3d68:	9c 83       	std	Y+4, r25	; 0x04
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	9e 83       	std	Y+6, r25	; 0x06
    3d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	69 f7       	brne	.-38     	; 0x3d58 <incrementingMode+0x8d6>
    3d7e:	14 c0       	rjmp	.+40     	; 0x3da8 <incrementingMode+0x926>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d80:	6f 81       	ldd	r22, Y+7	; 0x07
    3d82:	78 85       	ldd	r23, Y+8	; 0x08
    3d84:	89 85       	ldd	r24, Y+9	; 0x09
    3d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	9a 83       	std	Y+2, r25	; 0x02
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <incrementingMode+0x91e>
    3da4:	9a 83       	std	Y+2, r25	; 0x02
    3da6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LED_turnOff(&ledOne);
    3da8:	86 ea       	ldi	r24, 0xA6	; 166
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledTwo);
    3db0:	80 e8       	ldi	r24, 0x80	; 128
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledThree);
    3db8:	83 e8       	ldi	r24, 0x83	; 131
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFour);
    3dc0:	86 e8       	ldi	r24, 0x86	; 134
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledFive);
    3dc8:	89 e8       	ldi	r24, 0x89	; 137
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSix);
    3dd0:	8c e8       	ldi	r24, 0x8C	; 140
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledSeven);
    3dd8:	8f e8       	ldi	r24, 0x8F	; 143
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
	LED_turnOff(&ledEight);
    3de0:	82 e9       	ldi	r24, 0x92	; 146
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 15 09 	call	0x122a	; 0x122a <LED_turnOff>
}
    3de8:	c0 59       	subi	r28, 0x90	; 144
    3dea:	df 4f       	sbci	r29, 0xFF	; 255
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	1f 91       	pop	r17
    3dfc:	0f 91       	pop	r16
    3dfe:	08 95       	ret

00003e00 <convergingDivergingMode>:

void convergingDivergingMode(void)
{
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	2e 97       	sbiw	r28, 0x0e	; 14
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
	convergingMode();
    3e14:	0e 94 82 15 	call	0x2b04	; 0x2b04 <convergingMode>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	a6 e9       	ldi	r26, 0x96	; 150
    3e1e:	b3 e4       	ldi	r27, 0x43	; 67
    3e20:	8b 87       	std	Y+11, r24	; 0x0b
    3e22:	9c 87       	std	Y+12, r25	; 0x0c
    3e24:	ad 87       	std	Y+13, r26	; 0x0d
    3e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	4a ef       	ldi	r20, 0xFA	; 250
    3e36:	54 e4       	ldi	r21, 0x44	; 68
    3e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	8f 83       	std	Y+7, r24	; 0x07
    3e42:	98 87       	std	Y+8, r25	; 0x08
    3e44:	a9 87       	std	Y+9, r26	; 0x09
    3e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e48:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4a:	78 85       	ldd	r23, Y+8	; 0x08
    3e4c:	89 85       	ldd	r24, Y+9	; 0x09
    3e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	40 e8       	ldi	r20, 0x80	; 128
    3e56:	5f e3       	ldi	r21, 0x3F	; 63
    3e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e5c:	88 23       	and	r24, r24
    3e5e:	2c f4       	brge	.+10     	; 0x3e6a <convergingDivergingMode+0x6a>
		__ticks = 1;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	9e 83       	std	Y+6, r25	; 0x06
    3e66:	8d 83       	std	Y+5, r24	; 0x05
    3e68:	3f c0       	rjmp	.+126    	; 0x3ee8 <convergingDivergingMode+0xe8>
	else if (__tmp > 65535)
    3e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6c:	78 85       	ldd	r23, Y+8	; 0x08
    3e6e:	89 85       	ldd	r24, Y+9	; 0x09
    3e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	3f ef       	ldi	r19, 0xFF	; 255
    3e76:	4f e7       	ldi	r20, 0x7F	; 127
    3e78:	57 e4       	ldi	r21, 0x47	; 71
    3e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e7e:	18 16       	cp	r1, r24
    3e80:	4c f5       	brge	.+82     	; 0x3ed4 <convergingDivergingMode+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e2       	ldi	r20, 0x20	; 32
    3e90:	51 e4       	ldi	r21, 0x41	; 65
    3e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	cd 01       	movw	r24, r26
    3e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9e 83       	std	Y+6, r25	; 0x06
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	0f c0       	rjmp	.+30     	; 0x3eca <convergingDivergingMode+0xca>
    3eac:	88 ec       	ldi	r24, 0xC8	; 200
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	9c 83       	std	Y+4, r25	; 0x04
    3eb2:	8b 83       	std	Y+3, r24	; 0x03
    3eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	f1 f7       	brne	.-4      	; 0x3eb8 <convergingDivergingMode+0xb8>
    3ebc:	9c 83       	std	Y+4, r25	; 0x04
    3ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	9e 83       	std	Y+6, r25	; 0x06
    3ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ece:	00 97       	sbiw	r24, 0x00	; 0
    3ed0:	69 f7       	brne	.-38     	; 0x3eac <convergingDivergingMode+0xac>
    3ed2:	14 c0       	rjmp	.+40     	; 0x3efc <convergingDivergingMode+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed6:	78 85       	ldd	r23, Y+8	; 0x08
    3ed8:	89 85       	ldd	r24, Y+9	; 0x09
    3eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	9e 83       	std	Y+6, r25	; 0x06
    3ee6:	8d 83       	std	Y+5, r24	; 0x05
    3ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eea:	9e 81       	ldd	r25, Y+6	; 0x06
    3eec:	9a 83       	std	Y+2, r25	; 0x02
    3eee:	89 83       	std	Y+1, r24	; 0x01
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <convergingDivergingMode+0xf4>
    3ef8:	9a 83       	std	Y+2, r25	; 0x02
    3efa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	divergingMode();
    3efc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <divergingMode>
}
    3f00:	2e 96       	adiw	r28, 0x0e	; 14
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
	appInit();
    3f1a:	0e 94 15 0a 	call	0x142a	; 0x142a <appInit>
	while(1)
	{
		appMain();
    3f1e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <appMain>
    3f22:	fd cf       	rjmp	.-6      	; 0x3f1e <main+0xc>

00003f24 <__prologue_saves__>:
    3f24:	2f 92       	push	r2
    3f26:	3f 92       	push	r3
    3f28:	4f 92       	push	r4
    3f2a:	5f 92       	push	r5
    3f2c:	6f 92       	push	r6
    3f2e:	7f 92       	push	r7
    3f30:	8f 92       	push	r8
    3f32:	9f 92       	push	r9
    3f34:	af 92       	push	r10
    3f36:	bf 92       	push	r11
    3f38:	cf 92       	push	r12
    3f3a:	df 92       	push	r13
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    3f4c:	ca 1b       	sub	r28, r26
    3f4e:	db 0b       	sbc	r29, r27
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	09 94       	ijmp

00003f5c <__epilogue_restores__>:
    3f5c:	2a 88       	ldd	r2, Y+18	; 0x12
    3f5e:	39 88       	ldd	r3, Y+17	; 0x11
    3f60:	48 88       	ldd	r4, Y+16	; 0x10
    3f62:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f64:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f66:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f68:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f6e:	b9 84       	ldd	r11, Y+9	; 0x09
    3f70:	c8 84       	ldd	r12, Y+8	; 0x08
    3f72:	df 80       	ldd	r13, Y+7	; 0x07
    3f74:	ee 80       	ldd	r14, Y+6	; 0x06
    3f76:	fd 80       	ldd	r15, Y+5	; 0x05
    3f78:	0c 81       	ldd	r16, Y+4	; 0x04
    3f7a:	1b 81       	ldd	r17, Y+3	; 0x03
    3f7c:	aa 81       	ldd	r26, Y+2	; 0x02
    3f7e:	b9 81       	ldd	r27, Y+1	; 0x01
    3f80:	ce 0f       	add	r28, r30
    3f82:	d1 1d       	adc	r29, r1
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	ed 01       	movw	r28, r26
    3f90:	08 95       	ret

00003f92 <_exit>:
    3f92:	f8 94       	cli

00003f94 <__stop_program>:
    3f94:	ff cf       	rjmp	.-2      	; 0x3f94 <__stop_program>
