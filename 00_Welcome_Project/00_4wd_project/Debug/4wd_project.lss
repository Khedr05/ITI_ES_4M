
4wd_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003b2  00800060  00002eec  00002f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800412  00800412  00003332  2**0
                  ALLOC
  3 .stab         000056c4  00000000  00000000  00003334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000061a2  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  000115f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00012ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00013f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001425e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <main>
      8a:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ed       	ldi	r22, 0xD0	; 208
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 52       	subi	r30, 0x28	; 40
     b2a:	fd 4f       	sbci	r31, 0xFD	; 253
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <mobileControllerModeInterface>:
#include "mobileControllerInterface.h"

ENU_systemModeStates carState = CAR_IN_SCANNING_STATE;

void mobileControllerModeInterface(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <mobileControllerModeInterface+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	Uint8_t exitFlag = 0;
     e9a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		if(exitFlag == 1)break;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <mobileControllerModeInterface+0x16>
     ea2:	8c c0       	rjmp	.+280    	; 0xfbc <mobileControllerModeInterface+0x12e>
		switch(carState)
     ea4:	80 91 12 04 	lds	r24, 0x0412
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3b 83       	std	Y+3, r19	; 0x03
     eae:	2a 83       	std	Y+2, r18	; 0x02
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <mobileControllerModeInterface+0x2e>
     eba:	65 c0       	rjmp	.+202    	; 0xf86 <mobileControllerModeInterface+0xf8>
     ebc:	2a 81       	ldd	r18, Y+2	; 0x02
     ebe:	3b 81       	ldd	r19, Y+3	; 0x03
     ec0:	24 30       	cpi	r18, 0x04	; 4
     ec2:	31 05       	cpc	r19, r1
     ec4:	8c f4       	brge	.+34     	; 0xee8 <mobileControllerModeInterface+0x5a>
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <mobileControllerModeInterface+0x44>
     ed0:	50 c0       	rjmp	.+160    	; 0xf72 <mobileControllerModeInterface+0xe4>
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	0c f0       	brlt	.+2      	; 0xede <mobileControllerModeInterface+0x50>
     edc:	4f c0       	rjmp	.+158    	; 0xf7c <mobileControllerModeInterface+0xee>
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	a1 f0       	breq	.+40     	; 0xf0e <mobileControllerModeInterface+0x80>
     ee6:	63 c0       	rjmp	.+198    	; 0xfae <mobileControllerModeInterface+0x120>
     ee8:	2a 81       	ldd	r18, Y+2	; 0x02
     eea:	3b 81       	ldd	r19, Y+3	; 0x03
     eec:	25 30       	cpi	r18, 0x05	; 5
     eee:	31 05       	cpc	r19, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <mobileControllerModeInterface+0x66>
     ef2:	53 c0       	rjmp	.+166    	; 0xf9a <mobileControllerModeInterface+0x10c>
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	91 05       	cpc	r25, r1
     efc:	0c f4       	brge	.+2      	; 0xf00 <mobileControllerModeInterface+0x72>
     efe:	48 c0       	rjmp	.+144    	; 0xf90 <mobileControllerModeInterface+0x102>
     f00:	2a 81       	ldd	r18, Y+2	; 0x02
     f02:	3b 81       	ldd	r19, Y+3	; 0x03
     f04:	26 30       	cpi	r18, 0x06	; 6
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <mobileControllerModeInterface+0x7e>
     f0a:	4c c0       	rjmp	.+152    	; 0xfa4 <mobileControllerModeInterface+0x116>
     f0c:	50 c0       	rjmp	.+160    	; 0xfae <mobileControllerModeInterface+0x120>
		{
			case CAR_IN_SCANNING_STATE :
			{
				BLUETOOTH_send((Uint8_t *)"\r\n");
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"Now You Are In Mobile Control Mode\r\n");
     f16:	83 e6       	ldi	r24, 0x63	; 99
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"1 - To Move Forward\r\n");
     f1e:	88 e8       	ldi	r24, 0x88	; 136
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"2 - To Move Backward\r\n");
     f26:	8e e9       	ldi	r24, 0x9E	; 158
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"3 - Rotate Left\r\n");
     f2e:	85 eb       	ldi	r24, 0xB5	; 181
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"4 - Rotate Right\r\n");
     f36:	87 ec       	ldi	r24, 0xC7	; 199
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"5 - Stop\r\n");
     f3e:	8a ed       	ldi	r24, 0xDA	; 218
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"6 - Exit Mode\r\n");
     f46:	85 ee       	ldi	r24, 0xE5	; 229
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				BLUETOOTH_send((Uint8_t *)"\r\n");
     f4e:	80 e6       	ldi	r24, 0x60	; 96
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				carState = BLUETOOTH_ReceiveData();
     f56:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <BLUETOOTH_ReceiveData>
     f5a:	80 93 12 04 	sts	0x0412, r24
				BLUETOOTH_vSendData(carState);
     f5e:	80 91 12 04 	lds	r24, 0x0412
     f62:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <BLUETOOTH_vSendData>
				carState -= '0';			
     f66:	80 91 12 04 	lds	r24, 0x0412
     f6a:	80 53       	subi	r24, 0x30	; 48
     f6c:	80 93 12 04 	sts	0x0412, r24
     f70:	95 cf       	rjmp	.-214    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case CAR_IN_MOVING_FORWARD_STATE :
			{
				carGoToForward();
     f72:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <carGoToForward>
				carState = CAR_IN_SCANNING_STATE;
     f76:	10 92 12 04 	sts	0x0412, r1
     f7a:	90 cf       	rjmp	.-224    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case CAR_IN_MOVING_BACKWARD_STATE :
			{
				carGoToReverse();
     f7c:	0e 94 0f 08 	call	0x101e	; 0x101e <carGoToReverse>
				carState = CAR_IN_SCANNING_STATE;
     f80:	10 92 12 04 	sts	0x0412, r1
     f84:	8b cf       	rjmp	.-234    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case CAR_IN_MOVING_ROTATE_LEFT_STATE :
			{
				carGoToRotateLeft();
     f86:	0e 94 3a 08 	call	0x1074	; 0x1074 <carGoToRotateLeft>
				carState = CAR_IN_SCANNING_STATE;
     f8a:	10 92 12 04 	sts	0x0412, r1
     f8e:	86 cf       	rjmp	.-244    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case CAR_IN_MOVING_ROTATE_RIGHT_STATE :
			{
				carGoToRotateRight();
     f90:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <carGoToRotateRight>
				carState = CAR_IN_SCANNING_STATE;
     f94:	10 92 12 04 	sts	0x0412, r1
     f98:	81 cf       	rjmp	.-254    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case CAR_IN_MOVING_STOP_STATE :
			{
				carGoToStop();
     f9a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <carGoToStop>
				carState = CAR_IN_SCANNING_STATE;
     f9e:	10 92 12 04 	sts	0x0412, r1
     fa2:	7c cf       	rjmp	.-264    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			case EXIT :
			{
				exitFlag = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
				carState = CAR_IN_SCANNING_STATE;
     fa8:	10 92 12 04 	sts	0x0412, r1
     fac:	77 cf       	rjmp	.-274    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
			default :
			{
				BLUETOOTH_send((Uint8_t *)"Invalid Choice Please Try Again\r\n");
     fae:	85 ef       	ldi	r24, 0xF5	; 245
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				carState = CAR_IN_SCANNING_STATE;
     fb6:	10 92 12 04 	sts	0x0412, r1
     fba:	70 cf       	rjmp	.-288    	; 0xe9c <mobileControllerModeInterface+0xe>
				break;
			}
		}
	}
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <carGoToForward>:

void carGoToForward(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
     fd0:	84 ef       	ldi	r24, 0xF4	; 244
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
     fda:	8a ef       	ldi	r24, 0xFA	; 250
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	94 e0       	ldi	r25, 0x04	; 4
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	94 e0       	ldi	r25, 0x04	; 4
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOn(&dcmCfgArr[0]);
     ff8:	84 ef       	ldi	r24, 0xF4	; 244
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[1]);
    1000:	8a ef       	ldi	r24, 0xFA	; 250
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[2]);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	94 e0       	ldi	r25, 0x04	; 4
    100c:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[3]);
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <carGoToReverse>:
void carGoToReverse(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_BACKWORD);
    1026:	84 ef       	ldi	r24, 0xF4	; 244
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_BACKWORD);
    1030:	8a ef       	ldi	r24, 0xFA	; 250
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_BACKWORD);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	94 e0       	ldi	r25, 0x04	; 4
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_BACKWORD);	
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOn(&dcmCfgArr[0]);
    104e:	84 ef       	ldi	r24, 0xF4	; 244
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[1]);
    1056:	8a ef       	ldi	r24, 0xFA	; 250
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[2]);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[3]);
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <carGoToRotateLeft>:
void carGoToRotateLeft(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	94 e0       	ldi	r25, 0x04	; 4
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    1086:	86 e0       	ldi	r24, 0x06	; 6
    1088:	94 e0       	ldi	r25, 0x04	; 4
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOff(&dcmCfgArr[0]);
    1090:	84 ef       	ldi	r24, 0xF4	; 244
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[1]);
    1098:	8a ef       	ldi	r24, 0xFA	; 250
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOn(&dcmCfgArr[2]);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	94 e0       	ldi	r25, 0x04	; 4
    10a4:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[3]);
    10a8:	86 e0       	ldi	r24, 0x06	; 6
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <carGoToRotateRight>:
void carGoToRotateRight(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    10be:	84 ef       	ldi	r24, 0xF4	; 244
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    10c8:	8a ef       	ldi	r24, 0xFA	; 250
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOff(&dcmCfgArr[2]);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	94 e0       	ldi	r25, 0x04	; 4
    10d6:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[3]);
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOn(&dcmCfgArr[0]);
    10e2:	84 ef       	ldi	r24, 0xF4	; 244
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[1]);
    10ea:	8a ef       	ldi	r24, 0xFA	; 250
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <carGoToStop>:
void carGoToStop(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	DCM_turnOff(&dcmCfgArr[0]);
    1100:	84 ef       	ldi	r24, 0xF4	; 244
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[1]);
    1108:	8a ef       	ldi	r24, 0xFA	; 250
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[2]);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	94 e0       	ldi	r25, 0x04	; 4
    1114:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[3]);
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <lineFollowerInterface>:


#include "lineFollower_interface.h"

void lineFollowerInterface(void)
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <lineFollowerInterface+0x6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <lineFollowerInterface+0x8>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <lineFollowerInterface+0xa>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	
	ENU_lineFollowerState_t robotState = LINE_FOLLOWER_IR_SCANNING;
    1134:	1a 82       	std	Y+2, r1	; 0x02
	ENU_IR_SENSOR_surfaceState_t leftSensorRead = IR_SENSOR_ON_WHITE;
    1136:	1b 82       	std	Y+3, r1	; 0x03
	ENU_IR_SENSOR_surfaceState_t rightSensorRead = IR_SENSOR_ON_WHITE;
    1138:	1c 82       	std	Y+4, r1	; 0x04
	Uint8_t exitFlag = 0;
    113a:	19 82       	std	Y+1, r1	; 0x01
	
	BLUETOOTH_send((Uint8_t *)"Line Follower Start\r\n");
    113c:	87 e1       	ldi	r24, 0x17	; 23
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
	while(1)
	{
		if(exitFlag == 1) break;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	09 f4       	brne	.+2      	; 0x114c <lineFollowerInterface+0x26>
    114a:	84 c0       	rjmp	.+264    	; 0x1254 <lineFollowerInterface+0x12e>
		switch(robotState)
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	2d 83       	std	Y+5, r18	; 0x05
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <lineFollowerInterface+0x3c>
    1160:	6d c0       	rjmp	.+218    	; 0x123c <lineFollowerInterface+0x116>
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	24 30       	cpi	r18, 0x04	; 4
    1168:	31 05       	cpc	r19, r1
    116a:	84 f4       	brge	.+32     	; 0x118c <lineFollowerInterface+0x66>
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	89 f1       	breq	.+98     	; 0x11d8 <lineFollowerInterface+0xb2>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	0c f0       	brlt	.+2      	; 0x1182 <lineFollowerInterface+0x5c>
    1180:	51 c0       	rjmp	.+162    	; 0x1224 <lineFollowerInterface+0xfe>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	a1 f0       	breq	.+40     	; 0x11b2 <lineFollowerInterface+0x8c>
    118a:	dc cf       	rjmp	.-72     	; 0x1144 <lineFollowerInterface+0x1e>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	25 30       	cpi	r18, 0x05	; 5
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <lineFollowerInterface+0x72>
    1196:	4a c0       	rjmp	.+148    	; 0x122c <lineFollowerInterface+0x106>
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	85 30       	cpi	r24, 0x05	; 5
    119e:	91 05       	cpc	r25, r1
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <lineFollowerInterface+0x7e>
    11a2:	48 c0       	rjmp	.+144    	; 0x1234 <lineFollowerInterface+0x10e>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	26 30       	cpi	r18, 0x06	; 6
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <lineFollowerInterface+0x8a>
    11ae:	4b c0       	rjmp	.+150    	; 0x1246 <lineFollowerInterface+0x120>
    11b0:	c9 cf       	rjmp	.-110    	; 0x1144 <lineFollowerInterface+0x1e>
		{
			case LINE_FOLLOWER_IR_SCANNING:
			{
				IR_SENSOR_readData(&arr_irCfg[0] , &rightSensorRead);
    11b2:	80 ef       	ldi	r24, 0xF0	; 240
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	9e 01       	movw	r18, r28
    11b8:	2c 5f       	subi	r18, 0xFC	; 252
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	b9 01       	movw	r22, r18
    11be:	0e 94 95 12 	call	0x252a	; 0x252a <IR_SENSOR_readData>
				IR_SENSOR_readData(&arr_irCfg[1] , &leftSensorRead);
    11c2:	82 ef       	ldi	r24, 0xF2	; 242
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	9e 01       	movw	r18, r28
    11c8:	2d 5f       	subi	r18, 0xFD	; 253
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	b9 01       	movw	r22, r18
    11ce:	0e 94 95 12 	call	0x252a	; 0x252a <IR_SENSOR_readData>
				robotState = LINE_FOLLOWER_TAKE_DECISION;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	b6 cf       	rjmp	.-148    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
			case LINE_FOLLOWER_TAKE_DECISION :
			{
				if(rightSensorRead == IR_SENSOR_ON_WHITE && leftSensorRead == IR_SENSOR_ON_WHITE)
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	88 23       	and	r24, r24
    11dc:	31 f4       	brne	.+12     	; 0x11ea <lineFollowerInterface+0xc4>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 23       	and	r24, r24
    11e2:	19 f4       	brne	.+6      	; 0x11ea <lineFollowerInterface+0xc4>
				{
					robotState = LINE_FOLLOWER_MOVE;
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	ad cf       	rjmp	.-166    	; 0x1144 <lineFollowerInterface+0x1e>
				}
				else if(rightSensorRead == IR_SENSOR_ON_BLACK && leftSensorRead == IR_SENSOR_ON_WHITE)
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	31 f4       	brne	.+12     	; 0x11fc <lineFollowerInterface+0xd6>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 23       	and	r24, r24
    11f4:	19 f4       	brne	.+6      	; 0x11fc <lineFollowerInterface+0xd6>
				{
					robotState = LINE_FOLLOWER_RIGHT;
    11f6:	84 e0       	ldi	r24, 0x04	; 4
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	a4 cf       	rjmp	.-184    	; 0x1144 <lineFollowerInterface+0x1e>
				}
				else if(rightSensorRead == IR_SENSOR_ON_WHITE && leftSensorRead == IR_SENSOR_ON_BLACK)
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	88 23       	and	r24, r24
    1200:	31 f4       	brne	.+12     	; 0x120e <lineFollowerInterface+0xe8>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	19 f4       	brne	.+6      	; 0x120e <lineFollowerInterface+0xe8>
				{
					robotState = LINE_FOLLOWER_LEFT;
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	9b cf       	rjmp	.-202    	; 0x1144 <lineFollowerInterface+0x1e>
				}
				else if(rightSensorRead == IR_SENSOR_ON_BLACK && leftSensorRead == IR_SENSOR_ON_BLACK)
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	09 f0       	breq	.+2      	; 0x1216 <lineFollowerInterface+0xf0>
    1214:	97 cf       	rjmp	.-210    	; 0x1144 <lineFollowerInterface+0x1e>
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	09 f0       	breq	.+2      	; 0x121e <lineFollowerInterface+0xf8>
    121c:	93 cf       	rjmp	.-218    	; 0x1144 <lineFollowerInterface+0x1e>
				{
					robotState = LINE_FOLLOWER_STOP;
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	90 cf       	rjmp	.-224    	; 0x1144 <lineFollowerInterface+0x1e>
				}
				break;
			}
			case LINE_FOLLOWER_MOVE :
			{
				lineFollowerCarGoToForward();
    1224:	0e 94 33 09 	call	0x1266	; 0x1266 <lineFollowerCarGoToForward>
				robotState = LINE_FOLLOWER_IR_SCANNING;
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	8c cf       	rjmp	.-232    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
			case LINE_FOLLOWER_LEFT :
			{
				lineFollowerCarGoToRotateLeft();
    122c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <lineFollowerCarGoToRotateLeft>
				robotState = LINE_FOLLOWER_IR_SCANNING;
    1230:	1a 82       	std	Y+2, r1	; 0x02
    1232:	88 cf       	rjmp	.-240    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
			case LINE_FOLLOWER_RIGHT :
			{
				lineFollowerCarGoToRotateRight();
    1234:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lineFollowerCarGoToRotateRight>
				robotState = LINE_FOLLOWER_IR_SCANNING;
    1238:	1a 82       	std	Y+2, r1	; 0x02
    123a:	84 cf       	rjmp	.-248    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
			case LINE_FOLLOWER_STOP :
			{
				lineFollowerCarGoToStop();
    123c:	0e 94 a0 09 	call	0x1340	; 0x1340 <lineFollowerCarGoToStop>
				robotState = LINE_FOLLOWER_EXIT;
    1240:	86 e0       	ldi	r24, 0x06	; 6
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	7f cf       	rjmp	.-258    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
			case LINE_FOLLOWER_EXIT :
			{
				BLUETOOTH_send((Uint8_t *)"Line Follower Reach The End Of The Line\r\n");
    1246:	8d e2       	ldi	r24, 0x2D	; 45
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				exitFlag = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	78 cf       	rjmp	.-272    	; 0x1144 <lineFollowerInterface+0x1e>
				break;
			}
		}
	}
}
    1254:	26 96       	adiw	r28, 0x06	; 6
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <lineFollowerCarGoToForward>:


void lineFollowerCarGoToForward(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    126e:	84 ef       	ldi	r24, 0xF4	; 244
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    1278:	8a ef       	ldi	r24, 0xFA	; 250
    127a:	93 e0       	ldi	r25, 0x03	; 3
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	94 e0       	ldi	r25, 0x04	; 4
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    128c:	86 e0       	ldi	r24, 0x06	; 6
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOn(&dcmCfgArr[0]);
    1296:	84 ef       	ldi	r24, 0xF4	; 244
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[1]);
    129e:	8a ef       	ldi	r24, 0xFA	; 250
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[2]);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[3]);
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <lineFollowerCarGoToRotateLeft>:
void lineFollowerCarGoToRotateLeft(void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    12ce:	86 e0       	ldi	r24, 0x06	; 6
    12d0:	94 e0       	ldi	r25, 0x04	; 4
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOff(&dcmCfgArr[0]);
    12d8:	84 ef       	ldi	r24, 0xF4	; 244
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[1]);
    12e0:	8a ef       	ldi	r24, 0xFA	; 250
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOn(&dcmCfgArr[2]);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	94 e0       	ldi	r25, 0x04	; 4
    12ec:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[3]);
    12f0:	86 e0       	ldi	r24, 0x06	; 6
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <lineFollowerCarGoToRotateRight>:
void lineFollowerCarGoToRotateRight(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    1306:	84 ef       	ldi	r24, 0xF4	; 244
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    1310:	8a ef       	ldi	r24, 0xFA	; 250
    1312:	93 e0       	ldi	r25, 0x03	; 3
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	DCM_turnOff(&dcmCfgArr[2]);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[3]);
    1322:	86 e0       	ldi	r24, 0x06	; 6
    1324:	94 e0       	ldi	r25, 0x04	; 4
    1326:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOn(&dcmCfgArr[0]);
    132a:	84 ef       	ldi	r24, 0xF4	; 244
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
	DCM_turnOn(&dcmCfgArr[1]);
    1332:	8a ef       	ldi	r24, 0xFA	; 250
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <lineFollowerCarGoToStop>:
void lineFollowerCarGoToStop(void)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
	DCM_turnOff(&dcmCfgArr[0]);
    1348:	84 ef       	ldi	r24, 0xF4	; 244
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[1]);
    1350:	8a ef       	ldi	r24, 0xFA	; 250
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[2]);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	94 e0       	ldi	r25, 0x04	; 4
    135c:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
	DCM_turnOff(&dcmCfgArr[3]);
    1360:	86 e0       	ldi	r24, 0x06	; 6
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <AVOID_OBSTACLES_INTERFACE>:

#include "avoid_obstacles_interface.h"


ENU_avoidSystemState_t AVOID_OBSTACLES_INTERFACE(void)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	e5 97       	sbiw	r28, 0x35	; 53
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
	ENU_avoidCarState_t AVOID_carState = AVOID_CAR_SET_DEFAULT_ROTATION;
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	8f a7       	std	Y+47, r24	; 0x2f
	float64_t objectDistance = 0.0;
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	88 ab       	std	Y+48, r24	; 0x30
    1390:	99 ab       	std	Y+49, r25	; 0x31
    1392:	aa ab       	std	Y+50, r26	; 0x32
    1394:	bb ab       	std	Y+51, r27	; 0x33
	ENU_avoidCarDefaultRotation_t carDefaultRotation = AVOID_CAR_ROTATION_RIGHT;
    1396:	1e a6       	std	Y+46, r1	; 0x2e
	Uint8_t rotationDirectionErrorFlag = 0;
    1398:	1d a6       	std	Y+45, r1	; 0x2d
	uint8_t obstcalesInAllDirection = 0;
    139a:	1c a6       	std	Y+44, r1	; 0x2c
	Uint8_t exitFlag = 0;
    139c:	1b a6       	std	Y+43, r1	; 0x2b
	while(1)
	{	
		if(exitFlag == 1) break;
    139e:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <AVOID_OBSTACLES_INTERFACE+0x38>
    13a4:	92 c2       	rjmp	.+1316   	; 0x18ca <AVOID_OBSTACLES_INTERFACE+0x55c>
		switch(AVOID_carState)
    13a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d ab       	std	Y+53, r19	; 0x35
    13ae:	2c ab       	std	Y+52, r18	; 0x34
    13b0:	8c a9       	ldd	r24, Y+52	; 0x34
    13b2:	9d a9       	ldd	r25, Y+53	; 0x35
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <AVOID_OBSTACLES_INTERFACE+0x4e>
    13ba:	1c c1       	rjmp	.+568    	; 0x15f4 <AVOID_OBSTACLES_INTERFACE+0x286>
    13bc:	2c a9       	ldd	r18, Y+52	; 0x34
    13be:	3d a9       	ldd	r19, Y+53	; 0x35
    13c0:	23 30       	cpi	r18, 0x03	; 3
    13c2:	31 05       	cpc	r19, r1
    13c4:	64 f4       	brge	.+24     	; 0x13de <AVOID_OBSTACLES_INTERFACE+0x70>
    13c6:	8c a9       	ldd	r24, Y+52	; 0x34
    13c8:	9d a9       	ldd	r25, Y+53	; 0x35
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <AVOID_OBSTACLES_INTERFACE+0x62>
    13ce:	76 c0       	rjmp	.+236    	; 0x14bc <AVOID_OBSTACLES_INTERFACE+0x14e>
    13d0:	2c a9       	ldd	r18, Y+52	; 0x34
    13d2:	3d a9       	ldd	r19, Y+53	; 0x35
    13d4:	21 30       	cpi	r18, 0x01	; 1
    13d6:	31 05       	cpc	r19, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <AVOID_OBSTACLES_INTERFACE+0x6e>
    13da:	e9 c0       	rjmp	.+466    	; 0x15ae <AVOID_OBSTACLES_INTERFACE+0x240>
    13dc:	e0 cf       	rjmp	.-64     	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
    13de:	8c a9       	ldd	r24, Y+52	; 0x34
    13e0:	9d a9       	ldd	r25, Y+53	; 0x35
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	91 05       	cpc	r25, r1
    13e6:	69 f0       	breq	.+26     	; 0x1402 <AVOID_OBSTACLES_INTERFACE+0x94>
    13e8:	2c a9       	ldd	r18, Y+52	; 0x34
    13ea:	3d a9       	ldd	r19, Y+53	; 0x35
    13ec:	24 30       	cpi	r18, 0x04	; 4
    13ee:	31 05       	cpc	r19, r1
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <AVOID_OBSTACLES_INTERFACE+0x86>
    13f2:	26 c1       	rjmp	.+588    	; 0x1640 <AVOID_OBSTACLES_INTERFACE+0x2d2>
    13f4:	8c a9       	ldd	r24, Y+52	; 0x34
    13f6:	9d a9       	ldd	r25, Y+53	; 0x35
    13f8:	85 30       	cpi	r24, 0x05	; 5
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <AVOID_OBSTACLES_INTERFACE+0x92>
    13fe:	4e c2       	rjmp	.+1180   	; 0x189c <AVOID_OBSTACLES_INTERFACE+0x52e>
    1400:	ce cf       	rjmp	.-100    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
		{
			case AVOID_CAR_SET_DEFAULT_ROTATION :
			{
				if(rotationDirectionErrorFlag == 0)
    1402:	8d a5       	ldd	r24, Y+45	; 0x2d
    1404:	88 23       	and	r24, r24
    1406:	59 f5       	brne	.+86     	; 0x145e <AVOID_OBSTACLES_INTERFACE+0xf0>
				{
					BLUETOOTH_send((Uint8_t *)"Now You Are In The Avoid Obstacles Mode\r\n");
    1408:	87 e5       	ldi	r24, 0x57	; 87
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"Please Choose Car Default Direction In Rotation\r\n");
    1410:	81 e8       	ldi	r24, 0x81	; 129
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"0 - Right\r\n");
    1418:	83 eb       	ldi	r24, 0xB3	; 179
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"1 - Left\r\n");
    1420:	8f eb       	ldi	r24, 0xBF	; 191
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"\r\n");
    1428:	8a ec       	ldi	r24, 0xCA	; 202
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					carDefaultRotation = BLUETOOTH_ReceiveData();
    1430:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <BLUETOOTH_ReceiveData>
    1434:	8e a7       	std	Y+46, r24	; 0x2e
					carDefaultRotation -= '0';
    1436:	8e a5       	ldd	r24, Y+46	; 0x2e
    1438:	80 53       	subi	r24, 0x30	; 48
    143a:	8e a7       	std	Y+46, r24	; 0x2e
					BLUETOOTH_vSendData(carDefaultRotation);
    143c:	8e a5       	ldd	r24, Y+46	; 0x2e
    143e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <BLUETOOTH_vSendData>
					
					if((carDefaultRotation == AVOID_CAR_ROTATION_RIGHT) || (carDefaultRotation == AVOID_CAR_ROTATION_LEFT))
    1442:	8e a5       	ldd	r24, Y+46	; 0x2e
    1444:	88 23       	and	r24, r24
    1446:	19 f0       	breq	.+6      	; 0x144e <AVOID_OBSTACLES_INTERFACE+0xe0>
    1448:	8e a5       	ldd	r24, Y+46	; 0x2e
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	19 f4       	brne	.+6      	; 0x1454 <AVOID_OBSTACLES_INTERFACE+0xe6>
					{
						rotationDirectionErrorFlag = 0;
    144e:	1d a6       	std	Y+45, r1	; 0x2d
						AVOID_carState = AVOID_CAR_STATE_SCANNING_OBJECT;
    1450:	1f a6       	std	Y+47, r1	; 0x2f
    1452:	a5 cf       	rjmp	.-182    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
					}
					else
					{
						rotationDirectionErrorFlag = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	8d a7       	std	Y+45, r24	; 0x2d
						AVOID_carState = AVOID_CAR_SET_DEFAULT_ROTATION;
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	8f a7       	std	Y+47, r24	; 0x2f
    145c:	a0 cf       	rjmp	.-192    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
					}
				}
				else if(rotationDirectionErrorFlag == 1)
    145e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	09 f0       	breq	.+2      	; 0x1466 <AVOID_OBSTACLES_INTERFACE+0xf8>
    1464:	9c cf       	rjmp	.-200    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				{
					BLUETOOTH_send((Uint8_t *)"Invalid Choice Please Try Again\r\n");
    1466:	8d ec       	ldi	r24, 0xCD	; 205
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"Please Choose Car Default Direction In Rotation\r\n");
    146e:	81 e8       	ldi	r24, 0x81	; 129
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"0 - Right\r\n");
    1476:	83 eb       	ldi	r24, 0xB3	; 179
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"1 - Left\r\n");
    147e:	8f eb       	ldi	r24, 0xBF	; 191
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					BLUETOOTH_send((Uint8_t *)"\r\n");
    1486:	8a ec       	ldi	r24, 0xCA	; 202
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
					carDefaultRotation = BLUETOOTH_ReceiveData();
    148e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <BLUETOOTH_ReceiveData>
    1492:	8e a7       	std	Y+46, r24	; 0x2e
					carDefaultRotation -= '0';
    1494:	8e a5       	ldd	r24, Y+46	; 0x2e
    1496:	80 53       	subi	r24, 0x30	; 48
    1498:	8e a7       	std	Y+46, r24	; 0x2e
					BLUETOOTH_vSendData(carDefaultRotation);		
    149a:	8e a5       	ldd	r24, Y+46	; 0x2e
    149c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <BLUETOOTH_vSendData>
					if((carDefaultRotation == AVOID_CAR_ROTATION_RIGHT) || (carDefaultRotation == AVOID_CAR_ROTATION_LEFT))
    14a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <AVOID_OBSTACLES_INTERFACE+0x13e>
    14a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <AVOID_OBSTACLES_INTERFACE+0x144>
					{
						rotationDirectionErrorFlag = 0;
    14ac:	1d a6       	std	Y+45, r1	; 0x2d
						AVOID_carState = AVOID_CAR_STATE_SCANNING_OBJECT;						
    14ae:	1f a6       	std	Y+47, r1	; 0x2f
    14b0:	76 cf       	rjmp	.-276    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
					}
					else
					{
						rotationDirectionErrorFlag = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	8d a7       	std	Y+45, r24	; 0x2d
						AVOID_carState = AVOID_CAR_SET_DEFAULT_ROTATION;
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	8f a7       	std	Y+47, r24	; 0x2f
    14ba:	71 cf       	rjmp	.-286    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				}		
				break;
			}
			case AVOID_CAR_STATE_SCANNING_OBJECT :
			{
				HCSR04_vGet_Reading(&objectDistance);
    14bc:	ce 01       	movw	r24, r28
    14be:	c0 96       	adiw	r24, 0x30	; 48
    14c0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <HCSR04_vGet_Reading>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a0 ef       	ldi	r26, 0xF0	; 240
    14ca:	b1 e4       	ldi	r27, 0x41	; 65
    14cc:	8f a3       	std	Y+39, r24	; 0x27
    14ce:	98 a7       	std	Y+40, r25	; 0x28
    14d0:	a9 a7       	std	Y+41, r26	; 0x29
    14d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	6f a1       	ldd	r22, Y+39	; 0x27
    14d6:	78 a5       	ldd	r23, Y+40	; 0x28
    14d8:	89 a5       	ldd	r24, Y+41	; 0x29
    14da:	9a a5       	ldd	r25, Y+42	; 0x2a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a ef       	ldi	r20, 0xFA	; 250
    14e2:	54 e4       	ldi	r21, 0x44	; 68
    14e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8b a3       	std	Y+35, r24	; 0x23
    14ee:	9c a3       	std	Y+36, r25	; 0x24
    14f0:	ad a3       	std	Y+37, r26	; 0x25
    14f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14f4:	6b a1       	ldd	r22, Y+35	; 0x23
    14f6:	7c a1       	ldd	r23, Y+36	; 0x24
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	9e a1       	ldd	r25, Y+38	; 0x26
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <AVOID_OBSTACLES_INTERFACE+0x1a8>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9a a3       	std	Y+34, r25	; 0x22
    1512:	89 a3       	std	Y+33, r24	; 0x21
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <AVOID_OBSTACLES_INTERFACE+0x226>
	else if (__tmp > 65535)
    1516:	6b a1       	ldd	r22, Y+35	; 0x23
    1518:	7c a1       	ldd	r23, Y+36	; 0x24
    151a:	8d a1       	ldd	r24, Y+37	; 0x25
    151c:	9e a1       	ldd	r25, Y+38	; 0x26
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <AVOID_OBSTACLES_INTERFACE+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	6f a1       	ldd	r22, Y+39	; 0x27
    1530:	78 a5       	ldd	r23, Y+40	; 0x28
    1532:	89 a5       	ldd	r24, Y+41	; 0x29
    1534:	9a a5       	ldd	r25, Y+42	; 0x2a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <AVOID_OBSTACLES_INTERFACE+0x208>
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	98 a3       	std	Y+32, r25	; 0x20
    155e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1562:	98 a1       	ldd	r25, Y+32	; 0x20
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <AVOID_OBSTACLES_INTERFACE+0x1f6>
    1568:	98 a3       	std	Y+32, r25	; 0x20
    156a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	89 a1       	ldd	r24, Y+33	; 0x21
    156e:	9a a1       	ldd	r25, Y+34	; 0x22
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9a a3       	std	Y+34, r25	; 0x22
    1574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	89 a1       	ldd	r24, Y+33	; 0x21
    1578:	9a a1       	ldd	r25, Y+34	; 0x22
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <AVOID_OBSTACLES_INTERFACE+0x1ea>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <AVOID_OBSTACLES_INTERFACE+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	6b a1       	ldd	r22, Y+35	; 0x23
    1582:	7c a1       	ldd	r23, Y+36	; 0x24
    1584:	8d a1       	ldd	r24, Y+37	; 0x25
    1586:	9e a1       	ldd	r25, Y+38	; 0x26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9a a3       	std	Y+34, r25	; 0x22
    1592:	89 a3       	std	Y+33, r24	; 0x21
    1594:	89 a1       	ldd	r24, Y+33	; 0x21
    1596:	9a a1       	ldd	r25, Y+34	; 0x22
    1598:	9e 8f       	std	Y+30, r25	; 0x1e
    159a:	8d 8f       	std	Y+29, r24	; 0x1d
    159c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <AVOID_OBSTACLES_INTERFACE+0x232>
    15a4:	9e 8f       	std	Y+30, r25	; 0x1e
    15a6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(30);
				AVOID_carState = AVOID_CAR_CHECK_OBJECT_DISTANCE;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	8f a7       	std	Y+47, r24	; 0x2f
    15ac:	f8 ce       	rjmp	.-528    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				break;
			}
			case AVOID_CAR_CHECK_OBJECT_DISTANCE :
			{
				if(objectDistance >= 50)
    15ae:	88 a9       	ldd	r24, Y+48	; 0x30
    15b0:	99 a9       	ldd	r25, Y+49	; 0x31
    15b2:	aa a9       	ldd	r26, Y+50	; 0x32
    15b4:	bb a9       	ldd	r27, Y+51	; 0x33
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	48 e4       	ldi	r20, 0x48	; 72
    15c0:	52 e4       	ldi	r21, 0x42	; 66
    15c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    15c6:	88 23       	and	r24, r24
    15c8:	1c f0       	brlt	.+6      	; 0x15d0 <AVOID_OBSTACLES_INTERFACE+0x262>
				{
					AVOID_carState = AVOID_CAR_DISTANCE_IN_SAFE;
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	8f a7       	std	Y+47, r24	; 0x2f
    15ce:	e7 ce       	rjmp	.-562    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				}
				else if(objectDistance <= 49)
    15d0:	88 a9       	ldd	r24, Y+48	; 0x30
    15d2:	99 a9       	ldd	r25, Y+49	; 0x31
    15d4:	aa a9       	ldd	r26, Y+50	; 0x32
    15d6:	bb a9       	ldd	r27, Y+51	; 0x33
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	44 e4       	ldi	r20, 0x44	; 68
    15e2:	52 e4       	ldi	r21, 0x42	; 66
    15e4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	0c f4       	brge	.+2      	; 0x15ee <AVOID_OBSTACLES_INTERFACE+0x280>
    15ec:	d8 ce       	rjmp	.-592    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				{
					AVOID_carState = AVOID_CAR_DISTANCE_IN_UNSAFE;
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	8f a7       	std	Y+47, r24	; 0x2f
    15f2:	d5 ce       	rjmp	.-598    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				}
				break;
			}
			case AVOID_CAR_DISTANCE_IN_SAFE :
			{
				DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    15f4:	84 ef       	ldi	r24, 0xF4	; 244
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
				DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    15fe:	8a ef       	ldi	r24, 0xFA	; 250
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
				DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	94 e0       	ldi	r25, 0x04	; 4
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
				DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    1612:	86 e0       	ldi	r24, 0x06	; 6
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
				DCM_turnOn(&dcmCfgArr[0]);
    161c:	84 ef       	ldi	r24, 0xF4	; 244
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
				DCM_turnOn(&dcmCfgArr[1]);
    1624:	8a ef       	ldi	r24, 0xFA	; 250
    1626:	93 e0       	ldi	r25, 0x03	; 3
    1628:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
				DCM_turnOn(&dcmCfgArr[2]);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	94 e0       	ldi	r25, 0x04	; 4
    1630:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
				DCM_turnOn(&dcmCfgArr[3]);
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	94 e0       	ldi	r25, 0x04	; 4
    1638:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
				AVOID_carState = AVOID_CAR_STATE_SCANNING_OBJECT;
    163c:	1f a6       	std	Y+47, r1	; 0x2f
    163e:	af ce       	rjmp	.-674    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
			}
			case AVOID_CAR_DISTANCE_IN_UNSAFE :
			{
				/* Stop Car */
					/* rotate car to default direction */
				if(obstcalesInAllDirection < 4)
    1640:	8c a5       	ldd	r24, Y+44	; 0x2c
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	08 f0       	brcs	.+2      	; 0x1648 <AVOID_OBSTACLES_INTERFACE+0x2da>
    1646:	27 c1       	rjmp	.+590    	; 0x1896 <AVOID_OBSTACLES_INTERFACE+0x528>
				{
					obstcalesInAllDirection++;
    1648:	8c a5       	ldd	r24, Y+44	; 0x2c
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8c a7       	std	Y+44, r24	; 0x2c
					if(carDefaultRotation == AVOID_CAR_ROTATION_RIGHT)
    164e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1650:	88 23       	and	r24, r24
    1652:	09 f0       	breq	.+2      	; 0x1656 <AVOID_OBSTACLES_INTERFACE+0x2e8>
    1654:	8e c0       	rjmp	.+284    	; 0x1772 <AVOID_OBSTACLES_INTERFACE+0x404>
					{
						DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    1656:	84 ef       	ldi	r24, 0xF4	; 244
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
						DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    1660:	8a ef       	ldi	r24, 0xFA	; 250
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
						DCM_turnOn(&dcmCfgArr[0]);
    166a:	84 ef       	ldi	r24, 0xF4	; 244
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
						DCM_turnOn(&dcmCfgArr[1]);
    1672:	8a ef       	ldi	r24, 0xFA	; 250
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
						DCM_turnOff(&dcmCfgArr[2]);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
						DCM_turnOff(&dcmCfgArr[3]);
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	aa e7       	ldi	r26, 0x7A	; 122
    1690:	b4 e4       	ldi	r27, 0x44	; 68
    1692:	89 8f       	std	Y+25, r24	; 0x19
    1694:	9a 8f       	std	Y+26, r25	; 0x1a
    1696:	ab 8f       	std	Y+27, r26	; 0x1b
    1698:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	69 8d       	ldd	r22, Y+25	; 0x19
    169c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a ef       	ldi	r20, 0xFA	; 250
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8d 8b       	std	Y+21, r24	; 0x15
    16b4:	9e 8b       	std	Y+22, r25	; 0x16
    16b6:	af 8b       	std	Y+23, r26	; 0x17
    16b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ba:	6d 89       	ldd	r22, Y+21	; 0x15
    16bc:	7e 89       	ldd	r23, Y+22	; 0x16
    16be:	8f 89       	ldd	r24, Y+23	; 0x17
    16c0:	98 8d       	ldd	r25, Y+24	; 0x18
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <AVOID_OBSTACLES_INTERFACE+0x36e>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 8b       	std	Y+20, r25	; 0x14
    16d8:	8b 8b       	std	Y+19, r24	; 0x13
    16da:	3f c0       	rjmp	.+126    	; 0x175a <AVOID_OBSTACLES_INTERFACE+0x3ec>
	else if (__tmp > 65535)
    16dc:	6d 89       	ldd	r22, Y+21	; 0x15
    16de:	7e 89       	ldd	r23, Y+22	; 0x16
    16e0:	8f 89       	ldd	r24, Y+23	; 0x17
    16e2:	98 8d       	ldd	r25, Y+24	; 0x18
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <AVOID_OBSTACLES_INTERFACE+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	69 8d       	ldd	r22, Y+25	; 0x19
    16f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	0f c0       	rjmp	.+30     	; 0x173c <AVOID_OBSTACLES_INTERFACE+0x3ce>
    171e:	88 ec       	ldi	r24, 0xC8	; 200
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9a 8b       	std	Y+18, r25	; 0x12
    1724:	89 8b       	std	Y+17, r24	; 0x11
    1726:	89 89       	ldd	r24, Y+17	; 0x11
    1728:	9a 89       	ldd	r25, Y+18	; 0x12
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <AVOID_OBSTACLES_INTERFACE+0x3bc>
    172e:	9a 8b       	std	Y+18, r25	; 0x12
    1730:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8b 89       	ldd	r24, Y+19	; 0x13
    1734:	9c 89       	ldd	r25, Y+20	; 0x14
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <AVOID_OBSTACLES_INTERFACE+0x3b0>
    1744:	14 c0       	rjmp	.+40     	; 0x176e <AVOID_OBSTACLES_INTERFACE+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	6d 89       	ldd	r22, Y+21	; 0x15
    1748:	7e 89       	ldd	r23, Y+22	; 0x16
    174a:	8f 89       	ldd	r24, Y+23	; 0x17
    174c:	98 8d       	ldd	r25, Y+24	; 0x18
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9c 8b       	std	Y+20, r25	; 0x14
    1758:	8b 8b       	std	Y+19, r24	; 0x13
    175a:	8b 89       	ldd	r24, Y+19	; 0x13
    175c:	9c 89       	ldd	r25, Y+20	; 0x14
    175e:	98 8b       	std	Y+16, r25	; 0x10
    1760:	8f 87       	std	Y+15, r24	; 0x0f
    1762:	8f 85       	ldd	r24, Y+15	; 0x0f
    1764:	98 89       	ldd	r25, Y+16	; 0x10
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <AVOID_OBSTACLES_INTERFACE+0x3f8>
    176a:	98 8b       	std	Y+16, r25	; 0x10
    176c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						AVOID_carState = AVOID_CAR_STATE_SCANNING_OBJECT;
    176e:	1f a6       	std	Y+47, r1	; 0x2f
    1770:	16 ce       	rjmp	.-980    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>

					}
					else if(carDefaultRotation == AVOID_CAR_ROTATION_LEFT)
    1772:	8e a5       	ldd	r24, Y+46	; 0x2e
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	09 f0       	breq	.+2      	; 0x177a <AVOID_OBSTACLES_INTERFACE+0x40c>
    1778:	12 ce       	rjmp	.-988    	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
					{
						DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
						DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    1784:	86 e0       	ldi	r24, 0x06	; 6
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
						DCM_turnOn(&dcmCfgArr[2]);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
						DCM_turnOn(&dcmCfgArr[3]);
    1796:	86 e0       	ldi	r24, 0x06	; 6
    1798:	94 e0       	ldi	r25, 0x04	; 4
    179a:	0e 94 89 14 	call	0x2912	; 0x2912 <DCM_turnOn>
						DCM_turnOff(&dcmCfgArr[0]);
    179e:	84 ef       	ldi	r24, 0xF4	; 244
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
						DCM_turnOff(&dcmCfgArr[1]);
    17a6:	8a ef       	ldi	r24, 0xFA	; 250
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	aa e7       	ldi	r26, 0x7A	; 122
    17b4:	b4 e4       	ldi	r27, 0x44	; 68
    17b6:	8b 87       	std	Y+11, r24	; 0x0b
    17b8:	9c 87       	std	Y+12, r25	; 0x0c
    17ba:	ad 87       	std	Y+13, r26	; 0x0d
    17bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8f 83       	std	Y+7, r24	; 0x07
    17d8:	98 87       	std	Y+8, r25	; 0x08
    17da:	a9 87       	std	Y+9, r26	; 0x09
    17dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <AVOID_OBSTACLES_INTERFACE+0x492>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <AVOID_OBSTACLES_INTERFACE+0x510>
	else if (__tmp > 65535)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <AVOID_OBSTACLES_INTERFACE+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6b 85       	ldd	r22, Y+11	; 0x0b
    181a:	7c 85       	ldd	r23, Y+12	; 0x0c
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <AVOID_OBSTACLES_INTERFACE+0x4f2>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <AVOID_OBSTACLES_INTERFACE+0x4e0>
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <AVOID_OBSTACLES_INTERFACE+0x4d4>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <AVOID_OBSTACLES_INTERFACE+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <AVOID_OBSTACLES_INTERFACE+0x51c>
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						AVOID_carState = AVOID_CAR_STATE_SCANNING_OBJECT;
    1892:	1f a6       	std	Y+47, r1	; 0x2f
    1894:	84 cd       	rjmp	.-1272   	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
						/* Do Nothing */
					}
				}
				else
				{
					AVOID_carState = AVOID_CAR_EXIT;
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	81 cd       	rjmp	.-1278   	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				}
					break;
			}
			case AVOID_CAR_EXIT :
			{
				DCM_turnOff(&dcmCfgArr[0]);
    189c:	84 ef       	ldi	r24, 0xF4	; 244
    189e:	93 e0       	ldi	r25, 0x03	; 3
    18a0:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
				DCM_turnOff(&dcmCfgArr[1]);
    18a4:	8a ef       	ldi	r24, 0xFA	; 250
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
				DCM_turnOff(&dcmCfgArr[2]);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	94 e0       	ldi	r25, 0x04	; 4
    18b0:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
				DCM_turnOff(&dcmCfgArr[3]);
    18b4:	86 e0       	ldi	r24, 0x06	; 6
    18b6:	94 e0       	ldi	r25, 0x04	; 4
    18b8:	0e 94 b6 13 	call	0x276c	; 0x276c <DCM_turnOff>
				BLUETOOTH_send((Uint8_t *)"NO Possible Path For The Robot Exit.....\r\n");
    18bc:	8f ee       	ldi	r24, 0xEF	; 239
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
				exitFlag = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8b a7       	std	Y+43, r24	; 0x2b
    18c8:	6a cd       	rjmp	.-1324   	; 0x139e <AVOID_OBSTACLES_INTERFACE+0x30>
				/* Do Nothing */
				break;
			}
		}
	  }
	return AVOID_OK;
    18ca:	80 e0       	ldi	r24, 0x00	; 0
 }
    18cc:	e5 96       	adiw	r28, 0x35	; 53
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <UART_init>:
 */ 

#include "usart_interface.h"

void UART_init(long USART_BAUDRATE)
{
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <UART_init+0xa>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <UART_init+0xc>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	69 83       	std	Y+1, r22	; 0x01
    18f0:	7a 83       	std	Y+2, r23	; 0x02
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB_REG |= (1 << UCSRB_REG_RXEN_BIT) | (1 << UCSRB_REG_TXEN_BIT);/* Turn on transmission and reception */
    18f6:	aa e2       	ldi	r26, 0x2A	; 42
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ea e2       	ldi	r30, 0x2A	; 42
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	88 61       	ori	r24, 0x18	; 24
    1902:	8c 93       	st	X, r24
	UCSRC_REG |= (1 << UCSRC_REG_URSEL_BIT) | (1 << UCSRC_REG_UCSZ0_BIT) | (1 << UCSRC_REG_UCSZ1_BIT);/* Use 8-bit character sizes */
    1904:	a0 e4       	ldi	r26, 0x40	; 64
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e0 e4       	ldi	r30, 0x40	; 64
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	86 68       	ori	r24, 0x86	; 134
    1910:	8c 93       	st	X, r24
	UBRRL_REG = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
    1912:	09 e2       	ldi	r16, 0x29	; 41
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	ab 81       	ldd	r26, Y+3	; 0x03
    191c:	bc 81       	ldd	r27, Y+4	; 0x04
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	aa 1f       	adc	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	aa 1f       	adc	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	aa 1f       	adc	r26, r26
    1934:	bb 1f       	adc	r27, r27
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	9c 01       	movw	r18, r24
    1940:	ad 01       	movw	r20, r26
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	92 e1       	ldi	r25, 0x12	; 18
    1946:	aa e7       	ldi	r26, 0x7A	; 122
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__udivmodsi4>
    1952:	da 01       	movw	r26, r20
    1954:	c9 01       	movw	r24, r18
    1956:	81 50       	subi	r24, 0x01	; 1
    1958:	f8 01       	movw	r30, r16
    195a:	80 83       	st	Z, r24
	UBRRH_REG = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
    195c:	00 e4       	ldi	r16, 0x40	; 64
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	ab 81       	ldd	r26, Y+3	; 0x03
    1966:	bc 81       	ldd	r27, Y+4	; 0x04
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	aa 1f       	adc	r26, r26
    196e:	bb 1f       	adc	r27, r27
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	aa 1f       	adc	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	aa 1f       	adc	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	aa 1f       	adc	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	9c 01       	movw	r18, r24
    198a:	ad 01       	movw	r20, r26
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	92 e1       	ldi	r25, 0x12	; 18
    1990:	aa e7       	ldi	r26, 0x7A	; 122
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__udivmodsi4>
    199c:	da 01       	movw	r26, r20
    199e:	c9 01       	movw	r24, r18
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	a1 09       	sbc	r26, r1
    19a4:	b1 09       	sbc	r27, r1
    19a6:	89 2f       	mov	r24, r25
    19a8:	9a 2f       	mov	r25, r26
    19aa:	ab 2f       	mov	r26, r27
    19ac:	bb 27       	eor	r27, r27
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 83       	st	Z, r24
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <UART_RxChar>:
unsigned char UART_RxChar()
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	while ((UCSRA_REG & (1 << UCSRB_REG_RXCIE_BIT)) == 0);/* Wait till data is received */
    19cc:	eb e2       	ldi	r30, 0x2B	; 43
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	88 23       	and	r24, r24
    19d4:	dc f7       	brge	.-10     	; 0x19cc <UART_RxChar+0x8>
	return(UDR_REG);
    19d6:	ec e2       	ldi	r30, 0x2C	; 44
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <UART_TxChar>:
void UART_TxChar(char letter)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	0f 92       	push	r0
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSRA_REG & (1<<UCSRB_REG_UDRIE_BIT)));	/* Wait for empty transmit buffer*/
    19ee:	eb e2       	ldi	r30, 0x2B	; 43
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	80 72       	andi	r24, 0x20	; 32
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	b9 f3       	breq	.-18     	; 0x19ee <UART_TxChar+0xc>
	UDR_REG = letter ;
    1a00:	ec e2       	ldi	r30, 0x2C	; 44
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	80 83       	st	Z, r24
}
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <UART_SendString>:
void UART_SendString(char *str)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <UART_SendString+0x6>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	0e c0       	rjmp	.+28     	; 0x1a40 <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	80 81       	ld	r24, Z
    1a36:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <UART_TxChar>
		j++;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	89 83       	std	Y+1, r24	; 0x01
}
void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	80 81       	ld	r24, Z
    1a52:	88 23       	and	r24, r24
    1a54:	39 f7       	brne	.-50     	; 0x1a24 <UART_SendString+0x14>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <TMR_vInit>:


#include "tmr.h"

void TMR_vInit(void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG = (TCCR1A_REG & 0xFC);
    1a6a:	af e4       	ldi	r26, 0x4F	; 79
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	ef e4       	ldi	r30, 0x4F	; 79
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8c 7f       	andi	r24, 0xFC	; 252
    1a76:	8c 93       	st	X, r24
	TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1a78:	ae e4       	ldi	r26, 0x4E	; 78
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	ee e4       	ldi	r30, 0x4E	; 78
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	87 7e       	andi	r24, 0xE7	; 231
    1a84:	8c 93       	st	X, r24
	TIMSK_REG = (TIMSK_REG   & 0xC3) | 0x04;
    1a86:	a9 e5       	ldi	r26, 0x59	; 89
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e9 e5       	ldi	r30, 0x59	; 89
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	83 7c       	andi	r24, 0xC3	; 195
    1a92:	84 60       	ori	r24, 0x04	; 4
    1a94:	8c 93       	st	X, r24
	MCU_vEnableInterrupt();
    1a96:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCU_vEnableInterrupt>

}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <TMR_vStartTimer>:

void TMR_vStartTimer(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    1aa8:	ae e4       	ldi	r26, 0x4E	; 78
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ee e4       	ldi	r30, 0x4E	; 78
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 7f       	andi	r24, 0xF8	; 248
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	8c 93       	st	X, r24
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <MCU_vEnableInterrupt>:
*//*************************************************************************/

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
    1ac6:	af e5       	ldi	r26, 0x5F	; 95
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	ef e5       	ldi	r30, 0x5F	; 95
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 68       	ori	r24, 0x80	; 128
    1ad2:	8c 93       	st	X, r24
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <MCU_vDisableInterrupt>:

void MCU_vDisableInterrupt(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,7);
    1ae2:	af e5       	ldi	r26, 0x5F	; 95
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	ef e5       	ldi	r30, 0x5F	; 95
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 77       	andi	r24, 0x7F	; 127
    1aee:	8c 93       	st	X, r24
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <GPIO_pin_direction_intialize>:
volatile Uint8_t *ddr_registers[] = {&DDRA_REG,&DDRB_REG,&DDRC_REG,&DDRD_REG};
volatile Uint8_t *port_registers[] = {&PORTA_REG,&PORTB_REG,&PORTC_REG,&PORTD_REG};
volatile Uint8_t *pin_registers[] = {&PINA_REG,&PINB_REG,&PINC_REG,&PIND_REG};

Std_ReturnType GPIO_pin_direction_intialize(const ST_pin_config_t *_pin_config)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_pin_direction_intialize+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_pin_direction_intialize+0x8>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOT_OK;
    1b08:	19 82       	std	Y+1, r1	; 0x01

	    if(PTR_NULL == _pin_config || _pin_config->pin > PORT_PIN_MAX_NUMBER)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <GPIO_pin_direction_intialize+0x34>
    1b12:	ea 81       	ldd	r30, Y+2	; 0x02
    1b14:	fb 81       	ldd	r31, Y+3	; 0x03
    1b16:	80 81       	ld	r24, Z
    1b18:	86 95       	lsr	r24
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	87 70       	andi	r24, 0x07	; 7
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 30       	cpi	r24, 0x08	; 8
    1b26:	91 05       	cpc	r25, r1
    1b28:	14 f0       	brlt	.+4      	; 0x1b2e <GPIO_pin_direction_intialize+0x38>
	    {
	        ret = E_NOT_OK;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	7e c0       	rjmp	.+252    	; 0x1c2a <GPIO_pin_direction_intialize+0x134>
	    }
	    else
	    {
	        switch(_pin_config->direction)
    1b2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b30:	fb 81       	ldd	r31, Y+3	; 0x03
    1b32:	80 81       	ld	r24, Z
    1b34:	82 95       	swap	r24
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	83 70       	andi	r24, 0x03	; 3
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3d 83       	std	Y+5, r19	; 0x05
    1b44:	2c 83       	std	Y+4, r18	; 0x04
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	c9 f1       	breq	.+114    	; 0x1bc0 <GPIO_pin_direction_intialize+0xca>
    1b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b50:	3d 81       	ldd	r19, Y+5	; 0x05
    1b52:	21 30       	cpi	r18, 0x01	; 1
    1b54:	31 05       	cpc	r19, r1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <GPIO_pin_direction_intialize+0x64>
    1b58:	67 c0       	rjmp	.+206    	; 0x1c28 <GPIO_pin_direction_intialize+0x132>
	      {
	          case GPIO_DIRECTION_OUTPUT:
	          {
	              SET_BIT(*ddr_registers[_pin_config->port],_pin_config->pin);
    1b5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b5e:	80 81       	ld	r24, Z
    1b60:	87 70       	andi	r24, 0x07	; 7
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e8 52       	subi	r30, 0x28	; 40
    1b6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b70:	a0 81       	ld	r26, Z
    1b72:	b1 81       	ldd	r27, Z+1	; 0x01
    1b74:	ea 81       	ldd	r30, Y+2	; 0x02
    1b76:	fb 81       	ldd	r31, Y+3	; 0x03
    1b78:	80 81       	ld	r24, Z
    1b7a:	87 70       	andi	r24, 0x07	; 7
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	fc 01       	movw	r30, r24
    1b86:	e8 52       	subi	r30, 0x28	; 40
    1b88:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8a:	01 90       	ld	r0, Z+
    1b8c:	f0 81       	ld	r31, Z
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	ea 81       	ldd	r30, Y+2	; 0x02
    1b96:	fb 81       	ldd	r31, Y+3	; 0x03
    1b98:	80 81       	ld	r24, Z
    1b9a:	86 95       	lsr	r24
    1b9c:	86 95       	lsr	r24
    1b9e:	86 95       	lsr	r24
    1ba0:	87 70       	andi	r24, 0x07	; 7
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <GPIO_pin_direction_intialize+0xbc>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <GPIO_pin_direction_intialize+0xb8>
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24
	              ret = E_OK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	35 c0       	rjmp	.+106    	; 0x1c2a <GPIO_pin_direction_intialize+0x134>
	              break;
	          }
	          case GPIO_DIRECTION_INPUT:
	          {
	              CLEAR_BIT(*ddr_registers[_pin_config->port],_pin_config->pin);
    1bc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc4:	80 81       	ld	r24, Z
    1bc6:	87 70       	andi	r24, 0x07	; 7
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e8 52       	subi	r30, 0x28	; 40
    1bd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd6:	a0 81       	ld	r26, Z
    1bd8:	b1 81       	ldd	r27, Z+1	; 0x01
    1bda:	ea 81       	ldd	r30, Y+2	; 0x02
    1bdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bde:	80 81       	ld	r24, Z
    1be0:	87 70       	andi	r24, 0x07	; 7
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	fc 01       	movw	r30, r24
    1bec:	e8 52       	subi	r30, 0x28	; 40
    1bee:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	f0 81       	ld	r31, Z
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bfe:	80 81       	ld	r24, Z
    1c00:	86 95       	lsr	r24
    1c02:	86 95       	lsr	r24
    1c04:	86 95       	lsr	r24
    1c06:	87 70       	andi	r24, 0x07	; 7
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_pin_direction_intialize+0x122>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_pin_direction_intialize+0x11e>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
	              ret = E_OK;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <GPIO_pin_direction_intialize+0x134>
	              break;
	          }
	          default : ret = E_NOT_OK ;
    1c28:	19 82       	std	Y+1, r1	; 0x01
	      }
	    }

	    return ret;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <GPIO_pin_get_direction_status>:


Std_ReturnType GPIO_pin_get_direction_status(const ST_pin_config_t *_pin_config , EN_direction_t *direction_status)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <GPIO_pin_get_direction_status+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <GPIO_pin_get_direction_status+0x8>
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9b 83       	std	Y+3, r25	; 0x03
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	7d 83       	std	Y+5, r23	; 0x05
    1c50:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    1c52:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == _pin_config || PTR_NULL == direction_status || _pin_config->pin > PORT_PIN_MAX_NUMBER)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c <GPIO_pin_get_direction_status+0x40>
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <GPIO_pin_get_direction_status+0x40>
    1c64:	ea 81       	ldd	r30, Y+2	; 0x02
    1c66:	fb 81       	ldd	r31, Y+3	; 0x03
    1c68:	80 81       	ld	r24, Z
    1c6a:	86 95       	lsr	r24
    1c6c:	86 95       	lsr	r24
    1c6e:	86 95       	lsr	r24
    1c70:	87 70       	andi	r24, 0x07	; 7
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	91 05       	cpc	r25, r1
    1c7a:	14 f0       	brlt	.+4      	; 0x1c80 <GPIO_pin_get_direction_status+0x44>
    {
        ret = E_NOT_OK;
    1c7c:	19 82       	std	Y+1, r1	; 0x01
    1c7e:	27 c0       	rjmp	.+78     	; 0x1cce <GPIO_pin_get_direction_status+0x92>
    }
    else
    {
        *direction_status = GET_BIT(*ddr_registers[_pin_config->port],_pin_config->pin);
    1c80:	ea 81       	ldd	r30, Y+2	; 0x02
    1c82:	fb 81       	ldd	r31, Y+3	; 0x03
    1c84:	80 81       	ld	r24, Z
    1c86:	87 70       	andi	r24, 0x07	; 7
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	e8 52       	subi	r30, 0x28	; 40
    1c94:	fc 4f       	sbci	r31, 0xFC	; 252
    1c96:	01 90       	ld	r0, Z+
    1c98:	f0 81       	ld	r31, Z
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca6:	80 81       	ld	r24, Z
    1ca8:	86 95       	lsr	r24
    1caa:	86 95       	lsr	r24
    1cac:	86 95       	lsr	r24
    1cae:	87 70       	andi	r24, 0x07	; 7
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_pin_get_direction_status+0x80>
    1cb8:	55 95       	asr	r21
    1cba:	47 95       	ror	r20
    1cbc:	8a 95       	dec	r24
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_pin_get_direction_status+0x7c>
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	81 70       	andi	r24, 0x01	; 1
    1cc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc8:	80 83       	st	Z, r24
		ret = E_OK;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <GPIO_pin_write_logic>:
Std_ReturnType GPIO_pin_write_logic(const ST_pin_config_t *_pin_config , EN_logic_t logic)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <GPIO_pin_write_logic+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_pin_write_logic+0x8>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <GPIO_pin_write_logic+0xa>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	6c 83       	std	Y+4, r22	; 0x04
	 Std_ReturnType ret = E_NOT_OK;
    1cf4:	19 82       	std	Y+1, r1	; 0x01

	    if(PTR_NULL == _pin_config || _pin_config->pin > PORT_PIN_MAX_NUMBER)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	61 f0       	breq	.+24     	; 0x1d16 <GPIO_pin_write_logic+0x36>
    1cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1d00:	fb 81       	ldd	r31, Y+3	; 0x03
    1d02:	80 81       	ld	r24, Z
    1d04:	86 95       	lsr	r24
    1d06:	86 95       	lsr	r24
    1d08:	86 95       	lsr	r24
    1d0a:	87 70       	andi	r24, 0x07	; 7
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	91 05       	cpc	r25, r1
    1d14:	14 f0       	brlt	.+4      	; 0x1d1a <GPIO_pin_write_logic+0x3a>
	    {
	        ret = E_NOT_OK;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	77 c0       	rjmp	.+238    	; 0x1e08 <GPIO_pin_write_logic+0x128>
	    }
	    else
	    {
	        switch(logic)
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3e 83       	std	Y+6, r19	; 0x06
    1d22:	2d 83       	std	Y+5, r18	; 0x05
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	31 f0       	breq	.+12     	; 0x1d38 <GPIO_pin_write_logic+0x58>
    1d2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d30:	21 30       	cpi	r18, 0x01	; 1
    1d32:	31 05       	cpc	r19, r1
    1d34:	a9 f1       	breq	.+106    	; 0x1da0 <GPIO_pin_write_logic+0xc0>
    1d36:	67 c0       	rjmp	.+206    	; 0x1e06 <GPIO_pin_write_logic+0x126>
	        {
	            case GPIO_LOGIC_LOW:
	            {
	                CLEAR_BIT(*port_registers[_pin_config->port],_pin_config->pin);
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 70       	andi	r24, 0x07	; 7
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	fc 01       	movw	r30, r24
    1d4a:	e0 52       	subi	r30, 0x20	; 32
    1d4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d4e:	a0 81       	ld	r26, Z
    1d50:	b1 81       	ldd	r27, Z+1	; 0x01
    1d52:	ea 81       	ldd	r30, Y+2	; 0x02
    1d54:	fb 81       	ldd	r31, Y+3	; 0x03
    1d56:	80 81       	ld	r24, Z
    1d58:	87 70       	andi	r24, 0x07	; 7
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	fc 01       	movw	r30, r24
    1d64:	e0 52       	subi	r30, 0x20	; 32
    1d66:	fc 4f       	sbci	r31, 0xFC	; 252
    1d68:	01 90       	ld	r0, Z+
    1d6a:	f0 81       	ld	r31, Z
    1d6c:	e0 2d       	mov	r30, r0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	ea 81       	ldd	r30, Y+2	; 0x02
    1d74:	fb 81       	ldd	r31, Y+3	; 0x03
    1d76:	80 81       	ld	r24, Z
    1d78:	86 95       	lsr	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	86 95       	lsr	r24
    1d7e:	87 70       	andi	r24, 0x07	; 7
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_pin_write_logic+0xb0>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_pin_write_logic+0xac>
    1d94:	80 95       	com	r24
    1d96:	84 23       	and	r24, r20
    1d98:	8c 93       	st	X, r24
	                ret = E_OK;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	34 c0       	rjmp	.+104    	; 0x1e08 <GPIO_pin_write_logic+0x128>
	                break;
	            }
	            case GPIO_LOGIC_HIGH:
	            {
	                SET_BIT(*port_registers[_pin_config->port],_pin_config->pin);
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	80 81       	ld	r24, Z
    1da6:	87 70       	andi	r24, 0x07	; 7
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	fc 01       	movw	r30, r24
    1db2:	e0 52       	subi	r30, 0x20	; 32
    1db4:	fc 4f       	sbci	r31, 0xFC	; 252
    1db6:	a0 81       	ld	r26, Z
    1db8:	b1 81       	ldd	r27, Z+1	; 0x01
    1dba:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbe:	80 81       	ld	r24, Z
    1dc0:	87 70       	andi	r24, 0x07	; 7
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e0 52       	subi	r30, 0x20	; 32
    1dce:	fc 4f       	sbci	r31, 0xFC	; 252
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	f0 81       	ld	r31, Z
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	ea 81       	ldd	r30, Y+2	; 0x02
    1ddc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dde:	80 81       	ld	r24, Z
    1de0:	86 95       	lsr	r24
    1de2:	86 95       	lsr	r24
    1de4:	86 95       	lsr	r24
    1de6:	87 70       	andi	r24, 0x07	; 7
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_pin_write_logic+0x118>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_pin_write_logic+0x114>
    1dfc:	84 2b       	or	r24, r20
    1dfe:	8c 93       	st	X, r24
	                ret = E_OK;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <GPIO_pin_write_logic+0x128>
	                break;
	            }
	            default : ret = E_NOT_OK;
    1e06:	19 82       	std	Y+1, r1	; 0x01
	        }
	    }
	    return ret;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e0a:	26 96       	adiw	r28, 0x06	; 6
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <GPIO_pin_read_logic>:
Std_ReturnType GPIO_pin_read_logic(const ST_pin_config_t *_pin_config , EN_logic_t *logic_status)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <GPIO_pin_read_logic+0x6>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <GPIO_pin_read_logic+0x8>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	7d 83       	std	Y+5, r23	; 0x05
    1e30:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    1e32:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == _pin_config || PTR_NULL == logic_status || _pin_config->pin > PORT_PIN_MAX_NUMBER)
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	9b 81       	ldd	r25, Y+3	; 0x03
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <GPIO_pin_read_logic+0x40>
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <GPIO_pin_read_logic+0x40>
    1e44:	ea 81       	ldd	r30, Y+2	; 0x02
    1e46:	fb 81       	ldd	r31, Y+3	; 0x03
    1e48:	80 81       	ld	r24, Z
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	86 95       	lsr	r24
    1e50:	87 70       	andi	r24, 0x07	; 7
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	88 30       	cpi	r24, 0x08	; 8
    1e58:	91 05       	cpc	r25, r1
    1e5a:	14 f0       	brlt	.+4      	; 0x1e60 <GPIO_pin_read_logic+0x44>
    {
        ret = E_NOT_OK;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	27 c0       	rjmp	.+78     	; 0x1eae <GPIO_pin_read_logic+0x92>
    }
    else
    {
        *logic_status = GET_BIT(*pin_registers[_pin_config->port],_pin_config->pin);
    1e60:	ea 81       	ldd	r30, Y+2	; 0x02
    1e62:	fb 81       	ldd	r31, Y+3	; 0x03
    1e64:	80 81       	ld	r24, Z
    1e66:	87 70       	andi	r24, 0x07	; 7
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	fc 01       	movw	r30, r24
    1e72:	e8 51       	subi	r30, 0x18	; 24
    1e74:	fc 4f       	sbci	r31, 0xFC	; 252
    1e76:	01 90       	ld	r0, Z+
    1e78:	f0 81       	ld	r31, Z
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	ea 81       	ldd	r30, Y+2	; 0x02
    1e84:	fb 81       	ldd	r31, Y+3	; 0x03
    1e86:	80 81       	ld	r24, Z
    1e88:	86 95       	lsr	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	86 95       	lsr	r24
    1e8e:	87 70       	andi	r24, 0x07	; 7
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a9 01       	movw	r20, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_pin_read_logic+0x80>
    1e98:	55 95       	asr	r21
    1e9a:	47 95       	ror	r20
    1e9c:	8a 95       	dec	r24
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_pin_read_logic+0x7c>
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ea8:	80 83       	st	Z, r24
        ret = E_OK;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
    }

    return ret;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <GPIO_pin_toggle_logic>:
Std_ReturnType GPIO_pin_toggle_logic(const ST_pin_config_t *_pin_config)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <GPIO_pin_toggle_logic+0x6>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9b 83       	std	Y+3, r25	; 0x03
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_NOT_OK;
    1ed0:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == _pin_config || _pin_config->pin > PORT_PIN_MAX_NUMBER - 1)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	61 f0       	breq	.+24     	; 0x1ef2 <GPIO_pin_toggle_logic+0x32>
    1eda:	ea 81       	ldd	r30, Y+2	; 0x02
    1edc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ede:	80 81       	ld	r24, Z
    1ee0:	86 95       	lsr	r24
    1ee2:	86 95       	lsr	r24
    1ee4:	86 95       	lsr	r24
    1ee6:	87 70       	andi	r24, 0x07	; 7
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	87 30       	cpi	r24, 0x07	; 7
    1eee:	91 05       	cpc	r25, r1
    1ef0:	14 f0       	brlt	.+4      	; 0x1ef6 <GPIO_pin_toggle_logic+0x36>
    {
        ret = E_NOT_OK;
    1ef2:	19 82       	std	Y+1, r1	; 0x01
    1ef4:	32 c0       	rjmp	.+100    	; 0x1f5a <GPIO_pin_toggle_logic+0x9a>
    }
    else
    {
       TOGGLE_BIT(*port_registers[_pin_config->port],_pin_config->pin);
    1ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    1efa:	80 81       	ld	r24, Z
    1efc:	87 70       	andi	r24, 0x07	; 7
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	fc 01       	movw	r30, r24
    1f08:	e0 52       	subi	r30, 0x20	; 32
    1f0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0c:	a0 81       	ld	r26, Z
    1f0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f10:	ea 81       	ldd	r30, Y+2	; 0x02
    1f12:	fb 81       	ldd	r31, Y+3	; 0x03
    1f14:	80 81       	ld	r24, Z
    1f16:	87 70       	andi	r24, 0x07	; 7
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	fc 01       	movw	r30, r24
    1f22:	e0 52       	subi	r30, 0x20	; 32
    1f24:	fc 4f       	sbci	r31, 0xFC	; 252
    1f26:	01 90       	ld	r0, Z+
    1f28:	f0 81       	ld	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	ea 81       	ldd	r30, Y+2	; 0x02
    1f32:	fb 81       	ldd	r31, Y+3	; 0x03
    1f34:	80 81       	ld	r24, Z
    1f36:	86 95       	lsr	r24
    1f38:	86 95       	lsr	r24
    1f3a:	86 95       	lsr	r24
    1f3c:	87 70       	andi	r24, 0x07	; 7
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_pin_toggle_logic+0x8e>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_pin_toggle_logic+0x8a>
    1f52:	84 27       	eor	r24, r20
    1f54:	8c 93       	st	X, r24
       ret = E_OK;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    }

    return ret;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <GPIO_pin_intialize>:
Std_ReturnType GPIO_pin_intialize(const ST_pin_config_t *_pin_config)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <GPIO_pin_intialize+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_NOT_OK;
    1f78:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == _pin_config)
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <GPIO_pin_intialize+0x1e>
    {
        ret = E_NOT_OK;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	12 c0       	rjmp	.+36     	; 0x1faa <GPIO_pin_intialize+0x42>
    }
    else
    {
       ret = GPIO_pin_direction_intialize(_pin_config);
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <GPIO_pin_direction_intialize>
    1f8e:	89 83       	std	Y+1, r24	; 0x01
       ret = GPIO_pin_write_logic(_pin_config,_pin_config->logic);
    1f90:	ea 81       	ldd	r30, Y+2	; 0x02
    1f92:	fb 81       	ldd	r31, Y+3	; 0x03
    1f94:	80 81       	ld	r24, Z
    1f96:	88 1f       	adc	r24, r24
    1f98:	88 27       	eor	r24, r24
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	62 2f       	mov	r22, r18
    1fa4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <GPIO_port_direction_intialize>:




Std_ReturnType GPIO_port_direction_intialize(EN_port_index_t port , Uint8_t direction)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <GPIO_port_direction_intialize+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	6b 83       	std	Y+3, r22	; 0x03
    Std_ReturnType ret = E_NOT_OK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    if(port > PORT_MAX_NUMBER)
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	85 30       	cpi	r24, 0x05	; 5
    1fce:	10 f0       	brcs	.+4      	; 0x1fd4 <GPIO_port_direction_intialize+0x1c>
    {
      ret = E_NOT_OK;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <GPIO_port_direction_intialize+0x3a>
    }
    else
    {
        *ddr_registers[port] = direction;
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e8 52       	subi	r30, 0x28	; 40
    1fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe4:	01 90       	ld	r0, Z+
    1fe6:	f0 81       	ld	r31, Z
    1fe8:	e0 2d       	mov	r30, r0
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	80 83       	st	Z, r24
        ret = E_OK;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_port_get_direction_status>:
Std_ReturnType GPIO_port_get_direction_status(EN_port_index_t port , Uint8_t *direction_status)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_port_get_direction_status+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_port_get_direction_status+0x8>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	7c 83       	std	Y+4, r23	; 0x04
    2010:	6b 83       	std	Y+3, r22	; 0x03
    Std_ReturnType ret = E_NOT_OK;
    2012:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == direction_status || port > PORT_MAX_NUMBER)
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	19 f0       	breq	.+6      	; 0x2022 <GPIO_port_get_direction_status+0x22>
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	85 30       	cpi	r24, 0x05	; 5
    2020:	10 f0       	brcs	.+4      	; 0x2026 <GPIO_port_get_direction_status+0x26>
    {
        ret = E_NOT_OK;
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	11 c0       	rjmp	.+34     	; 0x2048 <GPIO_port_get_direction_status+0x48>
    }
    else
    {
        *direction_status = *ddr_registers[port];
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	fc 01       	movw	r30, r24
    2032:	e8 52       	subi	r30, 0x28	; 40
    2034:	fc 4f       	sbci	r31, 0xFC	; 252
    2036:	01 90       	ld	r0, Z+
    2038:	f0 81       	ld	r31, Z
    203a:	e0 2d       	mov	r30, r0
    203c:	80 81       	ld	r24, Z
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	80 83       	st	Z, r24
        ret = E_OK;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
    }

    return ret;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <GPIO_port_write_logic>:
Std_ReturnType GPIO_port_write_logic(EN_port_index_t port , Uint8_t logic)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <GPIO_port_write_logic+0x6>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	6b 83       	std	Y+3, r22	; 0x03
    Std_ReturnType ret = E_NOT_OK;
    2068:	19 82       	std	Y+1, r1	; 0x01
    if(port > PORT_MAX_NUMBER)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	85 30       	cpi	r24, 0x05	; 5
    206e:	10 f0       	brcs	.+4      	; 0x2074 <GPIO_port_write_logic+0x1c>
    {
        ret = E_NOT_OK;
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <GPIO_port_write_logic+0x3a>
    }
    else
    {
        *port_registers[port] = logic;
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	fc 01       	movw	r30, r24
    2080:	e0 52       	subi	r30, 0x20	; 32
    2082:	fc 4f       	sbci	r31, 0xFC	; 252
    2084:	01 90       	ld	r0, Z+
    2086:	f0 81       	ld	r31, Z
    2088:	e0 2d       	mov	r30, r0
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	80 83       	st	Z, r24
        ret = E_OK;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2092:	89 81       	ldd	r24, Y+1	; 0x01
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <GPIO_port_read_logic>:
Std_ReturnType GPIO_port_read_logic(EN_port_index_t port , Uint8_t *logic_status)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <GPIO_port_read_logic+0x6>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <GPIO_port_read_logic+0x8>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	7c 83       	std	Y+4, r23	; 0x04
    20b0:	6b 83       	std	Y+3, r22	; 0x03
    Std_ReturnType ret = E_NOT_OK;
    20b2:	19 82       	std	Y+1, r1	; 0x01

    if(PTR_NULL == logic_status || port > PORT_MAX_NUMBER)
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	19 f0       	breq	.+6      	; 0x20c2 <GPIO_port_read_logic+0x22>
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	85 30       	cpi	r24, 0x05	; 5
    20c0:	10 f0       	brcs	.+4      	; 0x20c6 <GPIO_port_read_logic+0x26>
    {
        ret = E_NOT_OK;
    20c2:	19 82       	std	Y+1, r1	; 0x01
    20c4:	11 c0       	rjmp	.+34     	; 0x20e8 <GPIO_port_read_logic+0x48>
    }
    else
    {
        *logic_status = *pin_registers[port];
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	fc 01       	movw	r30, r24
    20d2:	e8 51       	subi	r30, 0x18	; 24
    20d4:	fc 4f       	sbci	r31, 0xFC	; 252
    20d6:	01 90       	ld	r0, Z+
    20d8:	f0 81       	ld	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	80 81       	ld	r24, Z
    20de:	eb 81       	ldd	r30, Y+3	; 0x03
    20e0:	fc 81       	ldd	r31, Y+4	; 0x04
    20e2:	80 83       	st	Z, r24
        ret = E_OK;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	89 83       	std	Y+1, r24	; 0x01
    }

    return ret;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <GPIO_port_toggle_logic>:
Std_ReturnType GPIO_port_toggle_logic(EN_port_index_t port)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <GPIO_port_toggle_logic+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8a 83       	std	Y+2, r24	; 0x02
	   Std_ReturnType ret = E_NOT_OK;
    2104:	19 82       	std	Y+1, r1	; 0x01
	       if(port > PORT_MAX_NUMBER)
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	10 f0       	brcs	.+4      	; 0x2110 <GPIO_port_toggle_logic+0x18>
	    {
	        ret = E_NOT_OK;
    210c:	19 82       	std	Y+1, r1	; 0x01
    210e:	1a c0       	rjmp	.+52     	; 0x2144 <GPIO_port_toggle_logic+0x4c>
	    }
	    else
	    {
	           *port_registers[port] ^= PORT_TOOGLE_MASK;
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	fc 01       	movw	r30, r24
    211c:	e0 52       	subi	r30, 0x20	; 32
    211e:	fc 4f       	sbci	r31, 0xFC	; 252
    2120:	a0 81       	ld	r26, Z
    2122:	b1 81       	ldd	r27, Z+1	; 0x01
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	fc 01       	movw	r30, r24
    2130:	e0 52       	subi	r30, 0x20	; 32
    2132:	fc 4f       	sbci	r31, 0xFC	; 252
    2134:	01 90       	ld	r0, Z+
    2136:	f0 81       	ld	r31, Z
    2138:	e0 2d       	mov	r30, r0
    213a:	80 81       	ld	r24, Z
    213c:	80 95       	com	r24
    213e:	8c 93       	st	X, r24
	           ret = E_OK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
	    }
	    return ret;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <__vector_9>:
static Uint16_t timer1_counter;


/* ISR for Timer 1 Overflow */
void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	8f 93       	push	r24
    215c:	9f 93       	push	r25
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	timer1_counter++;
    2166:	80 91 13 04 	lds	r24, 0x0413
    216a:	90 91 14 04 	lds	r25, 0x0414
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	90 93 14 04 	sts	0x0414, r25
    2174:	80 93 13 04 	sts	0x0413, r24
}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	9f 91       	pop	r25
    217e:	8f 91       	pop	r24
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	0f 90       	pop	r0
    2186:	1f 90       	pop	r1
    2188:	18 95       	reti

0000218a <HCSR04_vInit>:

void HCSR04_vInit(){
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	/* GPIO Pins Initialization */
	SET_BIT(DDRD_REG , 7);
    2192:	a1 e3       	ldi	r26, 0x31	; 49
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e1 e3       	ldi	r30, 0x31	; 49
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 68       	ori	r24, 0x80	; 128
    219e:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD_REG , 6);
    21a0:	a1 e3       	ldi	r26, 0x31	; 49
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e1 e3       	ldi	r30, 0x31	; 49
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 7b       	andi	r24, 0xBF	; 191
    21ac:	8c 93       	st	X, r24

	SET_BIT(PORTD_REG , 6);
    21ae:	a2 e3       	ldi	r26, 0x32	; 50
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e2 e3       	ldi	r30, 0x32	; 50
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 64       	ori	r24, 0x40	; 64
    21ba:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD_REG , 7);
    21bc:	a2 e3       	ldi	r26, 0x32	; 50
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e2 e3       	ldi	r30, 0x32	; 50
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 77       	andi	r24, 0x7F	; 127
    21c8:	8c 93       	st	X, r24
	//DIO_vPinInit(TRIG_PORT, TRIG_PIN, OUTPUT, LOW);   7
	//DIO_vPinInit(ECHO_PORT, ECHO_PIN, INPUT, HIGH);  6

	/* Initialize Timer */
	TMR_vInit();
    21ca:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <TMR_vInit>

	/* Enable global interrupts */
	//GIE_vEnableInterrupts();

	MCU_vEnableInterrupt();
    21ce:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCU_vEnableInterrupt>
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <HCSR04_vGet_Reading>:

void HCSR04_vGet_Reading(float64_t *Copy_f64Sensor_Reading){
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	a4 97       	sbiw	r28, 0x24	; 36
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	9c a3       	std	Y+36, r25	; 0x24
    21f6:	8b a3       	std	Y+35, r24	; 0x23
	Uint16_t ICR_Reg_Value;
	Uint32_t Elapsed_Time;
	float64_t Real_Distance;
	TCNT1_REG = 0; // Clear timer register
    21f8:	ec e4       	ldi	r30, 0x4C	; 76
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	11 82       	std	Z+1, r1	; 0x01
    21fe:	10 82       	st	Z, r1
	CLEAR_ICU_FLAG(); // Clear ICU interrupt flag
    2200:	e8 e5       	ldi	r30, 0x58	; 88
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 e2       	ldi	r24, 0x20	; 32
    2206:	80 83       	st	Z, r24
	ICU_Rising_Edge(); // Set ICU to rising edge trigger
    2208:	ae e4       	ldi	r26, 0x4E	; 78
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	ee e4       	ldi	r30, 0x4E	; 78
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 64       	ori	r24, 0x40	; 64
    2214:	8c 93       	st	X, r24
	TMR_vStartTimer(); // Start timer counting
    2216:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <TMR_vStartTimer>
	/* Send a 10uSec pulse to trig */
	//DIO_vSetPinValue(TRIG_PORT, TRIG_PIN, HIGH);
	SET_BIT(PORTD_REG , 7);
    221a:	a2 e3       	ldi	r26, 0x32	; 50
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e2 e3       	ldi	r30, 0x32	; 50
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	8c 93       	st	X, r24
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e2       	ldi	r26, 0x20	; 32
    222e:	b1 e4       	ldi	r27, 0x41	; 65
    2230:	8d 8b       	std	Y+21, r24	; 0x15
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	af 8b       	std	Y+23, r26	; 0x17
    2236:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	2b ea       	ldi	r18, 0xAB	; 171
    2242:	3a ea       	ldi	r19, 0xAA	; 170
    2244:	4a e2       	ldi	r20, 0x2A	; 42
    2246:	50 e4       	ldi	r21, 0x40	; 64
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	9a 8b       	std	Y+18, r25	; 0x12
    2254:	ab 8b       	std	Y+19, r26	; 0x13
    2256:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2258:	69 89       	ldd	r22, Y+17	; 0x11
    225a:	7a 89       	ldd	r23, Y+18	; 0x12
    225c:	8b 89       	ldd	r24, Y+19	; 0x13
    225e:	9c 89       	ldd	r25, Y+20	; 0x14
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	1c f4       	brge	.+6      	; 0x2276 <HCSR04_vGet_Reading+0x9e>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	88 8b       	std	Y+16, r24	; 0x10
    2274:	91 c0       	rjmp	.+290    	; 0x2398 <HCSR04_vGet_Reading+0x1c0>
	else if (__tmp > 255)
    2276:	69 89       	ldd	r22, Y+17	; 0x11
    2278:	7a 89       	ldd	r23, Y+18	; 0x12
    227a:	8b 89       	ldd	r24, Y+19	; 0x13
    227c:	9c 89       	ldd	r25, Y+20	; 0x14
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	0c f0       	brlt	.+2      	; 0x2290 <HCSR04_vGet_Reading+0xb8>
    228e:	7b c0       	rjmp	.+246    	; 0x2386 <HCSR04_vGet_Reading+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8c 87       	std	Y+12, r24	; 0x0c
    22aa:	9d 87       	std	Y+13, r25	; 0x0d
    22ac:	ae 87       	std	Y+14, r26	; 0x0e
    22ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a ef       	ldi	r20, 0xFA	; 250
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	88 87       	std	Y+8, r24	; 0x08
    22ca:	99 87       	std	Y+9, r25	; 0x09
    22cc:	aa 87       	std	Y+10, r26	; 0x0a
    22ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22d0:	68 85       	ldd	r22, Y+8	; 0x08
    22d2:	79 85       	ldd	r23, Y+9	; 0x09
    22d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <HCSR04_vGet_Reading+0x11a>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9f 83       	std	Y+7, r25	; 0x07
    22ee:	8e 83       	std	Y+6, r24	; 0x06
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <HCSR04_vGet_Reading+0x198>
	else if (__tmp > 65535)
    22f2:	68 85       	ldd	r22, Y+8	; 0x08
    22f4:	79 85       	ldd	r23, Y+9	; 0x09
    22f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	4c f5       	brge	.+82     	; 0x235c <HCSR04_vGet_Reading+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	6c 85       	ldd	r22, Y+12	; 0x0c
    230c:	7d 85       	ldd	r23, Y+13	; 0x0d
    230e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2310:	9f 85       	ldd	r25, Y+15	; 0x0f
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9f 83       	std	Y+7, r25	; 0x07
    2330:	8e 83       	std	Y+6, r24	; 0x06
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <HCSR04_vGet_Reading+0x17a>
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9d 83       	std	Y+5, r25	; 0x05
    233a:	8c 83       	std	Y+4, r24	; 0x04
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <HCSR04_vGet_Reading+0x168>
    2344:	9d 83       	std	Y+5, r25	; 0x05
    2346:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	8e 81       	ldd	r24, Y+6	; 0x06
    234a:	9f 81       	ldd	r25, Y+7	; 0x07
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	9f 83       	std	Y+7, r25	; 0x07
    2350:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	69 f7       	brne	.-38     	; 0x2334 <HCSR04_vGet_Reading+0x15c>
    235a:	24 c0       	rjmp	.+72     	; 0x23a4 <HCSR04_vGet_Reading+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235c:	68 85       	ldd	r22, Y+8	; 0x08
    235e:	79 85       	ldd	r23, Y+9	; 0x09
    2360:	8a 85       	ldd	r24, Y+10	; 0x0a
    2362:	9b 85       	ldd	r25, Y+11	; 0x0b
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9f 83       	std	Y+7, r25	; 0x07
    236e:	8e 83       	std	Y+6, r24	; 0x06
    2370:	8e 81       	ldd	r24, Y+6	; 0x06
    2372:	9f 81       	ldd	r25, Y+7	; 0x07
    2374:	9b 83       	std	Y+3, r25	; 0x03
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <HCSR04_vGet_Reading+0x1a4>
    2380:	9b 83       	std	Y+3, r25	; 0x03
    2382:	8a 83       	std	Y+2, r24	; 0x02
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <HCSR04_vGet_Reading+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2386:	69 89       	ldd	r22, Y+17	; 0x11
    2388:	7a 89       	ldd	r23, Y+18	; 0x12
    238a:	8b 89       	ldd	r24, Y+19	; 0x13
    238c:	9c 89       	ldd	r25, Y+20	; 0x14
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	88 8b       	std	Y+16, r24	; 0x10
    2398:	88 89       	ldd	r24, Y+16	; 0x10
    239a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	8a 95       	dec	r24
    23a0:	f1 f7       	brne	.-4      	; 0x239e <HCSR04_vGet_Reading+0x1c6>
    23a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	CLEAR_BIT(PORTD_REG , 7);
    23a4:	a2 e3       	ldi	r26, 0x32	; 50
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e2 e3       	ldi	r30, 0x32	; 50
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 77       	andi	r24, 0x7F	; 127
    23b0:	8c 93       	st	X, r24
	//DIO_vSetPinValue(TRIG_PORT, TRIG_PIN, LOW);

	/* Wait for rising edge from ECHO */
	while(!(TIFR_REG & (1<<ICF1_PIN)));
    23b2:	e8 e5       	ldi	r30, 0x58	; 88
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	88 2f       	mov	r24, r24
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	80 72       	andi	r24, 0x20	; 32
    23be:	90 70       	andi	r25, 0x00	; 0
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	b9 f3       	breq	.-18     	; 0x23b2 <HCSR04_vGet_Reading+0x1da>
	TCNT1_REG = 0; // Clear timer register
    23c4:	ec e4       	ldi	r30, 0x4C	; 76
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	11 82       	std	Z+1, r1	; 0x01
    23ca:	10 82       	st	Z, r1
	timer1_counter = 0;
    23cc:	10 92 14 04 	sts	0x0414, r1
    23d0:	10 92 13 04 	sts	0x0413, r1
	CLEAR_ICU_FLAG(); // clear ICP flag
    23d4:	e8 e5       	ldi	r30, 0x58	; 88
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	80 83       	st	Z, r24
	ICU_Falling_Edge(); // Set ICU to falling edge trigger
    23dc:	ae e4       	ldi	r26, 0x4E	; 78
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ee e4       	ldi	r30, 0x4E	; 78
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8f 7b       	andi	r24, 0xBF	; 191
    23e8:	8c 93       	st	X, r24

	/* Wait for falling edge from ECHO */
	while(!(TIFR_REG & (1<<ICF1_PIN)));
    23ea:	e8 e5       	ldi	r30, 0x58	; 88
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	80 72       	andi	r24, 0x20	; 32
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	b9 f3       	breq	.-18     	; 0x23ea <HCSR04_vGet_Reading+0x212>
	/* Read ICU Register */
	ICR_Reg_Value = (Uint16_t)(ICR1L_REG + (ICR1H_REG << 8));
    23fc:	e6 e4       	ldi	r30, 0x46	; 70
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	e7 e4       	ldi	r30, 0x47	; 71
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	98 2f       	mov	r25, r24
    2412:	88 27       	eor	r24, r24
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
	CLEAR_ICU_FLAG(); // Clear ICU interrupt flag
    241c:	e8 e5       	ldi	r30, 0x58	; 88
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 e2       	ldi	r24, 0x20	; 32
    2422:	80 83       	st	Z, r24

	/* Get total time for logic HIGH */
	Elapsed_Time = (Uint32_t)(ICR_Reg_Value + (65535 * timer1_counter));
    2424:	89 a1       	ldd	r24, Y+33	; 0x21
    2426:	9a a1       	ldd	r25, Y+34	; 0x22
    2428:	7c 01       	movw	r14, r24
    242a:	00 e0       	ldi	r16, 0x00	; 0
    242c:	10 e0       	ldi	r17, 0x00	; 0
    242e:	80 91 13 04 	lds	r24, 0x0413
    2432:	90 91 14 04 	lds	r25, 0x0414
    2436:	cc 01       	movw	r24, r24
    2438:	a0 e0       	ldi	r26, 0x00	; 0
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	2f ef       	ldi	r18, 0xFF	; 255
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__mulsi3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	8e 0d       	add	r24, r14
    2452:	9f 1d       	adc	r25, r15
    2454:	a0 1f       	adc	r26, r16
    2456:	b1 1f       	adc	r27, r17
    2458:	8d 8f       	std	Y+29, r24	; 0x1d
    245a:	9e 8f       	std	Y+30, r25	; 0x1e
    245c:	af 8f       	std	Y+31, r26	; 0x1f
    245e:	b8 a3       	std	Y+32, r27	; 0x20

	/* Calculate distance */
	/* 8MHZ Timer Frequency, Speed of Sound = 343 m/s */
	Real_Distance = (float64_t)Elapsed_Time / 466.47;
    2460:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2462:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2466:	98 a1       	ldd	r25, Y+32	; 0x20
    2468:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	29 e2       	ldi	r18, 0x29	; 41
    2476:	3c e3       	ldi	r19, 0x3C	; 60
    2478:	49 ee       	ldi	r20, 0xE9	; 233
    247a:	53 e4       	ldi	r21, 0x43	; 67
    247c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	89 8f       	std	Y+25, r24	; 0x19
    2486:	9a 8f       	std	Y+26, r25	; 0x1a
    2488:	ab 8f       	std	Y+27, r26	; 0x1b
    248a:	bc 8f       	std	Y+28, r27	; 0x1c
	*Copy_f64Sensor_Reading = Real_Distance;
    248c:	eb a1       	ldd	r30, Y+35	; 0x23
    248e:	fc a1       	ldd	r31, Y+36	; 0x24
    2490:	89 8d       	ldd	r24, Y+25	; 0x19
    2492:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2494:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2496:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
}
    24a0:	a4 96       	adiw	r28, 0x24	; 36
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	08 95       	ret

000024ba <IR_SENSOR_init>:


#include "irSensor_Interface.h"

ENU_IR_SENSOR_systemState_t    IR_SENSOR_init(ST_IR_SENSOR_cfg_t *ptr_irCfg)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <IR_SENSOR_init+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <IR_SENSOR_init+0x8>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
	ENU_IR_SENSOR_systemState_t ret = IR_SENSOR_NOK;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_irCfg == PTR_NULL)
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	19 f4       	brne	.+6      	; 0x24dc <IR_SENSOR_init+0x22>
	{
		ret = IR_SENSOR_NOK;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	1f c0       	rjmp	.+62     	; 0x251a <IR_SENSOR_init+0x60>
		ST_pin_config_t irPin =
		{
			.direction = GPIO_DIRECTION_INPUT,
			.pin = ptr_irCfg->IR_pin,
			.port = ptr_irCfg->IR_port
		}; 
    24dc:	eb 81       	ldd	r30, Y+3	; 0x03
    24de:	fc 81       	ldd	r31, Y+4	; 0x04
    24e0:	81 81       	ldd	r24, Z+1	; 0x01
    24e2:	98 2f       	mov	r25, r24
    24e4:	97 70       	andi	r25, 0x07	; 7
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	80 81       	ld	r24, Z
    24ec:	28 2f       	mov	r18, r24
    24ee:	27 70       	andi	r18, 0x07	; 7
    24f0:	1a 82       	std	Y+2, r1	; 0x02
    24f2:	97 70       	andi	r25, 0x07	; 7
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	88 7f       	andi	r24, 0xF8	; 248
    24f8:	89 2b       	or	r24, r25
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	82 2f       	mov	r24, r18
    24fe:	87 70       	andi	r24, 0x07	; 7
    2500:	98 2f       	mov	r25, r24
    2502:	99 0f       	add	r25, r25
    2504:	99 0f       	add	r25, r25
    2506:	99 0f       	add	r25, r25
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	87 7c       	andi	r24, 0xC7	; 199
    250c:	89 2b       	or	r24, r25
    250e:	8a 83       	std	Y+2, r24	; 0x02
		GPIO_pin_intialize(&irPin);
    2510:	ce 01       	movw	r24, r28
    2512:	02 96       	adiw	r24, 0x02	; 2
    2514:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_pin_intialize>
		ret = IR_SENSOR_OK;
    2518:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    251a:	89 81       	ldd	r24, Y+1	; 0x01
}
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <IR_SENSOR_readData>:
ENU_IR_SENSOR_systemState_t    IR_SENSOR_readData(ST_IR_SENSOR_cfg_t *ptr_irCfg , ENU_IR_SENSOR_surfaceState_t *irState)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	27 97       	sbiw	r28, 0x07	; 7
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	8c 83       	std	Y+4, r24	; 0x04
    2542:	7f 83       	std	Y+7, r23	; 0x07
    2544:	6e 83       	std	Y+6, r22	; 0x06
	ENU_IR_SENSOR_systemState_t ret = IR_SENSOR_NOK;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_irCfg == PTR_NULL)
    254a:	8c 81       	ldd	r24, Y+4	; 0x04
    254c:	9d 81       	ldd	r25, Y+5	; 0x05
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	19 f4       	brne	.+6      	; 0x2558 <IR_SENSOR_readData+0x2e>
	{
		ret = IR_SENSOR_NOK;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	31 c0       	rjmp	.+98     	; 0x25ba <IR_SENSOR_readData+0x90>
		ST_pin_config_t irPin =
		{
			.direction = GPIO_DIRECTION_INPUT,
			.pin = ptr_irCfg->IR_pin,
			.port = ptr_irCfg->IR_port
		};
    2558:	ec 81       	ldd	r30, Y+4	; 0x04
    255a:	fd 81       	ldd	r31, Y+5	; 0x05
    255c:	81 81       	ldd	r24, Z+1	; 0x01
    255e:	98 2f       	mov	r25, r24
    2560:	97 70       	andi	r25, 0x07	; 7
    2562:	ec 81       	ldd	r30, Y+4	; 0x04
    2564:	fd 81       	ldd	r31, Y+5	; 0x05
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	27 70       	andi	r18, 0x07	; 7
    256c:	1b 82       	std	Y+3, r1	; 0x03
    256e:	97 70       	andi	r25, 0x07	; 7
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	88 7f       	andi	r24, 0xF8	; 248
    2574:	89 2b       	or	r24, r25
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	82 2f       	mov	r24, r18
    257a:	87 70       	andi	r24, 0x07	; 7
    257c:	98 2f       	mov	r25, r24
    257e:	99 0f       	add	r25, r25
    2580:	99 0f       	add	r25, r25
    2582:	99 0f       	add	r25, r25
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	87 7c       	andi	r24, 0xC7	; 199
    2588:	89 2b       	or	r24, r25
    258a:	8b 83       	std	Y+3, r24	; 0x03
		GPIO_pin_read_logic(&irPin , &irPinState);
    258c:	ce 01       	movw	r24, r28
    258e:	03 96       	adiw	r24, 0x03	; 3
    2590:	9e 01       	movw	r18, r28
    2592:	2e 5f       	subi	r18, 0xFE	; 254
    2594:	3f 4f       	sbci	r19, 0xFF	; 255
    2596:	b9 01       	movw	r22, r18
    2598:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <GPIO_pin_read_logic>
		
		if(irPinState == GPIO_LOGIC_HIGH)
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	21 f4       	brne	.+8      	; 0x25aa <IR_SENSOR_readData+0x80>
		{
			*irState = IR_SENSOR_ON_WHITE;
    25a2:	ee 81       	ldd	r30, Y+6	; 0x06
    25a4:	ff 81       	ldd	r31, Y+7	; 0x07
    25a6:	10 82       	st	Z, r1
    25a8:	07 c0       	rjmp	.+14     	; 0x25b8 <IR_SENSOR_readData+0x8e>
		}
		else if(irPinState == GPIO_LOGIC_LOW)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	88 23       	and	r24, r24
    25ae:	21 f4       	brne	.+8      	; 0x25b8 <IR_SENSOR_readData+0x8e>
		{
			*irState = IR_SENSOR_ON_BLACK;
    25b0:	ee 81       	ldd	r30, Y+6	; 0x06
    25b2:	ff 81       	ldd	r31, Y+7	; 0x07
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	80 83       	st	Z, r24
		}
		else
		{
			/*do nothing */
		}
		ret = IR_SENSOR_OK;
    25b8:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;	
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	27 96       	adiw	r28, 0x07	; 7
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <DCM_init>:
 */ 

#include "dc_motor_interface.h"

ENU_DCM_systemState_t DCM_init(ST_DCM_cfg_t *dcmCfg)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	27 97       	sbiw	r28, 0x07	; 7
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	9f 83       	std	Y+7, r25	; 0x07
    25e4:	8e 83       	std	Y+6, r24	; 0x06
	ENU_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
    25e6:	8e 81       	ldd	r24, Y+6	; 0x06
    25e8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <DCM_init+0x26>
	{
		ret = DCM_NOK;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	b2 c0       	rjmp	.+356    	; 0x2758 <DCM_init+0x18a>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_FORWARD)
    25f4:	ee 81       	ldd	r30, Y+6	; 0x06
    25f6:	ff 81       	ldd	r31, Y+7	; 0x07
    25f8:	85 81       	ldd	r24, Z+5	; 0x05
    25fa:	88 23       	and	r24, r24
    25fc:	09 f0       	breq	.+2      	; 0x2600 <DCM_init+0x32>
    25fe:	52 c0       	rjmp	.+164    	; 0x26a4 <DCM_init+0xd6>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    2600:	ee 81       	ldd	r30, Y+6	; 0x06
    2602:	ff 81       	ldd	r31, Y+7	; 0x07
    2604:	80 81       	ld	r24, Z
    2606:	98 2f       	mov	r25, r24
    2608:	97 70       	andi	r25, 0x07	; 7
    260a:	ee 81       	ldd	r30, Y+6	; 0x06
    260c:	ff 81       	ldd	r31, Y+7	; 0x07
    260e:	81 81       	ldd	r24, Z+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	27 70       	andi	r18, 0x07	; 7
    2614:	ee 81       	ldd	r30, Y+6	; 0x06
    2616:	ff 81       	ldd	r31, Y+7	; 0x07
    2618:	84 81       	ldd	r24, Z+4	; 0x04
    261a:	38 2f       	mov	r19, r24
    261c:	31 70       	andi	r19, 0x01	; 1
    261e:	97 70       	andi	r25, 0x07	; 7
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	88 7f       	andi	r24, 0xF8	; 248
    2624:	89 2b       	or	r24, r25
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	82 2f       	mov	r24, r18
    262a:	87 70       	andi	r24, 0x07	; 7
    262c:	98 2f       	mov	r25, r24
    262e:	99 0f       	add	r25, r25
    2630:	99 0f       	add	r25, r25
    2632:	99 0f       	add	r25, r25
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	87 7c       	andi	r24, 0xC7	; 199
    2638:	89 2b       	or	r24, r25
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	80 64       	ori	r24, 0x40	; 64
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	93 2f       	mov	r25, r19
    2644:	97 95       	ror	r25
    2646:	99 27       	eor	r25, r25
    2648:	97 95       	ror	r25
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	8f 77       	andi	r24, 0x7F	; 127
    264e:	89 2b       	or	r24, r25
    2650:	8a 83       	std	Y+2, r24	; 0x02
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2652:	ee 81       	ldd	r30, Y+6	; 0x06
    2654:	ff 81       	ldd	r31, Y+7	; 0x07
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	98 2f       	mov	r25, r24
    265a:	97 70       	andi	r25, 0x07	; 7
    265c:	ee 81       	ldd	r30, Y+6	; 0x06
    265e:	ff 81       	ldd	r31, Y+7	; 0x07
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	28 2f       	mov	r18, r24
    2664:	27 70       	andi	r18, 0x07	; 7
    2666:	97 70       	andi	r25, 0x07	; 7
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	88 7f       	andi	r24, 0xF8	; 248
    266c:	89 2b       	or	r24, r25
    266e:	8b 83       	std	Y+3, r24	; 0x03
    2670:	82 2f       	mov	r24, r18
    2672:	87 70       	andi	r24, 0x07	; 7
    2674:	98 2f       	mov	r25, r24
    2676:	99 0f       	add	r25, r25
    2678:	99 0f       	add	r25, r25
    267a:	99 0f       	add	r25, r25
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	87 7c       	andi	r24, 0xC7	; 199
    2680:	89 2b       	or	r24, r25
    2682:	8b 83       	std	Y+3, r24	; 0x03
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	80 64       	ori	r24, 0x40	; 64
    2688:	8b 83       	std	Y+3, r24	; 0x03
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	8f 77       	andi	r24, 0x7F	; 127
    268e:	8b 83       	std	Y+3, r24	; 0x03
			GPIO_pin_intialize(&dcm5vPinCfg);
    2690:	ce 01       	movw	r24, r28
    2692:	02 96       	adiw	r24, 0x02	; 2
    2694:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_pin_intialize>
			GPIO_pin_intialize(&dcmGndPinCfg);
    2698:	ce 01       	movw	r24, r28
    269a:	03 96       	adiw	r24, 0x03	; 3
    269c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_pin_intialize>
			ret = DCM_OK;			
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	5a c0       	rjmp	.+180    	; 0x2758 <DCM_init+0x18a>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_BACKWORD)
    26a4:	ee 81       	ldd	r30, Y+6	; 0x06
    26a6:	ff 81       	ldd	r31, Y+7	; 0x07
    26a8:	85 81       	ldd	r24, Z+5	; 0x05
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <DCM_init+0xe2>
    26ae:	52 c0       	rjmp	.+164    	; 0x2754 <DCM_init+0x186>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    26b0:	ee 81       	ldd	r30, Y+6	; 0x06
    26b2:	ff 81       	ldd	r31, Y+7	; 0x07
    26b4:	80 81       	ld	r24, Z
    26b6:	98 2f       	mov	r25, r24
    26b8:	97 70       	andi	r25, 0x07	; 7
    26ba:	ee 81       	ldd	r30, Y+6	; 0x06
    26bc:	ff 81       	ldd	r31, Y+7	; 0x07
    26be:	81 81       	ldd	r24, Z+1	; 0x01
    26c0:	28 2f       	mov	r18, r24
    26c2:	27 70       	andi	r18, 0x07	; 7
    26c4:	97 70       	andi	r25, 0x07	; 7
    26c6:	8c 81       	ldd	r24, Y+4	; 0x04
    26c8:	88 7f       	andi	r24, 0xF8	; 248
    26ca:	89 2b       	or	r24, r25
    26cc:	8c 83       	std	Y+4, r24	; 0x04
    26ce:	82 2f       	mov	r24, r18
    26d0:	87 70       	andi	r24, 0x07	; 7
    26d2:	98 2f       	mov	r25, r24
    26d4:	99 0f       	add	r25, r25
    26d6:	99 0f       	add	r25, r25
    26d8:	99 0f       	add	r25, r25
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	87 7c       	andi	r24, 0xC7	; 199
    26de:	89 2b       	or	r24, r25
    26e0:	8c 83       	std	Y+4, r24	; 0x04
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	80 64       	ori	r24, 0x40	; 64
    26e6:	8c 83       	std	Y+4, r24	; 0x04
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	8f 77       	andi	r24, 0x7F	; 127
    26ec:	8c 83       	std	Y+4, r24	; 0x04
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    26ee:	ee 81       	ldd	r30, Y+6	; 0x06
    26f0:	ff 81       	ldd	r31, Y+7	; 0x07
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	98 2f       	mov	r25, r24
    26f6:	97 70       	andi	r25, 0x07	; 7
    26f8:	ee 81       	ldd	r30, Y+6	; 0x06
    26fa:	ff 81       	ldd	r31, Y+7	; 0x07
    26fc:	83 81       	ldd	r24, Z+3	; 0x03
    26fe:	28 2f       	mov	r18, r24
    2700:	27 70       	andi	r18, 0x07	; 7
    2702:	ee 81       	ldd	r30, Y+6	; 0x06
    2704:	ff 81       	ldd	r31, Y+7	; 0x07
    2706:	84 81       	ldd	r24, Z+4	; 0x04
    2708:	38 2f       	mov	r19, r24
    270a:	31 70       	andi	r19, 0x01	; 1
    270c:	97 70       	andi	r25, 0x07	; 7
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	88 7f       	andi	r24, 0xF8	; 248
    2712:	89 2b       	or	r24, r25
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	82 2f       	mov	r24, r18
    2718:	87 70       	andi	r24, 0x07	; 7
    271a:	98 2f       	mov	r25, r24
    271c:	99 0f       	add	r25, r25
    271e:	99 0f       	add	r25, r25
    2720:	99 0f       	add	r25, r25
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	87 7c       	andi	r24, 0xC7	; 199
    2726:	89 2b       	or	r24, r25
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	8d 81       	ldd	r24, Y+5	; 0x05
    272c:	80 64       	ori	r24, 0x40	; 64
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	93 2f       	mov	r25, r19
    2732:	97 95       	ror	r25
    2734:	99 27       	eor	r25, r25
    2736:	97 95       	ror	r25
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	8f 77       	andi	r24, 0x7F	; 127
    273c:	89 2b       	or	r24, r25
    273e:	8d 83       	std	Y+5, r24	; 0x05
			GPIO_pin_intialize(&dcm5vPinCfg);
    2740:	ce 01       	movw	r24, r28
    2742:	04 96       	adiw	r24, 0x04	; 4
    2744:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_pin_intialize>
			GPIO_pin_intialize(&dcmGndPinCfg);
    2748:	ce 01       	movw	r24, r28
    274a:	05 96       	adiw	r24, 0x05	; 5
    274c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_pin_intialize>
			ret = DCM_OK;			
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <DCM_init+0x18a>
		}
		else
		{
			ret = DCM_NOK;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
}
    275a:	27 96       	adiw	r28, 0x07	; 7
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <DCM_turnOff>:
ENU_DCM_systemState_t DCM_turnOff(ST_DCM_cfg_t *dcmCfg)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	27 97       	sbiw	r28, 0x07	; 7
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9f 83       	std	Y+7, r25	; 0x07
    2782:	8e 83       	std	Y+6, r24	; 0x06
	ENU_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
    2784:	8e 81       	ldd	r24, Y+6	; 0x06
    2786:	9f 81       	ldd	r25, Y+7	; 0x07
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	19 f4       	brne	.+6      	; 0x2792 <DCM_turnOff+0x26>
	{
		ret = DCM_NOK;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	b6 c0       	rjmp	.+364    	; 0x28fe <DCM_turnOff+0x192>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_FORWARD)
    2792:	ee 81       	ldd	r30, Y+6	; 0x06
    2794:	ff 81       	ldd	r31, Y+7	; 0x07
    2796:	85 81       	ldd	r24, Z+5	; 0x05
    2798:	88 23       	and	r24, r24
    279a:	09 f0       	breq	.+2      	; 0x279e <DCM_turnOff+0x32>
    279c:	54 c0       	rjmp	.+168    	; 0x2846 <DCM_turnOff+0xda>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    279e:	ee 81       	ldd	r30, Y+6	; 0x06
    27a0:	ff 81       	ldd	r31, Y+7	; 0x07
    27a2:	80 81       	ld	r24, Z
    27a4:	98 2f       	mov	r25, r24
    27a6:	97 70       	andi	r25, 0x07	; 7
    27a8:	ee 81       	ldd	r30, Y+6	; 0x06
    27aa:	ff 81       	ldd	r31, Y+7	; 0x07
    27ac:	81 81       	ldd	r24, Z+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	27 70       	andi	r18, 0x07	; 7
    27b2:	ee 81       	ldd	r30, Y+6	; 0x06
    27b4:	ff 81       	ldd	r31, Y+7	; 0x07
    27b6:	84 81       	ldd	r24, Z+4	; 0x04
    27b8:	38 2f       	mov	r19, r24
    27ba:	31 70       	andi	r19, 0x01	; 1
    27bc:	97 70       	andi	r25, 0x07	; 7
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	88 7f       	andi	r24, 0xF8	; 248
    27c2:	89 2b       	or	r24, r25
    27c4:	8a 83       	std	Y+2, r24	; 0x02
    27c6:	82 2f       	mov	r24, r18
    27c8:	87 70       	andi	r24, 0x07	; 7
    27ca:	98 2f       	mov	r25, r24
    27cc:	99 0f       	add	r25, r25
    27ce:	99 0f       	add	r25, r25
    27d0:	99 0f       	add	r25, r25
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	87 7c       	andi	r24, 0xC7	; 199
    27d6:	89 2b       	or	r24, r25
    27d8:	8a 83       	std	Y+2, r24	; 0x02
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	80 64       	ori	r24, 0x40	; 64
    27de:	8a 83       	std	Y+2, r24	; 0x02
    27e0:	93 2f       	mov	r25, r19
    27e2:	97 95       	ror	r25
    27e4:	99 27       	eor	r25, r25
    27e6:	97 95       	ror	r25
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	8f 77       	andi	r24, 0x7F	; 127
    27ec:	89 2b       	or	r24, r25
    27ee:	8a 83       	std	Y+2, r24	; 0x02
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    27f0:	ee 81       	ldd	r30, Y+6	; 0x06
    27f2:	ff 81       	ldd	r31, Y+7	; 0x07
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	98 2f       	mov	r25, r24
    27f8:	97 70       	andi	r25, 0x07	; 7
    27fa:	ee 81       	ldd	r30, Y+6	; 0x06
    27fc:	ff 81       	ldd	r31, Y+7	; 0x07
    27fe:	83 81       	ldd	r24, Z+3	; 0x03
    2800:	28 2f       	mov	r18, r24
    2802:	27 70       	andi	r18, 0x07	; 7
    2804:	97 70       	andi	r25, 0x07	; 7
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	88 7f       	andi	r24, 0xF8	; 248
    280a:	89 2b       	or	r24, r25
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	82 2f       	mov	r24, r18
    2810:	87 70       	andi	r24, 0x07	; 7
    2812:	98 2f       	mov	r25, r24
    2814:	99 0f       	add	r25, r25
    2816:	99 0f       	add	r25, r25
    2818:	99 0f       	add	r25, r25
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	87 7c       	andi	r24, 0xC7	; 199
    281e:	89 2b       	or	r24, r25
    2820:	8b 83       	std	Y+3, r24	; 0x03
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	80 64       	ori	r24, 0x40	; 64
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	8f 77       	andi	r24, 0x7F	; 127
    282c:	8b 83       	std	Y+3, r24	; 0x03
			GPIO_pin_write_logic(&dcm5vPinCfg , GPIO_LOGIC_LOW);
    282e:	ce 01       	movw	r24, r28
    2830:	02 96       	adiw	r24, 0x02	; 2
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(&dcmGndPinCfg , GPIO_LOGIC_LOW);
    2838:	ce 01       	movw	r24, r28
    283a:	03 96       	adiw	r24, 0x03	; 3
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			ret = DCM_OK;
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	5c c0       	rjmp	.+184    	; 0x28fe <DCM_turnOff+0x192>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_BACKWORD)
    2846:	ee 81       	ldd	r30, Y+6	; 0x06
    2848:	ff 81       	ldd	r31, Y+7	; 0x07
    284a:	85 81       	ldd	r24, Z+5	; 0x05
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	09 f0       	breq	.+2      	; 0x2852 <DCM_turnOff+0xe6>
    2850:	54 c0       	rjmp	.+168    	; 0x28fa <DCM_turnOff+0x18e>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    2852:	ee 81       	ldd	r30, Y+6	; 0x06
    2854:	ff 81       	ldd	r31, Y+7	; 0x07
    2856:	80 81       	ld	r24, Z
    2858:	98 2f       	mov	r25, r24
    285a:	97 70       	andi	r25, 0x07	; 7
    285c:	ee 81       	ldd	r30, Y+6	; 0x06
    285e:	ff 81       	ldd	r31, Y+7	; 0x07
    2860:	81 81       	ldd	r24, Z+1	; 0x01
    2862:	28 2f       	mov	r18, r24
    2864:	27 70       	andi	r18, 0x07	; 7
    2866:	97 70       	andi	r25, 0x07	; 7
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	88 7f       	andi	r24, 0xF8	; 248
    286c:	89 2b       	or	r24, r25
    286e:	8c 83       	std	Y+4, r24	; 0x04
    2870:	82 2f       	mov	r24, r18
    2872:	87 70       	andi	r24, 0x07	; 7
    2874:	98 2f       	mov	r25, r24
    2876:	99 0f       	add	r25, r25
    2878:	99 0f       	add	r25, r25
    287a:	99 0f       	add	r25, r25
    287c:	8c 81       	ldd	r24, Y+4	; 0x04
    287e:	87 7c       	andi	r24, 0xC7	; 199
    2880:	89 2b       	or	r24, r25
    2882:	8c 83       	std	Y+4, r24	; 0x04
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	8c 83       	std	Y+4, r24	; 0x04
    288a:	8c 81       	ldd	r24, Y+4	; 0x04
    288c:	8f 77       	andi	r24, 0x7F	; 127
    288e:	8c 83       	std	Y+4, r24	; 0x04
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2890:	ee 81       	ldd	r30, Y+6	; 0x06
    2892:	ff 81       	ldd	r31, Y+7	; 0x07
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	98 2f       	mov	r25, r24
    2898:	97 70       	andi	r25, 0x07	; 7
    289a:	ee 81       	ldd	r30, Y+6	; 0x06
    289c:	ff 81       	ldd	r31, Y+7	; 0x07
    289e:	83 81       	ldd	r24, Z+3	; 0x03
    28a0:	28 2f       	mov	r18, r24
    28a2:	27 70       	andi	r18, 0x07	; 7
    28a4:	ee 81       	ldd	r30, Y+6	; 0x06
    28a6:	ff 81       	ldd	r31, Y+7	; 0x07
    28a8:	84 81       	ldd	r24, Z+4	; 0x04
    28aa:	38 2f       	mov	r19, r24
    28ac:	31 70       	andi	r19, 0x01	; 1
    28ae:	97 70       	andi	r25, 0x07	; 7
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	88 7f       	andi	r24, 0xF8	; 248
    28b4:	89 2b       	or	r24, r25
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	82 2f       	mov	r24, r18
    28ba:	87 70       	andi	r24, 0x07	; 7
    28bc:	98 2f       	mov	r25, r24
    28be:	99 0f       	add	r25, r25
    28c0:	99 0f       	add	r25, r25
    28c2:	99 0f       	add	r25, r25
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	87 7c       	andi	r24, 0xC7	; 199
    28c8:	89 2b       	or	r24, r25
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	80 64       	ori	r24, 0x40	; 64
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	93 2f       	mov	r25, r19
    28d4:	97 95       	ror	r25
    28d6:	99 27       	eor	r25, r25
    28d8:	97 95       	ror	r25
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	8f 77       	andi	r24, 0x7F	; 127
    28de:	89 2b       	or	r24, r25
    28e0:	8d 83       	std	Y+5, r24	; 0x05
			GPIO_pin_write_logic(&dcm5vPinCfg , GPIO_LOGIC_LOW);
    28e2:	ce 01       	movw	r24, r28
    28e4:	04 96       	adiw	r24, 0x04	; 4
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(&dcmGndPinCfg , GPIO_LOGIC_LOW);
    28ec:	ce 01       	movw	r24, r28
    28ee:	05 96       	adiw	r24, 0x05	; 5
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			ret = DCM_OK;
    28f6:	19 82       	std	Y+1, r1	; 0x01
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <DCM_turnOff+0x192>
		}
		else
		{
			ret = DCM_NOK;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2900:	27 96       	adiw	r28, 0x07	; 7
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <DCM_turnOn>:
ENU_DCM_systemState_t DCM_turnOn(ST_DCM_cfg_t *dcmCfg)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	27 97       	sbiw	r28, 0x07	; 7
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	9f 83       	std	Y+7, r25	; 0x07
    2928:	8e 83       	std	Y+6, r24	; 0x06
	ENU_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
    292a:	8e 81       	ldd	r24, Y+6	; 0x06
    292c:	9f 81       	ldd	r25, Y+7	; 0x07
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	19 f4       	brne	.+6      	; 0x2938 <DCM_turnOn+0x26>
	{
		ret = DCM_NOK;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	b6 c0       	rjmp	.+364    	; 0x2aa4 <DCM_turnOn+0x192>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_FORWARD)
    2938:	ee 81       	ldd	r30, Y+6	; 0x06
    293a:	ff 81       	ldd	r31, Y+7	; 0x07
    293c:	85 81       	ldd	r24, Z+5	; 0x05
    293e:	88 23       	and	r24, r24
    2940:	09 f0       	breq	.+2      	; 0x2944 <DCM_turnOn+0x32>
    2942:	54 c0       	rjmp	.+168    	; 0x29ec <DCM_turnOn+0xda>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    2944:	ee 81       	ldd	r30, Y+6	; 0x06
    2946:	ff 81       	ldd	r31, Y+7	; 0x07
    2948:	80 81       	ld	r24, Z
    294a:	98 2f       	mov	r25, r24
    294c:	97 70       	andi	r25, 0x07	; 7
    294e:	ee 81       	ldd	r30, Y+6	; 0x06
    2950:	ff 81       	ldd	r31, Y+7	; 0x07
    2952:	81 81       	ldd	r24, Z+1	; 0x01
    2954:	28 2f       	mov	r18, r24
    2956:	27 70       	andi	r18, 0x07	; 7
    2958:	ee 81       	ldd	r30, Y+6	; 0x06
    295a:	ff 81       	ldd	r31, Y+7	; 0x07
    295c:	84 81       	ldd	r24, Z+4	; 0x04
    295e:	38 2f       	mov	r19, r24
    2960:	31 70       	andi	r19, 0x01	; 1
    2962:	97 70       	andi	r25, 0x07	; 7
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	88 7f       	andi	r24, 0xF8	; 248
    2968:	89 2b       	or	r24, r25
    296a:	8a 83       	std	Y+2, r24	; 0x02
    296c:	82 2f       	mov	r24, r18
    296e:	87 70       	andi	r24, 0x07	; 7
    2970:	98 2f       	mov	r25, r24
    2972:	99 0f       	add	r25, r25
    2974:	99 0f       	add	r25, r25
    2976:	99 0f       	add	r25, r25
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	87 7c       	andi	r24, 0xC7	; 199
    297c:	89 2b       	or	r24, r25
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	80 64       	ori	r24, 0x40	; 64
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	93 2f       	mov	r25, r19
    2988:	97 95       	ror	r25
    298a:	99 27       	eor	r25, r25
    298c:	97 95       	ror	r25
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	8f 77       	andi	r24, 0x7F	; 127
    2992:	89 2b       	or	r24, r25
    2994:	8a 83       	std	Y+2, r24	; 0x02
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2996:	ee 81       	ldd	r30, Y+6	; 0x06
    2998:	ff 81       	ldd	r31, Y+7	; 0x07
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	98 2f       	mov	r25, r24
    299e:	97 70       	andi	r25, 0x07	; 7
    29a0:	ee 81       	ldd	r30, Y+6	; 0x06
    29a2:	ff 81       	ldd	r31, Y+7	; 0x07
    29a4:	83 81       	ldd	r24, Z+3	; 0x03
    29a6:	28 2f       	mov	r18, r24
    29a8:	27 70       	andi	r18, 0x07	; 7
    29aa:	97 70       	andi	r25, 0x07	; 7
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 7f       	andi	r24, 0xF8	; 248
    29b0:	89 2b       	or	r24, r25
    29b2:	8b 83       	std	Y+3, r24	; 0x03
    29b4:	82 2f       	mov	r24, r18
    29b6:	87 70       	andi	r24, 0x07	; 7
    29b8:	98 2f       	mov	r25, r24
    29ba:	99 0f       	add	r25, r25
    29bc:	99 0f       	add	r25, r25
    29be:	99 0f       	add	r25, r25
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	87 7c       	andi	r24, 0xC7	; 199
    29c4:	89 2b       	or	r24, r25
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	80 64       	ori	r24, 0x40	; 64
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	8f 77       	andi	r24, 0x7F	; 127
    29d2:	8b 83       	std	Y+3, r24	; 0x03
			GPIO_pin_write_logic(&dcm5vPinCfg , GPIO_LOGIC_HIGH);
    29d4:	ce 01       	movw	r24, r28
    29d6:	02 96       	adiw	r24, 0x02	; 2
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(&dcmGndPinCfg , GPIO_LOGIC_LOW);
    29de:	ce 01       	movw	r24, r28
    29e0:	03 96       	adiw	r24, 0x03	; 3
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			ret = DCM_OK;
    29e8:	19 82       	std	Y+1, r1	; 0x01
    29ea:	5c c0       	rjmp	.+184    	; 0x2aa4 <DCM_turnOn+0x192>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_BACKWORD)
    29ec:	ee 81       	ldd	r30, Y+6	; 0x06
    29ee:	ff 81       	ldd	r31, Y+7	; 0x07
    29f0:	85 81       	ldd	r24, Z+5	; 0x05
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <DCM_turnOn+0xe6>
    29f6:	54 c0       	rjmp	.+168    	; 0x2aa0 <DCM_turnOn+0x18e>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    29f8:	ee 81       	ldd	r30, Y+6	; 0x06
    29fa:	ff 81       	ldd	r31, Y+7	; 0x07
    29fc:	80 81       	ld	r24, Z
    29fe:	98 2f       	mov	r25, r24
    2a00:	97 70       	andi	r25, 0x07	; 7
    2a02:	ee 81       	ldd	r30, Y+6	; 0x06
    2a04:	ff 81       	ldd	r31, Y+7	; 0x07
    2a06:	81 81       	ldd	r24, Z+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	27 70       	andi	r18, 0x07	; 7
    2a0c:	97 70       	andi	r25, 0x07	; 7
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	88 7f       	andi	r24, 0xF8	; 248
    2a12:	89 2b       	or	r24, r25
    2a14:	8c 83       	std	Y+4, r24	; 0x04
    2a16:	82 2f       	mov	r24, r18
    2a18:	87 70       	andi	r24, 0x07	; 7
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	99 0f       	add	r25, r25
    2a1e:	99 0f       	add	r25, r25
    2a20:	99 0f       	add	r25, r25
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	87 7c       	andi	r24, 0xC7	; 199
    2a26:	89 2b       	or	r24, r25
    2a28:	8c 83       	std	Y+4, r24	; 0x04
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	80 64       	ori	r24, 0x40	; 64
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	8f 77       	andi	r24, 0x7F	; 127
    2a34:	8c 83       	std	Y+4, r24	; 0x04
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2a36:	ee 81       	ldd	r30, Y+6	; 0x06
    2a38:	ff 81       	ldd	r31, Y+7	; 0x07
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	98 2f       	mov	r25, r24
    2a3e:	97 70       	andi	r25, 0x07	; 7
    2a40:	ee 81       	ldd	r30, Y+6	; 0x06
    2a42:	ff 81       	ldd	r31, Y+7	; 0x07
    2a44:	83 81       	ldd	r24, Z+3	; 0x03
    2a46:	28 2f       	mov	r18, r24
    2a48:	27 70       	andi	r18, 0x07	; 7
    2a4a:	ee 81       	ldd	r30, Y+6	; 0x06
    2a4c:	ff 81       	ldd	r31, Y+7	; 0x07
    2a4e:	84 81       	ldd	r24, Z+4	; 0x04
    2a50:	38 2f       	mov	r19, r24
    2a52:	31 70       	andi	r19, 0x01	; 1
    2a54:	97 70       	andi	r25, 0x07	; 7
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	88 7f       	andi	r24, 0xF8	; 248
    2a5a:	89 2b       	or	r24, r25
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	82 2f       	mov	r24, r18
    2a60:	87 70       	andi	r24, 0x07	; 7
    2a62:	98 2f       	mov	r25, r24
    2a64:	99 0f       	add	r25, r25
    2a66:	99 0f       	add	r25, r25
    2a68:	99 0f       	add	r25, r25
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	87 7c       	andi	r24, 0xC7	; 199
    2a6e:	89 2b       	or	r24, r25
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	80 64       	ori	r24, 0x40	; 64
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	93 2f       	mov	r25, r19
    2a7a:	97 95       	ror	r25
    2a7c:	99 27       	eor	r25, r25
    2a7e:	97 95       	ror	r25
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	8f 77       	andi	r24, 0x7F	; 127
    2a84:	89 2b       	or	r24, r25
    2a86:	8d 83       	std	Y+5, r24	; 0x05
			GPIO_pin_write_logic(&dcm5vPinCfg , GPIO_LOGIC_LOW);
    2a88:	ce 01       	movw	r24, r28
    2a8a:	04 96       	adiw	r24, 0x04	; 4
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			GPIO_pin_write_logic(&dcmGndPinCfg , GPIO_LOGIC_HIGH);
    2a92:	ce 01       	movw	r24, r28
    2a94:	05 96       	adiw	r24, 0x05	; 5
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_pin_write_logic>
			ret = DCM_OK;
    2a9c:	19 82       	std	Y+1, r1	; 0x01
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <DCM_turnOn+0x192>
		}
		else
		{
			ret = DCM_NOK;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa6:	27 96       	adiw	r28, 0x07	; 7
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <DCM_changeDirection>:

ENU_DCM_systemState_t DCM_changeDirection(ST_DCM_cfg_t *dcmCfg , ENU_DCM_direction_t dcmDirction)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	28 97       	sbiw	r28, 0x08	; 8
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	9f 83       	std	Y+7, r25	; 0x07
    2ace:	8e 83       	std	Y+6, r24	; 0x06
    2ad0:	68 87       	std	Y+8, r22	; 0x08
	ENU_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	19 f4       	brne	.+6      	; 0x2ae0 <DCM_changeDirection+0x28>
	{
		ret = DCM_NOK;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	a6 c0       	rjmp	.+332    	; 0x2c2c <DCM_changeDirection+0x174>
	}
	else
	{
		if(dcmDirction == DCM_DIR_FORWARD)
    2ae0:	88 85       	ldd	r24, Y+8	; 0x08
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <DCM_changeDirection+0x30>
    2ae6:	4e c0       	rjmp	.+156    	; 0x2b84 <DCM_changeDirection+0xcc>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    2ae8:	ee 81       	ldd	r30, Y+6	; 0x06
    2aea:	ff 81       	ldd	r31, Y+7	; 0x07
    2aec:	80 81       	ld	r24, Z
    2aee:	98 2f       	mov	r25, r24
    2af0:	97 70       	andi	r25, 0x07	; 7
    2af2:	ee 81       	ldd	r30, Y+6	; 0x06
    2af4:	ff 81       	ldd	r31, Y+7	; 0x07
    2af6:	81 81       	ldd	r24, Z+1	; 0x01
    2af8:	28 2f       	mov	r18, r24
    2afa:	27 70       	andi	r18, 0x07	; 7
    2afc:	ee 81       	ldd	r30, Y+6	; 0x06
    2afe:	ff 81       	ldd	r31, Y+7	; 0x07
    2b00:	84 81       	ldd	r24, Z+4	; 0x04
    2b02:	38 2f       	mov	r19, r24
    2b04:	31 70       	andi	r19, 0x01	; 1
    2b06:	97 70       	andi	r25, 0x07	; 7
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	88 7f       	andi	r24, 0xF8	; 248
    2b0c:	89 2b       	or	r24, r25
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	82 2f       	mov	r24, r18
    2b12:	87 70       	andi	r24, 0x07	; 7
    2b14:	98 2f       	mov	r25, r24
    2b16:	99 0f       	add	r25, r25
    2b18:	99 0f       	add	r25, r25
    2b1a:	99 0f       	add	r25, r25
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	87 7c       	andi	r24, 0xC7	; 199
    2b20:	89 2b       	or	r24, r25
    2b22:	8a 83       	std	Y+2, r24	; 0x02
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	80 64       	ori	r24, 0x40	; 64
    2b28:	8a 83       	std	Y+2, r24	; 0x02
    2b2a:	93 2f       	mov	r25, r19
    2b2c:	97 95       	ror	r25
    2b2e:	99 27       	eor	r25, r25
    2b30:	97 95       	ror	r25
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	8f 77       	andi	r24, 0x7F	; 127
    2b36:	89 2b       	or	r24, r25
    2b38:	8a 83       	std	Y+2, r24	; 0x02
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2b3a:	ee 81       	ldd	r30, Y+6	; 0x06
    2b3c:	ff 81       	ldd	r31, Y+7	; 0x07
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	98 2f       	mov	r25, r24
    2b42:	97 70       	andi	r25, 0x07	; 7
    2b44:	ee 81       	ldd	r30, Y+6	; 0x06
    2b46:	ff 81       	ldd	r31, Y+7	; 0x07
    2b48:	83 81       	ldd	r24, Z+3	; 0x03
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	27 70       	andi	r18, 0x07	; 7
    2b4e:	97 70       	andi	r25, 0x07	; 7
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	88 7f       	andi	r24, 0xF8	; 248
    2b54:	89 2b       	or	r24, r25
    2b56:	8b 83       	std	Y+3, r24	; 0x03
    2b58:	82 2f       	mov	r24, r18
    2b5a:	87 70       	andi	r24, 0x07	; 7
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	99 0f       	add	r25, r25
    2b60:	99 0f       	add	r25, r25
    2b62:	99 0f       	add	r25, r25
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	87 7c       	andi	r24, 0xC7	; 199
    2b68:	89 2b       	or	r24, r25
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	80 64       	ori	r24, 0x40	; 64
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	8f 77       	andi	r24, 0x7F	; 127
    2b76:	8b 83       	std	Y+3, r24	; 0x03
			dcmCfg->DCM_defaultDirection = dcmDirction;
    2b78:	ee 81       	ldd	r30, Y+6	; 0x06
    2b7a:	ff 81       	ldd	r31, Y+7	; 0x07
    2b7c:	88 85       	ldd	r24, Y+8	; 0x08
    2b7e:	85 83       	std	Z+5, r24	; 0x05
			ret = DCM_OK;
    2b80:	19 82       	std	Y+1, r1	; 0x01
    2b82:	54 c0       	rjmp	.+168    	; 0x2c2c <DCM_changeDirection+0x174>
		}
		else if(dcmDirction == DCM_DIR_BACKWORD)
    2b84:	88 85       	ldd	r24, Y+8	; 0x08
    2b86:	81 30       	cpi	r24, 0x01	; 1
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <DCM_changeDirection+0xd4>
    2b8a:	4e c0       	rjmp	.+156    	; 0x2c28 <DCM_changeDirection+0x170>
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = GPIO_LOGIC_LOW,
				.pin = dcmCfg->DCM_5vPin,
				.port = dcmCfg->DCM_5vPort
			};
    2b8c:	ee 81       	ldd	r30, Y+6	; 0x06
    2b8e:	ff 81       	ldd	r31, Y+7	; 0x07
    2b90:	80 81       	ld	r24, Z
    2b92:	98 2f       	mov	r25, r24
    2b94:	97 70       	andi	r25, 0x07	; 7
    2b96:	ee 81       	ldd	r30, Y+6	; 0x06
    2b98:	ff 81       	ldd	r31, Y+7	; 0x07
    2b9a:	81 81       	ldd	r24, Z+1	; 0x01
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	27 70       	andi	r18, 0x07	; 7
    2ba0:	97 70       	andi	r25, 0x07	; 7
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	88 7f       	andi	r24, 0xF8	; 248
    2ba6:	89 2b       	or	r24, r25
    2ba8:	8c 83       	std	Y+4, r24	; 0x04
    2baa:	82 2f       	mov	r24, r18
    2bac:	87 70       	andi	r24, 0x07	; 7
    2bae:	98 2f       	mov	r25, r24
    2bb0:	99 0f       	add	r25, r25
    2bb2:	99 0f       	add	r25, r25
    2bb4:	99 0f       	add	r25, r25
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	87 7c       	andi	r24, 0xC7	; 199
    2bba:	89 2b       	or	r24, r25
    2bbc:	8c 83       	std	Y+4, r24	; 0x04
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	80 64       	ori	r24, 0x40	; 64
    2bc2:	8c 83       	std	Y+4, r24	; 0x04
    2bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc6:	8f 77       	andi	r24, 0x7F	; 127
    2bc8:	8c 83       	std	Y+4, r24	; 0x04
			{
				.direction = GPIO_DIRECTION_OUTPUT,
				.logic = dcmCfg->DCM_intialState,
				.pin = dcmCfg->DCM_gndPin,
				.port = dcmCfg->DCM_gndPort
			};
    2bca:	ee 81       	ldd	r30, Y+6	; 0x06
    2bcc:	ff 81       	ldd	r31, Y+7	; 0x07
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	97 70       	andi	r25, 0x07	; 7
    2bd4:	ee 81       	ldd	r30, Y+6	; 0x06
    2bd6:	ff 81       	ldd	r31, Y+7	; 0x07
    2bd8:	83 81       	ldd	r24, Z+3	; 0x03
    2bda:	28 2f       	mov	r18, r24
    2bdc:	27 70       	andi	r18, 0x07	; 7
    2bde:	ee 81       	ldd	r30, Y+6	; 0x06
    2be0:	ff 81       	ldd	r31, Y+7	; 0x07
    2be2:	84 81       	ldd	r24, Z+4	; 0x04
    2be4:	38 2f       	mov	r19, r24
    2be6:	31 70       	andi	r19, 0x01	; 1
    2be8:	97 70       	andi	r25, 0x07	; 7
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	88 7f       	andi	r24, 0xF8	; 248
    2bee:	89 2b       	or	r24, r25
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	82 2f       	mov	r24, r18
    2bf4:	87 70       	andi	r24, 0x07	; 7
    2bf6:	98 2f       	mov	r25, r24
    2bf8:	99 0f       	add	r25, r25
    2bfa:	99 0f       	add	r25, r25
    2bfc:	99 0f       	add	r25, r25
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	87 7c       	andi	r24, 0xC7	; 199
    2c02:	89 2b       	or	r24, r25
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	80 64       	ori	r24, 0x40	; 64
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	93 2f       	mov	r25, r19
    2c0e:	97 95       	ror	r25
    2c10:	99 27       	eor	r25, r25
    2c12:	97 95       	ror	r25
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	8f 77       	andi	r24, 0x7F	; 127
    2c18:	89 2b       	or	r24, r25
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
			dcmCfg->DCM_defaultDirection = dcmDirction;
    2c1c:	ee 81       	ldd	r30, Y+6	; 0x06
    2c1e:	ff 81       	ldd	r31, Y+7	; 0x07
    2c20:	88 85       	ldd	r24, Y+8	; 0x08
    2c22:	85 83       	std	Z+5, r24	; 0x05
			ret = DCM_OK;
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DCM_changeDirection+0x174>
		}
		else
		{
			ret = DCM_NOK;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;	
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c2e:	28 96       	adiw	r28, 0x08	; 8
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <BLUETOOTH_init>:


#include "bluetooth_interface.h"

void BLUETOOTH_init(void)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
	UART_init(9600);
    2c48:	60 e8       	ldi	r22, 0x80	; 128
    2c4a:	75 e2       	ldi	r23, 0x25	; 37
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_init>
}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <BLUETOOTH_ReceiveData>:

Uint8_t BLUETOOTH_ReceiveData(void)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
	Uint8_t data;
	data = UART_RxChar();
    2c64:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <UART_RxChar>
    2c68:	89 83       	std	Y+1, r24	; 0x01
	return data;
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <BLUETOOTH_vSendData>:
void BLUETOOTH_vSendData(Uint8_t LOCAL_Uint8_tData)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	0f 92       	push	r0
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	89 83       	std	Y+1, r24	; 0x01
	UART_TxChar(LOCAL_Uint8_tData);
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <UART_TxChar>
}
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <BLUETOOTH_send>:
void BLUETOOTH_send(Uint8_t *data_to_send)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <BLUETOOTH_send+0x6>
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
	UART_SendString(data_to_send);
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <UART_SendString>
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <app_init>:

ENU_robotCarMode carMode = SLEEP_MODE;
Uint8_t userChoice = 0;

void app_init(void)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	   BLUETOOTH_init();
    2cb6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <BLUETOOTH_init>
	   IR_SENSOR_init(&arr_irCfg[0]);
    2cba:	80 ef       	ldi	r24, 0xF0	; 240
    2cbc:	93 e0       	ldi	r25, 0x03	; 3
    2cbe:	0e 94 5d 12 	call	0x24ba	; 0x24ba <IR_SENSOR_init>
	   IR_SENSOR_init(&arr_irCfg[1]);
    2cc2:	82 ef       	ldi	r24, 0xF2	; 242
    2cc4:	93 e0       	ldi	r25, 0x03	; 3
    2cc6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <IR_SENSOR_init>
	   DCM_init(&dcmCfgArr[0]);
    2cca:	84 ef       	ldi	r24, 0xF4	; 244
    2ccc:	93 e0       	ldi	r25, 0x03	; 3
    2cce:	0e 94 e7 12 	call	0x25ce	; 0x25ce <DCM_init>
	   DCM_init(&dcmCfgArr[1]);
    2cd2:	8a ef       	ldi	r24, 0xFA	; 250
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <DCM_init>
	   DCM_init(&dcmCfgArr[2]);
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	94 e0       	ldi	r25, 0x04	; 4
    2cde:	0e 94 e7 12 	call	0x25ce	; 0x25ce <DCM_init>
	   DCM_init(&dcmCfgArr[3]);
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	94 e0       	ldi	r25, 0x04	; 4
    2ce6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <DCM_init>
	   DCM_changeDirection(&dcmCfgArr[0] , DCM_DIR_FORWARD);
    2cea:	84 ef       	ldi	r24, 0xF4	; 244
    2cec:	93 e0       	ldi	r25, 0x03	; 3
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	   DCM_changeDirection(&dcmCfgArr[1] , DCM_DIR_FORWARD);
    2cf4:	8a ef       	ldi	r24, 0xFA	; 250
    2cf6:	93 e0       	ldi	r25, 0x03	; 3
    2cf8:	60 e0       	ldi	r22, 0x00	; 0
    2cfa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	   DCM_changeDirection(&dcmCfgArr[2] , DCM_DIR_FORWARD);
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	94 e0       	ldi	r25, 0x04	; 4
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	   DCM_changeDirection(&dcmCfgArr[3] , DCM_DIR_FORWARD);
    2d08:	86 e0       	ldi	r24, 0x06	; 6
    2d0a:	94 e0       	ldi	r25, 0x04	; 4
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <DCM_changeDirection>
	   HCSR04_vInit();
    2d12:	0e 94 c5 10 	call	0x218a	; 0x218a <HCSR04_vInit>
}
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <app_flow>:

void app_flow(void)
{	
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <app_flow+0x6>
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	switch(carMode)
    2d26:	80 91 15 04 	lds	r24, 0x0415
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	3a 83       	std	Y+2, r19	; 0x02
    2d30:	29 83       	std	Y+1, r18	; 0x01
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	91 05       	cpc	r25, r1
    2d3a:	d9 f1       	breq	.+118    	; 0x2db2 <app_flow+0x96>
    2d3c:	29 81       	ldd	r18, Y+1	; 0x01
    2d3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d40:	22 30       	cpi	r18, 0x02	; 2
    2d42:	31 05       	cpc	r19, r1
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <app_flow+0x34>
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	61 f0       	breq	.+24     	; 0x2d66 <app_flow+0x4a>
    2d4e:	40 c0       	rjmp	.+128    	; 0x2dd0 <app_flow+0xb4>
    2d50:	29 81       	ldd	r18, Y+1	; 0x01
    2d52:	3a 81       	ldd	r19, Y+2	; 0x02
    2d54:	22 30       	cpi	r18, 0x02	; 2
    2d56:	31 05       	cpc	r19, r1
    2d58:	89 f1       	breq	.+98     	; 0x2dbc <app_flow+0xa0>
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	83 30       	cpi	r24, 0x03	; 3
    2d60:	91 05       	cpc	r25, r1
    2d62:	89 f1       	breq	.+98     	; 0x2dc6 <app_flow+0xaa>
    2d64:	35 c0       	rjmp	.+106    	; 0x2dd0 <app_flow+0xb4>
	{
		case SLEEP_MODE:
		{
			BLUETOOTH_send((Uint8_t *)"\r\n");
    2d66:	8a e1       	ldi	r24, 0x1A	; 26
    2d68:	92 e0       	ldi	r25, 0x02	; 2
    2d6a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			BLUETOOTH_send((Uint8_t *)"Hello I am Your 4WD Robot Car Please Choose Operation Mode\r\n");
    2d6e:	8d e1       	ldi	r24, 0x1D	; 29
    2d70:	92 e0       	ldi	r25, 0x02	; 2
    2d72:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			BLUETOOTH_send((Uint8_t *)"1 - Mobile Controller Mode\r\n");
    2d76:	8a e5       	ldi	r24, 0x5A	; 90
    2d78:	92 e0       	ldi	r25, 0x02	; 2
    2d7a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			BLUETOOTH_send((Uint8_t *)"2 - Line Follower Mode\r\n");
    2d7e:	87 e7       	ldi	r24, 0x77	; 119
    2d80:	92 e0       	ldi	r25, 0x02	; 2
    2d82:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			BLUETOOTH_send((Uint8_t *)"3 - Avoiding Obstacles Mode\r\n");
    2d86:	80 e9       	ldi	r24, 0x90	; 144
    2d88:	92 e0       	ldi	r25, 0x02	; 2
    2d8a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			BLUETOOTH_send((Uint8_t *)"\r\n");
    2d8e:	8a e1       	ldi	r24, 0x1A	; 26
    2d90:	92 e0       	ldi	r25, 0x02	; 2
    2d92:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			carMode = BLUETOOTH_ReceiveData();
    2d96:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <BLUETOOTH_ReceiveData>
    2d9a:	80 93 15 04 	sts	0x0415, r24
			BLUETOOTH_vSendData(carMode);
    2d9e:	80 91 15 04 	lds	r24, 0x0415
    2da2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <BLUETOOTH_vSendData>
			carMode -= '0';		    
    2da6:	80 91 15 04 	lds	r24, 0x0415
    2daa:	80 53       	subi	r24, 0x30	; 48
    2dac:	80 93 15 04 	sts	0x0415, r24
    2db0:	15 c0       	rjmp	.+42     	; 0x2ddc <app_flow+0xc0>
		    break;	
		}
		case MOBILE_CONTROLLER_MODE:
		{
			mobileControllerModeInterface();
    2db2:	0e 94 47 07 	call	0xe8e	; 0xe8e <mobileControllerModeInterface>
			carMode = SLEEP_MODE;
    2db6:	10 92 15 04 	sts	0x0415, r1
    2dba:	10 c0       	rjmp	.+32     	; 0x2ddc <app_flow+0xc0>
			break;
		}
		case LINE_FOLLOWER_MODE:
		{	
			lineFollowerInterface();
    2dbc:	0e 94 93 08 	call	0x1126	; 0x1126 <lineFollowerInterface>
			carMode = SLEEP_MODE;
    2dc0:	10 92 15 04 	sts	0x0415, r1
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <app_flow+0xc0>
			break;
		}
		case AVOIDING_OBSTACLES_MODE:
		{
			AVOID_OBSTACLES_INTERFACE();
    2dc6:	0e 94 b7 09 	call	0x136e	; 0x136e <AVOID_OBSTACLES_INTERFACE>
			carMode = SLEEP_MODE;			
    2dca:	10 92 15 04 	sts	0x0415, r1
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <app_flow+0xc0>
			break;
		}						
		default:
		{
			BLUETOOTH_send((Uint8_t *)"Invalid Choice Please Try Again\r\n");
    2dd0:	8e ea       	ldi	r24, 0xAE	; 174
    2dd2:	92 e0       	ldi	r25, 0x02	; 2
    2dd4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <BLUETOOTH_send>
			carMode = SLEEP_MODE;
    2dd8:	10 92 15 04 	sts	0x0415, r1
			break;
		}	
	}	
}
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <main>:
 */ 

#include "APPLICATION/app.h"

int main(void)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    app_init();
    2dee:	0e 94 57 16 	call	0x2cae	; 0x2cae <app_init>
    while (1)
    {
    	app_flow();
    2df2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <app_flow>
    2df6:	fd cf       	rjmp	.-6      	; 0x2df2 <main+0xc>

00002df8 <__mulsi3>:
    2df8:	62 9f       	mul	r22, r18
    2dfa:	d0 01       	movw	r26, r0
    2dfc:	73 9f       	mul	r23, r19
    2dfe:	f0 01       	movw	r30, r0
    2e00:	82 9f       	mul	r24, r18
    2e02:	e0 0d       	add	r30, r0
    2e04:	f1 1d       	adc	r31, r1
    2e06:	64 9f       	mul	r22, r20
    2e08:	e0 0d       	add	r30, r0
    2e0a:	f1 1d       	adc	r31, r1
    2e0c:	92 9f       	mul	r25, r18
    2e0e:	f0 0d       	add	r31, r0
    2e10:	83 9f       	mul	r24, r19
    2e12:	f0 0d       	add	r31, r0
    2e14:	74 9f       	mul	r23, r20
    2e16:	f0 0d       	add	r31, r0
    2e18:	65 9f       	mul	r22, r21
    2e1a:	f0 0d       	add	r31, r0
    2e1c:	99 27       	eor	r25, r25
    2e1e:	72 9f       	mul	r23, r18
    2e20:	b0 0d       	add	r27, r0
    2e22:	e1 1d       	adc	r30, r1
    2e24:	f9 1f       	adc	r31, r25
    2e26:	63 9f       	mul	r22, r19
    2e28:	b0 0d       	add	r27, r0
    2e2a:	e1 1d       	adc	r30, r1
    2e2c:	f9 1f       	adc	r31, r25
    2e2e:	bd 01       	movw	r22, r26
    2e30:	cf 01       	movw	r24, r30
    2e32:	11 24       	eor	r1, r1
    2e34:	08 95       	ret

00002e36 <__udivmodsi4>:
    2e36:	a1 e2       	ldi	r26, 0x21	; 33
    2e38:	1a 2e       	mov	r1, r26
    2e3a:	aa 1b       	sub	r26, r26
    2e3c:	bb 1b       	sub	r27, r27
    2e3e:	fd 01       	movw	r30, r26
    2e40:	0d c0       	rjmp	.+26     	; 0x2e5c <__udivmodsi4_ep>

00002e42 <__udivmodsi4_loop>:
    2e42:	aa 1f       	adc	r26, r26
    2e44:	bb 1f       	adc	r27, r27
    2e46:	ee 1f       	adc	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	a2 17       	cp	r26, r18
    2e4c:	b3 07       	cpc	r27, r19
    2e4e:	e4 07       	cpc	r30, r20
    2e50:	f5 07       	cpc	r31, r21
    2e52:	20 f0       	brcs	.+8      	; 0x2e5c <__udivmodsi4_ep>
    2e54:	a2 1b       	sub	r26, r18
    2e56:	b3 0b       	sbc	r27, r19
    2e58:	e4 0b       	sbc	r30, r20
    2e5a:	f5 0b       	sbc	r31, r21

00002e5c <__udivmodsi4_ep>:
    2e5c:	66 1f       	adc	r22, r22
    2e5e:	77 1f       	adc	r23, r23
    2e60:	88 1f       	adc	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	1a 94       	dec	r1
    2e66:	69 f7       	brne	.-38     	; 0x2e42 <__udivmodsi4_loop>
    2e68:	60 95       	com	r22
    2e6a:	70 95       	com	r23
    2e6c:	80 95       	com	r24
    2e6e:	90 95       	com	r25
    2e70:	9b 01       	movw	r18, r22
    2e72:	ac 01       	movw	r20, r24
    2e74:	bd 01       	movw	r22, r26
    2e76:	cf 01       	movw	r24, r30
    2e78:	08 95       	ret

00002e7a <__prologue_saves__>:
    2e7a:	2f 92       	push	r2
    2e7c:	3f 92       	push	r3
    2e7e:	4f 92       	push	r4
    2e80:	5f 92       	push	r5
    2e82:	6f 92       	push	r6
    2e84:	7f 92       	push	r7
    2e86:	8f 92       	push	r8
    2e88:	9f 92       	push	r9
    2e8a:	af 92       	push	r10
    2e8c:	bf 92       	push	r11
    2e8e:	cf 92       	push	r12
    2e90:	df 92       	push	r13
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	ca 1b       	sub	r28, r26
    2ea4:	db 0b       	sbc	r29, r27
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	09 94       	ijmp

00002eb2 <__epilogue_restores__>:
    2eb2:	2a 88       	ldd	r2, Y+18	; 0x12
    2eb4:	39 88       	ldd	r3, Y+17	; 0x11
    2eb6:	48 88       	ldd	r4, Y+16	; 0x10
    2eb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eba:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ebc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ebe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ec2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ec4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ec6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ec8:	df 80       	ldd	r13, Y+7	; 0x07
    2eca:	ee 80       	ldd	r14, Y+6	; 0x06
    2ecc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ece:	0c 81       	ldd	r16, Y+4	; 0x04
    2ed0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ed2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ed4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ed6:	ce 0f       	add	r28, r30
    2ed8:	d1 1d       	adc	r29, r1
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	ed 01       	movw	r28, r26
    2ee6:	08 95       	ret

00002ee8 <_exit>:
    2ee8:	f8 94       	cli

00002eea <__stop_program>:
    2eea:	ff cf       	rjmp	.-2      	; 0x2eea <__stop_program>
