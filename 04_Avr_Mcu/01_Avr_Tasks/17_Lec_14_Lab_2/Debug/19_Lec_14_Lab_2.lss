
19_Lec_14_Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00004b6e  00004be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000048a8  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002ed7  00000000  00000000  00009524  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000c3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000c53b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000f1df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ff8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <main>
      7a:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad eb       	ldi	r26, 0xBD	; 189
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d eb       	ldi	r24, 0xBD	; 189
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 65 25 	jmp	0x4aca	; 0x4aca <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MSPI_init>:

#include "spi_interface.h"


EN_MSPI_systemState_t MSPI_init(ST_MSPI_cfg_t const *ST_ptrSpiCfgInstance)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2c 97       	sbiw	r28, 0x0c	; 12
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	9c 87       	std	Y+12, r25	; 0x0c
     b4c:	8b 87       	std	Y+11, r24	; 0x0b
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrSpiCfgInstance)
     b56:	8b 85       	ldd	r24, Y+11	; 0x0b
     b58:	9c 85       	ldd	r25, Y+12	; 0x0c
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	09 f4       	brne	.+2      	; 0xb60 <MSPI_init+0x2a>
     b5e:	f2 c0       	rjmp	.+484    	; 0xd44 <MSPI_init+0x20e>
	{

		if(ST_ptrSpiCfgInstance->spiDeviceType == MSPI_MASTER)
     b60:	eb 85       	ldd	r30, Y+11	; 0x0b
     b62:	fc 85       	ldd	r31, Y+12	; 0x0c
     b64:	80 81       	ld	r24, Z
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	a9 f5       	brne	.+106    	; 0xbd4 <MSPI_init+0x9e>
			{
					.portName = GPIO_PORTB,
					.pinNumber = GPIO_PIN4,
					.pinDirection = GPIO_OUTPUT,
					.logicOnPin = GPIO_LOW
			};
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	8b 83       	std	Y+3, r24	; 0x03
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	8c 83       	std	Y+4, r24	; 0x04
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8d 83       	std	Y+5, r24	; 0x05
     b76:	1e 82       	std	Y+6, r1	; 0x06

			gpioRet = GPIO_initPin(&pinCfg);
     b78:	ce 01       	movw	r24, r28
     b7a:	03 96       	adiw	r24, 0x03	; 3
     b7c:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     b80:	89 83       	std	Y+1, r24	; 0x01

			if(gpioRet == GPIO_OK)
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	88 23       	and	r24, r24
     b86:	41 f4       	brne	.+16     	; 0xb98 <MSPI_init+0x62>
			{
				pinCfg.pinNumber = GPIO_PIN5;
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	8c 83       	std	Y+4, r24	; 0x04
				gpioRet = GPIO_initPin(&pinCfg);
     b8c:	ce 01       	movw	r24, r28
     b8e:	03 96       	adiw	r24, 0x03	; 3
     b90:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <MSPI_init+0x66>
			}
			else spiRet = MSPI_NOK;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 23       	and	r24, r24
     ba0:	41 f4       	brne	.+16     	; 0xbb2 <MSPI_init+0x7c>
			{
				pinCfg.pinNumber = GPIO_PIN7;
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	8c 83       	std	Y+4, r24	; 0x04
				gpioRet = GPIO_initPin(&pinCfg);
     ba6:	ce 01       	movw	r24, r28
     ba8:	03 96       	adiw	r24, 0x03	; 3
     baa:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <MSPI_init+0x80>
			}
			else spiRet = MSPI_NOK;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 23       	and	r24, r24
     bba:	49 f4       	brne	.+18     	; 0xbce <MSPI_init+0x98>
			{
				pinCfg.pinNumber = GPIO_PIN6;
     bbc:	86 e0       	ldi	r24, 0x06	; 6
     bbe:	8c 83       	std	Y+4, r24	; 0x04
				pinCfg.pinDirection = GPIO_INPUT;
     bc0:	1d 82       	std	Y+5, r1	; 0x05
				gpioRet = GPIO_initPin(&pinCfg);
     bc2:	ce 01       	movw	r24, r28
     bc4:	03 96       	adiw	r24, 0x03	; 3
     bc6:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	3c c0       	rjmp	.+120    	; 0xc46 <MSPI_init+0x110>
			}
			else spiRet = MSPI_NOK;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	8a 83       	std	Y+2, r24	; 0x02
     bd2:	39 c0       	rjmp	.+114    	; 0xc46 <MSPI_init+0x110>
		}
		else if(ST_ptrSpiCfgInstance->spiDeviceType == MSPI_SLAVE)
     bd4:	eb 85       	ldd	r30, Y+11	; 0x0b
     bd6:	fc 85       	ldd	r31, Y+12	; 0x0c
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	a1 f5       	brne	.+104    	; 0xc46 <MSPI_init+0x110>
			{
					.portName = GPIO_PORTB,
					.pinNumber = GPIO_PIN4,
					.pinDirection = GPIO_INPUT,
					.logicOnPin = GPIO_LOW
			};
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8f 83       	std	Y+7, r24	; 0x07
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	88 87       	std	Y+8, r24	; 0x08
     be6:	19 86       	std	Y+9, r1	; 0x09
     be8:	1a 86       	std	Y+10, r1	; 0x0a

			gpioRet = GPIO_initPin(&pinCfg);
     bea:	ce 01       	movw	r24, r28
     bec:	07 96       	adiw	r24, 0x07	; 7
     bee:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     bf2:	89 83       	std	Y+1, r24	; 0x01

			if(gpioRet == GPIO_OK)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 23       	and	r24, r24
     bf8:	41 f4       	brne	.+16     	; 0xc0a <MSPI_init+0xd4>
			{
				pinCfg.pinNumber = GPIO_PIN5;
     bfa:	85 e0       	ldi	r24, 0x05	; 5
     bfc:	88 87       	std	Y+8, r24	; 0x08
				gpioRet = GPIO_initPin(&pinCfg);
     bfe:	ce 01       	movw	r24, r28
     c00:	07 96       	adiw	r24, 0x07	; 7
     c02:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <MSPI_init+0xd8>
			}
			else spiRet = MSPI_NOK;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 23       	and	r24, r24
     c12:	41 f4       	brne	.+16     	; 0xc24 <MSPI_init+0xee>
			{
				pinCfg.pinNumber = GPIO_PIN7;
     c14:	87 e0       	ldi	r24, 0x07	; 7
     c16:	88 87       	std	Y+8, r24	; 0x08
				gpioRet = GPIO_initPin(&pinCfg);
     c18:	ce 01       	movw	r24, r28
     c1a:	07 96       	adiw	r24, 0x07	; 7
     c1c:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <MSPI_init+0xf2>
			}
			else spiRet = MSPI_NOK;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	51 f4       	brne	.+20     	; 0xc42 <MSPI_init+0x10c>
			{
				pinCfg.pinNumber = GPIO_PIN6;
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	88 87       	std	Y+8, r24	; 0x08
				pinCfg.pinDirection = GPIO_OUTPUT;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	89 87       	std	Y+9, r24	; 0x09
				gpioRet = GPIO_initPin(&pinCfg);
     c36:	ce 01       	movw	r24, r28
     c38:	07 96       	adiw	r24, 0x07	; 7
     c3a:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <MSPI_init+0x110>
			}
			else spiRet = MSPI_NOK;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	8a 83       	std	Y+2, r24	; 0x02
		else
		{
			/* Do Nothing */
		}

		  SPCR_REG = ((SPCR_REG & 0x7F) | (ST_ptrSpiCfgInstance->spiInterruptStates << SPIE_BIT));
     c46:	ad e2       	ldi	r26, 0x2D	; 45
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	ed e2       	ldi	r30, 0x2D	; 45
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	28 2f       	mov	r18, r24
     c52:	2f 77       	andi	r18, 0x7F	; 127
     c54:	eb 85       	ldd	r30, Y+11	; 0x0b
     c56:	fc 85       	ldd	r31, Y+12	; 0x0c
     c58:	81 81       	ldd	r24, Z+1	; 0x01
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	96 95       	lsr	r25
     c60:	98 2f       	mov	r25, r24
     c62:	88 27       	eor	r24, r24
     c64:	97 95       	ror	r25
     c66:	87 95       	ror	r24
     c68:	82 2b       	or	r24, r18
     c6a:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xDF) | (ST_ptrSpiCfgInstance->spiDataOrder << DORD_BIT));
     c6c:	ad e2       	ldi	r26, 0x2D	; 45
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	ed e2       	ldi	r30, 0x2D	; 45
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	28 2f       	mov	r18, r24
     c78:	2f 7d       	andi	r18, 0xDF	; 223
     c7a:	eb 85       	ldd	r30, Y+11	; 0x0b
     c7c:	fc 85       	ldd	r31, Y+12	; 0x0c
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	82 95       	swap	r24
     c8a:	92 95       	swap	r25
     c8c:	90 7f       	andi	r25, 0xF0	; 240
     c8e:	98 27       	eor	r25, r24
     c90:	80 7f       	andi	r24, 0xF0	; 240
     c92:	98 27       	eor	r25, r24
     c94:	82 2b       	or	r24, r18
     c96:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xEF) | (ST_ptrSpiCfgInstance->spiDeviceType << MSTR_BIT));
     c98:	ad e2       	ldi	r26, 0x2D	; 45
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ed e2       	ldi	r30, 0x2D	; 45
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	28 2f       	mov	r18, r24
     ca4:	2f 7e       	andi	r18, 0xEF	; 239
     ca6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ca8:	fc 85       	ldd	r31, Y+12	; 0x0c
     caa:	80 81       	ld	r24, Z
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	82 95       	swap	r24
     cb2:	92 95       	swap	r25
     cb4:	90 7f       	andi	r25, 0xF0	; 240
     cb6:	98 27       	eor	r25, r24
     cb8:	80 7f       	andi	r24, 0xF0	; 240
     cba:	98 27       	eor	r25, r24
     cbc:	82 2b       	or	r24, r18
     cbe:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xF7) | (ST_ptrSpiCfgInstance->spiClkPolarity << CPOL_BIT));
     cc0:	ad e2       	ldi	r26, 0x2D	; 45
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ed e2       	ldi	r30, 0x2D	; 45
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	28 2f       	mov	r18, r24
     ccc:	27 7f       	andi	r18, 0xF7	; 247
     cce:	eb 85       	ldd	r30, Y+11	; 0x0b
     cd0:	fc 85       	ldd	r31, Y+12	; 0x0c
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	82 2b       	or	r24, r18
     ce6:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xFC) | (ST_ptrSpiCfgInstance->spiClkRate << SPR0_BIT));
     ce8:	ad e2       	ldi	r26, 0x2D	; 45
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ed e2       	ldi	r30, 0x2D	; 45
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	98 2f       	mov	r25, r24
     cf4:	9c 7f       	andi	r25, 0xFC	; 252
     cf6:	eb 85       	ldd	r30, Y+11	; 0x0b
     cf8:	fc 85       	ldd	r31, Y+12	; 0x0c
     cfa:	85 81       	ldd	r24, Z+5	; 0x05
     cfc:	89 2b       	or	r24, r25
     cfe:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xFB) | (ST_ptrSpiCfgInstance->spiCphaFunctionality << CPHA_BIT));
     d00:	ad e2       	ldi	r26, 0x2D	; 45
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ed e2       	ldi	r30, 0x2D	; 45
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	28 2f       	mov	r18, r24
     d0c:	2b 7f       	andi	r18, 0xFB	; 251
     d0e:	eb 85       	ldd	r30, Y+11	; 0x0b
     d10:	fc 85       	ldd	r31, Y+12	; 0x0c
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	82 2b       	or	r24, r18
     d22:	8c 93       	st	X, r24

		  SPSR_REG = ((SPSR_REG & 0xFE) | ((ST_ptrSpiCfgInstance->spiClkRate >> 2) << SPI2X_BIT));
     d24:	ae e2       	ldi	r26, 0x2E	; 46
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ee e2       	ldi	r30, 0x2E	; 46
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	98 2f       	mov	r25, r24
     d30:	9e 7f       	andi	r25, 0xFE	; 254
     d32:	eb 85       	ldd	r30, Y+11	; 0x0b
     d34:	fc 85       	ldd	r31, Y+12	; 0x0c
     d36:	85 81       	ldd	r24, Z+5	; 0x05
     d38:	86 95       	lsr	r24
     d3a:	86 95       	lsr	r24
     d3c:	89 2b       	or	r24, r25
     d3e:	8c 93       	st	X, r24

		spiRet = MSPI_OK;
     d40:	1a 82       	std	Y+2, r1	; 0x02
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <MSPI_init+0x212>
	}
	else
	{
		spiRet = MSPI_PTR_NULL;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	8a 83       	std	Y+2, r24	; 0x02
	}

	return spiRet;
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d4a:	2c 96       	adiw	r28, 0x0c	; 12
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <MSPI_enable>:

EN_MSPI_systemState_t MSPI_enable(void)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01

	SPCR_REG = ((SPCR_REG & 0xBF) | (MSPI_ENABLE  << SPE_BIT));
     d6a:	ad e2       	ldi	r26, 0x2D	; 45
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ed e2       	ldi	r30, 0x2D	; 45
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	8c 93       	st	X, r24
	spiRet = MSPI_OK;
     d78:	19 82       	std	Y+1, r1	; 0x01
	return spiRet;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <MSPI_disable>:
EN_MSPI_systemState_t MSPI_disable(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	89 83       	std	Y+1, r24	; 0x01

	SPCR_REG = ((SPCR_REG & 0xBF) | (MSPI_DISABLE  << SPE_BIT));
     d92:	ad e2       	ldi	r26, 0x2D	; 45
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ed e2       	ldi	r30, 0x2D	; 45
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 7b       	andi	r24, 0xBF	; 191
     d9e:	8c 93       	st	X, r24
	spiRet = MSPI_OK;
     da0:	19 82       	std	Y+1, r1	; 0x01
	return spiRet;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <MSPI_recive>:


EN_MSPI_systemState_t MSPI_recive(uint8_t *retOfData)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <MSPI_recive+0x6>
     db2:	0f 92       	push	r0
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9b 83       	std	Y+3, r25	; 0x03
     dba:	8a 83       	std	Y+2, r24	; 0x02
	  EN_MSPI_systemState_t spiRet = MSPI_NOK;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01

	  while(GET_BIT(SPSR_REG,SPIF_BIT) != 1);
     dc0:	ee e2       	ldi	r30, 0x2E	; 46
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 1f       	adc	r24, r24
     dc8:	88 27       	eor	r24, r24
     dca:	88 1f       	adc	r24, r24
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	c1 f7       	brne	.-16     	; 0xdc0 <MSPI_recive+0x14>
	  *retOfData = SPDR_REG;
     dd0:	ef e2       	ldi	r30, 0x2F	; 47
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 83       	st	Z, r24
	  spiRet = MSPI_OK;
     ddc:	19 82       	std	Y+1, r1	; 0x01
	  return spiRet;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MSPI_send>:


EN_MSPI_systemState_t MSPI_send(uint8_t DataToSend)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MSPI_send+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
  EN_MSPI_systemState_t spiRet = MSPI_NOK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
  SPDR_REG = DataToSend;
     dfc:	ef e2       	ldi	r30, 0x2F	; 47
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	80 83       	st	Z, r24
  while(GET_BIT(SPSR_REG,SPIF_BIT) != 1);
     e04:	ee e2       	ldi	r30, 0x2E	; 46
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 1f       	adc	r24, r24
     e0c:	88 27       	eor	r24, r24
     e0e:	88 1f       	adc	r24, r24
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	c1 f7       	brne	.-16     	; 0xe04 <MSPI_send+0x18>
  spiRet = MSPI_OK;
     e14:	19 82       	std	Y+1, r1	; 0x01
  return spiRet;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <GPIO_initPin+0x6>
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9b 83       	std	Y+3, r25	; 0x03
     e30:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	b1 f0       	breq	.+44     	; 0xe6a <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	22 81       	ldd	r18, Z+2	; 0x02
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	62 2f       	mov	r22, r18
     e4a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GPIO_changePinDir>
     e4e:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 23       	and	r24, r24
     e54:	61 f4       	brne	.+24     	; 0xe6e <GPIO_initPin+0x4c>
			ret =
     e56:	ea 81       	ldd	r30, Y+2	; 0x02
     e58:	fb 81       	ldd	r31, Y+3	; 0x03
     e5a:	23 81       	ldd	r18, Z+3	; 0x03
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	62 2f       	mov	r22, r18
     e62:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <GPIO_changePinDir+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <GPIO_changePinDir+0x8>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <GPIO_changePinDir+0xa>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	9b 81       	ldd	r25, Y+3	; 0x03
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	09 f4       	brne	.+2      	; 0xe9e <GPIO_changePinDir+0x22>
     e9c:	68 c0       	rjmp	.+208    	; 0xf6e <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3e 83       	std	Y+6, r19	; 0x06
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	31 f0       	breq	.+12     	; 0xebc <GPIO_changePinDir+0x40>
     eb0:	2d 81       	ldd	r18, Y+5	; 0x05
     eb2:	3e 81       	ldd	r19, Y+6	; 0x06
     eb4:	21 30       	cpi	r18, 0x01	; 1
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f1       	breq	.+92     	; 0xf16 <GPIO_changePinDir+0x9a>
     eba:	5b c0       	rjmp	.+182    	; 0xf72 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     ebc:	ea 81       	ldd	r30, Y+2	; 0x02
     ebe:	fb 81       	ldd	r31, Y+3	; 0x03
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	fc 01       	movw	r30, r24
     ecc:	eb 53       	subi	r30, 0x3B	; 59
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	a0 81       	ld	r26, Z
     ed2:	b1 81       	ldd	r27, Z+1	; 0x01
     ed4:	ea 81       	ldd	r30, Y+2	; 0x02
     ed6:	fb 81       	ldd	r31, Y+3	; 0x03
     ed8:	80 81       	ld	r24, Z
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	fc 01       	movw	r30, r24
     ee4:	eb 53       	subi	r30, 0x3B	; 59
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	01 90       	ld	r0, Z+
     eea:	f0 81       	ld	r31, Z
     eec:	e0 2d       	mov	r30, r0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	ea 81       	ldd	r30, Y+2	; 0x02
     ef4:	fb 81       	ldd	r31, Y+3	; 0x03
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_changePinDir+0x8c>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_changePinDir+0x88>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     f12:	19 82       	std	Y+1, r1	; 0x01
     f14:	2e c0       	rjmp	.+92     	; 0xf72 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     f16:	ea 81       	ldd	r30, Y+2	; 0x02
     f18:	fb 81       	ldd	r31, Y+3	; 0x03
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	fc 01       	movw	r30, r24
     f26:	eb 53       	subi	r30, 0x3B	; 59
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	a0 81       	ld	r26, Z
     f2c:	b1 81       	ldd	r27, Z+1	; 0x01
     f2e:	ea 81       	ldd	r30, Y+2	; 0x02
     f30:	fb 81       	ldd	r31, Y+3	; 0x03
     f32:	80 81       	ld	r24, Z
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	fc 01       	movw	r30, r24
     f3e:	eb 53       	subi	r30, 0x3B	; 59
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	01 90       	ld	r0, Z+
     f44:	f0 81       	ld	r31, Z
     f46:	e0 2d       	mov	r30, r0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	81 81       	ldd	r24, Z+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_changePinDir+0xe6>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_changePinDir+0xe2>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
     f6a:	19 82       	std	Y+1, r1	; 0x01
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
}
     f74:	26 96       	adiw	r28, 0x06	; 6
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <GPIO_writePinLogic+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <GPIO_writePinLogic+0x8>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <GPIO_writePinLogic+0xa>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9b 83       	std	Y+3, r25	; 0x03
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_writePinLogic+0x22>
     fa6:	68 c0       	rjmp	.+208    	; 0x1078 <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3e 83       	std	Y+6, r19	; 0x06
     fb0:	2d 83       	std	Y+5, r18	; 0x05
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <GPIO_writePinLogic+0x40>
     fba:	2d 81       	ldd	r18, Y+5	; 0x05
     fbc:	3e 81       	ldd	r19, Y+6	; 0x06
     fbe:	21 30       	cpi	r18, 0x01	; 1
     fc0:	31 05       	cpc	r19, r1
     fc2:	71 f1       	breq	.+92     	; 0x1020 <GPIO_writePinLogic+0x9a>
     fc4:	5b c0       	rjmp	.+182    	; 0x107c <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     fc6:	ea 81       	ldd	r30, Y+2	; 0x02
     fc8:	fb 81       	ldd	r31, Y+3	; 0x03
     fca:	80 81       	ld	r24, Z
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	fc 01       	movw	r30, r24
     fd6:	e3 53       	subi	r30, 0x33	; 51
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	a0 81       	ld	r26, Z
     fdc:	b1 81       	ldd	r27, Z+1	; 0x01
     fde:	ea 81       	ldd	r30, Y+2	; 0x02
     fe0:	fb 81       	ldd	r31, Y+3	; 0x03
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	fc 01       	movw	r30, r24
     fee:	e3 53       	subi	r30, 0x33	; 51
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	ea 81       	ldd	r30, Y+2	; 0x02
     ffe:	fb 81       	ldd	r31, Y+3	; 0x03
    1000:	81 81       	ldd	r24, Z+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_writePinLogic+0x8c>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_writePinLogic+0x88>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    101c:	19 82       	std	Y+1, r1	; 0x01
    101e:	2e c0       	rjmp	.+92     	; 0x107c <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
    1020:	ea 81       	ldd	r30, Y+2	; 0x02
    1022:	fb 81       	ldd	r31, Y+3	; 0x03
    1024:	80 81       	ld	r24, Z
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	fc 01       	movw	r30, r24
    1030:	e3 53       	subi	r30, 0x33	; 51
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	a0 81       	ld	r26, Z
    1036:	b1 81       	ldd	r27, Z+1	; 0x01
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	80 81       	ld	r24, Z
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	fc 01       	movw	r30, r24
    1048:	e3 53       	subi	r30, 0x33	; 51
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	01 90       	ld	r0, Z+
    104e:	f0 81       	ld	r31, Z
    1050:	e0 2d       	mov	r30, r0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	ea 81       	ldd	r30, Y+2	; 0x02
    1058:	fb 81       	ldd	r31, Y+3	; 0x03
    105a:	81 81       	ldd	r24, Z+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePinLogic+0xe6>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePinLogic+0xe2>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	02 c0       	rjmp	.+4      	; 0x107c <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
}
    107e:	26 96       	adiw	r28, 0x06	; 6
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPinLogic+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPinLogic+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9b 83       	std	Y+3, r25	; 0x03
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	7d 83       	std	Y+5, r23	; 0x05
    10a4:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	11 f1       	breq	.+68     	; 0x10f6 <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
    10b2:	ea 81       	ldd	r30, Y+2	; 0x02
    10b4:	fb 81       	ldd	r31, Y+3	; 0x03
    10b6:	80 81       	ld	r24, Z
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	fc 01       	movw	r30, r24
    10c2:	eb 52       	subi	r30, 0x2B	; 43
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	01 90       	ld	r0, Z+
    10c8:	f0 81       	ld	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	ea 81       	ldd	r30, Y+2	; 0x02
    10d4:	fb 81       	ldd	r31, Y+3	; 0x03
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_readPinLogic+0x54>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_readPinLogic+0x50>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	ec 81       	ldd	r30, Y+4	; 0x04
    10ee:	fd 81       	ldd	r31, Y+5	; 0x05
    10f0:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_togglePinLogic+0x6>
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9b 83       	std	Y+3, r25	; 0x03
    111a:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	9b 81       	ldd	r25, Y+3	; 0x03
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	61 f1       	breq	.+88     	; 0x1180 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
    1128:	ea 81       	ldd	r30, Y+2	; 0x02
    112a:	fb 81       	ldd	r31, Y+3	; 0x03
    112c:	80 81       	ld	r24, Z
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	fc 01       	movw	r30, r24
    1138:	e3 53       	subi	r30, 0x33	; 51
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	a0 81       	ld	r26, Z
    113e:	b1 81       	ldd	r27, Z+1	; 0x01
    1140:	ea 81       	ldd	r30, Y+2	; 0x02
    1142:	fb 81       	ldd	r31, Y+3	; 0x03
    1144:	80 81       	ld	r24, Z
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	fc 01       	movw	r30, r24
    1150:	e3 53       	subi	r30, 0x33	; 51
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	01 90       	ld	r0, Z+
    1156:	f0 81       	ld	r31, Z
    1158:	e0 2d       	mov	r30, r0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	ea 81       	ldd	r30, Y+2	; 0x02
    1160:	fb 81       	ldd	r31, Y+3	; 0x03
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_togglePinLogic+0x68>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_togglePinLogic+0x64>
    1178:	84 27       	eor	r24, r20
    117a:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	28 97       	sbiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    11aa:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	38 87       	std	Y+8, r19	; 0x08
    11b8:	2f 83       	std	Y+7, r18	; 0x07
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	31 f0       	breq	.+12     	; 0x11ce <GPIO_initPort+0x3c>
    11c2:	2f 81       	ldd	r18, Y+7	; 0x07
    11c4:	38 85       	ldd	r19, Y+8	; 0x08
    11c6:	21 30       	cpi	r18, 0x01	; 1
    11c8:	31 05       	cpc	r19, r1
    11ca:	79 f0       	breq	.+30     	; 0x11ea <GPIO_initPort+0x58>
    11cc:	1c c0       	rjmp	.+56     	; 0x1206 <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	fc 01       	movw	r30, r24
    11da:	eb 53       	subi	r30, 0x3B	; 59
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	01 90       	ld	r0, Z+
    11e0:	f0 81       	ld	r31, Z
    11e2:	e0 2d       	mov	r30, r0
    11e4:	10 82       	st	Z, r1
		ret = GPIO_OK;
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	fc 01       	movw	r30, r24
    11f6:	eb 53       	subi	r30, 0x3B	; 59
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	01 90       	ld	r0, Z+
    11fc:	f0 81       	ld	r31, Z
    11fe:	e0 2d       	mov	r30, r0
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1204:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3e 83       	std	Y+6, r19	; 0x06
    120e:	2d 83       	std	Y+5, r18	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	31 f0       	breq	.+12     	; 0x1224 <GPIO_initPort+0x92>
    1218:	2d 81       	ldd	r18, Y+5	; 0x05
    121a:	3e 81       	ldd	r19, Y+6	; 0x06
    121c:	21 30       	cpi	r18, 0x01	; 1
    121e:	31 05       	cpc	r19, r1
    1220:	79 f0       	breq	.+30     	; 0x1240 <GPIO_initPort+0xae>
    1222:	1c c0       	rjmp	.+56     	; 0x125c <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	fc 01       	movw	r30, r24
    1230:	e3 53       	subi	r30, 0x33	; 51
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	01 90       	ld	r0, Z+
    1236:	f0 81       	ld	r31, Z
    1238:	e0 2d       	mov	r30, r0
    123a:	10 82       	st	Z, r1
		ret = GPIO_OK;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	0e c0       	rjmp	.+28     	; 0x125c <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	fc 01       	movw	r30, r24
    124c:	e3 53       	subi	r30, 0x33	; 51
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
		ret = GPIO_OK;
    125a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
}
    125e:	28 96       	adiw	r28, 0x08	; 8
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <GPIO_changePortDir+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <GPIO_changePortDir+0x8>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	8a 83       	std	Y+2, r24	; 0x02
    1280:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3d 83       	std	Y+5, r19	; 0x05
    128e:	2c 83       	std	Y+4, r18	; 0x04
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	31 f0       	breq	.+12     	; 0x12a4 <GPIO_changePortDir+0x34>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	21 30       	cpi	r18, 0x01	; 1
    129e:	31 05       	cpc	r19, r1
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <GPIO_changePortDir+0x50>
    12a2:	1c c0       	rjmp	.+56     	; 0x12dc <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	eb 53       	subi	r30, 0x3B	; 59
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	01 90       	ld	r0, Z+
    12b6:	f0 81       	ld	r31, Z
    12b8:	e0 2d       	mov	r30, r0
    12ba:	10 82       	st	Z, r1
		ret = GPIO_OK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	fc 01       	movw	r30, r24
    12cc:	eb 53       	subi	r30, 0x3B	; 59
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	01 90       	ld	r0, Z+
    12d2:	f0 81       	ld	r31, Z
    12d4:	e0 2d       	mov	r30, r0
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 83       	st	Z, r24
		ret = GPIO_OK;
    12da:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <GPIO_writePortLogic+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_writePortLogic+0x8>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	3d 83       	std	Y+5, r19	; 0x05
    130c:	2c 83       	std	Y+4, r18	; 0x04
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	31 f0       	breq	.+12     	; 0x1322 <GPIO_writePortLogic+0x34>
    1316:	2c 81       	ldd	r18, Y+4	; 0x04
    1318:	3d 81       	ldd	r19, Y+5	; 0x05
    131a:	21 30       	cpi	r18, 0x01	; 1
    131c:	31 05       	cpc	r19, r1
    131e:	79 f0       	breq	.+30     	; 0x133e <GPIO_writePortLogic+0x50>
    1320:	1c c0       	rjmp	.+56     	; 0x135a <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	fc 01       	movw	r30, r24
    132e:	e3 53       	subi	r30, 0x33	; 51
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	01 90       	ld	r0, Z+
    1334:	f0 81       	ld	r31, Z
    1336:	e0 2d       	mov	r30, r0
    1338:	10 82       	st	Z, r1
		ret = GPIO_OK;
    133a:	19 82       	std	Y+1, r1	; 0x01
    133c:	0e c0       	rjmp	.+28     	; 0x135a <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	fc 01       	movw	r30, r24
    134a:	e3 53       	subi	r30, 0x33	; 51
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	01 90       	ld	r0, Z+
    1350:	f0 81       	ld	r31, Z
    1352:	e0 2d       	mov	r30, r0
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	80 83       	st	Z, r24
		ret = GPIO_OK;
    1358:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <GPIO_readPortLogic+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <GPIO_readPortLogic+0x8>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	8a 83       	std	Y+2, r24	; 0x02
    137a:	7c 83       	std	Y+4, r23	; 0x04
    137c:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	fc 01       	movw	r30, r24
    138e:	eb 52       	subi	r30, 0x2B	; 43
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	01 90       	ld	r0, Z+
    1394:	f0 81       	ld	r31, Z
    1396:	e0 2d       	mov	r30, r0
    1398:	80 81       	ld	r24, Z
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	80 83       	st	Z, r24
	ret = GPIO_OK;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_togglePortLogic+0x6>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	fc 01       	movw	r30, r24
    13ce:	eb 53       	subi	r30, 0x3B	; 59
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	a0 81       	ld	r26, Z
    13d4:	b1 81       	ldd	r27, Z+1	; 0x01
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	fc 01       	movw	r30, r24
    13e2:	eb 53       	subi	r30, 0x3B	; 59
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	01 90       	ld	r0, Z+
    13e8:	f0 81       	ld	r31, Z
    13ea:	e0 2d       	mov	r30, r0
    13ec:	20 81       	ld	r18, Z
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	fc 01       	movw	r30, r24
    13fa:	eb 53       	subi	r30, 0x3B	; 59
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	01 90       	ld	r0, Z+
    1400:	f0 81       	ld	r31, Z
    1402:	e0 2d       	mov	r30, r0
    1404:	80 81       	ld	r24, Z
    1406:	82 27       	eor	r24, r18
    1408:	8c 93       	st	X, r24
	ret = GPIO_OK;
    140a:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <GPIO_set4msbValue+0x6>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	fc 01       	movw	r30, r24
    1438:	e3 53       	subi	r30, 0x33	; 51
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	a0 81       	ld	r26, Z
    143e:	b1 81       	ldd	r27, Z+1	; 0x01
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	fc 01       	movw	r30, r24
    144c:	e3 53       	subi	r30, 0x33	; 51
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	01 90       	ld	r0, Z+
    1452:	f0 81       	ld	r31, Z
    1454:	e0 2d       	mov	r30, r0
    1456:	80 81       	ld	r24, Z
    1458:	8f 70       	andi	r24, 0x0F	; 15
    145a:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	fc 01       	movw	r30, r24
    1468:	e3 53       	subi	r30, 0x33	; 51
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	a0 81       	ld	r26, Z
    146e:	b1 81       	ldd	r27, Z+1	; 0x01
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	fc 01       	movw	r30, r24
    147c:	e3 53       	subi	r30, 0x33	; 51
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	01 90       	ld	r0, Z+
    1482:	f0 81       	ld	r31, Z
    1484:	e0 2d       	mov	r30, r0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	82 95       	swap	r24
    1492:	92 95       	swap	r25
    1494:	90 7f       	andi	r25, 0xF0	; 240
    1496:	98 27       	eor	r25, r24
    1498:	80 7f       	andi	r24, 0xF0	; 240
    149a:	98 27       	eor	r25, r24
    149c:	82 2b       	or	r24, r18
    149e:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    14a0:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	27 97       	sbiw	r28, 0x07	; 7
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	4b 83       	std	Y+3, r20	; 0x03
    14c8:	5c 83       	std	Y+4, r21	; 0x04
    14ca:	6d 83       	std	Y+5, r22	; 0x05
    14cc:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	fc 01       	movw	r30, r24
    14de:	e3 53       	subi	r30, 0x33	; 51
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	01 90       	ld	r0, Z+
    14e4:	f0 81       	ld	r31, Z
    14e6:	e0 2d       	mov	r30, r0
    14e8:	80 81       	ld	r24, Z
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	fc 01       	movw	r30, r24
    14f6:	e3 53       	subi	r30, 0x33	; 51
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	01 90       	ld	r0, Z+
    14fc:	f0 81       	ld	r31, Z
    14fe:	e0 2d       	mov	r30, r0
    1500:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	fc 01       	movw	r30, r24
    150e:	e3 53       	subi	r30, 0x33	; 51
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	a0 81       	ld	r26, Z
    1514:	b1 81       	ldd	r27, Z+1	; 0x01
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	fc 01       	movw	r30, r24
    1522:	e3 53       	subi	r30, 0x33	; 51
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	01 90       	ld	r0, Z+
    1528:	f0 81       	ld	r31, Z
    152a:	e0 2d       	mov	r30, r0
    152c:	90 81       	ld	r25, Z
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	89 2b       	or	r24, r25
    1532:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	27 96       	adiw	r28, 0x07	; 7
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	ce 59       	subi	r28, 0x9E	; 158
    1558:	d0 40       	sbci	r29, 0x00	; 0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	fe 01       	movw	r30, r28
    1566:	e3 56       	subi	r30, 0x63	; 99
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    156e:	fe 01       	movw	r30, r28
    1570:	e0 58       	subi	r30, 0x80	; 128
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1578:	fe 01       	movw	r30, r28
    157a:	e1 58       	subi	r30, 0x81	; 129
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    1582:	fe 01       	movw	r30, r28
    1584:	e3 56       	subi	r30, 0x63	; 99
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	09 f4       	brne	.+2      	; 0x1592 <HLCD_init+0x48>
    1590:	18 c7       	rjmp	.+3632   	; 0x23c2 <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    1592:	fe 01       	movw	r30, r28
    1594:	e3 56       	subi	r30, 0x63	; 99
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	01 90       	ld	r0, Z+
    159a:	f0 81       	ld	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	81 81       	ldd	r24, Z+1	; 0x01
    15a0:	fe 01       	movw	r30, r28
    15a2:	e3 56       	subi	r30, 0x63	; 99
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	01 90       	ld	r0, Z+
    15a8:	f0 81       	ld	r31, Z
    15aa:	e0 2d       	mov	r30, r0
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	fe 01       	movw	r30, r28
    15b0:	ef 57       	subi	r30, 0x7F	; 127
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 57       	subi	r30, 0x7F	; 127
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	fe 01       	movw	r30, r28
    15c0:	ef 57       	subi	r30, 0x7F	; 127
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	82 83       	std	Z+2, r24	; 0x02
    15c8:	fe 01       	movw	r30, r28
    15ca:	ef 57       	subi	r30, 0x7F	; 127
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    15d0:	fe 01       	movw	r30, r28
    15d2:	e3 56       	subi	r30, 0x63	; 99
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	01 90       	ld	r0, Z+
    15d8:	f0 81       	ld	r31, Z
    15da:	e0 2d       	mov	r30, r0
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	fe 01       	movw	r30, r28
    15e0:	e3 56       	subi	r30, 0x63	; 99
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	01 90       	ld	r0, Z+
    15e6:	f0 81       	ld	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	94 81       	ldd	r25, Z+4	; 0x04
    15ec:	fe 01       	movw	r30, r28
    15ee:	eb 57       	subi	r30, 0x7B	; 123
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 83       	st	Z, r24
    15f4:	fe 01       	movw	r30, r28
    15f6:	eb 57       	subi	r30, 0x7B	; 123
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	fe 01       	movw	r30, r28
    15fe:	eb 57       	subi	r30, 0x7B	; 123
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	82 83       	std	Z+2, r24	; 0x02
    1606:	fe 01       	movw	r30, r28
    1608:	eb 57       	subi	r30, 0x7B	; 123
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    160e:	fe 01       	movw	r30, r28
    1610:	e3 56       	subi	r30, 0x63	; 99
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	01 90       	ld	r0, Z+
    1616:	f0 81       	ld	r31, Z
    1618:	e0 2d       	mov	r30, r0
    161a:	81 81       	ldd	r24, Z+1	; 0x01
    161c:	fe 01       	movw	r30, r28
    161e:	e3 56       	subi	r30, 0x63	; 99
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	95 81       	ldd	r25, Z+5	; 0x05
    162a:	fe 01       	movw	r30, r28
    162c:	e7 57       	subi	r30, 0x77	; 119
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 83       	st	Z, r24
    1632:	fe 01       	movw	r30, r28
    1634:	e7 57       	subi	r30, 0x77	; 119
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	fe 01       	movw	r30, r28
    163c:	e7 57       	subi	r30, 0x77	; 119
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	82 83       	std	Z+2, r24	; 0x02
    1644:	fe 01       	movw	r30, r28
    1646:	e7 57       	subi	r30, 0x77	; 119
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    164c:	ce 01       	movw	r24, r28
    164e:	8f 57       	subi	r24, 0x7F	; 127
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    1656:	fe 01       	movw	r30, r28
    1658:	e1 58       	subi	r30, 0x81	; 129
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    165e:	fe 01       	movw	r30, r28
    1660:	e1 58       	subi	r30, 0x81	; 129
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	88 23       	and	r24, r24
    1668:	51 f4       	brne	.+20     	; 0x167e <HLCD_init+0x134>
    166a:	ce 01       	movw	r24, r28
    166c:	8b 57       	subi	r24, 0x7B	; 123
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    1674:	fe 01       	movw	r30, r28
    1676:	e1 58       	subi	r30, 0x81	; 129
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 83       	st	Z, r24
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    167e:	fe 01       	movw	r30, r28
    1680:	e0 58       	subi	r30, 0x80	; 128
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    1688:	fe 01       	movw	r30, r28
    168a:	e1 58       	subi	r30, 0x81	; 129
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	88 23       	and	r24, r24
    1692:	51 f4       	brne	.+20     	; 0x16a8 <HLCD_init+0x15e>
    1694:	ce 01       	movw	r24, r28
    1696:	87 57       	subi	r24, 0x77	; 119
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    169e:	fe 01       	movw	r30, r28
    16a0:	e1 58       	subi	r30, 0x81	; 129
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 83       	st	Z, r24
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    16a8:	fe 01       	movw	r30, r28
    16aa:	e0 58       	subi	r30, 0x80	; 128
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    16b2:	fe 01       	movw	r30, r28
    16b4:	e3 56       	subi	r30, 0x63	; 99
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	01 90       	ld	r0, Z+
    16ba:	f0 81       	ld	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	80 81       	ld	r24, Z
    16c0:	88 23       	and	r24, r24
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <HLCD_init+0x17c>
    16c4:	42 c4       	rjmp	.+2180   	; 0x1f4a <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    16c6:	fe 01       	movw	r30, r28
    16c8:	e3 56       	subi	r30, 0x63	; 99
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	01 90       	ld	r0, Z+
    16ce:	f0 81       	ld	r31, Z
    16d0:	e0 2d       	mov	r30, r0
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	fe 01       	movw	r30, r28
    16d6:	e3 56       	subi	r30, 0x63	; 99
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	01 90       	ld	r0, Z+
    16dc:	f0 81       	ld	r31, Z
    16de:	e0 2d       	mov	r30, r0
    16e0:	92 85       	ldd	r25, Z+10	; 0x0a
    16e2:	fe 01       	movw	r30, r28
    16e4:	e3 57       	subi	r30, 0x73	; 115
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 83       	st	Z, r24
    16ea:	fe 01       	movw	r30, r28
    16ec:	e3 57       	subi	r30, 0x73	; 115
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	fe 01       	movw	r30, r28
    16f4:	e3 57       	subi	r30, 0x73	; 115
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	82 83       	std	Z+2, r24	; 0x02
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 57       	subi	r30, 0x73	; 115
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1704:	fe 01       	movw	r30, r28
    1706:	e3 56       	subi	r30, 0x63	; 99
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	01 90       	ld	r0, Z+
    170c:	f0 81       	ld	r31, Z
    170e:	e0 2d       	mov	r30, r0
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	fe 01       	movw	r30, r28
    1714:	e3 56       	subi	r30, 0x63	; 99
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	01 90       	ld	r0, Z+
    171a:	f0 81       	ld	r31, Z
    171c:	e0 2d       	mov	r30, r0
    171e:	93 85       	ldd	r25, Z+11	; 0x0b
    1720:	fe 01       	movw	r30, r28
    1722:	ef 56       	subi	r30, 0x6F	; 111
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 83       	st	Z, r24
    1728:	fe 01       	movw	r30, r28
    172a:	ef 56       	subi	r30, 0x6F	; 111
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	fe 01       	movw	r30, r28
    1732:	ef 56       	subi	r30, 0x6F	; 111
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	82 83       	std	Z+2, r24	; 0x02
    173a:	fe 01       	movw	r30, r28
    173c:	ef 56       	subi	r30, 0x6F	; 111
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1742:	fe 01       	movw	r30, r28
    1744:	e3 56       	subi	r30, 0x63	; 99
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	01 90       	ld	r0, Z+
    174a:	f0 81       	ld	r31, Z
    174c:	e0 2d       	mov	r30, r0
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	fe 01       	movw	r30, r28
    1752:	e3 56       	subi	r30, 0x63	; 99
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	01 90       	ld	r0, Z+
    1758:	f0 81       	ld	r31, Z
    175a:	e0 2d       	mov	r30, r0
    175c:	94 85       	ldd	r25, Z+12	; 0x0c
    175e:	fe 01       	movw	r30, r28
    1760:	eb 56       	subi	r30, 0x6B	; 107
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 83       	st	Z, r24
    1766:	fe 01       	movw	r30, r28
    1768:	eb 56       	subi	r30, 0x6B	; 107
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	fe 01       	movw	r30, r28
    1770:	eb 56       	subi	r30, 0x6B	; 107
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	82 83       	std	Z+2, r24	; 0x02
    1778:	fe 01       	movw	r30, r28
    177a:	eb 56       	subi	r30, 0x6B	; 107
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    1780:	fe 01       	movw	r30, r28
    1782:	e3 56       	subi	r30, 0x63	; 99
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	01 90       	ld	r0, Z+
    1788:	f0 81       	ld	r31, Z
    178a:	e0 2d       	mov	r30, r0
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	fe 01       	movw	r30, r28
    1790:	e3 56       	subi	r30, 0x63	; 99
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	01 90       	ld	r0, Z+
    1796:	f0 81       	ld	r31, Z
    1798:	e0 2d       	mov	r30, r0
    179a:	95 85       	ldd	r25, Z+13	; 0x0d
    179c:	fe 01       	movw	r30, r28
    179e:	e7 56       	subi	r30, 0x67	; 103
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	80 83       	st	Z, r24
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 56       	subi	r30, 0x67	; 103
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 56       	subi	r30, 0x67	; 103
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	82 83       	std	Z+2, r24	; 0x02
    17b6:	fe 01       	movw	r30, r28
    17b8:	e7 56       	subi	r30, 0x67	; 103
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    17be:	fe 01       	movw	r30, r28
    17c0:	e1 58       	subi	r30, 0x81	; 129
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	88 23       	and	r24, r24
    17c8:	51 f4       	brne	.+20     	; 0x17de <HLCD_init+0x294>
    17ca:	ce 01       	movw	r24, r28
    17cc:	83 57       	subi	r24, 0x73	; 115
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e1 58       	subi	r30, 0x81	; 129
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 83       	st	Z, r24
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    17de:	fe 01       	movw	r30, r28
    17e0:	e0 58       	subi	r30, 0x80	; 128
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    17e8:	fe 01       	movw	r30, r28
    17ea:	e1 58       	subi	r30, 0x81	; 129
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	88 23       	and	r24, r24
    17f2:	51 f4       	brne	.+20     	; 0x1808 <HLCD_init+0x2be>
    17f4:	ce 01       	movw	r24, r28
    17f6:	8f 56       	subi	r24, 0x6F	; 111
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    17fe:	fe 01       	movw	r30, r28
    1800:	e1 58       	subi	r30, 0x81	; 129
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 83       	st	Z, r24
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    1808:	fe 01       	movw	r30, r28
    180a:	e0 58       	subi	r30, 0x80	; 128
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    1812:	fe 01       	movw	r30, r28
    1814:	e1 58       	subi	r30, 0x81	; 129
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	88 23       	and	r24, r24
    181c:	51 f4       	brne	.+20     	; 0x1832 <HLCD_init+0x2e8>
    181e:	ce 01       	movw	r24, r28
    1820:	8b 56       	subi	r24, 0x6B	; 107
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    1828:	fe 01       	movw	r30, r28
    182a:	e1 58       	subi	r30, 0x81	; 129
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 83       	st	Z, r24
    1830:	05 c0       	rjmp	.+10     	; 0x183c <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    1832:	fe 01       	movw	r30, r28
    1834:	e0 58       	subi	r30, 0x80	; 128
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    183c:	fe 01       	movw	r30, r28
    183e:	e1 58       	subi	r30, 0x81	; 129
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	51 f4       	brne	.+20     	; 0x185c <HLCD_init+0x312>
    1848:	ce 01       	movw	r24, r28
    184a:	87 56       	subi	r24, 0x67	; 103
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	0e 94 11 07 	call	0xe22	; 0xe22 <GPIO_initPin>
    1852:	fe 01       	movw	r30, r28
    1854:	e1 58       	subi	r30, 0x81	; 129
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 83       	st	Z, r24
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    185c:	fe 01       	movw	r30, r28
    185e:	e0 58       	subi	r30, 0x80	; 128
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 83       	st	Z, r24
    1866:	fe 01       	movw	r30, r28
    1868:	e5 58       	subi	r30, 0x85	; 133
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 ef       	ldi	r26, 0xF0	; 240
    1872:	b1 e4       	ldi	r27, 0x41	; 65
    1874:	80 83       	st	Z, r24
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	a2 83       	std	Z+2, r26	; 0x02
    187a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	8e 01       	movw	r16, r28
    187e:	09 58       	subi	r16, 0x89	; 137
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e5 58       	subi	r30, 0x85	; 133
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a ef       	ldi	r20, 0xFA	; 250
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	f8 01       	movw	r30, r16
    18a2:	80 83       	st	Z, r24
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	a2 83       	std	Z+2, r26	; 0x02
    18a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18aa:	fe 01       	movw	r30, r28
    18ac:	e9 58       	subi	r30, 0x89	; 137
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	44 f4       	brge	.+16     	; 0x18d8 <HLCD_init+0x38e>
		__ticks = 1;
    18c8:	fe 01       	movw	r30, r28
    18ca:	eb 58       	subi	r30, 0x8B	; 139
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	64 c0       	rjmp	.+200    	; 0x19a0 <HLCD_init+0x456>
	else if (__tmp > 65535)
    18d8:	fe 01       	movw	r30, r28
    18da:	e9 58       	subi	r30, 0x89	; 137
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <HLCD_init+0x3ae>
    18f6:	43 c0       	rjmp	.+134    	; 0x197e <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	fe 01       	movw	r30, r28
    18fa:	e5 58       	subi	r30, 0x85	; 133
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8e 01       	movw	r16, r28
    1918:	0b 58       	subi	r16, 0x8B	; 139
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	f8 01       	movw	r30, r16
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	1f c0       	rjmp	.+62     	; 0x196e <HLCD_init+0x424>
    1930:	fe 01       	movw	r30, r28
    1932:	ed 58       	subi	r30, 0x8D	; 141
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193e:	fe 01       	movw	r30, r28
    1940:	ed 58       	subi	r30, 0x8D	; 141
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <HLCD_init+0x3fe>
    194c:	fe 01       	movw	r30, r28
    194e:	ed 58       	subi	r30, 0x8D	; 141
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	de 01       	movw	r26, r28
    1958:	ab 58       	subi	r26, 0x8B	; 139
    195a:	bf 4f       	sbci	r27, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	eb 58       	subi	r30, 0x8B	; 139
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	fe 01       	movw	r30, r28
    1970:	eb 58       	subi	r30, 0x8B	; 139
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	d1 f6       	brne	.-76     	; 0x1930 <HLCD_init+0x3e6>
    197c:	27 c0       	rjmp	.+78     	; 0x19cc <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	8e 01       	movw	r16, r28
    1980:	0b 58       	subi	r16, 0x8B	; 139
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	e9 58       	subi	r30, 0x89	; 137
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
    19a0:	de 01       	movw	r26, r28
    19a2:	af 58       	subi	r26, 0x8F	; 143
    19a4:	bf 4f       	sbci	r27, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 58       	subi	r30, 0x8B	; 139
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	8d 93       	st	X+, r24
    19b2:	9c 93       	st	X, r25
    19b4:	fe 01       	movw	r30, r28
    19b6:	ef 58       	subi	r30, 0x8F	; 143
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <HLCD_init+0x474>
    19c2:	fe 01       	movw	r30, r28
    19c4:	ef 58       	subi	r30, 0x8F	; 143
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    19cc:	fe 01       	movw	r30, r28
    19ce:	e3 56       	subi	r30, 0x63	; 99
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	68 e2       	ldi	r22, 0x28	; 40
    19d8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    19dc:	fe 01       	movw	r30, r28
    19de:	e3 59       	subi	r30, 0x93	; 147
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a8 e4       	ldi	r26, 0x48	; 72
    19e8:	b2 e4       	ldi	r27, 0x42	; 66
    19ea:	80 83       	st	Z, r24
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	a2 83       	std	Z+2, r26	; 0x02
    19f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	8e 01       	movw	r16, r28
    19f4:	07 59       	subi	r16, 0x97	; 151
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e3 59       	subi	r30, 0x93	; 147
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	f8 01       	movw	r30, r16
    1a18:	80 83       	st	Z, r24
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a20:	fe 01       	movw	r30, r28
    1a22:	e7 59       	subi	r30, 0x97	; 151
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	44 f4       	brge	.+16     	; 0x1a4e <HLCD_init+0x504>
		__ticks = 1;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e9 59       	subi	r30, 0x99	; 153
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	64 c0       	rjmp	.+200    	; 0x1b16 <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e7 59       	subi	r30, 0x97	; 151
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <HLCD_init+0x524>
    1a6c:	43 c0       	rjmp	.+134    	; 0x1af4 <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e3 59       	subi	r30, 0x93	; 147
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	09 59       	subi	r16, 0x99	; 153
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	1f c0       	rjmp	.+62     	; 0x1ae4 <HLCD_init+0x59a>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	eb 59       	subi	r30, 0x9B	; 155
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	eb 59       	subi	r30, 0x9B	; 155
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <HLCD_init+0x574>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	eb 59       	subi	r30, 0x9B	; 155
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	de 01       	movw	r26, r28
    1ace:	a9 59       	subi	r26, 0x99	; 153
    1ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e9 59       	subi	r30, 0x99	; 153
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	9c 93       	st	X, r25
    1ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e9 59       	subi	r30, 0x99	; 153
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	d1 f6       	brne	.-76     	; 0x1aa6 <HLCD_init+0x55c>
    1af2:	27 c0       	rjmp	.+78     	; 0x1b42 <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	8e 01       	movw	r16, r28
    1af6:	09 59       	subi	r16, 0x99	; 153
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e7 59       	subi	r30, 0x97	; 151
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	de 01       	movw	r26, r28
    1b18:	ad 59       	subi	r26, 0x9D	; 157
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e9 59       	subi	r30, 0x99	; 153
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	8d 93       	st	X+, r24
    1b28:	9c 93       	st	X, r25
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ed 59       	subi	r30, 0x9D	; 157
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <HLCD_init+0x5ea>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 59       	subi	r30, 0x9D	; 157
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    1b42:	fe 01       	movw	r30, r28
    1b44:	e3 56       	subi	r30, 0x63	; 99
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	6f e0       	ldi	r22, 0x0F	; 15
    1b4e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    1b52:	fe 01       	movw	r30, r28
    1b54:	e1 5a       	subi	r30, 0xA1	; 161
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a8 e4       	ldi	r26, 0x48	; 72
    1b5e:	b2 e4       	ldi	r27, 0x42	; 66
    1b60:	80 83       	st	Z, r24
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	8e 01       	movw	r16, r28
    1b6a:	05 5a       	subi	r16, 0xA5	; 165
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e1 5a       	subi	r30, 0xA1	; 161
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b96:	fe 01       	movw	r30, r28
    1b98:	e5 5a       	subi	r30, 0xA5	; 165
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	44 f4       	brge	.+16     	; 0x1bc4 <HLCD_init+0x67a>
		__ticks = 1;
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e7 5a       	subi	r30, 0xA7	; 167
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	64 c0       	rjmp	.+200    	; 0x1c8c <HLCD_init+0x742>
	else if (__tmp > 65535)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5a       	subi	r30, 0xA5	; 165
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	0c f0       	brlt	.+2      	; 0x1be4 <HLCD_init+0x69a>
    1be2:	43 c0       	rjmp	.+134    	; 0x1c6a <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	fe 01       	movw	r30, r28
    1be6:	e1 5a       	subi	r30, 0xA1	; 161
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8e 01       	movw	r16, r28
    1c04:	07 5a       	subi	r16, 0xA7	; 167
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	1f c0       	rjmp	.+62     	; 0x1c5a <HLCD_init+0x710>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e9 5a       	subi	r30, 0xA9	; 169
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e9 5a       	subi	r30, 0xA9	; 169
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <HLCD_init+0x6ea>
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e9 5a       	subi	r30, 0xA9	; 169
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	de 01       	movw	r26, r28
    1c44:	a7 5a       	subi	r26, 0xA7	; 167
    1c46:	bf 4f       	sbci	r27, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e7 5a       	subi	r30, 0xA7	; 167
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e7 5a       	subi	r30, 0xA7	; 167
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	d1 f6       	brne	.-76     	; 0x1c1c <HLCD_init+0x6d2>
    1c68:	27 c0       	rjmp	.+78     	; 0x1cb8 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	07 5a       	subi	r16, 0xA7	; 167
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	e5 5a       	subi	r30, 0xA5	; 165
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	de 01       	movw	r26, r28
    1c8e:	ab 5a       	subi	r26, 0xAB	; 171
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5a       	subi	r30, 0xA7	; 167
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	8d 93       	st	X+, r24
    1c9e:	9c 93       	st	X, r25
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	eb 5a       	subi	r30, 0xAB	; 171
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <HLCD_init+0x760>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	eb 5a       	subi	r30, 0xAB	; 171
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e3 56       	subi	r30, 0x63	; 99
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ef 5a       	subi	r30, 0xAF	; 175
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a8 e4       	ldi	r26, 0x48	; 72
    1cd4:	b2 e4       	ldi	r27, 0x42	; 66
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	03 5b       	subi	r16, 0xB3	; 179
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ef 5a       	subi	r30, 0xAF	; 175
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 83       	st	Z, r24
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	a2 83       	std	Z+2, r26	; 0x02
    1d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e3 5b       	subi	r30, 0xB3	; 179
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	44 f4       	brge	.+16     	; 0x1d3a <HLCD_init+0x7f0>
		__ticks = 1;
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e5 5b       	subi	r30, 0xB5	; 181
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	64 c0       	rjmp	.+200    	; 0x1e02 <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e3 5b       	subi	r30, 0xB3	; 179
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <HLCD_init+0x810>
    1d58:	43 c0       	rjmp	.+134    	; 0x1de0 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	ef 5a       	subi	r30, 0xAF	; 175
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8e 01       	movw	r16, r28
    1d7a:	05 5b       	subi	r16, 0xB5	; 181
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <HLCD_init+0x886>
    1d92:	fe 01       	movw	r30, r28
    1d94:	e7 5b       	subi	r30, 0xB7	; 183
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5b       	subi	r30, 0xB7	; 183
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <HLCD_init+0x860>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 5b       	subi	r30, 0xB7	; 183
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	de 01       	movw	r26, r28
    1dba:	a5 5b       	subi	r26, 0xB5	; 181
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e5 5b       	subi	r30, 0xB5	; 181
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	9c 93       	st	X, r25
    1dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e5 5b       	subi	r30, 0xB5	; 181
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	d1 f6       	brne	.-76     	; 0x1d92 <HLCD_init+0x848>
    1dde:	27 c0       	rjmp	.+78     	; 0x1e2e <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	8e 01       	movw	r16, r28
    1de2:	05 5b       	subi	r16, 0xB5	; 181
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e3 5b       	subi	r30, 0xB3	; 179
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	de 01       	movw	r26, r28
    1e04:	a9 5b       	subi	r26, 0xB9	; 185
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5b       	subi	r30, 0xB5	; 181
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	8d 93       	st	X+, r24
    1e14:	9c 93       	st	X, r25
    1e16:	fe 01       	movw	r30, r28
    1e18:	e9 5b       	subi	r30, 0xB9	; 185
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <HLCD_init+0x8d6>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 5b       	subi	r30, 0xB9	; 185
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e3 56       	subi	r30, 0x63	; 99
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ed 5b       	subi	r30, 0xBD	; 189
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a8 e4       	ldi	r26, 0x48	; 72
    1e4a:	b2 e4       	ldi	r27, 0x42	; 66
    1e4c:	80 83       	st	Z, r24
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	a2 83       	std	Z+2, r26	; 0x02
    1e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	8e 01       	movw	r16, r28
    1e56:	01 5c       	subi	r16, 0xC1	; 193
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 5b       	subi	r30, 0xBD	; 189
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	f8 01       	movw	r30, r16
    1e7a:	80 83       	st	Z, r24
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	a2 83       	std	Z+2, r26	; 0x02
    1e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e82:	fe 01       	movw	r30, r28
    1e84:	ff 96       	adiw	r30, 0x3f	; 63
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <HLCD_init+0x95e>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e af       	std	Y+62, r25	; 0x3e
    1ea4:	8d af       	std	Y+61, r24	; 0x3d
    1ea6:	46 c0       	rjmp	.+140    	; 0x1f34 <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ff 96       	adiw	r30, 0x3f	; 63
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	64 f5       	brge	.+88     	; 0x1f1c <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ed 5b       	subi	r30, 0xBD	; 189
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	60 81       	ld	r22, Z
    1ecc:	71 81       	ldd	r23, Z+1	; 0x01
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e af       	std	Y+62, r25	; 0x3e
    1ef0:	8d af       	std	Y+61, r24	; 0x3d
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <HLCD_init+0x9c8>
    1ef4:	88 ec       	ldi	r24, 0xC8	; 200
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c af       	std	Y+60, r25	; 0x3c
    1efa:	8b af       	std	Y+59, r24	; 0x3b
    1efc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1efe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <HLCD_init+0x9b6>
    1f04:	9c af       	std	Y+60, r25	; 0x3c
    1f06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e af       	std	Y+62, r25	; 0x3e
    1f10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <HLCD_init+0x9aa>
    1f1a:	58 c2       	rjmp	.+1200   	; 0x23cc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ff 96       	adiw	r30, 0x3f	; 63
    1f20:	60 81       	ld	r22, Z
    1f22:	71 81       	ldd	r23, Z+1	; 0x01
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e af       	std	Y+62, r25	; 0x3e
    1f32:	8d af       	std	Y+61, r24	; 0x3d
    1f34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f38:	9a af       	std	Y+58, r25	; 0x3a
    1f3a:	89 af       	std	Y+57, r24	; 0x39
    1f3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <HLCD_init+0x9f6>
    1f44:	9a af       	std	Y+58, r25	; 0x3a
    1f46:	89 af       	std	Y+57, r24	; 0x39
    1f48:	41 c2       	rjmp	.+1154   	; 0x23cc <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 56       	subi	r30, 0x63	; 99
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	01 90       	ld	r0, Z+
    1f52:	f0 81       	ld	r31, Z
    1f54:	e0 2d       	mov	r30, r0
    1f56:	80 81       	ld	r24, Z
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <HLCD_init+0xa14>
    1f5c:	2c c2       	rjmp	.+1112   	; 0x23b6 <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e1 58       	subi	r30, 0x81	; 129
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 81       	ld	r24, Z
    1f66:	88 23       	and	r24, r24
    1f68:	81 f4       	brne	.+32     	; 0x1f8a <HLCD_init+0xa40>
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 56       	subi	r30, 0x63	; 99
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	01 90       	ld	r0, Z+
    1f72:	f0 81       	ld	r31, Z
    1f74:	e0 2d       	mov	r30, r0
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_initPort>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e1 58       	subi	r30, 0x81	; 129
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 83       	st	Z, r24
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e0 58       	subi	r30, 0x80	; 128
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 83       	st	Z, r24
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e8       	ldi	r26, 0x80	; 128
    1f9a:	bf e3       	ldi	r27, 0x3F	; 63
    1f9c:	8d ab       	std	Y+53, r24	; 0x35
    1f9e:	9e ab       	std	Y+54, r25	; 0x36
    1fa0:	af ab       	std	Y+55, r26	; 0x37
    1fa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 ab       	std	Y+49, r24	; 0x31
    1fbe:	9a ab       	std	Y+50, r25	; 0x32
    1fc0:	ab ab       	std	Y+51, r26	; 0x33
    1fc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fca:	9c a9       	ldd	r25, Y+52	; 0x34
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <HLCD_init+0xa9c>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	98 ab       	std	Y+48, r25	; 0x30
    1fe2:	8f a7       	std	Y+47, r24	; 0x2f
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    1fe6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fea:	8b a9       	ldd	r24, Y+51	; 0x33
    1fec:	9c a9       	ldd	r25, Y+52	; 0x34
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <HLCD_init+0xafc>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9e a7       	std	Y+46, r25	; 0x2e
    202e:	8d a7       	std	Y+45, r24	; 0x2d
    2030:	8d a5       	ldd	r24, Y+45	; 0x2d
    2032:	9e a5       	ldd	r25, Y+46	; 0x2e
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <HLCD_init+0xaea>
    2038:	9e a7       	std	Y+46, r25	; 0x2e
    203a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8f a5       	ldd	r24, Y+47	; 0x2f
    2048:	98 a9       	ldd	r25, Y+48	; 0x30
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <HLCD_init+0xade>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
    2064:	8f a5       	ldd	r24, Y+47	; 0x2f
    2066:	98 a9       	ldd	r25, Y+48	; 0x30
    2068:	9c a7       	std	Y+44, r25	; 0x2c
    206a:	8b a7       	std	Y+43, r24	; 0x2b
    206c:	8b a5       	ldd	r24, Y+43	; 0x2b
    206e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <HLCD_init+0xb26>
    2074:	9c a7       	std	Y+44, r25	; 0x2c
    2076:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    2078:	fe 01       	movw	r30, r28
    207a:	e1 58       	subi	r30, 0x81	; 129
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	69 f4       	brne	.+26     	; 0x209e <HLCD_init+0xb54>
    2084:	fe 01       	movw	r30, r28
    2086:	e3 56       	subi	r30, 0x63	; 99
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	68 e3       	ldi	r22, 0x38	; 56
    2090:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    2094:	fe 01       	movw	r30, r28
    2096:	e0 58       	subi	r30, 0x80	; 128
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 83       	st	Z, r24
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    209e:	fe 01       	movw	r30, r28
    20a0:	e0 58       	subi	r30, 0x80	; 128
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 83       	st	Z, r24
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e8       	ldi	r26, 0x80	; 128
    20ae:	bf e3       	ldi	r27, 0x3F	; 63
    20b0:	8f a3       	std	Y+39, r24	; 0x27
    20b2:	98 a7       	std	Y+40, r25	; 0x28
    20b4:	a9 a7       	std	Y+41, r26	; 0x29
    20b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ba:	78 a5       	ldd	r23, Y+40	; 0x28
    20bc:	89 a5       	ldd	r24, Y+41	; 0x29
    20be:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a ef       	ldi	r20, 0xFA	; 250
    20c6:	54 e4       	ldi	r21, 0x44	; 68
    20c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8b a3       	std	Y+35, r24	; 0x23
    20d2:	9c a3       	std	Y+36, r25	; 0x24
    20d4:	ad a3       	std	Y+37, r26	; 0x25
    20d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d8:	6b a1       	ldd	r22, Y+35	; 0x23
    20da:	7c a1       	ldd	r23, Y+36	; 0x24
    20dc:	8d a1       	ldd	r24, Y+37	; 0x25
    20de:	9e a1       	ldd	r25, Y+38	; 0x26
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	2c f4       	brge	.+10     	; 0x20fa <HLCD_init+0xbb0>
		__ticks = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    20fa:	6b a1       	ldd	r22, Y+35	; 0x23
    20fc:	7c a1       	ldd	r23, Y+36	; 0x24
    20fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2100:	9e a1       	ldd	r25, Y+38	; 0x26
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	4c f5       	brge	.+82     	; 0x2164 <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	6f a1       	ldd	r22, Y+39	; 0x27
    2114:	78 a5       	ldd	r23, Y+40	; 0x28
    2116:	89 a5       	ldd	r24, Y+41	; 0x29
    2118:	9a a5       	ldd	r25, Y+42	; 0x2a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	0f c0       	rjmp	.+30     	; 0x215a <HLCD_init+0xc10>
    213c:	88 ec       	ldi	r24, 0xC8	; 200
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	98 a3       	std	Y+32, r25	; 0x20
    2142:	8f 8f       	std	Y+31, r24	; 0x1f
    2144:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2146:	98 a1       	ldd	r25, Y+32	; 0x20
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <HLCD_init+0xbfe>
    214c:	98 a3       	std	Y+32, r25	; 0x20
    214e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	89 a1       	ldd	r24, Y+33	; 0x21
    2152:	9a a1       	ldd	r25, Y+34	; 0x22
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	89 a1       	ldd	r24, Y+33	; 0x21
    215c:	9a a1       	ldd	r25, Y+34	; 0x22
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <HLCD_init+0xbf2>
    2162:	14 c0       	rjmp	.+40     	; 0x218c <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	8d a1       	ldd	r24, Y+37	; 0x25
    216a:	9e a1       	ldd	r25, Y+38	; 0x26
    216c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9a a3       	std	Y+34, r25	; 0x22
    2176:	89 a3       	std	Y+33, r24	; 0x21
    2178:	89 a1       	ldd	r24, Y+33	; 0x21
    217a:	9a a1       	ldd	r25, Y+34	; 0x22
    217c:	9e 8f       	std	Y+30, r25	; 0x1e
    217e:	8d 8f       	std	Y+29, r24	; 0x1d
    2180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <HLCD_init+0xc3a>
    2188:	9e 8f       	std	Y+30, r25	; 0x1e
    218a:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    218c:	fe 01       	movw	r30, r28
    218e:	e0 58       	subi	r30, 0x80	; 128
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	88 23       	and	r24, r24
    2196:	69 f4       	brne	.+26     	; 0x21b2 <HLCD_init+0xc68>
    2198:	fe 01       	movw	r30, r28
    219a:	e3 56       	subi	r30, 0x63	; 99
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	6e e0       	ldi	r22, 0x0E	; 14
    21a4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e0 58       	subi	r30, 0x80	; 128
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 83       	st	Z, r24
    21b0:	05 c0       	rjmp	.+10     	; 0x21bc <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    21b2:	fe 01       	movw	r30, r28
    21b4:	e0 58       	subi	r30, 0x80	; 128
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 83       	st	Z, r24
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e8       	ldi	r26, 0x80	; 128
    21c2:	bf e3       	ldi	r27, 0x3F	; 63
    21c4:	89 8f       	std	Y+25, r24	; 0x19
    21c6:	9a 8f       	std	Y+26, r25	; 0x1a
    21c8:	ab 8f       	std	Y+27, r26	; 0x1b
    21ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	69 8d       	ldd	r22, Y+25	; 0x19
    21ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a ef       	ldi	r20, 0xFA	; 250
    21da:	54 e4       	ldi	r21, 0x44	; 68
    21dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8d 8b       	std	Y+21, r24	; 0x15
    21e6:	9e 8b       	std	Y+22, r25	; 0x16
    21e8:	af 8b       	std	Y+23, r26	; 0x17
    21ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ec:	6d 89       	ldd	r22, Y+21	; 0x15
    21ee:	7e 89       	ldd	r23, Y+22	; 0x16
    21f0:	8f 89       	ldd	r24, Y+23	; 0x17
    21f2:	98 8d       	ldd	r25, Y+24	; 0x18
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	2c f4       	brge	.+10     	; 0x220e <HLCD_init+0xcc4>
		__ticks = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9c 8b       	std	Y+20, r25	; 0x14
    220a:	8b 8b       	std	Y+19, r24	; 0x13
    220c:	3f c0       	rjmp	.+126    	; 0x228c <HLCD_init+0xd42>
	else if (__tmp > 65535)
    220e:	6d 89       	ldd	r22, Y+21	; 0x15
    2210:	7e 89       	ldd	r23, Y+22	; 0x16
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	98 8d       	ldd	r25, Y+24	; 0x18
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	4c f5       	brge	.+82     	; 0x2278 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2226:	69 8d       	ldd	r22, Y+25	; 0x19
    2228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	0f c0       	rjmp	.+30     	; 0x226e <HLCD_init+0xd24>
    2250:	88 ec       	ldi	r24, 0xC8	; 200
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9a 8b       	std	Y+18, r25	; 0x12
    2256:	89 8b       	std	Y+17, r24	; 0x11
    2258:	89 89       	ldd	r24, Y+17	; 0x11
    225a:	9a 89       	ldd	r25, Y+18	; 0x12
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <HLCD_init+0xd12>
    2260:	9a 8b       	std	Y+18, r25	; 0x12
    2262:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	8b 89       	ldd	r24, Y+19	; 0x13
    2266:	9c 89       	ldd	r25, Y+20	; 0x14
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	8b 89       	ldd	r24, Y+19	; 0x13
    2270:	9c 89       	ldd	r25, Y+20	; 0x14
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <HLCD_init+0xd06>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	98 8b       	std	Y+16, r25	; 0x10
    2292:	8f 87       	std	Y+15, r24	; 0x0f
    2294:	8f 85       	ldd	r24, Y+15	; 0x0f
    2296:	98 89       	ldd	r25, Y+16	; 0x10
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <HLCD_init+0xd4e>
    229c:	98 8b       	std	Y+16, r25	; 0x10
    229e:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    22a0:	fe 01       	movw	r30, r28
    22a2:	e0 58       	subi	r30, 0x80	; 128
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	88 23       	and	r24, r24
    22aa:	69 f4       	brne	.+26     	; 0x22c6 <HLCD_init+0xd7c>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e3 56       	subi	r30, 0x63	; 99
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    22bc:	fe 01       	movw	r30, r28
    22be:	e0 58       	subi	r30, 0x80	; 128
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 83       	st	Z, r24
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    22c6:	fe 01       	movw	r30, r28
    22c8:	e0 58       	subi	r30, 0x80	; 128
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 83       	st	Z, r24
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	8b 87       	std	Y+11, r24	; 0x0b
    22da:	9c 87       	std	Y+12, r25	; 0x0c
    22dc:	ad 87       	std	Y+13, r26	; 0x0d
    22de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a ef       	ldi	r20, 0xFA	; 250
    22ee:	54 e4       	ldi	r21, 0x44	; 68
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8f 83       	std	Y+7, r24	; 0x07
    22fa:	98 87       	std	Y+8, r25	; 0x08
    22fc:	a9 87       	std	Y+9, r26	; 0x09
    22fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	2c f4       	brge	.+10     	; 0x2322 <HLCD_init+0xdd8>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	3f c0       	rjmp	.+126    	; 0x23a0 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	57 e4       	ldi	r21, 0x47	; 71
    2332:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	4c f5       	brge	.+82     	; 0x238c <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	6b 85       	ldd	r22, Y+11	; 0x0b
    233c:	7c 85       	ldd	r23, Y+12	; 0x0c
    233e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2340:	9e 85       	ldd	r25, Y+14	; 0x0e
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e2       	ldi	r20, 0x20	; 32
    2348:	51 e4       	ldi	r21, 0x41	; 65
    234a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <HLCD_init+0xe38>
    2364:	88 ec       	ldi	r24, 0xC8	; 200
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9c 83       	std	Y+4, r25	; 0x04
    236a:	8b 83       	std	Y+3, r24	; 0x03
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <HLCD_init+0xe26>
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	69 f7       	brne	.-38     	; 0x2364 <HLCD_init+0xe1a>
    238a:	20 c0       	rjmp	.+64     	; 0x23cc <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <HLCD_init+0xe62>
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	0b c0       	rjmp	.+22     	; 0x23cc <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    23b6:	fe 01       	movw	r30, r28
    23b8:	e0 58       	subi	r30, 0x80	; 128
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	80 83       	st	Z, r24
    23c0:	05 c0       	rjmp	.+10     	; 0x23cc <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    23c2:	fe 01       	movw	r30, r28
    23c4:	e0 58       	subi	r30, 0x80	; 128
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	80 83       	st	Z, r24
	}

	return lcdRet;
    23cc:	fe 01       	movw	r30, r28
    23ce:	e0 58       	subi	r30, 0x80	; 128
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
}
    23d4:	c2 56       	subi	r28, 0x62	; 98
    23d6:	df 4f       	sbci	r29, 0xFF	; 255
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

000023ec <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	cd 59       	subi	r28, 0x9D	; 157
    23fa:	d0 40       	sbci	r29, 0x00	; 0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	fe 01       	movw	r30, r28
    2408:	e5 56       	subi	r30, 0x65	; 101
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	fe 01       	movw	r30, r28
    2412:	e3 56       	subi	r30, 0x63	; 99
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    2418:	fe 01       	movw	r30, r28
    241a:	e2 57       	subi	r30, 0x72	; 114
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2422:	fe 01       	movw	r30, r28
    2424:	e3 57       	subi	r30, 0x73	; 115
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    242c:	fe 01       	movw	r30, r28
    242e:	e5 56       	subi	r30, 0x65	; 101
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	09 f4       	brne	.+2      	; 0x243c <HLCD_sendCmd+0x50>
    243a:	2f c7       	rjmp	.+3678   	; 0x329a <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    243c:	fe 01       	movw	r30, r28
    243e:	e5 56       	subi	r30, 0x65	; 101
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	01 90       	ld	r0, Z+
    2444:	f0 81       	ld	r31, Z
    2446:	e0 2d       	mov	r30, r0
    2448:	81 81       	ldd	r24, Z+1	; 0x01
    244a:	fe 01       	movw	r30, r28
    244c:	e5 56       	subi	r30, 0x65	; 101
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	01 90       	ld	r0, Z+
    2452:	f0 81       	ld	r31, Z
    2454:	e0 2d       	mov	r30, r0
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	fe 01       	movw	r30, r28
    245a:	e1 57       	subi	r30, 0x71	; 113
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 83       	st	Z, r24
    2460:	fe 01       	movw	r30, r28
    2462:	e1 57       	subi	r30, 0x71	; 113
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	fe 01       	movw	r30, r28
    246a:	e1 57       	subi	r30, 0x71	; 113
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	82 83       	std	Z+2, r24	; 0x02
    2472:	fe 01       	movw	r30, r28
    2474:	e1 57       	subi	r30, 0x71	; 113
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    247a:	fe 01       	movw	r30, r28
    247c:	e5 56       	subi	r30, 0x65	; 101
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	01 90       	ld	r0, Z+
    2482:	f0 81       	ld	r31, Z
    2484:	e0 2d       	mov	r30, r0
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	fe 01       	movw	r30, r28
    248a:	e5 56       	subi	r30, 0x65	; 101
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	01 90       	ld	r0, Z+
    2490:	f0 81       	ld	r31, Z
    2492:	e0 2d       	mov	r30, r0
    2494:	94 81       	ldd	r25, Z+4	; 0x04
    2496:	fe 01       	movw	r30, r28
    2498:	ed 56       	subi	r30, 0x6D	; 109
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 83       	st	Z, r24
    249e:	fe 01       	movw	r30, r28
    24a0:	ed 56       	subi	r30, 0x6D	; 109
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	fe 01       	movw	r30, r28
    24a8:	ed 56       	subi	r30, 0x6D	; 109
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	82 83       	std	Z+2, r24	; 0x02
    24b0:	fe 01       	movw	r30, r28
    24b2:	ed 56       	subi	r30, 0x6D	; 109
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 56       	subi	r30, 0x65	; 101
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	01 90       	ld	r0, Z+
    24c0:	f0 81       	ld	r31, Z
    24c2:	e0 2d       	mov	r30, r0
    24c4:	81 81       	ldd	r24, Z+1	; 0x01
    24c6:	fe 01       	movw	r30, r28
    24c8:	e5 56       	subi	r30, 0x65	; 101
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	01 90       	ld	r0, Z+
    24ce:	f0 81       	ld	r31, Z
    24d0:	e0 2d       	mov	r30, r0
    24d2:	95 81       	ldd	r25, Z+5	; 0x05
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 56       	subi	r30, 0x69	; 105
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 83       	st	Z, r24
    24dc:	fe 01       	movw	r30, r28
    24de:	e9 56       	subi	r30, 0x69	; 105
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	fe 01       	movw	r30, r28
    24e6:	e9 56       	subi	r30, 0x69	; 105
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	82 83       	std	Z+2, r24	; 0x02
    24ee:	fe 01       	movw	r30, r28
    24f0:	e9 56       	subi	r30, 0x69	; 105
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    24f6:	ce 01       	movw	r24, r28
    24f8:	81 57       	subi	r24, 0x71	; 113
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    2502:	fe 01       	movw	r30, r28
    2504:	e3 57       	subi	r30, 0x73	; 115
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    250a:	fe 01       	movw	r30, r28
    250c:	e3 57       	subi	r30, 0x73	; 115
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	88 23       	and	r24, r24
    2514:	59 f4       	brne	.+22     	; 0x252c <HLCD_sendCmd+0x140>
    2516:	ce 01       	movw	r24, r28
    2518:	8d 56       	subi	r24, 0x6D	; 109
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    2522:	fe 01       	movw	r30, r28
    2524:	e3 57       	subi	r30, 0x73	; 115
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 83       	st	Z, r24
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    252c:	fe 01       	movw	r30, r28
    252e:	e2 57       	subi	r30, 0x72	; 114
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 83       	st	Z, r24
    2536:	fe 01       	movw	r30, r28
    2538:	e7 57       	subi	r30, 0x77	; 119
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 ef       	ldi	r26, 0xF0	; 240
    2542:	b1 e4       	ldi	r27, 0x41	; 65
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	8e 01       	movw	r16, r28
    254e:	0b 57       	subi	r16, 0x7B	; 123
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e7 57       	subi	r30, 0x77	; 119
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257a:	fe 01       	movw	r30, r28
    257c:	eb 57       	subi	r30, 0x7B	; 123
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	44 f4       	brge	.+16     	; 0x25a8 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    2598:	fe 01       	movw	r30, r28
    259a:	ed 57       	subi	r30, 0x7D	; 125
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	64 c0       	rjmp	.+200    	; 0x2670 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    25a8:	fe 01       	movw	r30, r28
    25aa:	eb 57       	subi	r30, 0x7B	; 123
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <HLCD_sendCmd+0x1dc>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	fe 01       	movw	r30, r28
    25ca:	e7 57       	subi	r30, 0x77	; 119
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8e 01       	movw	r16, r28
    25e8:	0d 57       	subi	r16, 0x7D	; 125
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	1f c0       	rjmp	.+62     	; 0x263e <HLCD_sendCmd+0x252>
    2600:	fe 01       	movw	r30, r28
    2602:	ef 57       	subi	r30, 0x7F	; 127
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	88 ec       	ldi	r24, 0xC8	; 200
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	fe 01       	movw	r30, r28
    2610:	ef 57       	subi	r30, 0x7F	; 127
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <HLCD_sendCmd+0x22c>
    261c:	fe 01       	movw	r30, r28
    261e:	ef 57       	subi	r30, 0x7F	; 127
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	de 01       	movw	r26, r28
    2628:	ad 57       	subi	r26, 0x7D	; 125
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	ed 57       	subi	r30, 0x7D	; 125
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	fe 01       	movw	r30, r28
    2640:	ed 57       	subi	r30, 0x7D	; 125
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	d1 f6       	brne	.-76     	; 0x2600 <HLCD_sendCmd+0x214>
    264c:	28 c0       	rjmp	.+80     	; 0x269e <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	8e 01       	movw	r16, r28
    2650:	0d 57       	subi	r16, 0x7D	; 125
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	eb 57       	subi	r30, 0x7B	; 123
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	de 01       	movw	r26, r28
    2672:	a1 58       	subi	r26, 0x81	; 129
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	ed 57       	subi	r30, 0x7D	; 125
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	11 96       	adiw	r26, 0x01	; 1
    2682:	9c 93       	st	X, r25
    2684:	8e 93       	st	-X, r24
    2686:	fe 01       	movw	r30, r28
    2688:	e1 58       	subi	r30, 0x81	; 129
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <HLCD_sendCmd+0x2a4>
    2694:	fe 01       	movw	r30, r28
    2696:	e1 58       	subi	r30, 0x81	; 129
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    269e:	fe 01       	movw	r30, r28
    26a0:	e5 56       	subi	r30, 0x65	; 101
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	01 90       	ld	r0, Z+
    26a6:	f0 81       	ld	r31, Z
    26a8:	e0 2d       	mov	r30, r0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <HLCD_sendCmd+0x2c6>
    26b0:	3d c4       	rjmp	.+2170   	; 0x2f2c <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    26b2:	fe 01       	movw	r30, r28
    26b4:	e3 57       	subi	r30, 0x73	; 115
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	88 23       	and	r24, r24
    26bc:	59 f4       	brne	.+22     	; 0x26d4 <HLCD_sendCmd+0x2e8>
    26be:	ce 01       	movw	r24, r28
    26c0:	89 56       	subi	r24, 0x69	; 105
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e3 57       	subi	r30, 0x73	; 115
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 83       	st	Z, r24
    26d2:	05 c0       	rjmp	.+10     	; 0x26de <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    26d4:	fe 01       	movw	r30, r28
    26d6:	e2 57       	subi	r30, 0x72	; 114
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	80 83       	st	Z, r24
    26de:	fe 01       	movw	r30, r28
    26e0:	e5 58       	subi	r30, 0x85	; 133
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a8 e4       	ldi	r26, 0x48	; 72
    26ea:	b2 e4       	ldi	r27, 0x42	; 66
    26ec:	80 83       	st	Z, r24
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	a2 83       	std	Z+2, r26	; 0x02
    26f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	8e 01       	movw	r16, r28
    26f6:	09 58       	subi	r16, 0x89	; 137
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	e5 58       	subi	r30, 0x85	; 133
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a ef       	ldi	r20, 0xFA	; 250
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	80 83       	st	Z, r24
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	a2 83       	std	Z+2, r26	; 0x02
    2720:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2722:	fe 01       	movw	r30, r28
    2724:	e9 58       	subi	r30, 0x89	; 137
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	44 f4       	brge	.+16     	; 0x2750 <HLCD_sendCmd+0x364>
		__ticks = 1;
    2740:	fe 01       	movw	r30, r28
    2742:	eb 58       	subi	r30, 0x8B	; 139
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	64 c0       	rjmp	.+200    	; 0x2818 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    2750:	fe 01       	movw	r30, r28
    2752:	e9 58       	subi	r30, 0x89	; 137
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	0c f0       	brlt	.+2      	; 0x2770 <HLCD_sendCmd+0x384>
    276e:	43 c0       	rjmp	.+134    	; 0x27f6 <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	fe 01       	movw	r30, r28
    2772:	e5 58       	subi	r30, 0x85	; 133
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e2       	ldi	r20, 0x20	; 32
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8e 01       	movw	r16, r28
    2790:	0b 58       	subi	r16, 0x8B	; 139
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	f8 01       	movw	r30, r16
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	1f c0       	rjmp	.+62     	; 0x27e6 <HLCD_sendCmd+0x3fa>
    27a8:	fe 01       	movw	r30, r28
    27aa:	ed 58       	subi	r30, 0x8D	; 141
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	fe 01       	movw	r30, r28
    27b8:	ed 58       	subi	r30, 0x8D	; 141
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <HLCD_sendCmd+0x3d4>
    27c4:	fe 01       	movw	r30, r28
    27c6:	ed 58       	subi	r30, 0x8D	; 141
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	de 01       	movw	r26, r28
    27d0:	ab 58       	subi	r26, 0x8B	; 139
    27d2:	bf 4f       	sbci	r27, 0xFF	; 255
    27d4:	fe 01       	movw	r30, r28
    27d6:	eb 58       	subi	r30, 0x8B	; 139
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	11 96       	adiw	r26, 0x01	; 1
    27e2:	9c 93       	st	X, r25
    27e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	fe 01       	movw	r30, r28
    27e8:	eb 58       	subi	r30, 0x8B	; 139
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	d1 f6       	brne	.-76     	; 0x27a8 <HLCD_sendCmd+0x3bc>
    27f4:	27 c0       	rjmp	.+78     	; 0x2844 <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	8e 01       	movw	r16, r28
    27f8:	0b 58       	subi	r16, 0x8B	; 139
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	fe 01       	movw	r30, r28
    27fe:	e9 58       	subi	r30, 0x89	; 137
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	60 81       	ld	r22, Z
    2804:	71 81       	ldd	r23, Z+1	; 0x01
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	93 81       	ldd	r25, Z+3	; 0x03
    280a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	de 01       	movw	r26, r28
    281a:	af 58       	subi	r26, 0x8F	; 143
    281c:	bf 4f       	sbci	r27, 0xFF	; 255
    281e:	fe 01       	movw	r30, r28
    2820:	eb 58       	subi	r30, 0x8B	; 139
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	8d 93       	st	X+, r24
    282a:	9c 93       	st	X, r25
    282c:	fe 01       	movw	r30, r28
    282e:	ef 58       	subi	r30, 0x8F	; 143
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <HLCD_sendCmd+0x44a>
    283a:	fe 01       	movw	r30, r28
    283c:	ef 58       	subi	r30, 0x8F	; 143
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    2844:	fe 01       	movw	r30, r28
    2846:	e5 56       	subi	r30, 0x65	; 101
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	01 90       	ld	r0, Z+
    284c:	f0 81       	ld	r31, Z
    284e:	e0 2d       	mov	r30, r0
    2850:	22 81       	ldd	r18, Z+2	; 0x02
    2852:	fe 01       	movw	r30, r28
    2854:	e3 56       	subi	r30, 0x63	; 99
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	98 2f       	mov	r25, r24
    285c:	92 95       	swap	r25
    285e:	9f 70       	andi	r25, 0x0F	; 15
    2860:	82 2f       	mov	r24, r18
    2862:	69 2f       	mov	r22, r25
    2864:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GPIO_set4msbValue>
    2868:	fe 01       	movw	r30, r28
    286a:	e3 59       	subi	r30, 0x93	; 147
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a8 e4       	ldi	r26, 0x48	; 72
    2874:	b2 e4       	ldi	r27, 0x42	; 66
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	8e 01       	movw	r16, r28
    2880:	07 59       	subi	r16, 0x97	; 151
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	e3 59       	subi	r30, 0x93	; 147
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a ef       	ldi	r20, 0xFA	; 250
    2898:	54 e4       	ldi	r21, 0x44	; 68
    289a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 83       	st	Z, r24
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	a2 83       	std	Z+2, r26	; 0x02
    28aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e7 59       	subi	r30, 0x97	; 151
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	44 f4       	brge	.+16     	; 0x28da <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 59       	subi	r30, 0x99	; 153
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	64 c0       	rjmp	.+200    	; 0x29a2 <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 59       	subi	r30, 0x97	; 151
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	0c f0       	brlt	.+2      	; 0x28fa <HLCD_sendCmd+0x50e>
    28f8:	43 c0       	rjmp	.+134    	; 0x2980 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	fe 01       	movw	r30, r28
    28fc:	e3 59       	subi	r30, 0x93	; 147
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8e 01       	movw	r16, r28
    291a:	09 59       	subi	r16, 0x99	; 153
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	1f c0       	rjmp	.+62     	; 0x2970 <HLCD_sendCmd+0x584>
    2932:	fe 01       	movw	r30, r28
    2934:	eb 59       	subi	r30, 0x9B	; 155
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	fe 01       	movw	r30, r28
    2942:	eb 59       	subi	r30, 0x9B	; 155
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <HLCD_sendCmd+0x55e>
    294e:	fe 01       	movw	r30, r28
    2950:	eb 59       	subi	r30, 0x9B	; 155
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	de 01       	movw	r26, r28
    295a:	a9 59       	subi	r26, 0x99	; 153
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e9 59       	subi	r30, 0x99	; 153
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	11 96       	adiw	r26, 0x01	; 1
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	fe 01       	movw	r30, r28
    2972:	e9 59       	subi	r30, 0x99	; 153
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	d1 f6       	brne	.-76     	; 0x2932 <HLCD_sendCmd+0x546>
    297e:	28 c0       	rjmp	.+80     	; 0x29d0 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	8e 01       	movw	r16, r28
    2982:	09 59       	subi	r16, 0x99	; 153
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	e7 59       	subi	r30, 0x97	; 151
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	de 01       	movw	r26, r28
    29a4:	ad 59       	subi	r26, 0x9D	; 157
    29a6:	bf 4f       	sbci	r27, 0xFF	; 255
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 59       	subi	r30, 0x99	; 153
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	11 96       	adiw	r26, 0x01	; 1
    29b4:	9c 93       	st	X, r25
    29b6:	8e 93       	st	-X, r24
    29b8:	fe 01       	movw	r30, r28
    29ba:	ed 59       	subi	r30, 0x9D	; 157
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <HLCD_sendCmd+0x5d6>
    29c6:	fe 01       	movw	r30, r28
    29c8:	ed 59       	subi	r30, 0x9D	; 157
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    29d0:	fe 01       	movw	r30, r28
    29d2:	e3 57       	subi	r30, 0x73	; 115
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	88 23       	and	r24, r24
    29da:	59 f4       	brne	.+22     	; 0x29f2 <HLCD_sendCmd+0x606>
    29dc:	ce 01       	movw	r24, r28
    29de:	89 56       	subi	r24, 0x69	; 105
    29e0:	9f 4f       	sbci	r25, 0xFF	; 255
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    29e8:	fe 01       	movw	r30, r28
    29ea:	e3 57       	subi	r30, 0x73	; 115
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 83       	st	Z, r24
    29f0:	05 c0       	rjmp	.+10     	; 0x29fc <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    29f2:	fe 01       	movw	r30, r28
    29f4:	e2 57       	subi	r30, 0x72	; 114
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 83       	st	Z, r24
    29fc:	fe 01       	movw	r30, r28
    29fe:	e1 5a       	subi	r30, 0xA1	; 161
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a8 e4       	ldi	r26, 0x48	; 72
    2a08:	b2 e4       	ldi	r27, 0x42	; 66
    2a0a:	80 83       	st	Z, r24
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	a2 83       	std	Z+2, r26	; 0x02
    2a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a12:	8e 01       	movw	r16, r28
    2a14:	05 5a       	subi	r16, 0xA5	; 165
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e1 5a       	subi	r30, 0xA1	; 161
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a ef       	ldi	r20, 0xFA	; 250
    2a2c:	54 e4       	ldi	r21, 0x44	; 68
    2a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a40:	fe 01       	movw	r30, r28
    2a42:	e5 5a       	subi	r30, 0xA5	; 165
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	60 81       	ld	r22, Z
    2a48:	71 81       	ldd	r23, Z+1	; 0x01
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	44 f4       	brge	.+16     	; 0x2a6e <HLCD_sendCmd+0x682>
		__ticks = 1;
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e7 5a       	subi	r30, 0xA7	; 167
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
    2a6c:	64 c0       	rjmp	.+200    	; 0x2b36 <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e5 5a       	subi	r30, 0xA5	; 165
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	3f ef       	ldi	r19, 0xFF	; 255
    2a80:	4f e7       	ldi	r20, 0x7F	; 127
    2a82:	57 e4       	ldi	r21, 0x47	; 71
    2a84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a88:	18 16       	cp	r1, r24
    2a8a:	0c f0       	brlt	.+2      	; 0x2a8e <HLCD_sendCmd+0x6a2>
    2a8c:	43 c0       	rjmp	.+134    	; 0x2b14 <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e1 5a       	subi	r30, 0xA1	; 161
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	8e 01       	movw	r16, r28
    2aae:	07 5a       	subi	r16, 0xA7	; 167
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
    2ac4:	1f c0       	rjmp	.+62     	; 0x2b04 <HLCD_sendCmd+0x718>
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e9 5a       	subi	r30, 0xA9	; 169
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e9 5a       	subi	r30, 0xA9	; 169
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <HLCD_sendCmd+0x6f2>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e9 5a       	subi	r30, 0xA9	; 169
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	de 01       	movw	r26, r28
    2aee:	a7 5a       	subi	r26, 0xA7	; 167
    2af0:	bf 4f       	sbci	r27, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	e7 5a       	subi	r30, 0xA7	; 167
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	11 96       	adiw	r26, 0x01	; 1
    2b00:	9c 93       	st	X, r25
    2b02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	fe 01       	movw	r30, r28
    2b06:	e7 5a       	subi	r30, 0xA7	; 167
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	d1 f6       	brne	.-76     	; 0x2ac6 <HLCD_sendCmd+0x6da>
    2b12:	28 c0       	rjmp	.+80     	; 0x2b64 <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	8e 01       	movw	r16, r28
    2b16:	07 5a       	subi	r16, 0xA7	; 167
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e5 5a       	subi	r30, 0xA5	; 165
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	f8 01       	movw	r30, r16
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	80 83       	st	Z, r24
    2b36:	de 01       	movw	r26, r28
    2b38:	ab 5a       	subi	r26, 0xAB	; 171
    2b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e7 5a       	subi	r30, 0xA7	; 167
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	11 96       	adiw	r26, 0x01	; 1
    2b48:	9c 93       	st	X, r25
    2b4a:	8e 93       	st	-X, r24
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	eb 5a       	subi	r30, 0xAB	; 171
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <HLCD_sendCmd+0x76a>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	eb 5a       	subi	r30, 0xAB	; 171
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 57       	subi	r30, 0x73	; 115
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	88 23       	and	r24, r24
    2b6e:	59 f4       	brne	.+22     	; 0x2b86 <HLCD_sendCmd+0x79a>
    2b70:	ce 01       	movw	r24, r28
    2b72:	89 56       	subi	r24, 0x69	; 105
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 57       	subi	r30, 0x73	; 115
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 83       	st	Z, r24
    2b84:	05 c0       	rjmp	.+10     	; 0x2b90 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    2b86:	fe 01       	movw	r30, r28
    2b88:	e2 57       	subi	r30, 0x72	; 114
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	80 83       	st	Z, r24
    2b90:	fe 01       	movw	r30, r28
    2b92:	ef 5a       	subi	r30, 0xAF	; 175
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	a8 e4       	ldi	r26, 0x48	; 72
    2b9c:	b2 e4       	ldi	r27, 0x42	; 66
    2b9e:	80 83       	st	Z, r24
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	a2 83       	std	Z+2, r26	; 0x02
    2ba4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba6:	8e 01       	movw	r16, r28
    2ba8:	03 5b       	subi	r16, 0xB3	; 179
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	ef 5a       	subi	r30, 0xAF	; 175
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4a ef       	ldi	r20, 0xFA	; 250
    2bc0:	54 e4       	ldi	r21, 0x44	; 68
    2bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	f8 01       	movw	r30, r16
    2bcc:	80 83       	st	Z, r24
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	a2 83       	std	Z+2, r26	; 0x02
    2bd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e3 5b       	subi	r30, 0xB3	; 179
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	44 f4       	brge	.+16     	; 0x2c02 <HLCD_sendCmd+0x816>
		__ticks = 1;
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e5 5b       	subi	r30, 0xB5	; 181
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
    2c00:	64 c0       	rjmp	.+200    	; 0x2cca <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    2c02:	fe 01       	movw	r30, r28
    2c04:	e3 5b       	subi	r30, 0xB3	; 179
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	0c f0       	brlt	.+2      	; 0x2c22 <HLCD_sendCmd+0x836>
    2c20:	43 c0       	rjmp	.+134    	; 0x2ca8 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c22:	fe 01       	movw	r30, r28
    2c24:	ef 5a       	subi	r30, 0xAF	; 175
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	51 e4       	ldi	r21, 0x41	; 65
    2c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	8e 01       	movw	r16, r28
    2c42:	05 5b       	subi	r16, 0xB5	; 181
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	f8 01       	movw	r30, r16
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	1f c0       	rjmp	.+62     	; 0x2c98 <HLCD_sendCmd+0x8ac>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e7 5b       	subi	r30, 0xB7	; 183
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	88 ec       	ldi	r24, 0xC8	; 200
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e7 5b       	subi	r30, 0xB7	; 183
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <HLCD_sendCmd+0x886>
    2c76:	fe 01       	movw	r30, r28
    2c78:	e7 5b       	subi	r30, 0xB7	; 183
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	de 01       	movw	r26, r28
    2c82:	a5 5b       	subi	r26, 0xB5	; 181
    2c84:	bf 4f       	sbci	r27, 0xFF	; 255
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 5b       	subi	r30, 0xB5	; 181
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	11 96       	adiw	r26, 0x01	; 1
    2c94:	9c 93       	st	X, r25
    2c96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e5 5b       	subi	r30, 0xB5	; 181
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	d1 f6       	brne	.-76     	; 0x2c5a <HLCD_sendCmd+0x86e>
    2ca6:	27 c0       	rjmp	.+78     	; 0x2cf6 <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca8:	8e 01       	movw	r16, r28
    2caa:	05 5b       	subi	r16, 0xB5	; 181
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e3 5b       	subi	r30, 0xB3	; 179
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	de 01       	movw	r26, r28
    2ccc:	a9 5b       	subi	r26, 0xB9	; 185
    2cce:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5b       	subi	r30, 0xB5	; 181
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	8d 93       	st	X+, r24
    2cdc:	9c 93       	st	X, r25
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 5b       	subi	r30, 0xB9	; 185
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <HLCD_sendCmd+0x8fc>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 5b       	subi	r30, 0xB9	; 185
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e5 56       	subi	r30, 0x65	; 101
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	01 90       	ld	r0, Z+
    2cfe:	f0 81       	ld	r31, Z
    2d00:	e0 2d       	mov	r30, r0
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	fe 01       	movw	r30, r28
    2d06:	e3 56       	subi	r30, 0x63	; 99
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GPIO_set4msbValue>
    2d10:	fe 01       	movw	r30, r28
    2d12:	ed 5b       	subi	r30, 0xBD	; 189
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	a8 e4       	ldi	r26, 0x48	; 72
    2d1c:	b2 e4       	ldi	r27, 0x42	; 66
    2d1e:	80 83       	st	Z, r24
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	a2 83       	std	Z+2, r26	; 0x02
    2d24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d26:	8e 01       	movw	r16, r28
    2d28:	01 5c       	subi	r16, 0xC1	; 193
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	ed 5b       	subi	r30, 0xBD	; 189
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4a ef       	ldi	r20, 0xFA	; 250
    2d40:	54 e4       	ldi	r21, 0x44	; 68
    2d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	f8 01       	movw	r30, r16
    2d4c:	80 83       	st	Z, r24
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	a2 83       	std	Z+2, r26	; 0x02
    2d52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d54:	fe 01       	movw	r30, r28
    2d56:	ff 96       	adiw	r30, 0x3f	; 63
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <HLCD_sendCmd+0x98e>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e af       	std	Y+62, r25	; 0x3e
    2d76:	8d af       	std	Y+61, r24	; 0x3d
    2d78:	46 c0       	rjmp	.+140    	; 0x2e06 <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ff 96       	adiw	r30, 0x3f	; 63
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	64 f5       	brge	.+88     	; 0x2dee <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 5b       	subi	r30, 0xBD	; 189
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e af       	std	Y+62, r25	; 0x3e
    2dc2:	8d af       	std	Y+61, r24	; 0x3d
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <HLCD_sendCmd+0x9f8>
    2dc6:	88 ec       	ldi	r24, 0xC8	; 200
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	9c af       	std	Y+60, r25	; 0x3c
    2dcc:	8b af       	std	Y+59, r24	; 0x3b
    2dce:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <HLCD_sendCmd+0x9e6>
    2dd6:	9c af       	std	Y+60, r25	; 0x3c
    2dd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ddc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9e af       	std	Y+62, r25	; 0x3e
    2de2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2de6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <HLCD_sendCmd+0x9da>
    2dec:	16 c0       	rjmp	.+44     	; 0x2e1a <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	fe 01       	movw	r30, r28
    2df0:	ff 96       	adiw	r30, 0x3f	; 63
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e af       	std	Y+62, r25	; 0x3e
    2e04:	8d af       	std	Y+61, r24	; 0x3d
    2e06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e0a:	9a af       	std	Y+58, r25	; 0x3a
    2e0c:	89 af       	std	Y+57, r24	; 0x39
    2e0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <HLCD_sendCmd+0xa26>
    2e16:	9a af       	std	Y+58, r25	; 0x3a
    2e18:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e3 57       	subi	r30, 0x73	; 115
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	88 23       	and	r24, r24
    2e24:	59 f4       	brne	.+22     	; 0x2e3c <HLCD_sendCmd+0xa50>
    2e26:	ce 01       	movw	r24, r28
    2e28:	89 56       	subi	r24, 0x69	; 105
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e3 57       	subi	r30, 0x73	; 115
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 83       	st	Z, r24
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e2 57       	subi	r30, 0x72	; 114
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	80 83       	st	Z, r24
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a8 e4       	ldi	r26, 0x48	; 72
    2e4c:	b2 e4       	ldi	r27, 0x42	; 66
    2e4e:	8d ab       	std	Y+53, r24	; 0x35
    2e50:	9e ab       	std	Y+54, r25	; 0x36
    2e52:	af ab       	std	Y+55, r26	; 0x37
    2e54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	6d a9       	ldd	r22, Y+53	; 0x35
    2e58:	7e a9       	ldd	r23, Y+54	; 0x36
    2e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a ef       	ldi	r20, 0xFA	; 250
    2e64:	54 e4       	ldi	r21, 0x44	; 68
    2e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	89 ab       	std	Y+49, r24	; 0x31
    2e70:	9a ab       	std	Y+50, r25	; 0x32
    2e72:	ab ab       	std	Y+51, r26	; 0x33
    2e74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e76:	69 a9       	ldd	r22, Y+49	; 0x31
    2e78:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	98 ab       	std	Y+48, r25	; 0x30
    2e94:	8f a7       	std	Y+47, r24	; 0x2f
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    2e98:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb2:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb4:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb6:	98 ad       	ldd	r25, Y+56	; 0x38
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	98 ab       	std	Y+48, r25	; 0x30
    2ed6:	8f a7       	std	Y+47, r24	; 0x2f
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <HLCD_sendCmd+0xb0c>
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9e a7       	std	Y+46, r25	; 0x2e
    2ee0:	8d a7       	std	Y+45, r24	; 0x2d
    2ee2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ee4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <HLCD_sendCmd+0xafa>
    2eea:	9e a7       	std	Y+46, r25	; 0x2e
    2eec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	98 ab       	std	Y+48, r25	; 0x30
    2ef6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efa:	98 a9       	ldd	r25, Y+48	; 0x30
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <HLCD_sendCmd+0xaee>
    2f00:	bb c1       	rjmp	.+886    	; 0x3278 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	69 a9       	ldd	r22, Y+49	; 0x31
    2f04:	7a a9       	ldd	r23, Y+50	; 0x32
    2f06:	8b a9       	ldd	r24, Y+51	; 0x33
    2f08:	9c a9       	ldd	r25, Y+52	; 0x34
    2f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	98 ab       	std	Y+48, r25	; 0x30
    2f14:	8f a7       	std	Y+47, r24	; 0x2f
    2f16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f18:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1a:	9c a7       	std	Y+44, r25	; 0x2c
    2f1c:	8b a7       	std	Y+43, r24	; 0x2b
    2f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <HLCD_sendCmd+0xb36>
    2f26:	9c a7       	std	Y+44, r25	; 0x2c
    2f28:	8b a7       	std	Y+43, r24	; 0x2b
    2f2a:	a6 c1       	rjmp	.+844    	; 0x3278 <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e5 56       	subi	r30, 0x65	; 101
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	01 90       	ld	r0, Z+
    2f34:	f0 81       	ld	r31, Z
    2f36:	e0 2d       	mov	r30, r0
    2f38:	80 81       	ld	r24, Z
    2f3a:	81 30       	cpi	r24, 0x01	; 1
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <HLCD_sendCmd+0xb54>
    2f3e:	97 c1       	rjmp	.+814    	; 0x326e <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    2f40:	fe 01       	movw	r30, r28
    2f42:	e3 57       	subi	r30, 0x73	; 115
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	88 23       	and	r24, r24
    2f4a:	59 f4       	brne	.+22     	; 0x2f62 <HLCD_sendCmd+0xb76>
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	89 56       	subi	r24, 0x69	; 105
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e3 57       	subi	r30, 0x73	; 115
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 83       	st	Z, r24
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    2f62:	fe 01       	movw	r30, r28
    2f64:	e2 57       	subi	r30, 0x72	; 114
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	80 83       	st	Z, r24
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	a0 e8       	ldi	r26, 0x80	; 128
    2f72:	bf e3       	ldi	r27, 0x3F	; 63
    2f74:	8f a3       	std	Y+39, r24	; 0x27
    2f76:	98 a7       	std	Y+40, r25	; 0x28
    2f78:	a9 a7       	std	Y+41, r26	; 0x29
    2f7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f80:	89 a5       	ldd	r24, Y+41	; 0x29
    2f82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a ef       	ldi	r20, 0xFA	; 250
    2f8a:	54 e4       	ldi	r21, 0x44	; 68
    2f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	8b a3       	std	Y+35, r24	; 0x23
    2f96:	9c a3       	std	Y+36, r25	; 0x24
    2f98:	ad a3       	std	Y+37, r26	; 0x25
    2f9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	2c f4       	brge	.+10     	; 0x2fbe <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9a a3       	std	Y+34, r25	; 0x22
    2fba:	89 a3       	std	Y+33, r24	; 0x21
    2fbc:	3f c0       	rjmp	.+126    	; 0x303c <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    2fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	3f ef       	ldi	r19, 0xFF	; 255
    2fca:	4f e7       	ldi	r20, 0x7F	; 127
    2fcc:	57 e4       	ldi	r21, 0x47	; 71
    2fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fd2:	18 16       	cp	r1, r24
    2fd4:	4c f5       	brge	.+82     	; 0x3028 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fd8:	78 a5       	ldd	r23, Y+40	; 0x28
    2fda:	89 a5       	ldd	r24, Y+41	; 0x29
    2fdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e2       	ldi	r20, 0x20	; 32
    2fe4:	51 e4       	ldi	r21, 0x41	; 65
    2fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9a a3       	std	Y+34, r25	; 0x22
    2ffc:	89 a3       	std	Y+33, r24	; 0x21
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <HLCD_sendCmd+0xc32>
    3000:	88 ec       	ldi	r24, 0xC8	; 200
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	98 a3       	std	Y+32, r25	; 0x20
    3006:	8f 8f       	std	Y+31, r24	; 0x1f
    3008:	8f 8d       	ldd	r24, Y+31	; 0x1f
    300a:	98 a1       	ldd	r25, Y+32	; 0x20
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <HLCD_sendCmd+0xc20>
    3010:	98 a3       	std	Y+32, r25	; 0x20
    3012:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3014:	89 a1       	ldd	r24, Y+33	; 0x21
    3016:	9a a1       	ldd	r25, Y+34	; 0x22
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	9a a3       	std	Y+34, r25	; 0x22
    301c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301e:	89 a1       	ldd	r24, Y+33	; 0x21
    3020:	9a a1       	ldd	r25, Y+34	; 0x22
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	69 f7       	brne	.-38     	; 0x3000 <HLCD_sendCmd+0xc14>
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	6b a1       	ldd	r22, Y+35	; 0x23
    302a:	7c a1       	ldd	r23, Y+36	; 0x24
    302c:	8d a1       	ldd	r24, Y+37	; 0x25
    302e:	9e a1       	ldd	r25, Y+38	; 0x26
    3030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9a a3       	std	Y+34, r25	; 0x22
    303a:	89 a3       	std	Y+33, r24	; 0x21
    303c:	89 a1       	ldd	r24, Y+33	; 0x21
    303e:	9a a1       	ldd	r25, Y+34	; 0x22
    3040:	9e 8f       	std	Y+30, r25	; 0x1e
    3042:	8d 8f       	std	Y+29, r24	; 0x1d
    3044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3046:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <HLCD_sendCmd+0xc5c>
    304c:	9e 8f       	std	Y+30, r25	; 0x1e
    304e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    3050:	fe 01       	movw	r30, r28
    3052:	e5 56       	subi	r30, 0x65	; 101
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	01 90       	ld	r0, Z+
    3058:	f0 81       	ld	r31, Z
    305a:	e0 2d       	mov	r30, r0
    305c:	92 81       	ldd	r25, Z+2	; 0x02
    305e:	fe 01       	movw	r30, r28
    3060:	e3 56       	subi	r30, 0x63	; 99
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	89 2f       	mov	r24, r25
    3070:	ba 01       	movw	r22, r20
    3072:	a9 01       	movw	r20, r18
    3074:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_SetPortValue>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 e8       	ldi	r26, 0x80	; 128
    307e:	bf e3       	ldi	r27, 0x3F	; 63
    3080:	89 8f       	std	Y+25, r24	; 0x19
    3082:	9a 8f       	std	Y+26, r25	; 0x1a
    3084:	ab 8f       	std	Y+27, r26	; 0x1b
    3086:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	69 8d       	ldd	r22, Y+25	; 0x19
    308a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    308c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    308e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8d 8b       	std	Y+21, r24	; 0x15
    30a2:	9e 8b       	std	Y+22, r25	; 0x16
    30a4:	af 8b       	std	Y+23, r26	; 0x17
    30a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30a8:	6d 89       	ldd	r22, Y+21	; 0x15
    30aa:	7e 89       	ldd	r23, Y+22	; 0x16
    30ac:	8f 89       	ldd	r24, Y+23	; 0x17
    30ae:	98 8d       	ldd	r25, Y+24	; 0x18
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <HLCD_sendCmd+0xcde>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9c 8b       	std	Y+20, r25	; 0x14
    30c6:	8b 8b       	std	Y+19, r24	; 0x13
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    30ca:	6d 89       	ldd	r22, Y+21	; 0x15
    30cc:	7e 89       	ldd	r23, Y+22	; 0x16
    30ce:	8f 89       	ldd	r24, Y+23	; 0x17
    30d0:	98 8d       	ldd	r25, Y+24	; 0x18
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	69 8d       	ldd	r22, Y+25	; 0x19
    30e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9c 8b       	std	Y+20, r25	; 0x14
    3108:	8b 8b       	std	Y+19, r24	; 0x13
    310a:	0f c0       	rjmp	.+30     	; 0x312a <HLCD_sendCmd+0xd3e>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9a 8b       	std	Y+18, r25	; 0x12
    3112:	89 8b       	std	Y+17, r24	; 0x11
    3114:	89 89       	ldd	r24, Y+17	; 0x11
    3116:	9a 89       	ldd	r25, Y+18	; 0x12
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <HLCD_sendCmd+0xd2c>
    311c:	9a 8b       	std	Y+18, r25	; 0x12
    311e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8b 89       	ldd	r24, Y+19	; 0x13
    3122:	9c 89       	ldd	r25, Y+20	; 0x14
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9c 8b       	std	Y+20, r25	; 0x14
    3128:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8b 89       	ldd	r24, Y+19	; 0x13
    312c:	9c 89       	ldd	r25, Y+20	; 0x14
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <HLCD_sendCmd+0xd20>
    3132:	14 c0       	rjmp	.+40     	; 0x315c <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	6d 89       	ldd	r22, Y+21	; 0x15
    3136:	7e 89       	ldd	r23, Y+22	; 0x16
    3138:	8f 89       	ldd	r24, Y+23	; 0x17
    313a:	98 8d       	ldd	r25, Y+24	; 0x18
    313c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    3148:	8b 89       	ldd	r24, Y+19	; 0x13
    314a:	9c 89       	ldd	r25, Y+20	; 0x14
    314c:	98 8b       	std	Y+16, r25	; 0x10
    314e:	8f 87       	std	Y+15, r24	; 0x0f
    3150:	8f 85       	ldd	r24, Y+15	; 0x0f
    3152:	98 89       	ldd	r25, Y+16	; 0x10
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <HLCD_sendCmd+0xd68>
    3158:	98 8b       	std	Y+16, r25	; 0x10
    315a:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    315c:	fe 01       	movw	r30, r28
    315e:	e3 57       	subi	r30, 0x73	; 115
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	88 23       	and	r24, r24
    3166:	59 f4       	brne	.+22     	; 0x317e <HLCD_sendCmd+0xd92>
    3168:	ce 01       	movw	r24, r28
    316a:	89 56       	subi	r24, 0x69	; 105
    316c:	9f 4f       	sbci	r25, 0xFF	; 255
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    3174:	fe 01       	movw	r30, r28
    3176:	e3 57       	subi	r30, 0x73	; 115
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 83       	st	Z, r24
    317c:	05 c0       	rjmp	.+10     	; 0x3188 <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    317e:	fe 01       	movw	r30, r28
    3180:	e2 57       	subi	r30, 0x72	; 114
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 83       	st	Z, r24
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	a0 e8       	ldi	r26, 0x80	; 128
    318e:	bf e3       	ldi	r27, 0x3F	; 63
    3190:	8b 87       	std	Y+11, r24	; 0x0b
    3192:	9c 87       	std	Y+12, r25	; 0x0c
    3194:	ad 87       	std	Y+13, r26	; 0x0d
    3196:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3198:	6b 85       	ldd	r22, Y+11	; 0x0b
    319a:	7c 85       	ldd	r23, Y+12	; 0x0c
    319c:	8d 85       	ldd	r24, Y+13	; 0x0d
    319e:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	4a ef       	ldi	r20, 0xFA	; 250
    31a6:	54 e4       	ldi	r21, 0x44	; 68
    31a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8f 83       	std	Y+7, r24	; 0x07
    31b2:	98 87       	std	Y+8, r25	; 0x08
    31b4:	a9 87       	std	Y+9, r26	; 0x09
    31b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ba:	78 85       	ldd	r23, Y+8	; 0x08
    31bc:	89 85       	ldd	r24, Y+9	; 0x09
    31be:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	2c f4       	brge	.+10     	; 0x31da <HLCD_sendCmd+0xdee>
		__ticks = 1;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	3f c0       	rjmp	.+126    	; 0x3258 <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    31da:	6f 81       	ldd	r22, Y+7	; 0x07
    31dc:	78 85       	ldd	r23, Y+8	; 0x08
    31de:	89 85       	ldd	r24, Y+9	; 0x09
    31e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	57 e4       	ldi	r21, 0x47	; 71
    31ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	4c f5       	brge	.+82     	; 0x3244 <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e2       	ldi	r20, 0x20	; 32
    3200:	51 e4       	ldi	r21, 0x41	; 65
    3202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	0f c0       	rjmp	.+30     	; 0x323a <HLCD_sendCmd+0xe4e>
    321c:	88 ec       	ldi	r24, 0xC8	; 200
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <HLCD_sendCmd+0xe3c>
    322c:	9c 83       	std	Y+4, r25	; 0x04
    322e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	69 f7       	brne	.-38     	; 0x321c <HLCD_sendCmd+0xe30>
    3242:	1a c0       	rjmp	.+52     	; 0x3278 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <HLCD_sendCmd+0xe78>
    3268:	9a 83       	std	Y+2, r25	; 0x02
    326a:	89 83       	std	Y+1, r24	; 0x01
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    326e:	fe 01       	movw	r30, r28
    3270:	e2 57       	subi	r30, 0x72	; 114
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	83 e0       	ldi	r24, 0x03	; 3
    3276:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    3278:	fe 01       	movw	r30, r28
    327a:	e3 57       	subi	r30, 0x73	; 115
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	88 23       	and	r24, r24
    3282:	29 f4       	brne	.+10     	; 0x328e <HLCD_sendCmd+0xea2>
    3284:	fe 01       	movw	r30, r28
    3286:	e2 57       	subi	r30, 0x72	; 114
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	10 82       	st	Z, r1
    328c:	0b c0       	rjmp	.+22     	; 0x32a4 <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    328e:	fe 01       	movw	r30, r28
    3290:	e2 57       	subi	r30, 0x72	; 114
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	80 83       	st	Z, r24
    3298:	05 c0       	rjmp	.+10     	; 0x32a4 <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    329a:	fe 01       	movw	r30, r28
    329c:	e2 57       	subi	r30, 0x72	; 114
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	80 83       	st	Z, r24
	}

	return lcdRet;
    32a4:	fe 01       	movw	r30, r28
    32a6:	e2 57       	subi	r30, 0x72	; 114
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
}
    32ac:	c3 56       	subi	r28, 0x63	; 99
    32ae:	df 4f       	sbci	r29, 0xFF	; 255
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	08 95       	ret

000032c4 <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	cd 59       	subi	r28, 0x9D	; 157
    32d2:	d0 40       	sbci	r29, 0x00	; 0
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	fe 01       	movw	r30, r28
    32e0:	e5 56       	subi	r30, 0x65	; 101
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	fe 01       	movw	r30, r28
    32ea:	e3 56       	subi	r30, 0x63	; 99
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    32f0:	fe 01       	movw	r30, r28
    32f2:	e2 57       	subi	r30, 0x72	; 114
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    32fa:	fe 01       	movw	r30, r28
    32fc:	e3 57       	subi	r30, 0x73	; 115
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    3304:	fe 01       	movw	r30, r28
    3306:	e5 56       	subi	r30, 0x65	; 101
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	09 f4       	brne	.+2      	; 0x3314 <HLCD_displayChar+0x50>
    3312:	2f c7       	rjmp	.+3678   	; 0x4172 <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3314:	fe 01       	movw	r30, r28
    3316:	e5 56       	subi	r30, 0x65	; 101
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	01 90       	ld	r0, Z+
    331c:	f0 81       	ld	r31, Z
    331e:	e0 2d       	mov	r30, r0
    3320:	81 81       	ldd	r24, Z+1	; 0x01
    3322:	fe 01       	movw	r30, r28
    3324:	e5 56       	subi	r30, 0x65	; 101
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	01 90       	ld	r0, Z+
    332a:	f0 81       	ld	r31, Z
    332c:	e0 2d       	mov	r30, r0
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	fe 01       	movw	r30, r28
    3332:	e1 57       	subi	r30, 0x71	; 113
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 83       	st	Z, r24
    3338:	fe 01       	movw	r30, r28
    333a:	e1 57       	subi	r30, 0x71	; 113
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	fe 01       	movw	r30, r28
    3342:	e1 57       	subi	r30, 0x71	; 113
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	82 83       	std	Z+2, r24	; 0x02
    334a:	fe 01       	movw	r30, r28
    334c:	e1 57       	subi	r30, 0x71	; 113
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3352:	fe 01       	movw	r30, r28
    3354:	e5 56       	subi	r30, 0x65	; 101
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	01 90       	ld	r0, Z+
    335a:	f0 81       	ld	r31, Z
    335c:	e0 2d       	mov	r30, r0
    335e:	81 81       	ldd	r24, Z+1	; 0x01
    3360:	fe 01       	movw	r30, r28
    3362:	e5 56       	subi	r30, 0x65	; 101
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	01 90       	ld	r0, Z+
    3368:	f0 81       	ld	r31, Z
    336a:	e0 2d       	mov	r30, r0
    336c:	94 81       	ldd	r25, Z+4	; 0x04
    336e:	fe 01       	movw	r30, r28
    3370:	ed 56       	subi	r30, 0x6D	; 109
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	80 83       	st	Z, r24
    3376:	fe 01       	movw	r30, r28
    3378:	ed 56       	subi	r30, 0x6D	; 109
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	fe 01       	movw	r30, r28
    3380:	ed 56       	subi	r30, 0x6D	; 109
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	82 83       	std	Z+2, r24	; 0x02
    3388:	fe 01       	movw	r30, r28
    338a:	ed 56       	subi	r30, 0x6D	; 109
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3390:	fe 01       	movw	r30, r28
    3392:	e5 56       	subi	r30, 0x65	; 101
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	01 90       	ld	r0, Z+
    3398:	f0 81       	ld	r31, Z
    339a:	e0 2d       	mov	r30, r0
    339c:	81 81       	ldd	r24, Z+1	; 0x01
    339e:	fe 01       	movw	r30, r28
    33a0:	e5 56       	subi	r30, 0x65	; 101
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	01 90       	ld	r0, Z+
    33a6:	f0 81       	ld	r31, Z
    33a8:	e0 2d       	mov	r30, r0
    33aa:	95 81       	ldd	r25, Z+5	; 0x05
    33ac:	fe 01       	movw	r30, r28
    33ae:	e9 56       	subi	r30, 0x69	; 105
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 83       	st	Z, r24
    33b4:	fe 01       	movw	r30, r28
    33b6:	e9 56       	subi	r30, 0x69	; 105
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	fe 01       	movw	r30, r28
    33be:	e9 56       	subi	r30, 0x69	; 105
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	82 83       	std	Z+2, r24	; 0x02
    33c6:	fe 01       	movw	r30, r28
    33c8:	e9 56       	subi	r30, 0x69	; 105
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    33ce:	ce 01       	movw	r24, r28
    33d0:	81 57       	subi	r24, 0x71	; 113
    33d2:	9f 4f       	sbci	r25, 0xFF	; 255
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    33da:	fe 01       	movw	r30, r28
    33dc:	e3 57       	subi	r30, 0x73	; 115
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    33e2:	fe 01       	movw	r30, r28
    33e4:	e3 57       	subi	r30, 0x73	; 115
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	88 23       	and	r24, r24
    33ec:	59 f4       	brne	.+22     	; 0x3404 <HLCD_displayChar+0x140>
    33ee:	ce 01       	movw	r24, r28
    33f0:	8d 56       	subi	r24, 0x6D	; 109
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    33fa:	fe 01       	movw	r30, r28
    33fc:	e3 57       	subi	r30, 0x73	; 115
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 83       	st	Z, r24
    3402:	05 c0       	rjmp	.+10     	; 0x340e <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    3404:	fe 01       	movw	r30, r28
    3406:	e2 57       	subi	r30, 0x72	; 114
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 83       	st	Z, r24
    340e:	fe 01       	movw	r30, r28
    3410:	e7 57       	subi	r30, 0x77	; 119
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 ef       	ldi	r26, 0xF0	; 240
    341a:	b1 e4       	ldi	r27, 0x41	; 65
    341c:	80 83       	st	Z, r24
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	a2 83       	std	Z+2, r26	; 0x02
    3422:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	8e 01       	movw	r16, r28
    3426:	0b 57       	subi	r16, 0x7B	; 123
    3428:	1f 4f       	sbci	r17, 0xFF	; 255
    342a:	fe 01       	movw	r30, r28
    342c:	e7 57       	subi	r30, 0x77	; 119
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	4a ef       	ldi	r20, 0xFA	; 250
    343e:	54 e4       	ldi	r21, 0x44	; 68
    3440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	f8 01       	movw	r30, r16
    344a:	80 83       	st	Z, r24
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	a2 83       	std	Z+2, r26	; 0x02
    3450:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3452:	fe 01       	movw	r30, r28
    3454:	eb 57       	subi	r30, 0x7B	; 123
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	60 81       	ld	r22, Z
    345a:	71 81       	ldd	r23, Z+1	; 0x01
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	93 81       	ldd	r25, Z+3	; 0x03
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e8       	ldi	r20, 0x80	; 128
    3466:	5f e3       	ldi	r21, 0x3F	; 63
    3468:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    346c:	88 23       	and	r24, r24
    346e:	44 f4       	brge	.+16     	; 0x3480 <HLCD_displayChar+0x1bc>
		__ticks = 1;
    3470:	fe 01       	movw	r30, r28
    3472:	ed 57       	subi	r30, 0x7D	; 125
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	64 c0       	rjmp	.+200    	; 0x3548 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    3480:	fe 01       	movw	r30, r28
    3482:	eb 57       	subi	r30, 0x7B	; 123
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	60 81       	ld	r22, Z
    3488:	71 81       	ldd	r23, Z+1	; 0x01
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	3f ef       	ldi	r19, 0xFF	; 255
    3492:	4f e7       	ldi	r20, 0x7F	; 127
    3494:	57 e4       	ldi	r21, 0x47	; 71
    3496:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    349a:	18 16       	cp	r1, r24
    349c:	0c f0       	brlt	.+2      	; 0x34a0 <HLCD_displayChar+0x1dc>
    349e:	43 c0       	rjmp	.+134    	; 0x3526 <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a0:	fe 01       	movw	r30, r28
    34a2:	e7 57       	subi	r30, 0x77	; 119
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e2       	ldi	r20, 0x20	; 32
    34b4:	51 e4       	ldi	r21, 0x41	; 65
    34b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	8e 01       	movw	r16, r28
    34c0:	0d 57       	subi	r16, 0x7D	; 125
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	f8 01       	movw	r30, r16
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
    34d6:	1f c0       	rjmp	.+62     	; 0x3516 <HLCD_displayChar+0x252>
    34d8:	fe 01       	movw	r30, r28
    34da:	ef 57       	subi	r30, 0x7F	; 127
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	88 ec       	ldi	r24, 0xC8	; 200
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
    34e6:	fe 01       	movw	r30, r28
    34e8:	ef 57       	subi	r30, 0x7F	; 127
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	80 81       	ld	r24, Z
    34ee:	91 81       	ldd	r25, Z+1	; 0x01
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <HLCD_displayChar+0x22c>
    34f4:	fe 01       	movw	r30, r28
    34f6:	ef 57       	subi	r30, 0x7F	; 127
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fe:	de 01       	movw	r26, r28
    3500:	ad 57       	subi	r26, 0x7D	; 125
    3502:	bf 4f       	sbci	r27, 0xFF	; 255
    3504:	fe 01       	movw	r30, r28
    3506:	ed 57       	subi	r30, 0x7D	; 125
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	11 96       	adiw	r26, 0x01	; 1
    3512:	9c 93       	st	X, r25
    3514:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3516:	fe 01       	movw	r30, r28
    3518:	ed 57       	subi	r30, 0x7D	; 125
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 81       	ld	r24, Z
    351e:	91 81       	ldd	r25, Z+1	; 0x01
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	d1 f6       	brne	.-76     	; 0x34d8 <HLCD_displayChar+0x214>
    3524:	28 c0       	rjmp	.+80     	; 0x3576 <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3526:	8e 01       	movw	r16, r28
    3528:	0d 57       	subi	r16, 0x7D	; 125
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	fe 01       	movw	r30, r28
    352e:	eb 57       	subi	r30, 0x7B	; 123
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	f8 01       	movw	r30, r16
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	de 01       	movw	r26, r28
    354a:	a1 58       	subi	r26, 0x81	; 129
    354c:	bf 4f       	sbci	r27, 0xFF	; 255
    354e:	fe 01       	movw	r30, r28
    3550:	ed 57       	subi	r30, 0x7D	; 125
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	11 96       	adiw	r26, 0x01	; 1
    355a:	9c 93       	st	X, r25
    355c:	8e 93       	st	-X, r24
    355e:	fe 01       	movw	r30, r28
    3560:	e1 58       	subi	r30, 0x81	; 129
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <HLCD_displayChar+0x2a4>
    356c:	fe 01       	movw	r30, r28
    356e:	e1 58       	subi	r30, 0x81	; 129
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    3576:	fe 01       	movw	r30, r28
    3578:	e5 56       	subi	r30, 0x65	; 101
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	01 90       	ld	r0, Z+
    357e:	f0 81       	ld	r31, Z
    3580:	e0 2d       	mov	r30, r0
    3582:	80 81       	ld	r24, Z
    3584:	88 23       	and	r24, r24
    3586:	09 f0       	breq	.+2      	; 0x358a <HLCD_displayChar+0x2c6>
    3588:	3d c4       	rjmp	.+2170   	; 0x3e04 <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    358a:	fe 01       	movw	r30, r28
    358c:	e3 57       	subi	r30, 0x73	; 115
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	88 23       	and	r24, r24
    3594:	59 f4       	brne	.+22     	; 0x35ac <HLCD_displayChar+0x2e8>
    3596:	ce 01       	movw	r24, r28
    3598:	89 56       	subi	r24, 0x69	; 105
    359a:	9f 4f       	sbci	r25, 0xFF	; 255
    359c:	61 e0       	ldi	r22, 0x01	; 1
    359e:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    35a2:	fe 01       	movw	r30, r28
    35a4:	e3 57       	subi	r30, 0x73	; 115
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 83       	st	Z, r24
    35aa:	05 c0       	rjmp	.+10     	; 0x35b6 <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    35ac:	fe 01       	movw	r30, r28
    35ae:	e2 57       	subi	r30, 0x72	; 114
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	80 83       	st	Z, r24
    35b6:	fe 01       	movw	r30, r28
    35b8:	e5 58       	subi	r30, 0x85	; 133
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a0 ef       	ldi	r26, 0xF0	; 240
    35c2:	b1 e4       	ldi	r27, 0x41	; 65
    35c4:	80 83       	st	Z, r24
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	a2 83       	std	Z+2, r26	; 0x02
    35ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	8e 01       	movw	r16, r28
    35ce:	09 58       	subi	r16, 0x89	; 137
    35d0:	1f 4f       	sbci	r17, 0xFF	; 255
    35d2:	fe 01       	movw	r30, r28
    35d4:	e5 58       	subi	r30, 0x85	; 133
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a ef       	ldi	r20, 0xFA	; 250
    35e6:	54 e4       	ldi	r21, 0x44	; 68
    35e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	f8 01       	movw	r30, r16
    35f2:	80 83       	st	Z, r24
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	a2 83       	std	Z+2, r26	; 0x02
    35f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35fa:	fe 01       	movw	r30, r28
    35fc:	e9 58       	subi	r30, 0x89	; 137
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3614:	88 23       	and	r24, r24
    3616:	44 f4       	brge	.+16     	; 0x3628 <HLCD_displayChar+0x364>
		__ticks = 1;
    3618:	fe 01       	movw	r30, r28
    361a:	eb 58       	subi	r30, 0x8B	; 139
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
    3626:	64 c0       	rjmp	.+200    	; 0x36f0 <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    3628:	fe 01       	movw	r30, r28
    362a:	e9 58       	subi	r30, 0x89	; 137
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	93 81       	ldd	r25, Z+3	; 0x03
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	0c f0       	brlt	.+2      	; 0x3648 <HLCD_displayChar+0x384>
    3646:	43 c0       	rjmp	.+134    	; 0x36ce <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3648:	fe 01       	movw	r30, r28
    364a:	e5 58       	subi	r30, 0x85	; 133
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 81       	ld	r22, Z
    3650:	71 81       	ldd	r23, Z+1	; 0x01
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	8e 01       	movw	r16, r28
    3668:	0b 58       	subi	r16, 0x8B	; 139
    366a:	1f 4f       	sbci	r17, 0xFF	; 255
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	f8 01       	movw	r30, r16
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	80 83       	st	Z, r24
    367e:	1f c0       	rjmp	.+62     	; 0x36be <HLCD_displayChar+0x3fa>
    3680:	fe 01       	movw	r30, r28
    3682:	ed 58       	subi	r30, 0x8D	; 141
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	88 ec       	ldi	r24, 0xC8	; 200
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
    368e:	fe 01       	movw	r30, r28
    3690:	ed 58       	subi	r30, 0x8D	; 141
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <HLCD_displayChar+0x3d4>
    369c:	fe 01       	movw	r30, r28
    369e:	ed 58       	subi	r30, 0x8D	; 141
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	de 01       	movw	r26, r28
    36a8:	ab 58       	subi	r26, 0x8B	; 139
    36aa:	bf 4f       	sbci	r27, 0xFF	; 255
    36ac:	fe 01       	movw	r30, r28
    36ae:	eb 58       	subi	r30, 0x8B	; 139
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	11 96       	adiw	r26, 0x01	; 1
    36ba:	9c 93       	st	X, r25
    36bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36be:	fe 01       	movw	r30, r28
    36c0:	eb 58       	subi	r30, 0x8B	; 139
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	d1 f6       	brne	.-76     	; 0x3680 <HLCD_displayChar+0x3bc>
    36cc:	27 c0       	rjmp	.+78     	; 0x371c <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	8e 01       	movw	r16, r28
    36d0:	0b 58       	subi	r16, 0x8B	; 139
    36d2:	1f 4f       	sbci	r17, 0xFF	; 255
    36d4:	fe 01       	movw	r30, r28
    36d6:	e9 58       	subi	r30, 0x89	; 137
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	f8 01       	movw	r30, r16
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	de 01       	movw	r26, r28
    36f2:	af 58       	subi	r26, 0x8F	; 143
    36f4:	bf 4f       	sbci	r27, 0xFF	; 255
    36f6:	fe 01       	movw	r30, r28
    36f8:	eb 58       	subi	r30, 0x8B	; 139
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	8d 93       	st	X+, r24
    3702:	9c 93       	st	X, r25
    3704:	fe 01       	movw	r30, r28
    3706:	ef 58       	subi	r30, 0x8F	; 143
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <HLCD_displayChar+0x44a>
    3712:	fe 01       	movw	r30, r28
    3714:	ef 58       	subi	r30, 0x8F	; 143
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    371c:	fe 01       	movw	r30, r28
    371e:	e5 56       	subi	r30, 0x65	; 101
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	01 90       	ld	r0, Z+
    3724:	f0 81       	ld	r31, Z
    3726:	e0 2d       	mov	r30, r0
    3728:	22 81       	ldd	r18, Z+2	; 0x02
    372a:	fe 01       	movw	r30, r28
    372c:	e3 56       	subi	r30, 0x63	; 99
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 81       	ld	r24, Z
    3732:	98 2f       	mov	r25, r24
    3734:	92 95       	swap	r25
    3736:	9f 70       	andi	r25, 0x0F	; 15
    3738:	82 2f       	mov	r24, r18
    373a:	69 2f       	mov	r22, r25
    373c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GPIO_set4msbValue>
    3740:	fe 01       	movw	r30, r28
    3742:	e3 59       	subi	r30, 0x93	; 147
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	a0 ef       	ldi	r26, 0xF0	; 240
    374c:	b1 e4       	ldi	r27, 0x41	; 65
    374e:	80 83       	st	Z, r24
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	a2 83       	std	Z+2, r26	; 0x02
    3754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3756:	8e 01       	movw	r16, r28
    3758:	07 59       	subi	r16, 0x97	; 151
    375a:	1f 4f       	sbci	r17, 0xFF	; 255
    375c:	fe 01       	movw	r30, r28
    375e:	e3 59       	subi	r30, 0x93	; 147
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4a ef       	ldi	r20, 0xFA	; 250
    3770:	54 e4       	ldi	r21, 0x44	; 68
    3772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	f8 01       	movw	r30, r16
    377c:	80 83       	st	Z, r24
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	a2 83       	std	Z+2, r26	; 0x02
    3782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3784:	fe 01       	movw	r30, r28
    3786:	e7 59       	subi	r30, 0x97	; 151
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	60 81       	ld	r22, Z
    378c:	71 81       	ldd	r23, Z+1	; 0x01
    378e:	82 81       	ldd	r24, Z+2	; 0x02
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	44 f4       	brge	.+16     	; 0x37b2 <HLCD_displayChar+0x4ee>
		__ticks = 1;
    37a2:	fe 01       	movw	r30, r28
    37a4:	e9 59       	subi	r30, 0x99	; 153
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
    37b0:	64 c0       	rjmp	.+200    	; 0x387a <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    37b2:	fe 01       	movw	r30, r28
    37b4:	e7 59       	subi	r30, 0x97	; 151
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	3f ef       	ldi	r19, 0xFF	; 255
    37c4:	4f e7       	ldi	r20, 0x7F	; 127
    37c6:	57 e4       	ldi	r21, 0x47	; 71
    37c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    37cc:	18 16       	cp	r1, r24
    37ce:	0c f0       	brlt	.+2      	; 0x37d2 <HLCD_displayChar+0x50e>
    37d0:	43 c0       	rjmp	.+134    	; 0x3858 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d2:	fe 01       	movw	r30, r28
    37d4:	e3 59       	subi	r30, 0x93	; 147
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e2       	ldi	r20, 0x20	; 32
    37e6:	51 e4       	ldi	r21, 0x41	; 65
    37e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	8e 01       	movw	r16, r28
    37f2:	09 59       	subi	r16, 0x99	; 153
    37f4:	1f 4f       	sbci	r17, 0xFF	; 255
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	f8 01       	movw	r30, r16
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	80 83       	st	Z, r24
    3808:	1f c0       	rjmp	.+62     	; 0x3848 <HLCD_displayChar+0x584>
    380a:	fe 01       	movw	r30, r28
    380c:	eb 59       	subi	r30, 0x9B	; 155
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	88 ec       	ldi	r24, 0xC8	; 200
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	fe 01       	movw	r30, r28
    381a:	eb 59       	subi	r30, 0x9B	; 155
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 81       	ld	r24, Z
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <HLCD_displayChar+0x55e>
    3826:	fe 01       	movw	r30, r28
    3828:	eb 59       	subi	r30, 0x9B	; 155
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3830:	de 01       	movw	r26, r28
    3832:	a9 59       	subi	r26, 0x99	; 153
    3834:	bf 4f       	sbci	r27, 0xFF	; 255
    3836:	fe 01       	movw	r30, r28
    3838:	e9 59       	subi	r30, 0x99	; 153
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	11 96       	adiw	r26, 0x01	; 1
    3844:	9c 93       	st	X, r25
    3846:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3848:	fe 01       	movw	r30, r28
    384a:	e9 59       	subi	r30, 0x99	; 153
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	80 81       	ld	r24, Z
    3850:	91 81       	ldd	r25, Z+1	; 0x01
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	d1 f6       	brne	.-76     	; 0x380a <HLCD_displayChar+0x546>
    3856:	28 c0       	rjmp	.+80     	; 0x38a8 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3858:	8e 01       	movw	r16, r28
    385a:	09 59       	subi	r16, 0x99	; 153
    385c:	1f 4f       	sbci	r17, 0xFF	; 255
    385e:	fe 01       	movw	r30, r28
    3860:	e7 59       	subi	r30, 0x97	; 151
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	60 81       	ld	r22, Z
    3866:	71 81       	ldd	r23, Z+1	; 0x01
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	f8 01       	movw	r30, r16
    3876:	91 83       	std	Z+1, r25	; 0x01
    3878:	80 83       	st	Z, r24
    387a:	de 01       	movw	r26, r28
    387c:	ad 59       	subi	r26, 0x9D	; 157
    387e:	bf 4f       	sbci	r27, 0xFF	; 255
    3880:	fe 01       	movw	r30, r28
    3882:	e9 59       	subi	r30, 0x99	; 153
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	11 96       	adiw	r26, 0x01	; 1
    388c:	9c 93       	st	X, r25
    388e:	8e 93       	st	-X, r24
    3890:	fe 01       	movw	r30, r28
    3892:	ed 59       	subi	r30, 0x9D	; 157
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <HLCD_displayChar+0x5d6>
    389e:	fe 01       	movw	r30, r28
    38a0:	ed 59       	subi	r30, 0x9D	; 157
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    38a8:	fe 01       	movw	r30, r28
    38aa:	e3 57       	subi	r30, 0x73	; 115
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	88 23       	and	r24, r24
    38b2:	59 f4       	brne	.+22     	; 0x38ca <HLCD_displayChar+0x606>
    38b4:	ce 01       	movw	r24, r28
    38b6:	89 56       	subi	r24, 0x69	; 105
    38b8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    38c0:	fe 01       	movw	r30, r28
    38c2:	e3 57       	subi	r30, 0x73	; 115
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 83       	st	Z, r24
    38c8:	05 c0       	rjmp	.+10     	; 0x38d4 <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    38ca:	fe 01       	movw	r30, r28
    38cc:	e2 57       	subi	r30, 0x72	; 114
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	80 83       	st	Z, r24
    38d4:	fe 01       	movw	r30, r28
    38d6:	e1 5a       	subi	r30, 0xA1	; 161
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 ef       	ldi	r26, 0xF0	; 240
    38e0:	b1 e4       	ldi	r27, 0x41	; 65
    38e2:	80 83       	st	Z, r24
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	a2 83       	std	Z+2, r26	; 0x02
    38e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ea:	8e 01       	movw	r16, r28
    38ec:	05 5a       	subi	r16, 0xA5	; 165
    38ee:	1f 4f       	sbci	r17, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	e1 5a       	subi	r30, 0xA1	; 161
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	4a ef       	ldi	r20, 0xFA	; 250
    3904:	54 e4       	ldi	r21, 0x44	; 68
    3906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	f8 01       	movw	r30, r16
    3910:	80 83       	st	Z, r24
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	a2 83       	std	Z+2, r26	; 0x02
    3916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3918:	fe 01       	movw	r30, r28
    391a:	e5 5a       	subi	r30, 0xA5	; 165
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	60 81       	ld	r22, Z
    3920:	71 81       	ldd	r23, Z+1	; 0x01
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	93 81       	ldd	r25, Z+3	; 0x03
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e8       	ldi	r20, 0x80	; 128
    392c:	5f e3       	ldi	r21, 0x3F	; 63
    392e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3932:	88 23       	and	r24, r24
    3934:	44 f4       	brge	.+16     	; 0x3946 <HLCD_displayChar+0x682>
		__ticks = 1;
    3936:	fe 01       	movw	r30, r28
    3938:	e7 5a       	subi	r30, 0xA7	; 167
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
    3944:	64 c0       	rjmp	.+200    	; 0x3a0e <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    3946:	fe 01       	movw	r30, r28
    3948:	e5 5a       	subi	r30, 0xA5	; 165
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	60 81       	ld	r22, Z
    394e:	71 81       	ldd	r23, Z+1	; 0x01
    3950:	82 81       	ldd	r24, Z+2	; 0x02
    3952:	93 81       	ldd	r25, Z+3	; 0x03
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	0c f0       	brlt	.+2      	; 0x3966 <HLCD_displayChar+0x6a2>
    3964:	43 c0       	rjmp	.+134    	; 0x39ec <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	fe 01       	movw	r30, r28
    3968:	e1 5a       	subi	r30, 0xA1	; 161
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8e 01       	movw	r16, r28
    3986:	07 5a       	subi	r16, 0xA7	; 167
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	1f c0       	rjmp	.+62     	; 0x39dc <HLCD_displayChar+0x718>
    399e:	fe 01       	movw	r30, r28
    39a0:	e9 5a       	subi	r30, 0xA9	; 169
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	88 ec       	ldi	r24, 0xC8	; 200
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	80 83       	st	Z, r24
    39ac:	fe 01       	movw	r30, r28
    39ae:	e9 5a       	subi	r30, 0xA9	; 169
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <HLCD_displayChar+0x6f2>
    39ba:	fe 01       	movw	r30, r28
    39bc:	e9 5a       	subi	r30, 0xA9	; 169
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c4:	de 01       	movw	r26, r28
    39c6:	a7 5a       	subi	r26, 0xA7	; 167
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	e7 5a       	subi	r30, 0xA7	; 167
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	11 96       	adiw	r26, 0x01	; 1
    39d8:	9c 93       	st	X, r25
    39da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	fe 01       	movw	r30, r28
    39de:	e7 5a       	subi	r30, 0xA7	; 167
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	d1 f6       	brne	.-76     	; 0x399e <HLCD_displayChar+0x6da>
    39ea:	28 c0       	rjmp	.+80     	; 0x3a3c <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	8e 01       	movw	r16, r28
    39ee:	07 5a       	subi	r16, 0xA7	; 167
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	fe 01       	movw	r30, r28
    39f4:	e5 5a       	subi	r30, 0xA5	; 165
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	f8 01       	movw	r30, r16
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	de 01       	movw	r26, r28
    3a10:	ab 5a       	subi	r26, 0xAB	; 171
    3a12:	bf 4f       	sbci	r27, 0xFF	; 255
    3a14:	fe 01       	movw	r30, r28
    3a16:	e7 5a       	subi	r30, 0xA7	; 167
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	91 81       	ldd	r25, Z+1	; 0x01
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	9c 93       	st	X, r25
    3a22:	8e 93       	st	-X, r24
    3a24:	fe 01       	movw	r30, r28
    3a26:	eb 5a       	subi	r30, 0xAB	; 171
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <HLCD_displayChar+0x76a>
    3a32:	fe 01       	movw	r30, r28
    3a34:	eb 5a       	subi	r30, 0xAB	; 171
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	91 83       	std	Z+1, r25	; 0x01
    3a3a:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e3 57       	subi	r30, 0x73	; 115
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	80 81       	ld	r24, Z
    3a44:	88 23       	and	r24, r24
    3a46:	59 f4       	brne	.+22     	; 0x3a5e <HLCD_displayChar+0x79a>
    3a48:	ce 01       	movw	r24, r28
    3a4a:	89 56       	subi	r24, 0x69	; 105
    3a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4e:	61 e0       	ldi	r22, 0x01	; 1
    3a50:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    3a54:	fe 01       	movw	r30, r28
    3a56:	e3 57       	subi	r30, 0x73	; 115
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 83       	st	Z, r24
    3a5c:	05 c0       	rjmp	.+10     	; 0x3a68 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e2 57       	subi	r30, 0x72	; 114
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	80 83       	st	Z, r24
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ef 5a       	subi	r30, 0xAF	; 175
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	a0 ef       	ldi	r26, 0xF0	; 240
    3a74:	b1 e4       	ldi	r27, 0x41	; 65
    3a76:	80 83       	st	Z, r24
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	a2 83       	std	Z+2, r26	; 0x02
    3a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7e:	8e 01       	movw	r16, r28
    3a80:	03 5b       	subi	r16, 0xB3	; 179
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	fe 01       	movw	r30, r28
    3a86:	ef 5a       	subi	r30, 0xAF	; 175
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	4a ef       	ldi	r20, 0xFA	; 250
    3a98:	54 e4       	ldi	r21, 0x44	; 68
    3a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	80 83       	st	Z, r24
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	a2 83       	std	Z+2, r26	; 0x02
    3aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e3 5b       	subi	r30, 0xB3	; 179
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e8       	ldi	r20, 0x80	; 128
    3ac0:	5f e3       	ldi	r21, 0x3F	; 63
    3ac2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3ac6:	88 23       	and	r24, r24
    3ac8:	44 f4       	brge	.+16     	; 0x3ada <HLCD_displayChar+0x816>
		__ticks = 1;
    3aca:	fe 01       	movw	r30, r28
    3acc:	e5 5b       	subi	r30, 0xB5	; 181
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	64 c0       	rjmp	.+200    	; 0x3ba2 <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e3 5b       	subi	r30, 0xB3	; 179
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	3f ef       	ldi	r19, 0xFF	; 255
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	57 e4       	ldi	r21, 0x47	; 71
    3af0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	0c f0       	brlt	.+2      	; 0x3afa <HLCD_displayChar+0x836>
    3af8:	43 c0       	rjmp	.+134    	; 0x3b80 <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afa:	fe 01       	movw	r30, r28
    3afc:	ef 5a       	subi	r30, 0xAF	; 175
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e2       	ldi	r20, 0x20	; 32
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8e 01       	movw	r16, r28
    3b1a:	05 5b       	subi	r16, 0xB5	; 181
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
    3b30:	1f c0       	rjmp	.+62     	; 0x3b70 <HLCD_displayChar+0x8ac>
    3b32:	fe 01       	movw	r30, r28
    3b34:	e7 5b       	subi	r30, 0xB7	; 183
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	88 ec       	ldi	r24, 0xC8	; 200
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    3b40:	fe 01       	movw	r30, r28
    3b42:	e7 5b       	subi	r30, 0xB7	; 183
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	91 81       	ldd	r25, Z+1	; 0x01
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <HLCD_displayChar+0x886>
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e7 5b       	subi	r30, 0xB7	; 183
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b58:	de 01       	movw	r26, r28
    3b5a:	a5 5b       	subi	r26, 0xB5	; 181
    3b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e5 5b       	subi	r30, 0xB5	; 181
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	11 96       	adiw	r26, 0x01	; 1
    3b6c:	9c 93       	st	X, r25
    3b6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e5 5b       	subi	r30, 0xB5	; 181
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	d1 f6       	brne	.-76     	; 0x3b32 <HLCD_displayChar+0x86e>
    3b7e:	27 c0       	rjmp	.+78     	; 0x3bce <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b80:	8e 01       	movw	r16, r28
    3b82:	05 5b       	subi	r16, 0xB5	; 181
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	fe 01       	movw	r30, r28
    3b88:	e3 5b       	subi	r30, 0xB3	; 179
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	80 83       	st	Z, r24
    3ba2:	de 01       	movw	r26, r28
    3ba4:	a9 5b       	subi	r26, 0xB9	; 185
    3ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e5 5b       	subi	r30, 0xB5	; 181
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	91 81       	ldd	r25, Z+1	; 0x01
    3bb2:	8d 93       	st	X+, r24
    3bb4:	9c 93       	st	X, r25
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e9 5b       	subi	r30, 0xB9	; 185
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <HLCD_displayChar+0x8fc>
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e9 5b       	subi	r30, 0xB9	; 185
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e5 56       	subi	r30, 0x65	; 101
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	f0 81       	ld	r31, Z
    3bd8:	e0 2d       	mov	r30, r0
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e3 56       	subi	r30, 0x63	; 99
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GPIO_set4msbValue>
    3be8:	fe 01       	movw	r30, r28
    3bea:	ed 5b       	subi	r30, 0xBD	; 189
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	a0 ef       	ldi	r26, 0xF0	; 240
    3bf4:	b1 e4       	ldi	r27, 0x41	; 65
    3bf6:	80 83       	st	Z, r24
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	a2 83       	std	Z+2, r26	; 0x02
    3bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfe:	8e 01       	movw	r16, r28
    3c00:	01 5c       	subi	r16, 0xC1	; 193
    3c02:	1f 4f       	sbci	r17, 0xFF	; 255
    3c04:	fe 01       	movw	r30, r28
    3c06:	ed 5b       	subi	r30, 0xBD	; 189
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	4a ef       	ldi	r20, 0xFA	; 250
    3c18:	54 e4       	ldi	r21, 0x44	; 68
    3c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	f8 01       	movw	r30, r16
    3c24:	80 83       	st	Z, r24
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	a2 83       	std	Z+2, r26	; 0x02
    3c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ff 96       	adiw	r30, 0x3f	; 63
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e8       	ldi	r20, 0x80	; 128
    3c3e:	5f e3       	ldi	r21, 0x3F	; 63
    3c40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c44:	88 23       	and	r24, r24
    3c46:	2c f4       	brge	.+10     	; 0x3c52 <HLCD_displayChar+0x98e>
		__ticks = 1;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	9e af       	std	Y+62, r25	; 0x3e
    3c4e:	8d af       	std	Y+61, r24	; 0x3d
    3c50:	46 c0       	rjmp	.+140    	; 0x3cde <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    3c52:	fe 01       	movw	r30, r28
    3c54:	ff 96       	adiw	r30, 0x3f	; 63
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	3f ef       	ldi	r19, 0xFF	; 255
    3c62:	4f e7       	ldi	r20, 0x7F	; 127
    3c64:	57 e4       	ldi	r21, 0x47	; 71
    3c66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c6a:	18 16       	cp	r1, r24
    3c6c:	64 f5       	brge	.+88     	; 0x3cc6 <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6e:	fe 01       	movw	r30, r28
    3c70:	ed 5b       	subi	r30, 0xBD	; 189
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e2       	ldi	r20, 0x20	; 32
    3c82:	51 e4       	ldi	r21, 0x41	; 65
    3c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	cd 01       	movw	r24, r26
    3c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	9e af       	std	Y+62, r25	; 0x3e
    3c9a:	8d af       	std	Y+61, r24	; 0x3d
    3c9c:	0f c0       	rjmp	.+30     	; 0x3cbc <HLCD_displayChar+0x9f8>
    3c9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	9c af       	std	Y+60, r25	; 0x3c
    3ca4:	8b af       	std	Y+59, r24	; 0x3b
    3ca6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ca8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	f1 f7       	brne	.-4      	; 0x3caa <HLCD_displayChar+0x9e6>
    3cae:	9c af       	std	Y+60, r25	; 0x3c
    3cb0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cb6:	01 97       	sbiw	r24, 0x01	; 1
    3cb8:	9e af       	std	Y+62, r25	; 0x3e
    3cba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cc0:	00 97       	sbiw	r24, 0x00	; 0
    3cc2:	69 f7       	brne	.-38     	; 0x3c9e <HLCD_displayChar+0x9da>
    3cc4:	16 c0       	rjmp	.+44     	; 0x3cf2 <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	ff 96       	adiw	r30, 0x3f	; 63
    3cca:	60 81       	ld	r22, Z
    3ccc:	71 81       	ldd	r23, Z+1	; 0x01
    3cce:	82 81       	ldd	r24, Z+2	; 0x02
    3cd0:	93 81       	ldd	r25, Z+3	; 0x03
    3cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	9e af       	std	Y+62, r25	; 0x3e
    3cdc:	8d af       	std	Y+61, r24	; 0x3d
    3cde:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ce2:	9a af       	std	Y+58, r25	; 0x3a
    3ce4:	89 af       	std	Y+57, r24	; 0x39
    3ce6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ce8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <HLCD_displayChar+0xa26>
    3cee:	9a af       	std	Y+58, r25	; 0x3a
    3cf0:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e3 57       	subi	r30, 0x73	; 115
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	80 81       	ld	r24, Z
    3cfa:	88 23       	and	r24, r24
    3cfc:	59 f4       	brne	.+22     	; 0x3d14 <HLCD_displayChar+0xa50>
    3cfe:	ce 01       	movw	r24, r28
    3d00:	89 56       	subi	r24, 0x69	; 105
    3d02:	9f 4f       	sbci	r25, 0xFF	; 255
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e3 57       	subi	r30, 0x73	; 115
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 83       	st	Z, r24
    3d12:	05 c0       	rjmp	.+10     	; 0x3d1e <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    3d14:	fe 01       	movw	r30, r28
    3d16:	e2 57       	subi	r30, 0x72	; 114
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	80 83       	st	Z, r24
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a0 ef       	ldi	r26, 0xF0	; 240
    3d24:	b1 e4       	ldi	r27, 0x41	; 65
    3d26:	8d ab       	std	Y+53, r24	; 0x35
    3d28:	9e ab       	std	Y+54, r25	; 0x36
    3d2a:	af ab       	std	Y+55, r26	; 0x37
    3d2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2e:	6d a9       	ldd	r22, Y+53	; 0x35
    3d30:	7e a9       	ldd	r23, Y+54	; 0x36
    3d32:	8f a9       	ldd	r24, Y+55	; 0x37
    3d34:	98 ad       	ldd	r25, Y+56	; 0x38
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a ef       	ldi	r20, 0xFA	; 250
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	89 ab       	std	Y+49, r24	; 0x31
    3d48:	9a ab       	std	Y+50, r25	; 0x32
    3d4a:	ab ab       	std	Y+51, r26	; 0x33
    3d4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d4e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d50:	7a a9       	ldd	r23, Y+50	; 0x32
    3d52:	8b a9       	ldd	r24, Y+51	; 0x33
    3d54:	9c a9       	ldd	r25, Y+52	; 0x34
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	2c f4       	brge	.+10     	; 0x3d70 <HLCD_displayChar+0xaac>
		__ticks = 1;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	98 ab       	std	Y+48, r25	; 0x30
    3d6c:	8f a7       	std	Y+47, r24	; 0x2f
    3d6e:	3f c0       	rjmp	.+126    	; 0x3dee <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    3d70:	69 a9       	ldd	r22, Y+49	; 0x31
    3d72:	7a a9       	ldd	r23, Y+50	; 0x32
    3d74:	8b a9       	ldd	r24, Y+51	; 0x33
    3d76:	9c a9       	ldd	r25, Y+52	; 0x34
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	3f ef       	ldi	r19, 0xFF	; 255
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	57 e4       	ldi	r21, 0x47	; 71
    3d80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d84:	18 16       	cp	r1, r24
    3d86:	4c f5       	brge	.+82     	; 0x3dda <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d88:	6d a9       	ldd	r22, Y+53	; 0x35
    3d8a:	7e a9       	ldd	r23, Y+54	; 0x36
    3d8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e2       	ldi	r20, 0x20	; 32
    3d96:	51 e4       	ldi	r21, 0x41	; 65
    3d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	bc 01       	movw	r22, r24
    3da2:	cd 01       	movw	r24, r26
    3da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	98 ab       	std	Y+48, r25	; 0x30
    3dae:	8f a7       	std	Y+47, r24	; 0x2f
    3db0:	0f c0       	rjmp	.+30     	; 0x3dd0 <HLCD_displayChar+0xb0c>
    3db2:	88 ec       	ldi	r24, 0xC8	; 200
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	9e a7       	std	Y+46, r25	; 0x2e
    3db8:	8d a7       	std	Y+45, r24	; 0x2d
    3dba:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <HLCD_displayChar+0xafa>
    3dc2:	9e a7       	std	Y+46, r25	; 0x2e
    3dc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dc8:	98 a9       	ldd	r25, Y+48	; 0x30
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	98 ab       	std	Y+48, r25	; 0x30
    3dce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	69 f7       	brne	.-38     	; 0x3db2 <HLCD_displayChar+0xaee>
    3dd8:	bb c1       	rjmp	.+886    	; 0x4150 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dda:	69 a9       	ldd	r22, Y+49	; 0x31
    3ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    3dde:	8b a9       	ldd	r24, Y+51	; 0x33
    3de0:	9c a9       	ldd	r25, Y+52	; 0x34
    3de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	98 ab       	std	Y+48, r25	; 0x30
    3dec:	8f a7       	std	Y+47, r24	; 0x2f
    3dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df0:	98 a9       	ldd	r25, Y+48	; 0x30
    3df2:	9c a7       	std	Y+44, r25	; 0x2c
    3df4:	8b a7       	std	Y+43, r24	; 0x2b
    3df6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3df8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <HLCD_displayChar+0xb36>
    3dfe:	9c a7       	std	Y+44, r25	; 0x2c
    3e00:	8b a7       	std	Y+43, r24	; 0x2b
    3e02:	a6 c1       	rjmp	.+844    	; 0x4150 <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    3e04:	fe 01       	movw	r30, r28
    3e06:	e5 56       	subi	r30, 0x65	; 101
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	01 90       	ld	r0, Z+
    3e0c:	f0 81       	ld	r31, Z
    3e0e:	e0 2d       	mov	r30, r0
    3e10:	80 81       	ld	r24, Z
    3e12:	81 30       	cpi	r24, 0x01	; 1
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <HLCD_displayChar+0xb54>
    3e16:	97 c1       	rjmp	.+814    	; 0x4146 <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e3 57       	subi	r30, 0x73	; 115
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	80 81       	ld	r24, Z
    3e20:	88 23       	and	r24, r24
    3e22:	59 f4       	brne	.+22     	; 0x3e3a <HLCD_displayChar+0xb76>
    3e24:	ce 01       	movw	r24, r28
    3e26:	89 56       	subi	r24, 0x69	; 105
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	61 e0       	ldi	r22, 0x01	; 1
    3e2c:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    3e30:	fe 01       	movw	r30, r28
    3e32:	e3 57       	subi	r30, 0x73	; 115
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 83       	st	Z, r24
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e2 57       	subi	r30, 0x72	; 114
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	80 83       	st	Z, r24
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	a0 e8       	ldi	r26, 0x80	; 128
    3e4a:	bf e3       	ldi	r27, 0x3F	; 63
    3e4c:	8f a3       	std	Y+39, r24	; 0x27
    3e4e:	98 a7       	std	Y+40, r25	; 0x28
    3e50:	a9 a7       	std	Y+41, r26	; 0x29
    3e52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e54:	6f a1       	ldd	r22, Y+39	; 0x27
    3e56:	78 a5       	ldd	r23, Y+40	; 0x28
    3e58:	89 a5       	ldd	r24, Y+41	; 0x29
    3e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	4a ef       	ldi	r20, 0xFA	; 250
    3e62:	54 e4       	ldi	r21, 0x44	; 68
    3e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	8b a3       	std	Y+35, r24	; 0x23
    3e6e:	9c a3       	std	Y+36, r25	; 0x24
    3e70:	ad a3       	std	Y+37, r26	; 0x25
    3e72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e74:	6b a1       	ldd	r22, Y+35	; 0x23
    3e76:	7c a1       	ldd	r23, Y+36	; 0x24
    3e78:	8d a1       	ldd	r24, Y+37	; 0x25
    3e7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e8       	ldi	r20, 0x80	; 128
    3e82:	5f e3       	ldi	r21, 0x3F	; 63
    3e84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e88:	88 23       	and	r24, r24
    3e8a:	2c f4       	brge	.+10     	; 0x3e96 <HLCD_displayChar+0xbd2>
		__ticks = 1;
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	9a a3       	std	Y+34, r25	; 0x22
    3e92:	89 a3       	std	Y+33, r24	; 0x21
    3e94:	3f c0       	rjmp	.+126    	; 0x3f14 <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    3e96:	6b a1       	ldd	r22, Y+35	; 0x23
    3e98:	7c a1       	ldd	r23, Y+36	; 0x24
    3e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	3f ef       	ldi	r19, 0xFF	; 255
    3ea2:	4f e7       	ldi	r20, 0x7F	; 127
    3ea4:	57 e4       	ldi	r21, 0x47	; 71
    3ea6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3eaa:	18 16       	cp	r1, r24
    3eac:	4c f5       	brge	.+82     	; 0x3f00 <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eae:	6f a1       	ldd	r22, Y+39	; 0x27
    3eb0:	78 a5       	ldd	r23, Y+40	; 0x28
    3eb2:	89 a5       	ldd	r24, Y+41	; 0x29
    3eb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e2       	ldi	r20, 0x20	; 32
    3ebc:	51 e4       	ldi	r21, 0x41	; 65
    3ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	bc 01       	movw	r22, r24
    3ec8:	cd 01       	movw	r24, r26
    3eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	9a a3       	std	Y+34, r25	; 0x22
    3ed4:	89 a3       	std	Y+33, r24	; 0x21
    3ed6:	0f c0       	rjmp	.+30     	; 0x3ef6 <HLCD_displayChar+0xc32>
    3ed8:	88 ec       	ldi	r24, 0xC8	; 200
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	98 a3       	std	Y+32, r25	; 0x20
    3ede:	8f 8f       	std	Y+31, r24	; 0x1f
    3ee0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ee2:	98 a1       	ldd	r25, Y+32	; 0x20
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <HLCD_displayChar+0xc20>
    3ee8:	98 a3       	std	Y+32, r25	; 0x20
    3eea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eec:	89 a1       	ldd	r24, Y+33	; 0x21
    3eee:	9a a1       	ldd	r25, Y+34	; 0x22
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	9a a3       	std	Y+34, r25	; 0x22
    3ef4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	69 f7       	brne	.-38     	; 0x3ed8 <HLCD_displayChar+0xc14>
    3efe:	14 c0       	rjmp	.+40     	; 0x3f28 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	6b a1       	ldd	r22, Y+35	; 0x23
    3f02:	7c a1       	ldd	r23, Y+36	; 0x24
    3f04:	8d a1       	ldd	r24, Y+37	; 0x25
    3f06:	9e a1       	ldd	r25, Y+38	; 0x26
    3f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	9a a3       	std	Y+34, r25	; 0x22
    3f12:	89 a3       	std	Y+33, r24	; 0x21
    3f14:	89 a1       	ldd	r24, Y+33	; 0x21
    3f16:	9a a1       	ldd	r25, Y+34	; 0x22
    3f18:	9e 8f       	std	Y+30, r25	; 0x1e
    3f1a:	8d 8f       	std	Y+29, r24	; 0x1d
    3f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	f1 f7       	brne	.-4      	; 0x3f20 <HLCD_displayChar+0xc5c>
    3f24:	9e 8f       	std	Y+30, r25	; 0x1e
    3f26:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e5 56       	subi	r30, 0x65	; 101
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	01 90       	ld	r0, Z+
    3f30:	f0 81       	ld	r31, Z
    3f32:	e0 2d       	mov	r30, r0
    3f34:	92 81       	ldd	r25, Z+2	; 0x02
    3f36:	fe 01       	movw	r30, r28
    3f38:	e3 56       	subi	r30, 0x63	; 99
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	28 2f       	mov	r18, r24
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	50 e0       	ldi	r21, 0x00	; 0
    3f46:	89 2f       	mov	r24, r25
    3f48:	ba 01       	movw	r22, r20
    3f4a:	a9 01       	movw	r20, r18
    3f4c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_SetPortValue>
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	a0 e8       	ldi	r26, 0x80	; 128
    3f56:	bf e3       	ldi	r27, 0x3F	; 63
    3f58:	89 8f       	std	Y+25, r24	; 0x19
    3f5a:	9a 8f       	std	Y+26, r25	; 0x1a
    3f5c:	ab 8f       	std	Y+27, r26	; 0x1b
    3f5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f60:	69 8d       	ldd	r22, Y+25	; 0x19
    3f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	4a ef       	ldi	r20, 0xFA	; 250
    3f6e:	54 e4       	ldi	r21, 0x44	; 68
    3f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	8d 8b       	std	Y+21, r24	; 0x15
    3f7a:	9e 8b       	std	Y+22, r25	; 0x16
    3f7c:	af 8b       	std	Y+23, r26	; 0x17
    3f7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f80:	6d 89       	ldd	r22, Y+21	; 0x15
    3f82:	7e 89       	ldd	r23, Y+22	; 0x16
    3f84:	8f 89       	ldd	r24, Y+23	; 0x17
    3f86:	98 8d       	ldd	r25, Y+24	; 0x18
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e8       	ldi	r20, 0x80	; 128
    3f8e:	5f e3       	ldi	r21, 0x3F	; 63
    3f90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f94:	88 23       	and	r24, r24
    3f96:	2c f4       	brge	.+10     	; 0x3fa2 <HLCD_displayChar+0xcde>
		__ticks = 1;
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	9c 8b       	std	Y+20, r25	; 0x14
    3f9e:	8b 8b       	std	Y+19, r24	; 0x13
    3fa0:	3f c0       	rjmp	.+126    	; 0x4020 <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    3fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    3fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    3fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	3f ef       	ldi	r19, 0xFF	; 255
    3fae:	4f e7       	ldi	r20, 0x7F	; 127
    3fb0:	57 e4       	ldi	r21, 0x47	; 71
    3fb2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3fb6:	18 16       	cp	r1, r24
    3fb8:	4c f5       	brge	.+82     	; 0x400c <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fba:	69 8d       	ldd	r22, Y+25	; 0x19
    3fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e2       	ldi	r20, 0x20	; 32
    3fc8:	51 e4       	ldi	r21, 0x41	; 65
    3fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	bc 01       	movw	r22, r24
    3fd4:	cd 01       	movw	r24, r26
    3fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	9c 8b       	std	Y+20, r25	; 0x14
    3fe0:	8b 8b       	std	Y+19, r24	; 0x13
    3fe2:	0f c0       	rjmp	.+30     	; 0x4002 <HLCD_displayChar+0xd3e>
    3fe4:	88 ec       	ldi	r24, 0xC8	; 200
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	9a 8b       	std	Y+18, r25	; 0x12
    3fea:	89 8b       	std	Y+17, r24	; 0x11
    3fec:	89 89       	ldd	r24, Y+17	; 0x11
    3fee:	9a 89       	ldd	r25, Y+18	; 0x12
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <HLCD_displayChar+0xd2c>
    3ff4:	9a 8b       	std	Y+18, r25	; 0x12
    3ff6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	9c 8b       	std	Y+20, r25	; 0x14
    4000:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4002:	8b 89       	ldd	r24, Y+19	; 0x13
    4004:	9c 89       	ldd	r25, Y+20	; 0x14
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	69 f7       	brne	.-38     	; 0x3fe4 <HLCD_displayChar+0xd20>
    400a:	14 c0       	rjmp	.+40     	; 0x4034 <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400c:	6d 89       	ldd	r22, Y+21	; 0x15
    400e:	7e 89       	ldd	r23, Y+22	; 0x16
    4010:	8f 89       	ldd	r24, Y+23	; 0x17
    4012:	98 8d       	ldd	r25, Y+24	; 0x18
    4014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	9c 8b       	std	Y+20, r25	; 0x14
    401e:	8b 8b       	std	Y+19, r24	; 0x13
    4020:	8b 89       	ldd	r24, Y+19	; 0x13
    4022:	9c 89       	ldd	r25, Y+20	; 0x14
    4024:	98 8b       	std	Y+16, r25	; 0x10
    4026:	8f 87       	std	Y+15, r24	; 0x0f
    4028:	8f 85       	ldd	r24, Y+15	; 0x0f
    402a:	98 89       	ldd	r25, Y+16	; 0x10
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	f1 f7       	brne	.-4      	; 0x402c <HLCD_displayChar+0xd68>
    4030:	98 8b       	std	Y+16, r25	; 0x10
    4032:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    4034:	fe 01       	movw	r30, r28
    4036:	e3 57       	subi	r30, 0x73	; 115
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	88 23       	and	r24, r24
    403e:	59 f4       	brne	.+22     	; 0x4056 <HLCD_displayChar+0xd92>
    4040:	ce 01       	movw	r24, r28
    4042:	89 56       	subi	r24, 0x69	; 105
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	60 e0       	ldi	r22, 0x00	; 0
    4048:	0e 94 c3 07 	call	0xf86	; 0xf86 <GPIO_writePinLogic>
    404c:	fe 01       	movw	r30, r28
    404e:	e3 57       	subi	r30, 0x73	; 115
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 83       	st	Z, r24
    4054:	05 c0       	rjmp	.+10     	; 0x4060 <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    4056:	fe 01       	movw	r30, r28
    4058:	e2 57       	subi	r30, 0x72	; 114
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	80 83       	st	Z, r24
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	a0 e8       	ldi	r26, 0x80	; 128
    4066:	bf e3       	ldi	r27, 0x3F	; 63
    4068:	8b 87       	std	Y+11, r24	; 0x0b
    406a:	9c 87       	std	Y+12, r25	; 0x0c
    406c:	ad 87       	std	Y+13, r26	; 0x0d
    406e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4070:	6b 85       	ldd	r22, Y+11	; 0x0b
    4072:	7c 85       	ldd	r23, Y+12	; 0x0c
    4074:	8d 85       	ldd	r24, Y+13	; 0x0d
    4076:	9e 85       	ldd	r25, Y+14	; 0x0e
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	4a ef       	ldi	r20, 0xFA	; 250
    407e:	54 e4       	ldi	r21, 0x44	; 68
    4080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	8f 83       	std	Y+7, r24	; 0x07
    408a:	98 87       	std	Y+8, r25	; 0x08
    408c:	a9 87       	std	Y+9, r26	; 0x09
    408e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4090:	6f 81       	ldd	r22, Y+7	; 0x07
    4092:	78 85       	ldd	r23, Y+8	; 0x08
    4094:	89 85       	ldd	r24, Y+9	; 0x09
    4096:	9a 85       	ldd	r25, Y+10	; 0x0a
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    40a4:	88 23       	and	r24, r24
    40a6:	2c f4       	brge	.+10     	; 0x40b2 <HLCD_displayChar+0xdee>
		__ticks = 1;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	9e 83       	std	Y+6, r25	; 0x06
    40ae:	8d 83       	std	Y+5, r24	; 0x05
    40b0:	3f c0       	rjmp	.+126    	; 0x4130 <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    40b2:	6f 81       	ldd	r22, Y+7	; 0x07
    40b4:	78 85       	ldd	r23, Y+8	; 0x08
    40b6:	89 85       	ldd	r24, Y+9	; 0x09
    40b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	3f ef       	ldi	r19, 0xFF	; 255
    40be:	4f e7       	ldi	r20, 0x7F	; 127
    40c0:	57 e4       	ldi	r21, 0x47	; 71
    40c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    40c6:	18 16       	cp	r1, r24
    40c8:	4c f5       	brge	.+82     	; 0x411c <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    40cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e2       	ldi	r20, 0x20	; 32
    40d8:	51 e4       	ldi	r21, 0x41	; 65
    40da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9e 83       	std	Y+6, r25	; 0x06
    40f0:	8d 83       	std	Y+5, r24	; 0x05
    40f2:	0f c0       	rjmp	.+30     	; 0x4112 <HLCD_displayChar+0xe4e>
    40f4:	88 ec       	ldi	r24, 0xC8	; 200
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	9c 83       	std	Y+4, r25	; 0x04
    40fa:	8b 83       	std	Y+3, r24	; 0x03
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <HLCD_displayChar+0xe3c>
    4104:	9c 83       	std	Y+4, r25	; 0x04
    4106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4108:	8d 81       	ldd	r24, Y+5	; 0x05
    410a:	9e 81       	ldd	r25, Y+6	; 0x06
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	9e 83       	std	Y+6, r25	; 0x06
    4110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4112:	8d 81       	ldd	r24, Y+5	; 0x05
    4114:	9e 81       	ldd	r25, Y+6	; 0x06
    4116:	00 97       	sbiw	r24, 0x00	; 0
    4118:	69 f7       	brne	.-38     	; 0x40f4 <HLCD_displayChar+0xe30>
    411a:	1a c0       	rjmp	.+52     	; 0x4150 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411c:	6f 81       	ldd	r22, Y+7	; 0x07
    411e:	78 85       	ldd	r23, Y+8	; 0x08
    4120:	89 85       	ldd	r24, Y+9	; 0x09
    4122:	9a 85       	ldd	r25, Y+10	; 0x0a
    4124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	9e 83       	std	Y+6, r25	; 0x06
    412e:	8d 83       	std	Y+5, r24	; 0x05
    4130:	8d 81       	ldd	r24, Y+5	; 0x05
    4132:	9e 81       	ldd	r25, Y+6	; 0x06
    4134:	9a 83       	std	Y+2, r25	; 0x02
    4136:	89 83       	std	Y+1, r24	; 0x01
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	9a 81       	ldd	r25, Y+2	; 0x02
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	f1 f7       	brne	.-4      	; 0x413c <HLCD_displayChar+0xe78>
    4140:	9a 83       	std	Y+2, r25	; 0x02
    4142:	89 83       	std	Y+1, r24	; 0x01
    4144:	05 c0       	rjmp	.+10     	; 0x4150 <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4146:	fe 01       	movw	r30, r28
    4148:	e2 57       	subi	r30, 0x72	; 114
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	83 e0       	ldi	r24, 0x03	; 3
    414e:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    4150:	fe 01       	movw	r30, r28
    4152:	e3 57       	subi	r30, 0x73	; 115
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	80 81       	ld	r24, Z
    4158:	88 23       	and	r24, r24
    415a:	29 f4       	brne	.+10     	; 0x4166 <HLCD_displayChar+0xea2>
    415c:	fe 01       	movw	r30, r28
    415e:	e2 57       	subi	r30, 0x72	; 114
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	10 82       	st	Z, r1
    4164:	0b c0       	rjmp	.+22     	; 0x417c <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    4166:	fe 01       	movw	r30, r28
    4168:	e2 57       	subi	r30, 0x72	; 114
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	80 83       	st	Z, r24
    4170:	05 c0       	rjmp	.+10     	; 0x417c <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    4172:	fe 01       	movw	r30, r28
    4174:	e2 57       	subi	r30, 0x72	; 114
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	80 83       	st	Z, r24
	}

	return lcdRet;
    417c:	fe 01       	movw	r30, r28
    417e:	e2 57       	subi	r30, 0x72	; 114
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	80 81       	ld	r24, Z
}
    4184:	c3 56       	subi	r28, 0x63	; 99
    4186:	df 4f       	sbci	r29, 0xFF	; 255
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	cf 91       	pop	r28
    4194:	df 91       	pop	r29
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	08 95       	ret

0000419c <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    419c:	df 93       	push	r29
    419e:	cf 93       	push	r28
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <HLCD_displayString+0x6>
    41a2:	00 d0       	rcall	.+0      	; 0x41a4 <HLCD_displayString+0x8>
    41a4:	00 d0       	rcall	.+0      	; 0x41a6 <HLCD_displayString+0xa>
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	9c 83       	std	Y+4, r25	; 0x04
    41ac:	8b 83       	std	Y+3, r24	; 0x03
    41ae:	7e 83       	std	Y+6, r23	; 0x06
    41b0:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    41b6:	8b 81       	ldd	r24, Y+3	; 0x03
    41b8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	69 f1       	breq	.+90     	; 0x4218 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    41be:	eb 81       	ldd	r30, Y+3	; 0x03
    41c0:	fc 81       	ldd	r31, Y+4	; 0x04
    41c2:	80 81       	ld	r24, Z
    41c4:	88 23       	and	r24, r24
    41c6:	51 f1       	breq	.+84     	; 0x421c <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    41c8:	eb 81       	ldd	r30, Y+3	; 0x03
    41ca:	fc 81       	ldd	r31, Y+4	; 0x04
    41cc:	80 81       	ld	r24, Z
    41ce:	81 30       	cpi	r24, 0x01	; 1
    41d0:	01 f5       	brne	.+64     	; 0x4212 <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    41d2:	19 82       	std	Y+1, r1	; 0x01
    41d4:	12 c0       	rjmp	.+36     	; 0x41fa <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	28 2f       	mov	r18, r24
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	9e 81       	ldd	r25, Y+6	; 0x06
    41e0:	fc 01       	movw	r30, r24
    41e2:	e2 0f       	add	r30, r18
    41e4:	f3 1f       	adc	r31, r19
    41e6:	20 81       	ld	r18, Z
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	9c 81       	ldd	r25, Y+4	; 0x04
    41ec:	62 2f       	mov	r22, r18
    41ee:	0e 94 62 19 	call	0x32c4	; 0x32c4 <HLCD_displayChar>
    41f2:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	89 83       	std	Y+1, r24	; 0x01
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	fc 01       	movw	r30, r24
    4206:	e2 0f       	add	r30, r18
    4208:	f3 1f       	adc	r31, r19
    420a:	80 81       	ld	r24, Z
    420c:	88 23       	and	r24, r24
    420e:	19 f7       	brne	.-58     	; 0x41d6 <HLCD_displayString+0x3a>
    4210:	05 c0       	rjmp	.+10     	; 0x421c <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4212:	83 e0       	ldi	r24, 0x03	; 3
    4214:	8a 83       	std	Y+2, r24	; 0x02
    4216:	02 c0       	rjmp	.+4      	; 0x421c <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    421c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    421e:	26 96       	adiw	r28, 0x06	; 6
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	cf 91       	pop	r28
    422c:	df 91       	pop	r29
    422e:	08 95       	ret

00004230 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    4230:	df 93       	push	r29
    4232:	cf 93       	push	r28
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	6b 97       	sbiw	r28, 0x1b	; 27
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	9f 8b       	std	Y+23, r25	; 0x17
    4246:	8e 8b       	std	Y+22, r24	; 0x16
    4248:	48 8f       	std	Y+24, r20	; 0x18
    424a:	59 8f       	std	Y+25, r21	; 0x19
    424c:	6a 8f       	std	Y+26, r22	; 0x1a
    424e:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4254:	8e 89       	ldd	r24, Y+22	; 0x16
    4256:	9f 89       	ldd	r25, Y+23	; 0x17
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	01 f1       	breq	.+64     	; 0x429c <HLCD_displayNumber+0x6c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    425c:	ee 89       	ldd	r30, Y+22	; 0x16
    425e:	ff 89       	ldd	r31, Y+23	; 0x17
    4260:	80 81       	ld	r24, Z
    4262:	88 23       	and	r24, r24
    4264:	e9 f0       	breq	.+58     	; 0x42a0 <HLCD_displayNumber+0x70>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4266:	ee 89       	ldd	r30, Y+22	; 0x16
    4268:	ff 89       	ldd	r31, Y+23	; 0x17
    426a:	80 81       	ld	r24, Z
    426c:	81 30       	cpi	r24, 0x01	; 1
    426e:	99 f4       	brne	.+38     	; 0x4296 <HLCD_displayNumber+0x66>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    4270:	88 8d       	ldd	r24, Y+24	; 0x18
    4272:	99 8d       	ldd	r25, Y+25	; 0x19
    4274:	9e 01       	movw	r18, r28
    4276:	2e 5f       	subi	r18, 0xFE	; 254
    4278:	3f 4f       	sbci	r19, 0xFF	; 255
    427a:	b9 01       	movw	r22, r18
    427c:	4a e0       	ldi	r20, 0x0A	; 10
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    4284:	8e 89       	ldd	r24, Y+22	; 0x16
    4286:	9f 89       	ldd	r25, Y+23	; 0x17
    4288:	9e 01       	movw	r18, r28
    428a:	2e 5f       	subi	r18, 0xFE	; 254
    428c:	3f 4f       	sbci	r19, 0xFF	; 255
    428e:	b9 01       	movw	r22, r18
    4290:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
    4294:	05 c0       	rjmp	.+10     	; 0x42a0 <HLCD_displayNumber+0x70>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4296:	83 e0       	ldi	r24, 0x03	; 3
    4298:	89 83       	std	Y+1, r24	; 0x01
    429a:	02 c0       	rjmp	.+4      	; 0x42a0 <HLCD_displayNumber+0x70>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    42a2:	6b 96       	adiw	r28, 0x1b	; 27
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <HLCD_changeCursorPosation+0x6>
    42ba:	00 d0       	rcall	.+0      	; 0x42bc <HLCD_changeCursorPosation+0x8>
    42bc:	0f 92       	push	r0
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	9b 83       	std	Y+3, r25	; 0x03
    42c4:	8a 83       	std	Y+2, r24	; 0x02
    42c6:	6c 83       	std	Y+4, r22	; 0x04
    42c8:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	9b 81       	ldd	r25, Y+3	; 0x03
    42d2:	00 97       	sbiw	r24, 0x00	; 0
    42d4:	91 f1       	breq	.+100    	; 0x433a <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    42d6:	ea 81       	ldd	r30, Y+2	; 0x02
    42d8:	fb 81       	ldd	r31, Y+3	; 0x03
    42da:	80 81       	ld	r24, Z
    42dc:	88 23       	and	r24, r24
    42de:	79 f1       	breq	.+94     	; 0x433e <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    42e0:	ea 81       	ldd	r30, Y+2	; 0x02
    42e2:	fb 81       	ldd	r31, Y+3	; 0x03
    42e4:	80 81       	ld	r24, Z
    42e6:	81 30       	cpi	r24, 0x01	; 1
    42e8:	29 f5       	brne	.+74     	; 0x4334 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    42ea:	8c 81       	ldd	r24, Y+4	; 0x04
    42ec:	88 23       	and	r24, r24
    42ee:	71 f4       	brne	.+28     	; 0x430c <HLCD_changeCursorPosation+0x58>
    42f0:	8d 81       	ldd	r24, Y+5	; 0x05
    42f2:	80 31       	cpi	r24, 0x10	; 16
    42f4:	58 f4       	brcc	.+22     	; 0x430c <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    42f6:	8d 81       	ldd	r24, Y+5	; 0x05
    42f8:	8f 70       	andi	r24, 0x0F	; 15
    42fa:	80 68       	ori	r24, 0x80	; 128
    42fc:	28 2f       	mov	r18, r24
    42fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4300:	9b 81       	ldd	r25, Y+3	; 0x03
    4302:	62 2f       	mov	r22, r18
    4304:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    4308:	89 83       	std	Y+1, r24	; 0x01
    430a:	19 c0       	rjmp	.+50     	; 0x433e <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    430c:	8c 81       	ldd	r24, Y+4	; 0x04
    430e:	81 30       	cpi	r24, 0x01	; 1
    4310:	71 f4       	brne	.+28     	; 0x432e <HLCD_changeCursorPosation+0x7a>
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	80 31       	cpi	r24, 0x10	; 16
    4316:	58 f4       	brcc	.+22     	; 0x432e <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    4318:	8d 81       	ldd	r24, Y+5	; 0x05
    431a:	8f 70       	andi	r24, 0x0F	; 15
    431c:	80 6c       	ori	r24, 0xC0	; 192
    431e:	28 2f       	mov	r18, r24
    4320:	8a 81       	ldd	r24, Y+2	; 0x02
    4322:	9b 81       	ldd	r25, Y+3	; 0x03
    4324:	62 2f       	mov	r22, r18
    4326:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    432a:	89 83       	std	Y+1, r24	; 0x01
    432c:	08 c0       	rjmp	.+16     	; 0x433e <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    432e:	84 e0       	ldi	r24, 0x04	; 4
    4330:	89 83       	std	Y+1, r24	; 0x01
    4332:	05 c0       	rjmp	.+10     	; 0x433e <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4334:	83 e0       	ldi	r24, 0x03	; 3
    4336:	89 83       	std	Y+1, r24	; 0x01
    4338:	02 c0       	rjmp	.+4      	; 0x433e <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    433a:	82 e0       	ldi	r24, 0x02	; 2
    433c:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    433e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	cf 91       	pop	r28
    434c:	df 91       	pop	r29
    434e:	08 95       	ret

00004350 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    4350:	df 93       	push	r29
    4352:	cf 93       	push	r28
    4354:	00 d0       	rcall	.+0      	; 0x4356 <HLCD_shiftDisplay+0x6>
    4356:	00 d0       	rcall	.+0      	; 0x4358 <HLCD_shiftDisplay+0x8>
    4358:	00 d0       	rcall	.+0      	; 0x435a <HLCD_shiftDisplay+0xa>
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
    435e:	9c 83       	std	Y+4, r25	; 0x04
    4360:	8b 83       	std	Y+3, r24	; 0x03
    4362:	6d 83       	std	Y+5, r22	; 0x05
    4364:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    436a:	8b 81       	ldd	r24, Y+3	; 0x03
    436c:	9c 81       	ldd	r25, Y+4	; 0x04
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	31 f1       	breq	.+76     	; 0x43be <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    4372:	8e 81       	ldd	r24, Y+6	; 0x06
    4374:	8c 31       	cpi	r24, 0x1C	; 28
    4376:	19 f0       	breq	.+6      	; 0x437e <HLCD_shiftDisplay+0x2e>
    4378:	8e 81       	ldd	r24, Y+6	; 0x06
    437a:	88 31       	cpi	r24, 0x18	; 24
    437c:	e9 f4       	brne	.+58     	; 0x43b8 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    437e:	eb 81       	ldd	r30, Y+3	; 0x03
    4380:	fc 81       	ldd	r31, Y+4	; 0x04
    4382:	80 81       	ld	r24, Z
    4384:	88 23       	and	r24, r24
    4386:	e9 f0       	breq	.+58     	; 0x43c2 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4388:	eb 81       	ldd	r30, Y+3	; 0x03
    438a:	fc 81       	ldd	r31, Y+4	; 0x04
    438c:	80 81       	ld	r24, Z
    438e:	81 30       	cpi	r24, 0x01	; 1
    4390:	81 f4       	brne	.+32     	; 0x43b2 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    4392:	19 82       	std	Y+1, r1	; 0x01
    4394:	09 c0       	rjmp	.+18     	; 0x43a8 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    4396:	8b 81       	ldd	r24, Y+3	; 0x03
    4398:	9c 81       	ldd	r25, Y+4	; 0x04
    439a:	6e 81       	ldd	r22, Y+6	; 0x06
    439c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    43a0:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	8f 5f       	subi	r24, 0xFF	; 255
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	99 81       	ldd	r25, Y+1	; 0x01
    43aa:	8d 81       	ldd	r24, Y+5	; 0x05
    43ac:	98 17       	cp	r25, r24
    43ae:	98 f3       	brcs	.-26     	; 0x4396 <HLCD_shiftDisplay+0x46>
    43b0:	08 c0       	rjmp	.+16     	; 0x43c2 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    43b2:	83 e0       	ldi	r24, 0x03	; 3
    43b4:	8a 83       	std	Y+2, r24	; 0x02
    43b6:	05 c0       	rjmp	.+10     	; 0x43c2 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    43b8:	84 e0       	ldi	r24, 0x04	; 4
    43ba:	8a 83       	std	Y+2, r24	; 0x02
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    43be:	82 e0       	ldi	r24, 0x02	; 2
    43c0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    43c4:	26 96       	adiw	r28, 0x06	; 6
    43c6:	0f b6       	in	r0, 0x3f	; 63
    43c8:	f8 94       	cli
    43ca:	de bf       	out	0x3e, r29	; 62
    43cc:	0f be       	out	0x3f, r0	; 63
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
    43de:	27 97       	sbiw	r28, 0x07	; 7
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	9c 83       	std	Y+4, r25	; 0x04
    43ec:	8b 83       	std	Y+3, r24	; 0x03
    43ee:	7e 83       	std	Y+6, r23	; 0x06
    43f0:	6d 83       	std	Y+5, r22	; 0x05
    43f2:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    43f8:	8b 81       	ldd	r24, Y+3	; 0x03
    43fa:	9c 81       	ldd	r25, Y+4	; 0x04
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	09 f4       	brne	.+2      	; 0x4402 <HLCD_createNewCustomChar+0x2c>
    4400:	4f c0       	rjmp	.+158    	; 0x44a0 <HLCD_createNewCustomChar+0xca>
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	09 f4       	brne	.+2      	; 0x440c <HLCD_createNewCustomChar+0x36>
    440a:	4a c0       	rjmp	.+148    	; 0x44a0 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    440c:	8f 81       	ldd	r24, Y+7	; 0x07
    440e:	88 30       	cpi	r24, 0x08	; 8
    4410:	08 f0       	brcs	.+2      	; 0x4414 <HLCD_createNewCustomChar+0x3e>
    4412:	43 c0       	rjmp	.+134    	; 0x449a <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    4414:	eb 81       	ldd	r30, Y+3	; 0x03
    4416:	fc 81       	ldd	r31, Y+4	; 0x04
    4418:	80 81       	ld	r24, Z
    441a:	88 23       	and	r24, r24
    441c:	09 f4       	brne	.+2      	; 0x4420 <HLCD_createNewCustomChar+0x4a>
    441e:	42 c0       	rjmp	.+132    	; 0x44a4 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4420:	eb 81       	ldd	r30, Y+3	; 0x03
    4422:	fc 81       	ldd	r31, Y+4	; 0x04
    4424:	80 81       	ld	r24, Z
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	a9 f5       	brne	.+106    	; 0x4494 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    442a:	8f 81       	ldd	r24, Y+7	; 0x07
    442c:	88 2f       	mov	r24, r24
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	88 0f       	add	r24, r24
    4432:	99 1f       	adc	r25, r25
    4434:	88 0f       	add	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	88 0f       	add	r24, r24
    443a:	99 1f       	adc	r25, r25
    443c:	80 64       	ori	r24, 0x40	; 64
    443e:	28 2f       	mov	r18, r24
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	9c 81       	ldd	r25, Y+4	; 0x04
    4444:	62 2f       	mov	r22, r18
    4446:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    444a:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    444c:	8a 81       	ldd	r24, Y+2	; 0x02
    444e:	88 23       	and	r24, r24
    4450:	d1 f4       	brne	.+52     	; 0x4486 <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    4452:	19 82       	std	Y+1, r1	; 0x01
    4454:	15 c0       	rjmp	.+42     	; 0x4480 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	28 2f       	mov	r18, r24
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	8d 81       	ldd	r24, Y+5	; 0x05
    445e:	9e 81       	ldd	r25, Y+6	; 0x06
    4460:	fc 01       	movw	r30, r24
    4462:	e2 0f       	add	r30, r18
    4464:	f3 1f       	adc	r31, r19
    4466:	20 81       	ld	r18, Z
    4468:	8b 81       	ldd	r24, Y+3	; 0x03
    446a:	9c 81       	ldd	r25, Y+4	; 0x04
    446c:	62 2f       	mov	r22, r18
    446e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <HLCD_displayChar>
    4472:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    4474:	8a 81       	ldd	r24, Y+2	; 0x02
    4476:	88 23       	and	r24, r24
    4478:	31 f4       	brne	.+12     	; 0x4486 <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	8f 5f       	subi	r24, 0xFF	; 255
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	88 30       	cpi	r24, 0x08	; 8
    4484:	40 f3       	brcs	.-48     	; 0x4456 <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    4486:	8b 81       	ldd	r24, Y+3	; 0x03
    4488:	9c 81       	ldd	r25, Y+4	; 0x04
    448a:	60 e8       	ldi	r22, 0x80	; 128
    448c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    4490:	8a 83       	std	Y+2, r24	; 0x02
    4492:	08 c0       	rjmp	.+16     	; 0x44a4 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4494:	83 e0       	ldi	r24, 0x03	; 3
    4496:	8a 83       	std	Y+2, r24	; 0x02
    4498:	05 c0       	rjmp	.+10     	; 0x44a4 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    449a:	84 e0       	ldi	r24, 0x04	; 4
    449c:	8a 83       	std	Y+2, r24	; 0x02
    449e:	02 c0       	rjmp	.+4      	; 0x44a4 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44a6:	27 96       	adiw	r28, 0x07	; 7
    44a8:	0f b6       	in	r0, 0x3f	; 63
    44aa:	f8 94       	cli
    44ac:	de bf       	out	0x3e, r29	; 62
    44ae:	0f be       	out	0x3f, r0	; 63
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <HLCD_Clr+0x6>
    44be:	0f 92       	push	r0
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	9b 83       	std	Y+3, r25	; 0x03
    44c6:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    44cc:	8a 81       	ldd	r24, Y+2	; 0x02
    44ce:	9b 81       	ldd	r25, Y+3	; 0x03
    44d0:	61 e0       	ldi	r22, 0x01	; 1
    44d2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_sendCmd>
    44d6:	89 83       	std	Y+1, r24	; 0x01

	return lcdRet;
    44d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	08 95       	ret

000044e6 <MASTER_appInit>:
/*************************************************************************/

#include "app.h"

void MASTER_appInit(void)
{
    44e6:	df 93       	push	r29
    44e8:	cf 93       	push	r28
    44ea:	cd b7       	in	r28, 0x3d	; 61
    44ec:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
    44ee:	8d ed       	ldi	r24, 0xDD	; 221
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 a5 0a 	call	0x154a	; 0x154a <HLCD_init>
	MSPI_init(&MASTER_spi);
    44f6:	8b ee       	ldi	r24, 0xEB	; 235
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 9b 05 	call	0xb36	; 0xb36 <MSPI_init>
	MSPI_enable();
    44fe:	0e 94 ae 06 	call	0xd5c	; 0xd5c <MSPI_enable>
}
    4502:	cf 91       	pop	r28
    4504:	df 91       	pop	r29
    4506:	08 95       	ret

00004508 <MASTER_appMain>:

void MASTER_appMain(void)
{
    4508:	df 93       	push	r29
    450a:	cf 93       	push	r28
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	e9 97       	sbiw	r28, 0x39	; 57
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61

	uint8_t data = 0;
    451c:	19 ae       	std	Y+57, r1	; 0x39


	while(1)
	{
		HLCD_Clr(&myLcd);
    451e:	8d ed       	ldi	r24, 0xDD	; 221
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
    4526:	8d ed       	ldi	r24, 0xDD	; 221
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	40 e0       	ldi	r20, 0x00	; 0
    452e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Sending 5");
    4532:	8d ed       	ldi	r24, 0xDD	; 221
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	20 e6       	ldi	r18, 0x60	; 96
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	b9 01       	movw	r22, r18
    453c:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
    4540:	8d ed       	ldi	r24, 0xDD	; 221
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	61 e0       	ldi	r22, 0x01	; 1
    4546:	40 e0       	ldi	r20, 0x00	; 0
    4548:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"In 1 sec");
    454c:	8d ed       	ldi	r24, 0xDD	; 221
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	2a e6       	ldi	r18, 0x6A	; 106
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	b9 01       	movw	r22, r18
    4556:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	aa e7       	ldi	r26, 0x7A	; 122
    4560:	b4 e4       	ldi	r27, 0x44	; 68
    4562:	8d ab       	std	Y+53, r24	; 0x35
    4564:	9e ab       	std	Y+54, r25	; 0x36
    4566:	af ab       	std	Y+55, r26	; 0x37
    4568:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	6d a9       	ldd	r22, Y+53	; 0x35
    456c:	7e a9       	ldd	r23, Y+54	; 0x36
    456e:	8f a9       	ldd	r24, Y+55	; 0x37
    4570:	98 ad       	ldd	r25, Y+56	; 0x38
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4a ef       	ldi	r20, 0xFA	; 250
    4578:	54 e4       	ldi	r21, 0x44	; 68
    457a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	89 ab       	std	Y+49, r24	; 0x31
    4584:	9a ab       	std	Y+50, r25	; 0x32
    4586:	ab ab       	std	Y+51, r26	; 0x33
    4588:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    458a:	69 a9       	ldd	r22, Y+49	; 0x31
    458c:	7a a9       	ldd	r23, Y+50	; 0x32
    458e:	8b a9       	ldd	r24, Y+51	; 0x33
    4590:	9c a9       	ldd	r25, Y+52	; 0x34
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	2c f4       	brge	.+10     	; 0x45ac <MASTER_appMain+0xa4>
		__ticks = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	98 ab       	std	Y+48, r25	; 0x30
    45a8:	8f a7       	std	Y+47, r24	; 0x2f
    45aa:	3f c0       	rjmp	.+126    	; 0x462a <MASTER_appMain+0x122>
	else if (__tmp > 65535)
    45ac:	69 a9       	ldd	r22, Y+49	; 0x31
    45ae:	7a a9       	ldd	r23, Y+50	; 0x32
    45b0:	8b a9       	ldd	r24, Y+51	; 0x33
    45b2:	9c a9       	ldd	r25, Y+52	; 0x34
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	4f e7       	ldi	r20, 0x7F	; 127
    45ba:	57 e4       	ldi	r21, 0x47	; 71
    45bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    45c0:	18 16       	cp	r1, r24
    45c2:	4c f5       	brge	.+82     	; 0x4616 <MASTER_appMain+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	6d a9       	ldd	r22, Y+53	; 0x35
    45c6:	7e a9       	ldd	r23, Y+54	; 0x36
    45c8:	8f a9       	ldd	r24, Y+55	; 0x37
    45ca:	98 ad       	ldd	r25, Y+56	; 0x38
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e2       	ldi	r20, 0x20	; 32
    45d2:	51 e4       	ldi	r21, 0x41	; 65
    45d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	bc 01       	movw	r22, r24
    45de:	cd 01       	movw	r24, r26
    45e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	98 ab       	std	Y+48, r25	; 0x30
    45ea:	8f a7       	std	Y+47, r24	; 0x2f
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <MASTER_appMain+0x104>
    45ee:	88 ec       	ldi	r24, 0xC8	; 200
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	9e a7       	std	Y+46, r25	; 0x2e
    45f4:	8d a7       	std	Y+45, r24	; 0x2d
    45f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    45f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <MASTER_appMain+0xf2>
    45fe:	9e a7       	std	Y+46, r25	; 0x2e
    4600:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4602:	8f a5       	ldd	r24, Y+47	; 0x2f
    4604:	98 a9       	ldd	r25, Y+48	; 0x30
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	98 ab       	std	Y+48, r25	; 0x30
    460a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	8f a5       	ldd	r24, Y+47	; 0x2f
    460e:	98 a9       	ldd	r25, Y+48	; 0x30
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	69 f7       	brne	.-38     	; 0x45ee <MASTER_appMain+0xe6>
    4614:	14 c0       	rjmp	.+40     	; 0x463e <MASTER_appMain+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4616:	69 a9       	ldd	r22, Y+49	; 0x31
    4618:	7a a9       	ldd	r23, Y+50	; 0x32
    461a:	8b a9       	ldd	r24, Y+51	; 0x33
    461c:	9c a9       	ldd	r25, Y+52	; 0x34
    461e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	98 ab       	std	Y+48, r25	; 0x30
    4628:	8f a7       	std	Y+47, r24	; 0x2f
    462a:	8f a5       	ldd	r24, Y+47	; 0x2f
    462c:	98 a9       	ldd	r25, Y+48	; 0x30
    462e:	9c a7       	std	Y+44, r25	; 0x2c
    4630:	8b a7       	std	Y+43, r24	; 0x2b
    4632:	8b a5       	ldd	r24, Y+43	; 0x2b
    4634:	9c a5       	ldd	r25, Y+44	; 0x2c
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <MASTER_appMain+0x12e>
    463a:	9c a7       	std	Y+44, r25	; 0x2c
    463c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		data = 5;
    463e:	85 e0       	ldi	r24, 0x05	; 5
    4640:	89 af       	std	Y+57, r24	; 0x39
		MSPI_send(data);
    4642:	89 ad       	ldd	r24, Y+57	; 0x39
    4644:	0e 94 f6 06 	call	0xdec	; 0xdec <MSPI_send>
		HLCD_Clr(&myLcd);
    4648:	8d ed       	ldi	r24, 0xDD	; 221
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
    4650:	8d ed       	ldi	r24, 0xDD	; 221
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	60 e0       	ldi	r22, 0x00	; 0
    4656:	40 e0       	ldi	r20, 0x00	; 0
    4658:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Sending 2");
    465c:	8d ed       	ldi	r24, 0xDD	; 221
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	23 e7       	ldi	r18, 0x73	; 115
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	b9 01       	movw	r22, r18
    4666:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
    466a:	8d ed       	ldi	r24, 0xDD	; 221
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	61 e0       	ldi	r22, 0x01	; 1
    4670:	40 e0       	ldi	r20, 0x00	; 0
    4672:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"In 1 sec");
    4676:	8d ed       	ldi	r24, 0xDD	; 221
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	2a e6       	ldi	r18, 0x6A	; 106
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	b9 01       	movw	r22, r18
    4680:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	aa e7       	ldi	r26, 0x7A	; 122
    468a:	b4 e4       	ldi	r27, 0x44	; 68
    468c:	8f a3       	std	Y+39, r24	; 0x27
    468e:	98 a7       	std	Y+40, r25	; 0x28
    4690:	a9 a7       	std	Y+41, r26	; 0x29
    4692:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4694:	6f a1       	ldd	r22, Y+39	; 0x27
    4696:	78 a5       	ldd	r23, Y+40	; 0x28
    4698:	89 a5       	ldd	r24, Y+41	; 0x29
    469a:	9a a5       	ldd	r25, Y+42	; 0x2a
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	4a ef       	ldi	r20, 0xFA	; 250
    46a2:	54 e4       	ldi	r21, 0x44	; 68
    46a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46a8:	dc 01       	movw	r26, r24
    46aa:	cb 01       	movw	r24, r22
    46ac:	8b a3       	std	Y+35, r24	; 0x23
    46ae:	9c a3       	std	Y+36, r25	; 0x24
    46b0:	ad a3       	std	Y+37, r26	; 0x25
    46b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46b4:	6b a1       	ldd	r22, Y+35	; 0x23
    46b6:	7c a1       	ldd	r23, Y+36	; 0x24
    46b8:	8d a1       	ldd	r24, Y+37	; 0x25
    46ba:	9e a1       	ldd	r25, Y+38	; 0x26
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	40 e8       	ldi	r20, 0x80	; 128
    46c2:	5f e3       	ldi	r21, 0x3F	; 63
    46c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    46c8:	88 23       	and	r24, r24
    46ca:	2c f4       	brge	.+10     	; 0x46d6 <MASTER_appMain+0x1ce>
		__ticks = 1;
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	9a a3       	std	Y+34, r25	; 0x22
    46d2:	89 a3       	std	Y+33, r24	; 0x21
    46d4:	3f c0       	rjmp	.+126    	; 0x4754 <MASTER_appMain+0x24c>
	else if (__tmp > 65535)
    46d6:	6b a1       	ldd	r22, Y+35	; 0x23
    46d8:	7c a1       	ldd	r23, Y+36	; 0x24
    46da:	8d a1       	ldd	r24, Y+37	; 0x25
    46dc:	9e a1       	ldd	r25, Y+38	; 0x26
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	3f ef       	ldi	r19, 0xFF	; 255
    46e2:	4f e7       	ldi	r20, 0x7F	; 127
    46e4:	57 e4       	ldi	r21, 0x47	; 71
    46e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    46ea:	18 16       	cp	r1, r24
    46ec:	4c f5       	brge	.+82     	; 0x4740 <MASTER_appMain+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ee:	6f a1       	ldd	r22, Y+39	; 0x27
    46f0:	78 a5       	ldd	r23, Y+40	; 0x28
    46f2:	89 a5       	ldd	r24, Y+41	; 0x29
    46f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	40 e2       	ldi	r20, 0x20	; 32
    46fc:	51 e4       	ldi	r21, 0x41	; 65
    46fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4702:	dc 01       	movw	r26, r24
    4704:	cb 01       	movw	r24, r22
    4706:	bc 01       	movw	r22, r24
    4708:	cd 01       	movw	r24, r26
    470a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	9a a3       	std	Y+34, r25	; 0x22
    4714:	89 a3       	std	Y+33, r24	; 0x21
    4716:	0f c0       	rjmp	.+30     	; 0x4736 <MASTER_appMain+0x22e>
    4718:	88 ec       	ldi	r24, 0xC8	; 200
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	98 a3       	std	Y+32, r25	; 0x20
    471e:	8f 8f       	std	Y+31, r24	; 0x1f
    4720:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4722:	98 a1       	ldd	r25, Y+32	; 0x20
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	f1 f7       	brne	.-4      	; 0x4724 <MASTER_appMain+0x21c>
    4728:	98 a3       	std	Y+32, r25	; 0x20
    472a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472c:	89 a1       	ldd	r24, Y+33	; 0x21
    472e:	9a a1       	ldd	r25, Y+34	; 0x22
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	9a a3       	std	Y+34, r25	; 0x22
    4734:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4736:	89 a1       	ldd	r24, Y+33	; 0x21
    4738:	9a a1       	ldd	r25, Y+34	; 0x22
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	69 f7       	brne	.-38     	; 0x4718 <MASTER_appMain+0x210>
    473e:	14 c0       	rjmp	.+40     	; 0x4768 <MASTER_appMain+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4740:	6b a1       	ldd	r22, Y+35	; 0x23
    4742:	7c a1       	ldd	r23, Y+36	; 0x24
    4744:	8d a1       	ldd	r24, Y+37	; 0x25
    4746:	9e a1       	ldd	r25, Y+38	; 0x26
    4748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    474c:	dc 01       	movw	r26, r24
    474e:	cb 01       	movw	r24, r22
    4750:	9a a3       	std	Y+34, r25	; 0x22
    4752:	89 a3       	std	Y+33, r24	; 0x21
    4754:	89 a1       	ldd	r24, Y+33	; 0x21
    4756:	9a a1       	ldd	r25, Y+34	; 0x22
    4758:	9e 8f       	std	Y+30, r25	; 0x1e
    475a:	8d 8f       	std	Y+29, r24	; 0x1d
    475c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    475e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4760:	01 97       	sbiw	r24, 0x01	; 1
    4762:	f1 f7       	brne	.-4      	; 0x4760 <MASTER_appMain+0x258>
    4764:	9e 8f       	std	Y+30, r25	; 0x1e
    4766:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		data = 2;
    4768:	82 e0       	ldi	r24, 0x02	; 2
    476a:	89 af       	std	Y+57, r24	; 0x39
		MSPI_send(data);
    476c:	89 ad       	ldd	r24, Y+57	; 0x39
    476e:	0e 94 f6 06 	call	0xdec	; 0xdec <MSPI_send>
		HLCD_Clr(&myLcd);
    4772:	8d ed       	ldi	r24, 0xDD	; 221
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
    477a:	8d ed       	ldi	r24, 0xDD	; 221
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	40 e0       	ldi	r20, 0x00	; 0
    4782:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Sending 4");
    4786:	8d ed       	ldi	r24, 0xDD	; 221
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	2d e7       	ldi	r18, 0x7D	; 125
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	b9 01       	movw	r22, r18
    4790:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
    4794:	8d ed       	ldi	r24, 0xDD	; 221
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	61 e0       	ldi	r22, 0x01	; 1
    479a:	40 e0       	ldi	r20, 0x00	; 0
    479c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"In 1 sec");
    47a0:	8d ed       	ldi	r24, 0xDD	; 221
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	2a e6       	ldi	r18, 0x6A	; 106
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	b9 01       	movw	r22, r18
    47aa:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	aa e7       	ldi	r26, 0x7A	; 122
    47b4:	b4 e4       	ldi	r27, 0x44	; 68
    47b6:	89 8f       	std	Y+25, r24	; 0x19
    47b8:	9a 8f       	std	Y+26, r25	; 0x1a
    47ba:	ab 8f       	std	Y+27, r26	; 0x1b
    47bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47be:	69 8d       	ldd	r22, Y+25	; 0x19
    47c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	4a ef       	ldi	r20, 0xFA	; 250
    47cc:	54 e4       	ldi	r21, 0x44	; 68
    47ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	8d 8b       	std	Y+21, r24	; 0x15
    47d8:	9e 8b       	std	Y+22, r25	; 0x16
    47da:	af 8b       	std	Y+23, r26	; 0x17
    47dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47de:	6d 89       	ldd	r22, Y+21	; 0x15
    47e0:	7e 89       	ldd	r23, Y+22	; 0x16
    47e2:	8f 89       	ldd	r24, Y+23	; 0x17
    47e4:	98 8d       	ldd	r25, Y+24	; 0x18
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	40 e8       	ldi	r20, 0x80	; 128
    47ec:	5f e3       	ldi	r21, 0x3F	; 63
    47ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    47f2:	88 23       	and	r24, r24
    47f4:	2c f4       	brge	.+10     	; 0x4800 <MASTER_appMain+0x2f8>
		__ticks = 1;
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	9c 8b       	std	Y+20, r25	; 0x14
    47fc:	8b 8b       	std	Y+19, r24	; 0x13
    47fe:	3f c0       	rjmp	.+126    	; 0x487e <MASTER_appMain+0x376>
	else if (__tmp > 65535)
    4800:	6d 89       	ldd	r22, Y+21	; 0x15
    4802:	7e 89       	ldd	r23, Y+22	; 0x16
    4804:	8f 89       	ldd	r24, Y+23	; 0x17
    4806:	98 8d       	ldd	r25, Y+24	; 0x18
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	3f ef       	ldi	r19, 0xFF	; 255
    480c:	4f e7       	ldi	r20, 0x7F	; 127
    480e:	57 e4       	ldi	r21, 0x47	; 71
    4810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4814:	18 16       	cp	r1, r24
    4816:	4c f5       	brge	.+82     	; 0x486a <MASTER_appMain+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4818:	69 8d       	ldd	r22, Y+25	; 0x19
    481a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    481c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    481e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	30 e0       	ldi	r19, 0x00	; 0
    4824:	40 e2       	ldi	r20, 0x20	; 32
    4826:	51 e4       	ldi	r21, 0x41	; 65
    4828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	bc 01       	movw	r22, r24
    4832:	cd 01       	movw	r24, r26
    4834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	9c 8b       	std	Y+20, r25	; 0x14
    483e:	8b 8b       	std	Y+19, r24	; 0x13
    4840:	0f c0       	rjmp	.+30     	; 0x4860 <MASTER_appMain+0x358>
    4842:	88 ec       	ldi	r24, 0xC8	; 200
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9a 8b       	std	Y+18, r25	; 0x12
    4848:	89 8b       	std	Y+17, r24	; 0x11
    484a:	89 89       	ldd	r24, Y+17	; 0x11
    484c:	9a 89       	ldd	r25, Y+18	; 0x12
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	f1 f7       	brne	.-4      	; 0x484e <MASTER_appMain+0x346>
    4852:	9a 8b       	std	Y+18, r25	; 0x12
    4854:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4856:	8b 89       	ldd	r24, Y+19	; 0x13
    4858:	9c 89       	ldd	r25, Y+20	; 0x14
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	9c 8b       	std	Y+20, r25	; 0x14
    485e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4860:	8b 89       	ldd	r24, Y+19	; 0x13
    4862:	9c 89       	ldd	r25, Y+20	; 0x14
    4864:	00 97       	sbiw	r24, 0x00	; 0
    4866:	69 f7       	brne	.-38     	; 0x4842 <MASTER_appMain+0x33a>
    4868:	14 c0       	rjmp	.+40     	; 0x4892 <MASTER_appMain+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    486a:	6d 89       	ldd	r22, Y+21	; 0x15
    486c:	7e 89       	ldd	r23, Y+22	; 0x16
    486e:	8f 89       	ldd	r24, Y+23	; 0x17
    4870:	98 8d       	ldd	r25, Y+24	; 0x18
    4872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	9c 8b       	std	Y+20, r25	; 0x14
    487c:	8b 8b       	std	Y+19, r24	; 0x13
    487e:	8b 89       	ldd	r24, Y+19	; 0x13
    4880:	9c 89       	ldd	r25, Y+20	; 0x14
    4882:	98 8b       	std	Y+16, r25	; 0x10
    4884:	8f 87       	std	Y+15, r24	; 0x0f
    4886:	8f 85       	ldd	r24, Y+15	; 0x0f
    4888:	98 89       	ldd	r25, Y+16	; 0x10
    488a:	01 97       	sbiw	r24, 0x01	; 1
    488c:	f1 f7       	brne	.-4      	; 0x488a <MASTER_appMain+0x382>
    488e:	98 8b       	std	Y+16, r25	; 0x10
    4890:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		data = 4;
    4892:	84 e0       	ldi	r24, 0x04	; 4
    4894:	89 af       	std	Y+57, r24	; 0x39
		MSPI_send(data);
    4896:	89 ad       	ldd	r24, Y+57	; 0x39
    4898:	0e 94 f6 06 	call	0xdec	; 0xdec <MSPI_send>
		HLCD_Clr(&myLcd);
    489c:	8d ed       	ldi	r24, 0xDD	; 221
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
    48a4:	8d ed       	ldi	r24, 0xDD	; 221
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	60 e0       	ldi	r22, 0x00	; 0
    48aa:	40 e0       	ldi	r20, 0x00	; 0
    48ac:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Repeat All");
    48b0:	8d ed       	ldi	r24, 0xDD	; 221
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	27 e8       	ldi	r18, 0x87	; 135
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	b9 01       	movw	r22, r18
    48ba:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
    48be:	8d ed       	ldi	r24, 0xDD	; 221
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	61 e0       	ldi	r22, 0x01	; 1
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Again In 1 sec");
    48ca:	8d ed       	ldi	r24, 0xDD	; 221
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	22 e9       	ldi	r18, 0x92	; 146
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	b9 01       	movw	r22, r18
    48d4:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	aa e7       	ldi	r26, 0x7A	; 122
    48de:	b4 e4       	ldi	r27, 0x44	; 68
    48e0:	8b 87       	std	Y+11, r24	; 0x0b
    48e2:	9c 87       	std	Y+12, r25	; 0x0c
    48e4:	ad 87       	std	Y+13, r26	; 0x0d
    48e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	4a ef       	ldi	r20, 0xFA	; 250
    48f6:	54 e4       	ldi	r21, 0x44	; 68
    48f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48fc:	dc 01       	movw	r26, r24
    48fe:	cb 01       	movw	r24, r22
    4900:	8f 83       	std	Y+7, r24	; 0x07
    4902:	98 87       	std	Y+8, r25	; 0x08
    4904:	a9 87       	std	Y+9, r26	; 0x09
    4906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4908:	6f 81       	ldd	r22, Y+7	; 0x07
    490a:	78 85       	ldd	r23, Y+8	; 0x08
    490c:	89 85       	ldd	r24, Y+9	; 0x09
    490e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e8       	ldi	r20, 0x80	; 128
    4916:	5f e3       	ldi	r21, 0x3F	; 63
    4918:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    491c:	88 23       	and	r24, r24
    491e:	2c f4       	brge	.+10     	; 0x492a <MASTER_appMain+0x422>
		__ticks = 1;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9e 83       	std	Y+6, r25	; 0x06
    4926:	8d 83       	std	Y+5, r24	; 0x05
    4928:	3f c0       	rjmp	.+126    	; 0x49a8 <MASTER_appMain+0x4a0>
	else if (__tmp > 65535)
    492a:	6f 81       	ldd	r22, Y+7	; 0x07
    492c:	78 85       	ldd	r23, Y+8	; 0x08
    492e:	89 85       	ldd	r24, Y+9	; 0x09
    4930:	9a 85       	ldd	r25, Y+10	; 0x0a
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	4f e7       	ldi	r20, 0x7F	; 127
    4938:	57 e4       	ldi	r21, 0x47	; 71
    493a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    493e:	18 16       	cp	r1, r24
    4940:	4c f5       	brge	.+82     	; 0x4994 <MASTER_appMain+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4942:	6b 85       	ldd	r22, Y+11	; 0x0b
    4944:	7c 85       	ldd	r23, Y+12	; 0x0c
    4946:	8d 85       	ldd	r24, Y+13	; 0x0d
    4948:	9e 85       	ldd	r25, Y+14	; 0x0e
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	40 e2       	ldi	r20, 0x20	; 32
    4950:	51 e4       	ldi	r21, 0x41	; 65
    4952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	bc 01       	movw	r22, r24
    495c:	cd 01       	movw	r24, r26
    495e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	9e 83       	std	Y+6, r25	; 0x06
    4968:	8d 83       	std	Y+5, r24	; 0x05
    496a:	0f c0       	rjmp	.+30     	; 0x498a <MASTER_appMain+0x482>
    496c:	88 ec       	ldi	r24, 0xC8	; 200
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	9c 83       	std	Y+4, r25	; 0x04
    4972:	8b 83       	std	Y+3, r24	; 0x03
    4974:	8b 81       	ldd	r24, Y+3	; 0x03
    4976:	9c 81       	ldd	r25, Y+4	; 0x04
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <MASTER_appMain+0x470>
    497c:	9c 83       	std	Y+4, r25	; 0x04
    497e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4980:	8d 81       	ldd	r24, Y+5	; 0x05
    4982:	9e 81       	ldd	r25, Y+6	; 0x06
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	9e 83       	std	Y+6, r25	; 0x06
    4988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498a:	8d 81       	ldd	r24, Y+5	; 0x05
    498c:	9e 81       	ldd	r25, Y+6	; 0x06
    498e:	00 97       	sbiw	r24, 0x00	; 0
    4990:	69 f7       	brne	.-38     	; 0x496c <MASTER_appMain+0x464>
    4992:	c5 cd       	rjmp	.-1142   	; 0x451e <MASTER_appMain+0x16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4994:	6f 81       	ldd	r22, Y+7	; 0x07
    4996:	78 85       	ldd	r23, Y+8	; 0x08
    4998:	89 85       	ldd	r24, Y+9	; 0x09
    499a:	9a 85       	ldd	r25, Y+10	; 0x0a
    499c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	9e 83       	std	Y+6, r25	; 0x06
    49a6:	8d 83       	std	Y+5, r24	; 0x05
    49a8:	8d 81       	ldd	r24, Y+5	; 0x05
    49aa:	9e 81       	ldd	r25, Y+6	; 0x06
    49ac:	9a 83       	std	Y+2, r25	; 0x02
    49ae:	89 83       	std	Y+1, r24	; 0x01
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	9a 81       	ldd	r25, Y+2	; 0x02
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	f1 f7       	brne	.-4      	; 0x49b4 <MASTER_appMain+0x4ac>
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01
    49bc:	b0 cd       	rjmp	.-1184   	; 0x451e <MASTER_appMain+0x16>

000049be <SLAVE_appInit>:
/*************************************************************************/

#include "app.h"

void SLAVE_appInit(void)
{
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
	HLCD_init(&myLcd);
    49c6:	8d ed       	ldi	r24, 0xDD	; 221
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 a5 0a 	call	0x154a	; 0x154a <HLCD_init>
	MSPI_init(&SLAVE_spi);
    49ce:	81 ef       	ldi	r24, 0xF1	; 241
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <MSPI_init>
	MSPI_enable();
    49d6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <MSPI_enable>
}
    49da:	cf 91       	pop	r28
    49dc:	df 91       	pop	r29
    49de:	08 95       	ret

000049e0 <SLAVE_appMain>:

void SLAVE_appMain(void)
{
    49e0:	df 93       	push	r29
    49e2:	cf 93       	push	r28
    49e4:	0f 92       	push	r0
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0;
    49ea:	19 82       	std	Y+1, r1	; 0x01
	HLCD_Clr(&myLcd);
    49ec:	8d ed       	ldi	r24, 0xDD	; 221
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
	HLCD_changeCursorPosation(&myLcd,0,0);
    49f4:	8d ed       	ldi	r24, 0xDD	; 221
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	60 e0       	ldi	r22, 0x00	; 0
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
	HLCD_displayString(&myLcd,(uint8_t *)"Receiving....");
    4a00:	8d ed       	ldi	r24, 0xDD	; 221
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	21 ea       	ldi	r18, 0xA1	; 161
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	b9 01       	movw	r22, r18
    4a0a:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>

	while(1)
	{
		MSPI_recive(&data);
    4a0e:	ce 01       	movw	r24, r28
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	0e 94 d6 06 	call	0xdac	; 0xdac <MSPI_recive>
		HLCD_Clr(&myLcd);
    4a16:	8d ed       	ldi	r24, 0xDD	; 221
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HLCD_Clr>
		HLCD_changeCursorPosation(&myLcd,0,0);
    4a1e:	8d ed       	ldi	r24, 0xDD	; 221
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	60 e0       	ldi	r22, 0x00	; 0
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayString(&myLcd,(uint8_t *)"Received Data");
    4a2a:	8d ed       	ldi	r24, 0xDD	; 221
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	2f ea       	ldi	r18, 0xAF	; 175
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	b9 01       	movw	r22, r18
    4a34:	0e 94 ce 20 	call	0x419c	; 0x419c <HLCD_displayString>
		HLCD_changeCursorPosation(&myLcd,1,0);
    4a38:	8d ed       	ldi	r24, 0xDD	; 221
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	61 e0       	ldi	r22, 0x01	; 1
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HLCD_changeCursorPosation>
		HLCD_displayNumber(&myLcd,data);
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	28 2f       	mov	r18, r24
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e0       	ldi	r20, 0x00	; 0
    4a4c:	50 e0       	ldi	r21, 0x00	; 0
    4a4e:	8d ed       	ldi	r24, 0xDD	; 221
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	ba 01       	movw	r22, r20
    4a54:	a9 01       	movw	r20, r18
    4a56:	0e 94 18 21 	call	0x4230	; 0x4230 <HLCD_displayNumber>
    4a5a:	d9 cf       	rjmp	.-78     	; 0x4a0e <SLAVE_appMain+0x2e>

00004a5c <main>:

#include "APPLICATION/app.h"


void main(void)
{
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
	//MASTER_appInit();
	//MASTER_appMain();
	SLAVE_appInit();
    4a64:	0e 94 df 24 	call	0x49be	; 0x49be <SLAVE_appInit>
	SLAVE_appMain();
    4a68:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <SLAVE_appMain>
}
    4a6c:	cf 91       	pop	r28
    4a6e:	df 91       	pop	r29
    4a70:	08 95       	ret

00004a72 <__prologue_saves__>:
    4a72:	2f 92       	push	r2
    4a74:	3f 92       	push	r3
    4a76:	4f 92       	push	r4
    4a78:	5f 92       	push	r5
    4a7a:	6f 92       	push	r6
    4a7c:	7f 92       	push	r7
    4a7e:	8f 92       	push	r8
    4a80:	9f 92       	push	r9
    4a82:	af 92       	push	r10
    4a84:	bf 92       	push	r11
    4a86:	cf 92       	push	r12
    4a88:	df 92       	push	r13
    4a8a:	ef 92       	push	r14
    4a8c:	ff 92       	push	r15
    4a8e:	0f 93       	push	r16
    4a90:	1f 93       	push	r17
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	ca 1b       	sub	r28, r26
    4a9c:	db 0b       	sbc	r29, r27
    4a9e:	0f b6       	in	r0, 0x3f	; 63
    4aa0:	f8 94       	cli
    4aa2:	de bf       	out	0x3e, r29	; 62
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	09 94       	ijmp

00004aaa <__epilogue_restores__>:
    4aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    4aac:	39 88       	ldd	r3, Y+17	; 0x11
    4aae:	48 88       	ldd	r4, Y+16	; 0x10
    4ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    4abc:	b9 84       	ldd	r11, Y+9	; 0x09
    4abe:	c8 84       	ldd	r12, Y+8	; 0x08
    4ac0:	df 80       	ldd	r13, Y+7	; 0x07
    4ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    4ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    4ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    4aca:	aa 81       	ldd	r26, Y+2	; 0x02
    4acc:	b9 81       	ldd	r27, Y+1	; 0x01
    4ace:	ce 0f       	add	r28, r30
    4ad0:	d1 1d       	adc	r29, r1
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	ed 01       	movw	r28, r26
    4ade:	08 95       	ret

00004ae0 <itoa>:
    4ae0:	fb 01       	movw	r30, r22
    4ae2:	9f 01       	movw	r18, r30
    4ae4:	e8 94       	clt
    4ae6:	42 30       	cpi	r20, 0x02	; 2
    4ae8:	c4 f0       	brlt	.+48     	; 0x4b1a <itoa+0x3a>
    4aea:	45 32       	cpi	r20, 0x25	; 37
    4aec:	b4 f4       	brge	.+44     	; 0x4b1a <itoa+0x3a>
    4aee:	4a 30       	cpi	r20, 0x0A	; 10
    4af0:	29 f4       	brne	.+10     	; 0x4afc <itoa+0x1c>
    4af2:	97 fb       	bst	r25, 7
    4af4:	1e f4       	brtc	.+6      	; 0x4afc <itoa+0x1c>
    4af6:	90 95       	com	r25
    4af8:	81 95       	neg	r24
    4afa:	9f 4f       	sbci	r25, 0xFF	; 255
    4afc:	64 2f       	mov	r22, r20
    4afe:	77 27       	eor	r23, r23
    4b00:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodhi4>
    4b04:	80 5d       	subi	r24, 0xD0	; 208
    4b06:	8a 33       	cpi	r24, 0x3A	; 58
    4b08:	0c f0       	brlt	.+2      	; 0x4b0c <itoa+0x2c>
    4b0a:	89 5d       	subi	r24, 0xD9	; 217
    4b0c:	81 93       	st	Z+, r24
    4b0e:	cb 01       	movw	r24, r22
    4b10:	00 97       	sbiw	r24, 0x00	; 0
    4b12:	a1 f7       	brne	.-24     	; 0x4afc <itoa+0x1c>
    4b14:	16 f4       	brtc	.+4      	; 0x4b1a <itoa+0x3a>
    4b16:	5d e2       	ldi	r21, 0x2D	; 45
    4b18:	51 93       	st	Z+, r21
    4b1a:	10 82       	st	Z, r1
    4b1c:	c9 01       	movw	r24, r18
    4b1e:	0c 94 91 25 	jmp	0x4b22	; 0x4b22 <strrev>

00004b22 <strrev>:
    4b22:	dc 01       	movw	r26, r24
    4b24:	fc 01       	movw	r30, r24
    4b26:	67 2f       	mov	r22, r23
    4b28:	71 91       	ld	r23, Z+
    4b2a:	77 23       	and	r23, r23
    4b2c:	e1 f7       	brne	.-8      	; 0x4b26 <strrev+0x4>
    4b2e:	32 97       	sbiw	r30, 0x02	; 2
    4b30:	04 c0       	rjmp	.+8      	; 0x4b3a <strrev+0x18>
    4b32:	7c 91       	ld	r23, X
    4b34:	6d 93       	st	X+, r22
    4b36:	70 83       	st	Z, r23
    4b38:	62 91       	ld	r22, -Z
    4b3a:	ae 17       	cp	r26, r30
    4b3c:	bf 07       	cpc	r27, r31
    4b3e:	c8 f3       	brcs	.-14     	; 0x4b32 <strrev+0x10>
    4b40:	08 95       	ret

00004b42 <__udivmodhi4>:
    4b42:	aa 1b       	sub	r26, r26
    4b44:	bb 1b       	sub	r27, r27
    4b46:	51 e1       	ldi	r21, 0x11	; 17
    4b48:	07 c0       	rjmp	.+14     	; 0x4b58 <__udivmodhi4_ep>

00004b4a <__udivmodhi4_loop>:
    4b4a:	aa 1f       	adc	r26, r26
    4b4c:	bb 1f       	adc	r27, r27
    4b4e:	a6 17       	cp	r26, r22
    4b50:	b7 07       	cpc	r27, r23
    4b52:	10 f0       	brcs	.+4      	; 0x4b58 <__udivmodhi4_ep>
    4b54:	a6 1b       	sub	r26, r22
    4b56:	b7 0b       	sbc	r27, r23

00004b58 <__udivmodhi4_ep>:
    4b58:	88 1f       	adc	r24, r24
    4b5a:	99 1f       	adc	r25, r25
    4b5c:	5a 95       	dec	r21
    4b5e:	a9 f7       	brne	.-22     	; 0x4b4a <__udivmodhi4_loop>
    4b60:	80 95       	com	r24
    4b62:	90 95       	com	r25
    4b64:	bc 01       	movw	r22, r24
    4b66:	cd 01       	movw	r24, r26
    4b68:	08 95       	ret

00004b6a <_exit>:
    4b6a:	f8 94       	cli

00004b6c <__stop_program>:
    4b6c:	ff cf       	rjmp	.-2      	; 0x4b6c <__stop_program>
