
07_Lec_1_Assignment_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  000026a6  0000273a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800138  00800138  00002812  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d66  00000000  00000000  00005b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000886e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000089ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b652  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 13 	call	0x2622	; 0x2622 <main>
      8a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 13 	jmp	0x266c	; 0x266c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 13 	jmp	0x266c	; 0x266c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
                                             &PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
                                            &PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_initPin+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	b1 f0       	breq	.+44     	; 0xb8e <GPIO_initPin+0x48>
    ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b62:	ea 81       	ldd	r30, Y+2	; 0x02
     b64:	fb 81       	ldd	r31, Y+3	; 0x03
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	62 2f       	mov	r22, r18
     b6e:	0e 94 d0 05 	call	0xba0	; 0xba0 <GPIO_changePinDir>
     b72:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == ret) {
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 23       	and	r24, r24
     b78:	61 f4       	brne	.+24     	; 0xb92 <GPIO_initPin+0x4c>
      ret =
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	23 81       	ldd	r18, Z+3	; 0x03
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	9b 81       	ldd	r25, Y+3	; 0x03
     b84:	62 2f       	mov	r22, r18
     b86:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <GPIO_initPin+0x4c>
          GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
    } else {
      /*Do Nothin*/
    }
  } else {
    ret = GPIO_NULL_PTR;
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                        EN_GPIO_pinDir_t copyNewPinDir) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <GPIO_changePinDir+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_changePinDir+0x8>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_changePinDir+0xa>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	9b 83       	std	Y+3, r25	; 0x03
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <GPIO_changePinDir+0x22>
     bc0:	68 c0       	rjmp	.+208    	; 0xc92 <GPIO_changePinDir+0xf2>
    switch (copyNewPinDir) {
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3e 83       	std	Y+6, r19	; 0x06
     bca:	2d 83       	std	Y+5, r18	; 0x05
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <GPIO_changePinDir+0x40>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	31 05       	cpc	r19, r1
     bdc:	71 f1       	breq	.+92     	; 0xc3a <GPIO_changePinDir+0x9a>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <GPIO_changePinDir+0xf6>
    case GPIO_INPUT: {
      CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	fc 01       	movw	r30, r24
     bf0:	e8 59       	subi	r30, 0x98	; 152
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	a0 81       	ld	r26, Z
     bf6:	b1 81       	ldd	r27, Z+1	; 0x01
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	fb 81       	ldd	r31, Y+3	; 0x03
     bfc:	80 81       	ld	r24, Z
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	fc 01       	movw	r30, r24
     c08:	e8 59       	subi	r30, 0x98	; 152
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	01 90       	ld	r0, Z+
     c0e:	f0 81       	ld	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <GPIO_changePinDir+0x8c>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <GPIO_changePinDir+0x88>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	2e c0       	rjmp	.+92     	; 0xc96 <GPIO_changePinDir+0xf6>
      break;
    }
    case GPIO_OUTPUT: {
      SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c3a:	ea 81       	ldd	r30, Y+2	; 0x02
     c3c:	fb 81       	ldd	r31, Y+3	; 0x03
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	fc 01       	movw	r30, r24
     c4a:	e8 59       	subi	r30, 0x98	; 152
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	a0 81       	ld	r26, Z
     c50:	b1 81       	ldd	r27, Z+1	; 0x01
     c52:	ea 81       	ldd	r30, Y+2	; 0x02
     c54:	fb 81       	ldd	r31, Y+3	; 0x03
     c56:	80 81       	ld	r24, Z
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	fc 01       	movw	r30, r24
     c62:	e8 59       	subi	r30, 0x98	; 152
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	01 90       	ld	r0, Z+
     c68:	f0 81       	ld	r31, Z
     c6a:	e0 2d       	mov	r30, r0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xe6>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_changePinDir+0xe2>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <GPIO_changePinDir+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	26 96       	adiw	r28, 0x06	; 6
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                         EN_GPIO_pinLogic_t copyNewPinLogic) {
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <GPIO_writePinLogic+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <GPIO_writePinLogic+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <GPIO_writePinLogic+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9b 83       	std	Y+3, r25	; 0x03
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <GPIO_writePinLogic+0x22>
     cca:	68 c0       	rjmp	.+208    	; 0xd9c <GPIO_writePinLogic+0xf2>
    switch (copyNewPinLogic) {
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	2d 83       	std	Y+5, r18	; 0x05
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <GPIO_writePinLogic+0x40>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	71 f1       	breq	.+92     	; 0xd44 <GPIO_writePinLogic+0x9a>
     ce8:	5b c0       	rjmp	.+182    	; 0xda0 <GPIO_writePinLogic+0xf6>
    case GPIO_LOW: {
      CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cea:	ea 81       	ldd	r30, Y+2	; 0x02
     cec:	fb 81       	ldd	r31, Y+3	; 0x03
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e0 59       	subi	r30, 0x90	; 144
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	a0 81       	ld	r26, Z
     d00:	b1 81       	ldd	r27, Z+1	; 0x01
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	fc 01       	movw	r30, r24
     d12:	e0 59       	subi	r30, 0x90	; 144
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_writePinLogic+0x8c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_writePinLogic+0x88>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	2e c0       	rjmp	.+92     	; 0xda0 <GPIO_writePinLogic+0xf6>
      break;
    }
    case GPIO_HIGH: {
      SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 81       	ld	r24, Z
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	fc 01       	movw	r30, r24
     d54:	e0 59       	subi	r30, 0x90	; 144
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	ea 81       	ldd	r30, Y+2	; 0x02
     d5e:	fb 81       	ldd	r31, Y+3	; 0x03
     d60:	80 81       	ld	r24, Z
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	fc 01       	movw	r30, r24
     d6c:	e0 59       	subi	r30, 0x90	; 144
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xe6>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_writePinLogic+0xe2>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_writePinLogic+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	26 96       	adiw	r28, 0x06	; 6
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                  EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <GPIO_readPinLogic+0x6>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <GPIO_readPinLogic+0x8>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7d 83       	std	Y+5, r23	; 0x05
     dc8:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	11 f1       	breq	.+68     	; 0xe1a <GPIO_readPinLogic+0x66>
    *retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	fc 01       	movw	r30, r24
     de6:	e8 58       	subi	r30, 0x88	; 136
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_readPinLogic+0x54>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_readPinLogic+0x50>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	ec 81       	ldd	r30, Y+4	; 0x04
     e12:	fd 81       	ldd	r31, Y+5	; 0x05
     e14:	80 83       	st	Z, r24
                                  ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <GPIO_readPinLogic+0x6a>
  } else {
    ret = GPIO_NULL_PTR;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_togglePinLogic+0x6>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f1       	breq	.+88     	; 0xea4 <GPIO_togglePinLogic+0x74>
    TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	e0 59       	subi	r30, 0x90	; 144
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	ea 81       	ldd	r30, Y+2	; 0x02
     e66:	fb 81       	ldd	r31, Y+3	; 0x03
     e68:	80 81       	ld	r24, Z
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	fc 01       	movw	r30, r24
     e74:	e0 59       	subi	r30, 0x90	; 144
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x68>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_togglePinLogic+0x64>
     e9c:	84 27       	eor	r24, r20
     e9e:	8c 93       	st	X, r24
            ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_togglePinLogic+0x78>
  } else {
    ret = GPIO_NULL_PTR;
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 83       	std	Y+1, r24	; 0x01
  }

  return ret;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
                                    EN_GPIO_pinDir_t copyPortDir,
                                    EN_GPIO_pinLogic_t copyPortLogic) {
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	4c 83       	std	Y+4, r20	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01

  switch (copyPortDir) {
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	38 87       	std	Y+8, r19	; 0x08
     edc:	2f 83       	std	Y+7, r18	; 0x07
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	31 f0       	breq	.+12     	; 0xef2 <GPIO_initPort+0x3c>
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	31 05       	cpc	r19, r1
     eee:	79 f0       	breq	.+30     	; 0xf0e <GPIO_initPort+0x58>
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <GPIO_initPort+0x74>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e8 59       	subi	r30, 0x98	; 152
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	01 90       	ld	r0, Z+
     f04:	f0 81       	ld	r31, Z
     f06:	e0 2d       	mov	r30, r0
     f08:	10 82       	st	Z, r1
    ret = GPIO_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <GPIO_initPort+0x74>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 59       	subi	r30, 0x98	; 152
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  switch (copyPortLogic) {
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	31 f0       	breq	.+12     	; 0xf48 <GPIO_initPort+0x92>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	79 f0       	breq	.+30     	; 0xf64 <GPIO_initPort+0xae>
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <GPIO_initPort+0xca>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e0 59       	subi	r30, 0x90	; 144
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	10 82       	st	Z, r1
    ret = GPIO_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <GPIO_initPort+0xca>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	fc 01       	movw	r30, r24
     f70:	e0 59       	subi	r30, 0x90	; 144
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	01 90       	ld	r0, Z+
     f76:	f0 81       	ld	r31, Z
     f78:	e0 2d       	mov	r30, r0
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f7e:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
                                         EN_GPIO_pinDir_t copyNewPortDir) {
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_changePortDir+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GPIO_changePortDir+0x8>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01

  switch (copyNewPortDir) {
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 83       	std	Y+5, r19	; 0x05
     fb2:	2c 83       	std	Y+4, r18	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	31 f0       	breq	.+12     	; 0xfc8 <GPIO_changePortDir+0x34>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <GPIO_changePortDir+0x50>
     fc6:	1c c0       	rjmp	.+56     	; 0x1000 <GPIO_changePortDir+0x6c>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	10 82       	st	Z, r1
    ret = GPIO_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <GPIO_changePortDir+0x6c>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	e8 59       	subi	r30, 0x98	; 152
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	01 90       	ld	r0, Z+
     ff6:	f0 81       	ld	r31, Z
     ff8:	e0 2d       	mov	r30, r0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
    ret = GPIO_OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
                                          EN_GPIO_pinLogic_t copyNewPortLogic) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_writePortLogic+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_writePortLogic+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
  switch (copyNewPortLogic) {
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <GPIO_writePortLogic+0x34>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	79 f0       	breq	.+30     	; 0x1062 <GPIO_writePortLogic+0x50>
    1044:	1c c0       	rjmp	.+56     	; 0x107e <GPIO_writePortLogic+0x6c>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	fc 01       	movw	r30, r24
    1052:	e0 59       	subi	r30, 0x90	; 144
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	01 90       	ld	r0, Z+
    1058:	f0 81       	ld	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	10 82       	st	Z, r1
    ret = GPIO_OK;
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0e c0       	rjmp	.+28     	; 0x107e <GPIO_writePortLogic+0x6c>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e0 59       	subi	r30, 0x90	; 144
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 83       	st	Z, r24
    ret = GPIO_OK;
    107c:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
                   EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPortLogic+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPortLogic+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	7c 83       	std	Y+4, r23	; 0x04
    10a0:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01

  *retCurrentPortLogic = *pin_registers[copyPortName];
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e8 58       	subi	r30, 0x88	; 136
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	80 83       	st	Z, r24
  ret = GPIO_OK;
    10c4:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_togglePortLogic+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
  *ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	a0 81       	ld	r26, Z
    10f8:	b1 81       	ldd	r27, Z+1	; 0x01
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e8 59       	subi	r30, 0x98	; 152
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	20 81       	ld	r18, Z
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e8 59       	subi	r30, 0x98	; 152
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	80 81       	ld	r24, Z
    112a:	82 27       	eor	r24, r18
    112c:	8c 93       	st	X, r24
  ret = GPIO_OK;
    112e:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <SSD_int>:
    {GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW}};

EN_SSD_systemState_t SSD_int(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	c4 54       	subi	r28, 0x44	; 68
    1146:	d0 40       	sbci	r29, 0x00	; 0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	fe 01       	movw	r30, r28
    1154:	ed 5b       	subi	r30, 0xBD	; 189
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1164:	fe 01       	movw	r30, r28
    1166:	ed 5b       	subi	r30, 0xBD	; 189
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	09 f4       	brne	.+2      	; 0x1174 <SSD_int+0x38>
    1172:	d2 c1       	rjmp	.+932    	; 0x1518 <SSD_int+0x3dc>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    1174:	fe 01       	movw	r30, r28
    1176:	ed 5b       	subi	r30, 0xBD	; 189
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	01 90       	ld	r0, Z+
    117c:	f0 81       	ld	r31, Z
    117e:	e0 2d       	mov	r30, r0
    1180:	80 81       	ld	r24, Z
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	09 f0       	breq	.+2      	; 0x1188 <SSD_int+0x4c>
    1186:	df c0       	rjmp	.+446    	; 0x1346 <SSD_int+0x20a>

      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    1188:	fe 01       	movw	r30, r28
    118a:	ed 5b       	subi	r30, 0xBD	; 189
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	01 90       	ld	r0, Z+
    1190:	f0 81       	ld	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	97 85       	ldd	r25, Z+15	; 0x0f
    1196:	fe 01       	movw	r30, r28
    1198:	ed 5b       	subi	r30, 0xBD	; 189
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	01 90       	ld	r0, Z+
    119e:	f0 81       	ld	r31, Z
    11a0:	e0 2d       	mov	r30, r0
    11a2:	80 89       	ldd	r24, Z+16	; 0x10
    11a4:	9b 83       	std	Y+3, r25	; 0x03
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    11b0:	fe 01       	movw	r30, r28
    11b2:	ed 5b       	subi	r30, 0xBD	; 189
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	01 90       	ld	r0, Z+
    11b8:	f0 81       	ld	r31, Z
    11ba:	e0 2d       	mov	r30, r0
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	fe 01       	movw	r30, r28
    11c0:	ed 5b       	subi	r30, 0xBD	; 189
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	01 90       	ld	r0, Z+
    11c6:	f0 81       	ld	r31, Z
    11c8:	e0 2d       	mov	r30, r0
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	9f 83       	std	Y+7, r25	; 0x07
    11ce:	88 87       	std	Y+8, r24	; 0x08
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 87       	std	Y+9, r24	; 0x09
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 5b       	subi	r30, 0xBD	; 189
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	01 90       	ld	r0, Z+
    11e0:	f0 81       	ld	r31, Z
    11e2:	e0 2d       	mov	r30, r0
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	fe 01       	movw	r30, r28
    11e8:	ed 5b       	subi	r30, 0xBD	; 189
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	01 90       	ld	r0, Z+
    11ee:	f0 81       	ld	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	9b 87       	std	Y+11, r25	; 0x0b
    11f6:	8c 87       	std	Y+12, r24	; 0x0c
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	8d 87       	std	Y+13, r24	; 0x0d
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    1200:	fe 01       	movw	r30, r28
    1202:	ed 5b       	subi	r30, 0xBD	; 189
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	95 81       	ldd	r25, Z+5	; 0x05
    120e:	fe 01       	movw	r30, r28
    1210:	ed 5b       	subi	r30, 0xBD	; 189
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	01 90       	ld	r0, Z+
    1216:	f0 81       	ld	r31, Z
    1218:	e0 2d       	mov	r30, r0
    121a:	86 81       	ldd	r24, Z+6	; 0x06
    121c:	9f 87       	std	Y+15, r25	; 0x0f
    121e:	88 8b       	std	Y+16, r24	; 0x10
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 8b       	std	Y+17, r24	; 0x11
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    1228:	fe 01       	movw	r30, r28
    122a:	ed 5b       	subi	r30, 0xBD	; 189
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	97 81       	ldd	r25, Z+7	; 0x07
    1236:	fe 01       	movw	r30, r28
    1238:	ed 5b       	subi	r30, 0xBD	; 189
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	80 85       	ldd	r24, Z+8	; 0x08
    1244:	9b 8b       	std	Y+19, r25	; 0x13
    1246:	8c 8b       	std	Y+20, r24	; 0x14
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	8d 8b       	std	Y+21, r24	; 0x15
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1250:	fe 01       	movw	r30, r28
    1252:	ed 5b       	subi	r30, 0xBD	; 189
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	01 90       	ld	r0, Z+
    1258:	f0 81       	ld	r31, Z
    125a:	e0 2d       	mov	r30, r0
    125c:	91 85       	ldd	r25, Z+9	; 0x09
    125e:	fe 01       	movw	r30, r28
    1260:	ed 5b       	subi	r30, 0xBD	; 189
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	01 90       	ld	r0, Z+
    1266:	f0 81       	ld	r31, Z
    1268:	e0 2d       	mov	r30, r0
    126a:	82 85       	ldd	r24, Z+10	; 0x0a
    126c:	9f 8b       	std	Y+23, r25	; 0x17
    126e:	88 8f       	std	Y+24, r24	; 0x18
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 8f       	std	Y+25, r24	; 0x19
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    1278:	fe 01       	movw	r30, r28
    127a:	ed 5b       	subi	r30, 0xBD	; 189
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	01 90       	ld	r0, Z+
    1280:	f0 81       	ld	r31, Z
    1282:	e0 2d       	mov	r30, r0
    1284:	93 85       	ldd	r25, Z+11	; 0x0b
    1286:	fe 01       	movw	r30, r28
    1288:	ed 5b       	subi	r30, 0xBD	; 189
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	01 90       	ld	r0, Z+
    128e:	f0 81       	ld	r31, Z
    1290:	e0 2d       	mov	r30, r0
    1292:	84 85       	ldd	r24, Z+12	; 0x0c
    1294:	9b 8f       	std	Y+27, r25	; 0x1b
    1296:	8c 8f       	std	Y+28, r24	; 0x1c
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8d 8f       	std	Y+29, r24	; 0x1d
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	8e 8f       	std	Y+30, r24	; 0x1e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    12a0:	fe 01       	movw	r30, r28
    12a2:	ed 5b       	subi	r30, 0xBD	; 189
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	01 90       	ld	r0, Z+
    12a8:	f0 81       	ld	r31, Z
    12aa:	e0 2d       	mov	r30, r0
    12ac:	95 85       	ldd	r25, Z+13	; 0x0d
    12ae:	fe 01       	movw	r30, r28
    12b0:	ed 5b       	subi	r30, 0xBD	; 189
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	01 90       	ld	r0, Z+
    12b6:	f0 81       	ld	r31, Z
    12b8:	e0 2d       	mov	r30, r0
    12ba:	86 85       	ldd	r24, Z+14	; 0x0e
    12bc:	9f 8f       	std	Y+31, r25	; 0x1f
    12be:	88 a3       	std	Y+32, r24	; 0x20
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 a3       	std	Y+33, r24	; 0x21
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	8a a3       	std	Y+34, r24	; 0x22

      gpioRet = GPIO_initPin(&pinCom);
    12c8:	ce 01       	movw	r24, r28
    12ca:	03 96       	adiw	r24, 0x03	; 3
    12cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    12d0:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 23       	and	r24, r24
    12d6:	29 f4       	brne	.+10     	; 0x12e2 <SSD_int+0x1a6>
        gpioRet = GPIO_initPin(&pinA);
    12d8:	ce 01       	movw	r24, r28
    12da:	07 96       	adiw	r24, 0x07	; 7
    12dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    12e0:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 23       	and	r24, r24
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <SSD_int+0x1b4>
        GPIO_initPin(&pinB);
    12e8:	ce 01       	movw	r24, r28
    12ea:	0b 96       	adiw	r24, 0x0b	; 11
    12ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	88 23       	and	r24, r24
    12f4:	21 f4       	brne	.+8      	; 0x12fe <SSD_int+0x1c2>
        GPIO_initPin(&pinC);
    12f6:	ce 01       	movw	r24, r28
    12f8:	0f 96       	adiw	r24, 0x0f	; 15
    12fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	88 23       	and	r24, r24
    1302:	21 f4       	brne	.+8      	; 0x130c <SSD_int+0x1d0>
        GPIO_initPin(&pinD);
    1304:	ce 01       	movw	r24, r28
    1306:	43 96       	adiw	r24, 0x13	; 19
    1308:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 23       	and	r24, r24
    1310:	21 f4       	brne	.+8      	; 0x131a <SSD_int+0x1de>
        GPIO_initPin(&pinE);
    1312:	ce 01       	movw	r24, r28
    1314:	47 96       	adiw	r24, 0x17	; 23
    1316:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 23       	and	r24, r24
    131e:	21 f4       	brne	.+8      	; 0x1328 <SSD_int+0x1ec>
        GPIO_initPin(&pinF);
    1320:	ce 01       	movw	r24, r28
    1322:	4b 96       	adiw	r24, 0x1b	; 27
    1324:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 23       	and	r24, r24
    132c:	21 f4       	brne	.+8      	; 0x1336 <SSD_int+0x1fa>
        GPIO_initPin(&pinG);
    132e:	ce 01       	movw	r24, r28
    1330:	4f 96       	adiw	r24, 0x1f	; 31
    1332:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	88 23       	and	r24, r24
    133a:	11 f4       	brne	.+4      	; 0x1340 <SSD_int+0x204>
        ssdRet = SSD_OK;
    133c:	1a 82       	std	Y+2, r1	; 0x02
    133e:	ee c0       	rjmp	.+476    	; 0x151c <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	eb c0       	rjmp	.+470    	; 0x151c <SSD_int+0x3e0>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1346:	fe 01       	movw	r30, r28
    1348:	ed 5b       	subi	r30, 0xBD	; 189
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	01 90       	ld	r0, Z+
    134e:	f0 81       	ld	r31, Z
    1350:	e0 2d       	mov	r30, r0
    1352:	80 81       	ld	r24, Z
    1354:	88 23       	and	r24, r24
    1356:	09 f0       	breq	.+2      	; 0x135a <SSD_int+0x21e>
    1358:	e1 c0       	rjmp	.+450    	; 0x151c <SSD_int+0x3e0>
      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    135a:	fe 01       	movw	r30, r28
    135c:	ed 5b       	subi	r30, 0xBD	; 189
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	01 90       	ld	r0, Z+
    1362:	f0 81       	ld	r31, Z
    1364:	e0 2d       	mov	r30, r0
    1366:	97 85       	ldd	r25, Z+15	; 0x0f
    1368:	fe 01       	movw	r30, r28
    136a:	ed 5b       	subi	r30, 0xBD	; 189
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	01 90       	ld	r0, Z+
    1370:	f0 81       	ld	r31, Z
    1372:	e0 2d       	mov	r30, r0
    1374:	80 89       	ldd	r24, Z+16	; 0x10
    1376:	9b a3       	std	Y+35, r25	; 0x23
    1378:	8c a3       	std	Y+36, r24	; 0x24
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	8d a3       	std	Y+37, r24	; 0x25
    137e:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1380:	fe 01       	movw	r30, r28
    1382:	ed 5b       	subi	r30, 0xBD	; 189
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	01 90       	ld	r0, Z+
    1388:	f0 81       	ld	r31, Z
    138a:	e0 2d       	mov	r30, r0
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	fe 01       	movw	r30, r28
    1390:	ed 5b       	subi	r30, 0xBD	; 189
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	01 90       	ld	r0, Z+
    1396:	f0 81       	ld	r31, Z
    1398:	e0 2d       	mov	r30, r0
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	9f a3       	std	Y+39, r25	; 0x27
    139e:	88 a7       	std	Y+40, r24	; 0x28
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 a7       	std	Y+41, r24	; 0x29
    13a4:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    13a6:	fe 01       	movw	r30, r28
    13a8:	ed 5b       	subi	r30, 0xBD	; 189
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	01 90       	ld	r0, Z+
    13ae:	f0 81       	ld	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	fe 01       	movw	r30, r28
    13b6:	ed 5b       	subi	r30, 0xBD	; 189
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	01 90       	ld	r0, Z+
    13bc:	f0 81       	ld	r31, Z
    13be:	e0 2d       	mov	r30, r0
    13c0:	84 81       	ldd	r24, Z+4	; 0x04
    13c2:	9b a7       	std	Y+43, r25	; 0x2b
    13c4:	8c a7       	std	Y+44, r24	; 0x2c
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	8d a7       	std	Y+45, r24	; 0x2d
    13ca:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 5b       	subi	r30, 0xBD	; 189
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	01 90       	ld	r0, Z+
    13d4:	f0 81       	ld	r31, Z
    13d6:	e0 2d       	mov	r30, r0
    13d8:	95 81       	ldd	r25, Z+5	; 0x05
    13da:	fe 01       	movw	r30, r28
    13dc:	ed 5b       	subi	r30, 0xBD	; 189
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	01 90       	ld	r0, Z+
    13e2:	f0 81       	ld	r31, Z
    13e4:	e0 2d       	mov	r30, r0
    13e6:	86 81       	ldd	r24, Z+6	; 0x06
    13e8:	9f a7       	std	Y+47, r25	; 0x2f
    13ea:	88 ab       	std	Y+48, r24	; 0x30
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 ab       	std	Y+49, r24	; 0x31
    13f0:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    13f2:	fe 01       	movw	r30, r28
    13f4:	ed 5b       	subi	r30, 0xBD	; 189
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	01 90       	ld	r0, Z+
    13fa:	f0 81       	ld	r31, Z
    13fc:	e0 2d       	mov	r30, r0
    13fe:	97 81       	ldd	r25, Z+7	; 0x07
    1400:	fe 01       	movw	r30, r28
    1402:	ed 5b       	subi	r30, 0xBD	; 189
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	01 90       	ld	r0, Z+
    1408:	f0 81       	ld	r31, Z
    140a:	e0 2d       	mov	r30, r0
    140c:	80 85       	ldd	r24, Z+8	; 0x08
    140e:	9b ab       	std	Y+51, r25	; 0x33
    1410:	8c ab       	std	Y+52, r24	; 0x34
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8d ab       	std	Y+53, r24	; 0x35
    1416:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1418:	fe 01       	movw	r30, r28
    141a:	ed 5b       	subi	r30, 0xBD	; 189
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	01 90       	ld	r0, Z+
    1420:	f0 81       	ld	r31, Z
    1422:	e0 2d       	mov	r30, r0
    1424:	91 85       	ldd	r25, Z+9	; 0x09
    1426:	fe 01       	movw	r30, r28
    1428:	ed 5b       	subi	r30, 0xBD	; 189
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	01 90       	ld	r0, Z+
    142e:	f0 81       	ld	r31, Z
    1430:	e0 2d       	mov	r30, r0
    1432:	82 85       	ldd	r24, Z+10	; 0x0a
    1434:	9f ab       	std	Y+55, r25	; 0x37
    1436:	88 af       	std	Y+56, r24	; 0x38
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 af       	std	Y+57, r24	; 0x39
    143c:	1a ae       	std	Y+58, r1	; 0x3a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    143e:	fe 01       	movw	r30, r28
    1440:	ed 5b       	subi	r30, 0xBD	; 189
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	01 90       	ld	r0, Z+
    1446:	f0 81       	ld	r31, Z
    1448:	e0 2d       	mov	r30, r0
    144a:	93 85       	ldd	r25, Z+11	; 0x0b
    144c:	fe 01       	movw	r30, r28
    144e:	ed 5b       	subi	r30, 0xBD	; 189
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	01 90       	ld	r0, Z+
    1454:	f0 81       	ld	r31, Z
    1456:	e0 2d       	mov	r30, r0
    1458:	84 85       	ldd	r24, Z+12	; 0x0c
    145a:	9b af       	std	Y+59, r25	; 0x3b
    145c:	8c af       	std	Y+60, r24	; 0x3c
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	8d af       	std	Y+61, r24	; 0x3d
    1462:	1e ae       	std	Y+62, r1	; 0x3e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1464:	fe 01       	movw	r30, r28
    1466:	ed 5b       	subi	r30, 0xBD	; 189
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	01 90       	ld	r0, Z+
    146c:	f0 81       	ld	r31, Z
    146e:	e0 2d       	mov	r30, r0
    1470:	85 85       	ldd	r24, Z+13	; 0x0d
    1472:	fe 01       	movw	r30, r28
    1474:	ed 5b       	subi	r30, 0xBD	; 189
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	01 90       	ld	r0, Z+
    147a:	f0 81       	ld	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	96 85       	ldd	r25, Z+14	; 0x0e
    1480:	fe 01       	movw	r30, r28
    1482:	ff 96       	adiw	r30, 0x3f	; 63
    1484:	80 83       	st	Z, r24
    1486:	fe 01       	movw	r30, r28
    1488:	ff 96       	adiw	r30, 0x3f	; 63
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	fe 01       	movw	r30, r28
    148e:	ff 96       	adiw	r30, 0x3f	; 63
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	82 83       	std	Z+2, r24	; 0x02
    1494:	fe 01       	movw	r30, r28
    1496:	ff 96       	adiw	r30, 0x3f	; 63
    1498:	13 82       	std	Z+3, r1	; 0x03

      gpioRet = GPIO_initPin(&pinCom);
    149a:	ce 01       	movw	r24, r28
    149c:	83 96       	adiw	r24, 0x23	; 35
    149e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    14a2:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	88 23       	and	r24, r24
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <SSD_int+0x378>
        gpioRet = GPIO_initPin(&pinA);
    14aa:	ce 01       	movw	r24, r28
    14ac:	87 96       	adiw	r24, 0x27	; 39
    14ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    14b2:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	88 23       	and	r24, r24
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <SSD_int+0x386>
        GPIO_initPin(&pinB);
    14ba:	ce 01       	movw	r24, r28
    14bc:	8b 96       	adiw	r24, 0x2b	; 43
    14be:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 23       	and	r24, r24
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <SSD_int+0x394>
        GPIO_initPin(&pinC);
    14c8:	ce 01       	movw	r24, r28
    14ca:	8f 96       	adiw	r24, 0x2f	; 47
    14cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	88 23       	and	r24, r24
    14d4:	21 f4       	brne	.+8      	; 0x14de <SSD_int+0x3a2>
        GPIO_initPin(&pinD);
    14d6:	ce 01       	movw	r24, r28
    14d8:	c3 96       	adiw	r24, 0x33	; 51
    14da:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	88 23       	and	r24, r24
    14e2:	21 f4       	brne	.+8      	; 0x14ec <SSD_int+0x3b0>
        GPIO_initPin(&pinE);
    14e4:	ce 01       	movw	r24, r28
    14e6:	c7 96       	adiw	r24, 0x37	; 55
    14e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 23       	and	r24, r24
    14f0:	21 f4       	brne	.+8      	; 0x14fa <SSD_int+0x3be>
        GPIO_initPin(&pinF);
    14f2:	ce 01       	movw	r24, r28
    14f4:	cb 96       	adiw	r24, 0x3b	; 59
    14f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	88 23       	and	r24, r24
    14fe:	21 f4       	brne	.+8      	; 0x1508 <SSD_int+0x3cc>
        GPIO_initPin(&pinG);
    1500:	ce 01       	movw	r24, r28
    1502:	cf 96       	adiw	r24, 0x3f	; 63
    1504:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 23       	and	r24, r24
    150c:	11 f4       	brne	.+4      	; 0x1512 <SSD_int+0x3d6>
        ssdRet = SSD_OK;
    150e:	1a 82       	std	Y+2, r1	; 0x02
    1510:	05 c0       	rjmp	.+10     	; 0x151c <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	02 c0       	rjmp	.+4      	; 0x151c <SSD_int+0x3e0>
      }
    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    151e:	cc 5b       	subi	r28, 0xBC	; 188
    1520:	df 4f       	sbci	r29, 0xFF	; 255
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <SSD_setNumberOnSsd>:

EN_SSD_systemState_t
SSD_setNumberOnSsd(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce,
                   EN_SSD_numbers_t valueOfNumber) {
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	ed 97       	sbiw	r28, 0x3d	; 61
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	9c af       	std	Y+60, r25	; 0x3c
    1548:	8b af       	std	Y+59, r24	; 0x3b
    154a:	6d af       	std	Y+61, r22	; 0x3d
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1554:	8b ad       	ldd	r24, Y+59	; 0x3b
    1556:	9c ad       	ldd	r25, Y+60	; 0x3c
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	09 f4       	brne	.+2      	; 0x155e <SSD_setNumberOnSsd+0x2c>
    155c:	15 c2       	rjmp	.+1066   	; 0x1988 <SSD_setNumberOnSsd+0x456>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    155e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1560:	fc ad       	ldd	r31, Y+60	; 0x3c
    1562:	80 81       	ld	r24, Z
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	09 f0       	breq	.+2      	; 0x156a <SSD_setNumberOnSsd+0x38>
    1568:	08 c1       	rjmp	.+528    	; 0x177a <SSD_setNumberOnSsd+0x248>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    156a:	eb ad       	ldd	r30, Y+59	; 0x3b
    156c:	fc ad       	ldd	r31, Y+60	; 0x3c
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	eb ad       	ldd	r30, Y+59	; 0x3b
    1572:	fc ad       	ldd	r31, Y+60	; 0x3c
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	9b 83       	std	Y+3, r25	; 0x03
    1578:	8c 83       	std	Y+4, r24	; 0x04
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1582:	eb ad       	ldd	r30, Y+59	; 0x3b
    1584:	fc ad       	ldd	r31, Y+60	; 0x3c
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	eb ad       	ldd	r30, Y+59	; 0x3b
    158a:	fc ad       	ldd	r31, Y+60	; 0x3c
    158c:	84 81       	ldd	r24, Z+4	; 0x04
    158e:	9f 83       	std	Y+7, r25	; 0x07
    1590:	88 87       	std	Y+8, r24	; 0x08
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 87       	std	Y+9, r24	; 0x09
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    159a:	eb ad       	ldd	r30, Y+59	; 0x3b
    159c:	fc ad       	ldd	r31, Y+60	; 0x3c
    159e:	95 81       	ldd	r25, Z+5	; 0x05
    15a0:	eb ad       	ldd	r30, Y+59	; 0x3b
    15a2:	fc ad       	ldd	r31, Y+60	; 0x3c
    15a4:	86 81       	ldd	r24, Z+6	; 0x06
    15a6:	9b 87       	std	Y+11, r25	; 0x0b
    15a8:	8c 87       	std	Y+12, r24	; 0x0c
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	8d 87       	std	Y+13, r24	; 0x0d
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    15b2:	eb ad       	ldd	r30, Y+59	; 0x3b
    15b4:	fc ad       	ldd	r31, Y+60	; 0x3c
    15b6:	97 81       	ldd	r25, Z+7	; 0x07
    15b8:	eb ad       	ldd	r30, Y+59	; 0x3b
    15ba:	fc ad       	ldd	r31, Y+60	; 0x3c
    15bc:	80 85       	ldd	r24, Z+8	; 0x08
    15be:	9f 87       	std	Y+15, r25	; 0x0f
    15c0:	88 8b       	std	Y+16, r24	; 0x10
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    15ca:	eb ad       	ldd	r30, Y+59	; 0x3b
    15cc:	fc ad       	ldd	r31, Y+60	; 0x3c
    15ce:	91 85       	ldd	r25, Z+9	; 0x09
    15d0:	eb ad       	ldd	r30, Y+59	; 0x3b
    15d2:	fc ad       	ldd	r31, Y+60	; 0x3c
    15d4:	82 85       	ldd	r24, Z+10	; 0x0a
    15d6:	9b 8b       	std	Y+19, r25	; 0x13
    15d8:	8c 8b       	std	Y+20, r24	; 0x14
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	8d 8b       	std	Y+21, r24	; 0x15
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    15e2:	eb ad       	ldd	r30, Y+59	; 0x3b
    15e4:	fc ad       	ldd	r31, Y+60	; 0x3c
    15e6:	93 85       	ldd	r25, Z+11	; 0x0b
    15e8:	eb ad       	ldd	r30, Y+59	; 0x3b
    15ea:	fc ad       	ldd	r31, Y+60	; 0x3c
    15ec:	84 85       	ldd	r24, Z+12	; 0x0c
    15ee:	9f 8b       	std	Y+23, r25	; 0x17
    15f0:	88 8f       	std	Y+24, r24	; 0x18
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 8f       	std	Y+25, r24	; 0x19
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    15fa:	eb ad       	ldd	r30, Y+59	; 0x3b
    15fc:	fc ad       	ldd	r31, Y+60	; 0x3c
    15fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1600:	eb ad       	ldd	r30, Y+59	; 0x3b
    1602:	fc ad       	ldd	r31, Y+60	; 0x3c
    1604:	86 85       	ldd	r24, Z+14	; 0x0e
    1606:	9b 8f       	std	Y+27, r25	; 0x1b
    1608:	8c 8f       	std	Y+28, r24	; 0x1c
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	8d 8f       	std	Y+29, r24	; 0x1d
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8e 8f       	std	Y+30, r24	; 0x1e

      gpioRet =
    1612:	8d ad       	ldd	r24, Y+61	; 0x3d
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	c9 01       	movw	r24, r18
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 1b       	sub	r24, r18
    1628:	93 0b       	sbc	r25, r19
    162a:	fc 01       	movw	r30, r24
    162c:	ea 53       	subi	r30, 0x3A	; 58
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	20 81       	ld	r18, Z
    1632:	ce 01       	movw	r24, r28
    1634:	03 96       	adiw	r24, 0x03	; 3
    1636:	62 2f       	mov	r22, r18
    1638:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    163c:	89 83       	std	Y+1, r24	; 0x01
          GPIO_writePinLogic(&pinA, arrOfNumbersForAnodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 23       	and	r24, r24
    1642:	b1 f4       	brne	.+44     	; 0x1670 <SSD_setNumberOnSsd+0x13e>
        gpioRet = GPIO_writePinLogic(&pinB,
    1644:	8d ad       	ldd	r24, Y+61	; 0x3d
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	c9 01       	movw	r24, r18
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	82 1b       	sub	r24, r18
    165a:	93 0b       	sbc	r25, r19
    165c:	fc 01       	movw	r30, r24
    165e:	e9 53       	subi	r30, 0x39	; 57
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	20 81       	ld	r18, Z
    1664:	ce 01       	movw	r24, r28
    1666:	07 96       	adiw	r24, 0x07	; 7
    1668:	62 2f       	mov	r22, r18
    166a:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    166e:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	88 23       	and	r24, r24
    1674:	b1 f4       	brne	.+44     	; 0x16a2 <SSD_setNumberOnSsd+0x170>
        gpioRet = GPIO_writePinLogic(&pinC,
    1676:	8d ad       	ldd	r24, Y+61	; 0x3d
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	82 1b       	sub	r24, r18
    168c:	93 0b       	sbc	r25, r19
    168e:	fc 01       	movw	r30, r24
    1690:	e8 53       	subi	r30, 0x38	; 56
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	20 81       	ld	r18, Z
    1696:	ce 01       	movw	r24, r28
    1698:	0b 96       	adiw	r24, 0x0b	; 11
    169a:	62 2f       	mov	r22, r18
    169c:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    16a0:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	88 23       	and	r24, r24
    16a6:	b1 f4       	brne	.+44     	; 0x16d4 <SSD_setNumberOnSsd+0x1a2>
        gpioRet = GPIO_writePinLogic(&pinD,
    16a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	c9 01       	movw	r24, r18
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	82 1b       	sub	r24, r18
    16be:	93 0b       	sbc	r25, r19
    16c0:	fc 01       	movw	r30, r24
    16c2:	e7 53       	subi	r30, 0x37	; 55
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	20 81       	ld	r18, Z
    16c8:	ce 01       	movw	r24, r28
    16ca:	0f 96       	adiw	r24, 0x0f	; 15
    16cc:	62 2f       	mov	r22, r18
    16ce:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    16d2:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	88 23       	and	r24, r24
    16d8:	b1 f4       	brne	.+44     	; 0x1706 <SSD_setNumberOnSsd+0x1d4>
        gpioRet = GPIO_writePinLogic(&pinE,
    16da:	8d ad       	ldd	r24, Y+61	; 0x3d
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	c9 01       	movw	r24, r18
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	82 1b       	sub	r24, r18
    16f0:	93 0b       	sbc	r25, r19
    16f2:	fc 01       	movw	r30, r24
    16f4:	e6 53       	subi	r30, 0x36	; 54
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	20 81       	ld	r18, Z
    16fa:	ce 01       	movw	r24, r28
    16fc:	43 96       	adiw	r24, 0x13	; 19
    16fe:	62 2f       	mov	r22, r18
    1700:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1704:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	88 23       	and	r24, r24
    170a:	b1 f4       	brne	.+44     	; 0x1738 <SSD_setNumberOnSsd+0x206>
        gpioRet = GPIO_writePinLogic(&pinF,
    170c:	8d ad       	ldd	r24, Y+61	; 0x3d
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	c9 01       	movw	r24, r18
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	82 1b       	sub	r24, r18
    1722:	93 0b       	sbc	r25, r19
    1724:	fc 01       	movw	r30, r24
    1726:	e5 53       	subi	r30, 0x35	; 53
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	20 81       	ld	r18, Z
    172c:	ce 01       	movw	r24, r28
    172e:	47 96       	adiw	r24, 0x17	; 23
    1730:	62 2f       	mov	r22, r18
    1732:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1736:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 23       	and	r24, r24
    173c:	b1 f4       	brne	.+44     	; 0x176a <SSD_setNumberOnSsd+0x238>
        gpioRet = GPIO_writePinLogic(&pinG,
    173e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	c9 01       	movw	r24, r18
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	82 1b       	sub	r24, r18
    1754:	93 0b       	sbc	r25, r19
    1756:	fc 01       	movw	r30, r24
    1758:	e4 53       	subi	r30, 0x34	; 52
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	20 81       	ld	r18, Z
    175e:	ce 01       	movw	r24, r28
    1760:	4b 96       	adiw	r24, 0x1b	; 27
    1762:	62 2f       	mov	r22, r18
    1764:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1768:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	88 23       	and	r24, r24
    176e:	11 f4       	brne	.+4      	; 0x1774 <SSD_setNumberOnSsd+0x242>
        ssdRet = SSD_OK;
    1770:	1a 82       	std	Y+2, r1	; 0x02
    1772:	0c c1       	rjmp	.+536    	; 0x198c <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	09 c1       	rjmp	.+530    	; 0x198c <SSD_setNumberOnSsd+0x45a>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    177a:	eb ad       	ldd	r30, Y+59	; 0x3b
    177c:	fc ad       	ldd	r31, Y+60	; 0x3c
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	09 f0       	breq	.+2      	; 0x1786 <SSD_setNumberOnSsd+0x254>
    1784:	03 c1       	rjmp	.+518    	; 0x198c <SSD_setNumberOnSsd+0x45a>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1786:	eb ad       	ldd	r30, Y+59	; 0x3b
    1788:	fc ad       	ldd	r31, Y+60	; 0x3c
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	eb ad       	ldd	r30, Y+59	; 0x3b
    178e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	9f 8f       	std	Y+31, r25	; 0x1f
    1794:	88 a3       	std	Y+32, r24	; 0x20
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	89 a3       	std	Y+33, r24	; 0x21
    179a:	1a a2       	std	Y+34, r1	; 0x22

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    179c:	eb ad       	ldd	r30, Y+59	; 0x3b
    179e:	fc ad       	ldd	r31, Y+60	; 0x3c
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	eb ad       	ldd	r30, Y+59	; 0x3b
    17a4:	fc ad       	ldd	r31, Y+60	; 0x3c
    17a6:	84 81       	ldd	r24, Z+4	; 0x04
    17a8:	9b a3       	std	Y+35, r25	; 0x23
    17aa:	8c a3       	std	Y+36, r24	; 0x24
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8d a3       	std	Y+37, r24	; 0x25
    17b0:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    17b2:	eb ad       	ldd	r30, Y+59	; 0x3b
    17b4:	fc ad       	ldd	r31, Y+60	; 0x3c
    17b6:	95 81       	ldd	r25, Z+5	; 0x05
    17b8:	eb ad       	ldd	r30, Y+59	; 0x3b
    17ba:	fc ad       	ldd	r31, Y+60	; 0x3c
    17bc:	86 81       	ldd	r24, Z+6	; 0x06
    17be:	9f a3       	std	Y+39, r25	; 0x27
    17c0:	88 a7       	std	Y+40, r24	; 0x28
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	89 a7       	std	Y+41, r24	; 0x29
    17c6:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    17c8:	eb ad       	ldd	r30, Y+59	; 0x3b
    17ca:	fc ad       	ldd	r31, Y+60	; 0x3c
    17cc:	97 81       	ldd	r25, Z+7	; 0x07
    17ce:	eb ad       	ldd	r30, Y+59	; 0x3b
    17d0:	fc ad       	ldd	r31, Y+60	; 0x3c
    17d2:	80 85       	ldd	r24, Z+8	; 0x08
    17d4:	9b a7       	std	Y+43, r25	; 0x2b
    17d6:	8c a7       	std	Y+44, r24	; 0x2c
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	8d a7       	std	Y+45, r24	; 0x2d
    17dc:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    17de:	eb ad       	ldd	r30, Y+59	; 0x3b
    17e0:	fc ad       	ldd	r31, Y+60	; 0x3c
    17e2:	91 85       	ldd	r25, Z+9	; 0x09
    17e4:	eb ad       	ldd	r30, Y+59	; 0x3b
    17e6:	fc ad       	ldd	r31, Y+60	; 0x3c
    17e8:	82 85       	ldd	r24, Z+10	; 0x0a
    17ea:	9f a7       	std	Y+47, r25	; 0x2f
    17ec:	88 ab       	std	Y+48, r24	; 0x30
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 ab       	std	Y+49, r24	; 0x31
    17f2:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    17f4:	eb ad       	ldd	r30, Y+59	; 0x3b
    17f6:	fc ad       	ldd	r31, Y+60	; 0x3c
    17f8:	93 85       	ldd	r25, Z+11	; 0x0b
    17fa:	eb ad       	ldd	r30, Y+59	; 0x3b
    17fc:	fc ad       	ldd	r31, Y+60	; 0x3c
    17fe:	84 85       	ldd	r24, Z+12	; 0x0c
    1800:	9b ab       	std	Y+51, r25	; 0x33
    1802:	8c ab       	std	Y+52, r24	; 0x34
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	8d ab       	std	Y+53, r24	; 0x35
    1808:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    180a:	eb ad       	ldd	r30, Y+59	; 0x3b
    180c:	fc ad       	ldd	r31, Y+60	; 0x3c
    180e:	95 85       	ldd	r25, Z+13	; 0x0d
    1810:	eb ad       	ldd	r30, Y+59	; 0x3b
    1812:	fc ad       	ldd	r31, Y+60	; 0x3c
    1814:	86 85       	ldd	r24, Z+14	; 0x0e
    1816:	9f ab       	std	Y+55, r25	; 0x37
    1818:	88 af       	std	Y+56, r24	; 0x38
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 af       	std	Y+57, r24	; 0x39
    181e:	1a ae       	std	Y+58, r1	; 0x3a

      gpioRet = GPIO_writePinLogic(&pinA,
    1820:	8d ad       	ldd	r24, Y+61	; 0x3d
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	c9 01       	movw	r24, r18
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	82 1b       	sub	r24, r18
    1836:	93 0b       	sbc	r25, r19
    1838:	fc 01       	movw	r30, r24
    183a:	e0 58       	subi	r30, 0x80	; 128
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	20 81       	ld	r18, Z
    1840:	ce 01       	movw	r24, r28
    1842:	4f 96       	adiw	r24, 0x1f	; 31
    1844:	62 2f       	mov	r22, r18
    1846:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    184a:	89 83       	std	Y+1, r24	; 0x01
                                   arrOfNumbersForCathodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 23       	and	r24, r24
    1850:	b1 f4       	brne	.+44     	; 0x187e <SSD_setNumberOnSsd+0x34c>
        gpioRet = GPIO_writePinLogic(
    1852:	8d ad       	ldd	r24, Y+61	; 0x3d
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	c9 01       	movw	r24, r18
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	82 1b       	sub	r24, r18
    1868:	93 0b       	sbc	r25, r19
    186a:	fc 01       	movw	r30, r24
    186c:	ef 57       	subi	r30, 0x7F	; 127
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	20 81       	ld	r18, Z
    1872:	ce 01       	movw	r24, r28
    1874:	83 96       	adiw	r24, 0x23	; 35
    1876:	62 2f       	mov	r22, r18
    1878:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    187c:	89 83       	std	Y+1, r24	; 0x01
            &pinB, arrOfNumbersForCathodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	88 23       	and	r24, r24
    1882:	b1 f4       	brne	.+44     	; 0x18b0 <SSD_setNumberOnSsd+0x37e>
        gpioRet = GPIO_writePinLogic(
    1884:	8d ad       	ldd	r24, Y+61	; 0x3d
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	c9 01       	movw	r24, r18
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	82 1b       	sub	r24, r18
    189a:	93 0b       	sbc	r25, r19
    189c:	fc 01       	movw	r30, r24
    189e:	ee 57       	subi	r30, 0x7E	; 126
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	20 81       	ld	r18, Z
    18a4:	ce 01       	movw	r24, r28
    18a6:	87 96       	adiw	r24, 0x27	; 39
    18a8:	62 2f       	mov	r22, r18
    18aa:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    18ae:	89 83       	std	Y+1, r24	; 0x01
            &pinC, arrOfNumbersForCathodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	88 23       	and	r24, r24
    18b4:	b1 f4       	brne	.+44     	; 0x18e2 <SSD_setNumberOnSsd+0x3b0>
        gpioRet = GPIO_writePinLogic(
    18b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	c9 01       	movw	r24, r18
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	82 1b       	sub	r24, r18
    18cc:	93 0b       	sbc	r25, r19
    18ce:	fc 01       	movw	r30, r24
    18d0:	ed 57       	subi	r30, 0x7D	; 125
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	20 81       	ld	r18, Z
    18d6:	ce 01       	movw	r24, r28
    18d8:	8b 96       	adiw	r24, 0x2b	; 43
    18da:	62 2f       	mov	r22, r18
    18dc:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    18e0:	89 83       	std	Y+1, r24	; 0x01
            &pinD, arrOfNumbersForCathodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	88 23       	and	r24, r24
    18e6:	b1 f4       	brne	.+44     	; 0x1914 <SSD_setNumberOnSsd+0x3e2>
        gpioRet = GPIO_writePinLogic(
    18e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	c9 01       	movw	r24, r18
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	82 1b       	sub	r24, r18
    18fe:	93 0b       	sbc	r25, r19
    1900:	fc 01       	movw	r30, r24
    1902:	ec 57       	subi	r30, 0x7C	; 124
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	20 81       	ld	r18, Z
    1908:	ce 01       	movw	r24, r28
    190a:	8f 96       	adiw	r24, 0x2f	; 47
    190c:	62 2f       	mov	r22, r18
    190e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1912:	89 83       	std	Y+1, r24	; 0x01
            &pinE, arrOfNumbersForCathodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 23       	and	r24, r24
    1918:	b1 f4       	brne	.+44     	; 0x1946 <SSD_setNumberOnSsd+0x414>
        gpioRet = GPIO_writePinLogic(
    191a:	8d ad       	ldd	r24, Y+61	; 0x3d
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	c9 01       	movw	r24, r18
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	82 1b       	sub	r24, r18
    1930:	93 0b       	sbc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	eb 57       	subi	r30, 0x7B	; 123
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	20 81       	ld	r18, Z
    193a:	ce 01       	movw	r24, r28
    193c:	c3 96       	adiw	r24, 0x33	; 51
    193e:	62 2f       	mov	r22, r18
    1940:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1944:	89 83       	std	Y+1, r24	; 0x01
            &pinF, arrOfNumbersForCathodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 23       	and	r24, r24
    194a:	b1 f4       	brne	.+44     	; 0x1978 <SSD_setNumberOnSsd+0x446>
        gpioRet = GPIO_writePinLogic(
    194c:	8d ad       	ldd	r24, Y+61	; 0x3d
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	c9 01       	movw	r24, r18
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	82 1b       	sub	r24, r18
    1962:	93 0b       	sbc	r25, r19
    1964:	fc 01       	movw	r30, r24
    1966:	ea 57       	subi	r30, 0x7A	; 122
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	20 81       	ld	r18, Z
    196c:	ce 01       	movw	r24, r28
    196e:	c7 96       	adiw	r24, 0x37	; 55
    1970:	62 2f       	mov	r22, r18
    1972:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    1976:	89 83       	std	Y+1, r24	; 0x01
            &pinG, arrOfNumbersForCathodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	88 23       	and	r24, r24
    197c:	11 f4       	brne	.+4      	; 0x1982 <SSD_setNumberOnSsd+0x450>
        ssdRet = SSD_OK;
    197e:	1a 82       	std	Y+2, r1	; 0x02
    1980:	05 c0       	rjmp	.+10     	; 0x198c <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	02 c0       	rjmp	.+4      	; 0x198c <SSD_setNumberOnSsd+0x45a>

    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	8a 83       	std	Y+2, r24	; 0x02
  }

  return ssdRet;
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    198e:	ed 96       	adiw	r28, 0x3d	; 61
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <SSD_enableDot>:

EN_SSD_systemState_t SSD_enableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	2c 97       	sbiw	r28, 0x0c	; 12
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	8b 87       	std	Y+11, r24	; 0x0b

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    19c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	d9 f1       	breq	.+118    	; 0x1a3e <SSD_enableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    19c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    19ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    19cc:	80 81       	ld	r24, Z
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	c9 f4       	brne	.+50     	; 0x1a04 <SSD_enableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    19d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    19d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    19d6:	91 89       	ldd	r25, Z+17	; 0x11
    19d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    19da:	fc 85       	ldd	r31, Y+12	; 0x0c
    19dc:	82 89       	ldd	r24, Z+18	; 0x12
    19de:	9b 83       	std	Y+3, r25	; 0x03
    19e0:	8c 83       	std	Y+4, r24	; 0x04
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	8e 83       	std	Y+6, r24	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    19ea:	ce 01       	movw	r24, r28
    19ec:	03 96       	adiw	r24, 0x03	; 3
    19ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    19f2:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	88 23       	and	r24, r24
    19f8:	11 f4       	brne	.+4      	; 0x19fe <SSD_enableDot+0x5e>
        ssdRet = SSD_OK;
    19fa:	1a 82       	std	Y+2, r1	; 0x02
    19fc:	22 c0       	rjmp	.+68     	; 0x1a42 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	1f c0       	rjmp	.+62     	; 0x1a42 <SSD_enableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1a04:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a06:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 23       	and	r24, r24
    1a0c:	d1 f4       	brne	.+52     	; 0x1a42 <SSD_enableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    1a0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a10:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a12:	91 89       	ldd	r25, Z+17	; 0x11
    1a14:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a16:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a18:	82 89       	ldd	r24, Z+18	; 0x12
    1a1a:	9f 83       	std	Y+7, r25	; 0x07
    1a1c:	88 87       	std	Y+8, r24	; 0x08
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 87       	std	Y+9, r24	; 0x09
    1a22:	1a 86       	std	Y+10, r1	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    1a24:	ce 01       	movw	r24, r28
    1a26:	07 96       	adiw	r24, 0x07	; 7
    1a28:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1a2c:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 23       	and	r24, r24
    1a32:	11 f4       	brne	.+4      	; 0x1a38 <SSD_enableDot+0x98>
        ssdRet = SSD_OK;
    1a34:	1a 82       	std	Y+2, r1	; 0x02
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <SSD_enableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a44:	2c 96       	adiw	r28, 0x0c	; 12
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <SSD_disableDot>:

EN_SSD_systemState_t SSD_disableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	9c 87       	std	Y+12, r25	; 0x0c
    1a6c:	8b 87       	std	Y+11, r24	; 0x0b
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	d9 f1       	breq	.+118    	; 0x1af4 <SSD_disableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    1a7e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a80:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a82:	80 81       	ld	r24, Z
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	c1 f4       	brne	.+48     	; 0x1ab8 <SSD_disableDot+0x62>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    1a88:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a8c:	91 89       	ldd	r25, Z+17	; 0x11
    1a8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a90:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a92:	82 89       	ldd	r24, Z+18	; 0x12
    1a94:	9b 83       	std	Y+3, r25	; 0x03
    1a96:	8c 83       	std	Y+4, r24	; 0x04
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	1e 82       	std	Y+6, r1	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	03 96       	adiw	r24, 0x03	; 3
    1aa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1aa6:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	88 23       	and	r24, r24
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <SSD_disableDot+0x5c>
        ssdRet = SSD_OK;
    1aae:	1a 82       	std	Y+2, r1	; 0x02
    1ab0:	23 c0       	rjmp	.+70     	; 0x1af8 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	20 c0       	rjmp	.+64     	; 0x1af8 <SSD_disableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1ab8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aba:	fc 85       	ldd	r31, Y+12	; 0x0c
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	d9 f4       	brne	.+54     	; 0x1af8 <SSD_disableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    1ac2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ac4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ac6:	91 89       	ldd	r25, Z+17	; 0x11
    1ac8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aca:	fc 85       	ldd	r31, Y+12	; 0x0c
    1acc:	82 89       	ldd	r24, Z+18	; 0x12
    1ace:	9f 83       	std	Y+7, r25	; 0x07
    1ad0:	88 87       	std	Y+8, r24	; 0x08
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	89 87       	std	Y+9, r24	; 0x09
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	8a 87       	std	Y+10, r24	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    1ada:	ce 01       	movw	r24, r28
    1adc:	07 96       	adiw	r24, 0x07	; 7
    1ade:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1ae2:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	88 23       	and	r24, r24
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <SSD_disableDot+0x98>
        ssdRet = SSD_OK;
    1aea:	1a 82       	std	Y+2, r1	; 0x02
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <SSD_disableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1afa:	2c 96       	adiw	r28, 0x0c	; 12
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <SSD_dualInit>:

//////////////////////////////////////////////////////////////////////////////////////////////

EN_SSD_systemState_t
SSD_dualInit(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	a0 97       	sbiw	r28, 0x20	; 32
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	98 a3       	std	Y+32, r25	; 0x20
    1b22:	8f 8f       	std	Y+31, r24	; 0x1f
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <SSD_dualInit+0x2a>
    1b34:	99 c0       	rjmp	.+306    	; 0x1c68 <SSD_dualInit+0x15c>

    ST_GPIO_cfg_t pinA = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinAPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinAPortName};
    1b36:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b38:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b3a:	92 81       	ldd	r25, Z+2	; 0x02
    1b3c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b3e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b40:	83 81       	ldd	r24, Z+3	; 0x03
    1b42:	1b 82       	std	Y+3, r1	; 0x03
    1b44:	1c 82       	std	Y+4, r1	; 0x04
    1b46:	1d 82       	std	Y+5, r1	; 0x05
    1b48:	1e 82       	std	Y+6, r1	; 0x06
    1b4a:	9b 83       	std	Y+3, r25	; 0x03
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	8d 83       	std	Y+5, r24	; 0x05

    ST_GPIO_cfg_t pinB = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinBPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinBPortName};
    1b52:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b54:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b56:	94 81       	ldd	r25, Z+4	; 0x04
    1b58:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b5a:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b5c:	85 81       	ldd	r24, Z+5	; 0x05
    1b5e:	1f 82       	std	Y+7, r1	; 0x07
    1b60:	18 86       	std	Y+8, r1	; 0x08
    1b62:	19 86       	std	Y+9, r1	; 0x09
    1b64:	1a 86       	std	Y+10, r1	; 0x0a
    1b66:	9f 83       	std	Y+7, r25	; 0x07
    1b68:	88 87       	std	Y+8, r24	; 0x08
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 87       	std	Y+9, r24	; 0x09

    ST_GPIO_cfg_t pinC = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinCPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinCPortName};
    1b6e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b70:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b72:	96 81       	ldd	r25, Z+6	; 0x06
    1b74:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b76:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b78:	87 81       	ldd	r24, Z+7	; 0x07
    1b7a:	1b 86       	std	Y+11, r1	; 0x0b
    1b7c:	1c 86       	std	Y+12, r1	; 0x0c
    1b7e:	1d 86       	std	Y+13, r1	; 0x0d
    1b80:	1e 86       	std	Y+14, r1	; 0x0e
    1b82:	9b 87       	std	Y+11, r25	; 0x0b
    1b84:	8c 87       	std	Y+12, r24	; 0x0c
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	8d 87       	std	Y+13, r24	; 0x0d

    ST_GPIO_cfg_t pinD = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinDPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinDPortName};
    1b8a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b8c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b8e:	90 85       	ldd	r25, Z+8	; 0x08
    1b90:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b92:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b94:	81 85       	ldd	r24, Z+9	; 0x09
    1b96:	1f 86       	std	Y+15, r1	; 0x0f
    1b98:	18 8a       	std	Y+16, r1	; 0x10
    1b9a:	19 8a       	std	Y+17, r1	; 0x11
    1b9c:	1a 8a       	std	Y+18, r1	; 0x12
    1b9e:	9f 87       	std	Y+15, r25	; 0x0f
    1ba0:	88 8b       	std	Y+16, r24	; 0x10
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 8b       	std	Y+17, r24	; 0x11

    ST_GPIO_cfg_t pinE = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinEPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinEPortName};
    1ba6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1ba8:	f8 a1       	ldd	r31, Y+32	; 0x20
    1baa:	92 85       	ldd	r25, Z+10	; 0x0a
    1bac:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1bae:	f8 a1       	ldd	r31, Y+32	; 0x20
    1bb0:	83 85       	ldd	r24, Z+11	; 0x0b
    1bb2:	1b 8a       	std	Y+19, r1	; 0x13
    1bb4:	1c 8a       	std	Y+20, r1	; 0x14
    1bb6:	1d 8a       	std	Y+21, r1	; 0x15
    1bb8:	1e 8a       	std	Y+22, r1	; 0x16
    1bba:	9b 8b       	std	Y+19, r25	; 0x13
    1bbc:	8c 8b       	std	Y+20, r24	; 0x14
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	8d 8b       	std	Y+21, r24	; 0x15

    ST_GPIO_cfg_t pinF = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinFPortName};
    1bc2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1bc4:	f8 a1       	ldd	r31, Y+32	; 0x20
    1bc6:	94 85       	ldd	r25, Z+12	; 0x0c
    1bc8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1bca:	f8 a1       	ldd	r31, Y+32	; 0x20
    1bcc:	85 85       	ldd	r24, Z+13	; 0x0d
    1bce:	1f 8a       	std	Y+23, r1	; 0x17
    1bd0:	18 8e       	std	Y+24, r1	; 0x18
    1bd2:	19 8e       	std	Y+25, r1	; 0x19
    1bd4:	1a 8e       	std	Y+26, r1	; 0x1a
    1bd6:	9f 8b       	std	Y+23, r25	; 0x17
    1bd8:	88 8f       	std	Y+24, r24	; 0x18
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 8f       	std	Y+25, r24	; 0x19

    ST_GPIO_cfg_t pinG = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinGPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinGPortName};
    1bde:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1be0:	f8 a1       	ldd	r31, Y+32	; 0x20
    1be2:	96 85       	ldd	r25, Z+14	; 0x0e
    1be4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1be6:	f8 a1       	ldd	r31, Y+32	; 0x20
    1be8:	87 85       	ldd	r24, Z+15	; 0x0f
    1bea:	1b 8e       	std	Y+27, r1	; 0x1b
    1bec:	1c 8e       	std	Y+28, r1	; 0x1c
    1bee:	1d 8e       	std	Y+29, r1	; 0x1d
    1bf0:	1e 8e       	std	Y+30, r1	; 0x1e
    1bf2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bf4:	8c 8f       	std	Y+28, r24	; 0x1c
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	8d 8f       	std	Y+29, r24	; 0x1d

    gpioRet = GPIO_initPin(&pinA);
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	03 96       	adiw	r24, 0x03	; 3
    1bfe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1c02:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	88 23       	and	r24, r24
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <SSD_dualInit+0x106>
      GPIO_initPin(&pinB);
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	07 96       	adiw	r24, 0x07	; 7
    1c0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	88 23       	and	r24, r24
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <SSD_dualInit+0x114>
      GPIO_initPin(&pinC);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	0b 96       	adiw	r24, 0x0b	; 11
    1c1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	88 23       	and	r24, r24
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <SSD_dualInit+0x122>
      GPIO_initPin(&pinD);
    1c26:	ce 01       	movw	r24, r28
    1c28:	0f 96       	adiw	r24, 0x0f	; 15
    1c2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	88 23       	and	r24, r24
    1c32:	21 f4       	brne	.+8      	; 0x1c3c <SSD_dualInit+0x130>
      GPIO_initPin(&pinE);
    1c34:	ce 01       	movw	r24, r28
    1c36:	43 96       	adiw	r24, 0x13	; 19
    1c38:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	88 23       	and	r24, r24
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <SSD_dualInit+0x13e>
      GPIO_initPin(&pinF);
    1c42:	ce 01       	movw	r24, r28
    1c44:	47 96       	adiw	r24, 0x17	; 23
    1c46:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	88 23       	and	r24, r24
    1c4e:	21 f4       	brne	.+8      	; 0x1c58 <SSD_dualInit+0x14c>
      GPIO_initPin(&pinG);
    1c50:	ce 01       	movw	r24, r28
    1c52:	4b 96       	adiw	r24, 0x1b	; 27
    1c54:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }

    if (gpioRet == GPIO_OK) {
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	88 23       	and	r24, r24
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <SSD_dualInit+0x156>
      ssdRet = SSD_OK;
    1c5e:	1a 82       	std	Y+2, r1	; 0x02
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <SSD_dualInit+0x160>
    } else {
      ssdRet = SSD_NOK;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <SSD_dualInit+0x160>
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c6e:	a0 96       	adiw	r28, 0x20	; 32
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <SSD_dualSetCurrentSegmentComPin>:

EN_SSD_systemState_t SSD_dualSetCurrentSegmentComPin(
    ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	a5 97       	sbiw	r28, 0x25	; 37
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	9c a3       	std	Y+36, r25	; 0x24
    1c96:	8b a3       	std	Y+35, r24	; 0x23

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1ca0:	8b a1       	ldd	r24, Y+35	; 0x23
    1ca2:	9c a1       	ldd	r25, Y+36	; 0x24
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <SSD_dualSetCurrentSegmentComPin+0x2a>
    1ca8:	f7 c0       	rjmp	.+494    	; 0x1e98 <SSD_dualSetCurrentSegmentComPin+0x218>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    1caa:	eb a1       	ldd	r30, Y+35	; 0x23
    1cac:	fc a1       	ldd	r31, Y+36	; 0x24
    1cae:	86 89       	ldd	r24, Z+22	; 0x16
    1cb0:	88 23       	and	r24, r24
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <SSD_dualSetCurrentSegmentComPin+0x36>
    1cb4:	76 c0       	rjmp	.+236    	; 0x1da2 <SSD_dualSetCurrentSegmentComPin+0x122>
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    1cb6:	eb a1       	ldd	r30, Y+35	; 0x23
    1cb8:	fc a1       	ldd	r31, Y+36	; 0x24
    1cba:	80 81       	ld	r24, Z
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	c9 f4       	brne	.+50     	; 0x1cf2 <SSD_dualSetCurrentSegmentComPin+0x72>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1cc0:	eb a1       	ldd	r30, Y+35	; 0x23
    1cc2:	fc a1       	ldd	r31, Y+36	; 0x24
    1cc4:	92 89       	ldd	r25, Z+18	; 0x12
    1cc6:	eb a1       	ldd	r30, Y+35	; 0x23
    1cc8:	fc a1       	ldd	r31, Y+36	; 0x24
    1cca:	83 89       	ldd	r24, Z+19	; 0x13
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8c 83       	std	Y+4, r24	; 0x04
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8e 83       	std	Y+6, r24	; 0x06

        gpioRet = GPIO_initPin(&pinFirstCom);
    1cd8:	ce 01       	movw	r24, r28
    1cda:	03 96       	adiw	r24, 0x03	; 3
    1cdc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1ce0:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	88 23       	and	r24, r24
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <SSD_dualSetCurrentSegmentComPin+0x6c>
          ssdRet = SSD_OK;
    1ce8:	1a 82       	std	Y+2, r1	; 0x02
    1cea:	1f c0       	rjmp	.+62     	; 0x1d2a <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	1c c0       	rjmp	.+56     	; 0x1d2a <SSD_dualSetCurrentSegmentComPin+0xaa>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    1cf2:	eb a1       	ldd	r30, Y+35	; 0x23
    1cf4:	fc a1       	ldd	r31, Y+36	; 0x24
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 23       	and	r24, r24
    1cfa:	b9 f4       	brne	.+46     	; 0x1d2a <SSD_dualSetCurrentSegmentComPin+0xaa>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1cfc:	eb a1       	ldd	r30, Y+35	; 0x23
    1cfe:	fc a1       	ldd	r31, Y+36	; 0x24
    1d00:	92 89       	ldd	r25, Z+18	; 0x12
    1d02:	eb a1       	ldd	r30, Y+35	; 0x23
    1d04:	fc a1       	ldd	r31, Y+36	; 0x24
    1d06:	83 89       	ldd	r24, Z+19	; 0x13
    1d08:	9f 83       	std	Y+7, r25	; 0x07
    1d0a:	88 87       	std	Y+8, r24	; 0x08
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 87       	std	Y+9, r24	; 0x09
    1d10:	1a 86       	std	Y+10, r1	; 0x0a

        gpioRet = GPIO_initPin(&pinFirstCom);
    1d12:	ce 01       	movw	r24, r28
    1d14:	07 96       	adiw	r24, 0x07	; 7
    1d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1d1a:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 23       	and	r24, r24
    1d20:	11 f4       	brne	.+4      	; 0x1d26 <SSD_dualSetCurrentSegmentComPin+0xa6>
          ssdRet = SSD_OK;
    1d22:	1a 82       	std	Y+2, r1	; 0x02
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	8a 83       	std	Y+2, r24	; 0x02

      } else {
        /*Do Nothing*/
      }

      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    1d2a:	eb a1       	ldd	r30, Y+35	; 0x23
    1d2c:	fc a1       	ldd	r31, Y+36	; 0x24
    1d2e:	81 81       	ldd	r24, Z+1	; 0x01
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	c1 f4       	brne	.+48     	; 0x1d64 <SSD_dualSetCurrentSegmentComPin+0xe4>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1d34:	eb a1       	ldd	r30, Y+35	; 0x23
    1d36:	fc a1       	ldd	r31, Y+36	; 0x24
    1d38:	94 89       	ldd	r25, Z+20	; 0x14
    1d3a:	eb a1       	ldd	r30, Y+35	; 0x23
    1d3c:	fc a1       	ldd	r31, Y+36	; 0x24
    1d3e:	85 89       	ldd	r24, Z+21	; 0x15
    1d40:	9b 87       	std	Y+11, r25	; 0x0b
    1d42:	8c 87       	std	Y+12, r24	; 0x0c
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	8d 87       	std	Y+13, r24	; 0x0d
    1d48:	1e 86       	std	Y+14, r1	; 0x0e

        gpioRet = GPIO_initPin(&pinSecondCom);
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	0b 96       	adiw	r24, 0x0b	; 11
    1d4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1d52:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	88 23       	and	r24, r24
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <SSD_dualSetCurrentSegmentComPin+0xde>
          ssdRet = SSD_OK;
    1d5a:	1a 82       	std	Y+2, r1	; 0x02
    1d5c:	9f c0       	rjmp	.+318    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	8a 83       	std	Y+2, r24	; 0x02
    1d62:	9c c0       	rjmp	.+312    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    1d64:	eb a1       	ldd	r30, Y+35	; 0x23
    1d66:	fc a1       	ldd	r31, Y+36	; 0x24
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <SSD_dualSetCurrentSegmentComPin+0xf0>
    1d6e:	96 c0       	rjmp	.+300    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1d70:	eb a1       	ldd	r30, Y+35	; 0x23
    1d72:	fc a1       	ldd	r31, Y+36	; 0x24
    1d74:	94 89       	ldd	r25, Z+20	; 0x14
    1d76:	eb a1       	ldd	r30, Y+35	; 0x23
    1d78:	fc a1       	ldd	r31, Y+36	; 0x24
    1d7a:	85 89       	ldd	r24, Z+21	; 0x15
    1d7c:	9f 87       	std	Y+15, r25	; 0x0f
    1d7e:	88 8b       	std	Y+16, r24	; 0x10
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	89 8b       	std	Y+17, r24	; 0x11
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	8a 8b       	std	Y+18, r24	; 0x12

        gpioRet = GPIO_initPin(&pinSecondCom);
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0f 96       	adiw	r24, 0x0f	; 15
    1d8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1d90:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	88 23       	and	r24, r24
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <SSD_dualSetCurrentSegmentComPin+0x11c>
          ssdRet = SSD_OK;
    1d98:	1a 82       	std	Y+2, r1	; 0x02
    1d9a:	80 c0       	rjmp	.+256    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	7d c0       	rjmp	.+250    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else {
        /*Do Nothing*/
      }

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    1da2:	eb a1       	ldd	r30, Y+35	; 0x23
    1da4:	fc a1       	ldd	r31, Y+36	; 0x24
    1da6:	86 89       	ldd	r24, Z+22	; 0x16
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <SSD_dualSetCurrentSegmentComPin+0x12e>
    1dac:	77 c0       	rjmp	.+238    	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    1dae:	eb a1       	ldd	r30, Y+35	; 0x23
    1db0:	fc a1       	ldd	r31, Y+36	; 0x24
    1db2:	81 81       	ldd	r24, Z+1	; 0x01
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	c9 f4       	brne	.+50     	; 0x1dea <SSD_dualSetCurrentSegmentComPin+0x16a>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1db8:	eb a1       	ldd	r30, Y+35	; 0x23
    1dba:	fc a1       	ldd	r31, Y+36	; 0x24
    1dbc:	94 89       	ldd	r25, Z+20	; 0x14
    1dbe:	eb a1       	ldd	r30, Y+35	; 0x23
    1dc0:	fc a1       	ldd	r31, Y+36	; 0x24
    1dc2:	85 89       	ldd	r24, Z+21	; 0x15
    1dc4:	9b 8b       	std	Y+19, r25	; 0x13
    1dc6:	8c 8b       	std	Y+20, r24	; 0x14
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	8d 8b       	std	Y+21, r24	; 0x15
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	8e 8b       	std	Y+22, r24	; 0x16

        gpioRet = GPIO_initPin(&pinSecondCom);
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	43 96       	adiw	r24, 0x13	; 19
    1dd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1dd8:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	88 23       	and	r24, r24
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <SSD_dualSetCurrentSegmentComPin+0x164>
          ssdRet = SSD_OK;
    1de0:	1a 82       	std	Y+2, r1	; 0x02
    1de2:	1f c0       	rjmp	.+62     	; 0x1e22 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	8a 83       	std	Y+2, r24	; 0x02
    1de8:	1c c0       	rjmp	.+56     	; 0x1e22 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    1dea:	eb a1       	ldd	r30, Y+35	; 0x23
    1dec:	fc a1       	ldd	r31, Y+36	; 0x24
    1dee:	81 81       	ldd	r24, Z+1	; 0x01
    1df0:	88 23       	and	r24, r24
    1df2:	b9 f4       	brne	.+46     	; 0x1e22 <SSD_dualSetCurrentSegmentComPin+0x1a2>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    1df4:	eb a1       	ldd	r30, Y+35	; 0x23
    1df6:	fc a1       	ldd	r31, Y+36	; 0x24
    1df8:	94 89       	ldd	r25, Z+20	; 0x14
    1dfa:	eb a1       	ldd	r30, Y+35	; 0x23
    1dfc:	fc a1       	ldd	r31, Y+36	; 0x24
    1dfe:	85 89       	ldd	r24, Z+21	; 0x15
    1e00:	9f 8b       	std	Y+23, r25	; 0x17
    1e02:	88 8f       	std	Y+24, r24	; 0x18
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 8f       	std	Y+25, r24	; 0x19
    1e08:	1a 8e       	std	Y+26, r1	; 0x1a

        gpioRet = GPIO_initPin(&pinSecondCom);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	47 96       	adiw	r24, 0x17	; 23
    1e0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1e12:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	88 23       	and	r24, r24
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <SSD_dualSetCurrentSegmentComPin+0x19e>
          ssdRet = SSD_OK;
    1e1a:	1a 82       	std	Y+2, r1	; 0x02
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	8a 83       	std	Y+2, r24	; 0x02
        }
      } else {
        /*Do Nothing*/
      }
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    1e22:	eb a1       	ldd	r30, Y+35	; 0x23
    1e24:	fc a1       	ldd	r31, Y+36	; 0x24
    1e26:	80 81       	ld	r24, Z
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	c1 f4       	brne	.+48     	; 0x1e5c <SSD_dualSetCurrentSegmentComPin+0x1dc>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1e2c:	eb a1       	ldd	r30, Y+35	; 0x23
    1e2e:	fc a1       	ldd	r31, Y+36	; 0x24
    1e30:	92 89       	ldd	r25, Z+18	; 0x12
    1e32:	eb a1       	ldd	r30, Y+35	; 0x23
    1e34:	fc a1       	ldd	r31, Y+36	; 0x24
    1e36:	83 89       	ldd	r24, Z+19	; 0x13
    1e38:	9b 8f       	std	Y+27, r25	; 0x1b
    1e3a:	8c 8f       	std	Y+28, r24	; 0x1c
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e40:	1e 8e       	std	Y+30, r1	; 0x1e

        gpioRet = GPIO_initPin(&pinFirstCom);
    1e42:	ce 01       	movw	r24, r28
    1e44:	4b 96       	adiw	r24, 0x1b	; 27
    1e46:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1e4a:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	88 23       	and	r24, r24
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <SSD_dualSetCurrentSegmentComPin+0x1d6>
          ssdRet = SSD_OK;
    1e52:	1a 82       	std	Y+2, r1	; 0x02
    1e54:	23 c0       	rjmp	.+70     	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	20 c0       	rjmp	.+64     	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    1e5c:	eb a1       	ldd	r30, Y+35	; 0x23
    1e5e:	fc a1       	ldd	r31, Y+36	; 0x24
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	d9 f4       	brne	.+54     	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    1e66:	eb a1       	ldd	r30, Y+35	; 0x23
    1e68:	fc a1       	ldd	r31, Y+36	; 0x24
    1e6a:	92 89       	ldd	r25, Z+18	; 0x12
    1e6c:	eb a1       	ldd	r30, Y+35	; 0x23
    1e6e:	fc a1       	ldd	r31, Y+36	; 0x24
    1e70:	83 89       	ldd	r24, Z+19	; 0x13
    1e72:	9f 8f       	std	Y+31, r25	; 0x1f
    1e74:	88 a3       	std	Y+32, r24	; 0x20
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	8a a3       	std	Y+34, r24	; 0x22

        gpioRet = GPIO_initPin(&pinFirstCom);
    1e7e:	ce 01       	movw	r24, r28
    1e80:	4f 96       	adiw	r24, 0x1f	; 31
    1e82:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    1e86:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	88 23       	and	r24, r24
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <SSD_dualSetCurrentSegmentComPin+0x212>
          ssdRet = SSD_OK;
    1e8e:	1a 82       	std	Y+2, r1	; 0x02
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <SSD_dualSetCurrentSegmentComPin+0x21c>
      }
    } else {
    }

  } else {
    ssdRet = SSD_NULL_PTR;
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
  }
}
    1e9c:	a5 96       	adiw	r28, 0x25	; 37
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <SSD_dualSwitchSegment>:

EN_SSD_systemState_t
SSD_dualSwitchSegment(ST_SSD_DualCfg_t *ST_ptrSsdDualCfgInstance,
                      EN_SSD_index_t indexOfTheDisplay) {
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <SSD_dualSwitchSegment+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <SSD_dualSwitchSegment+0x8>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	6c 83       	std	Y+4, r22	; 0x04

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	31 f0       	breq	.+12     	; 0x1ed8 <SSD_dualSwitchSegment+0x2a>
    ST_ptrSsdDualCfgInstance->ssdCurrentDisplay = indexOfTheDisplay;
    1ecc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ece:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	86 8b       	std	Z+22, r24	; 0x16
    ssdRet = SSD_OK;
    1ed4:	19 82       	std	Y+1, r1	; 0x01
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <SSD_dualSwitchSegment+0x2e>
  } else {
    ssdRet = SSD_NULL_PTR;
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	89 83       	std	Y+1, r24	; 0x01
  }
  return ssdRet;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <SSD_dualSetNumberOnSsd>:

EN_SSD_systemState_t
SSD_dualSetNumberOnSsd(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance,
                       EN_SSD_numbers_t valueOfNumber) {
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	6c 97       	sbiw	r28, 0x1c	; 28
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	99 8f       	std	Y+25, r25	; 0x19
    1f0e:	88 8f       	std	Y+24, r24	; 0x18
    1f10:	6a 8f       	std	Y+26, r22	; 0x1a

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	8c 83       	std	Y+4, r24	; 0x04
  EN_SSD_typeOfCommon_t currentCommonType;
  EN_GPIO_mcuPins_t currentCommonPin;
  EN_GPIO_mcuPorts_t currentCommonPort;

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    1f16:	88 8d       	ldd	r24, Y+24	; 0x18
    1f18:	99 8d       	ldd	r25, Y+25	; 0x19
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <SSD_dualSetNumberOnSsd+0x34>
    1f1e:	73 c0       	rjmp	.+230    	; 0x2006 <SSD_dualSetNumberOnSsd+0x11a>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    1f20:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f22:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f24:	86 89       	ldd	r24, Z+22	; 0x16
    1f26:	88 23       	and	r24, r24
    1f28:	69 f4       	brne	.+26     	; 0x1f44 <SSD_dualSetNumberOnSsd+0x58>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdFirstCommonType;
    1f2a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f2c:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f2e:	80 81       	ld	r24, Z
    1f30:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName;
    1f32:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f34:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f36:	82 89       	ldd	r24, Z+18	; 0x12
    1f38:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber;
    1f3a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f3c:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f3e:	83 89       	ldd	r24, Z+19	; 0x13
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	11 c0       	rjmp	.+34     	; 0x1f66 <SSD_dualSetNumberOnSsd+0x7a>

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    1f44:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f46:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f48:	86 89       	ldd	r24, Z+22	; 0x16
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	61 f4       	brne	.+24     	; 0x1f66 <SSD_dualSetNumberOnSsd+0x7a>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdSecondCommonType;
    1f4e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f50:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f52:	81 81       	ldd	r24, Z+1	; 0x01
    1f54:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName;
    1f56:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f58:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f5a:	84 89       	ldd	r24, Z+20	; 0x14
    1f5c:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber;
    1f5e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f60:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f62:	85 89       	ldd	r24, Z+21	; 0x15
    1f64:	8a 83       	std	Y+2, r24	; 0x02
        .ssdPinDPortName = ST_ptrSsdDualCfgInstance->ssdPinDPortName,
        .ssdPinEPortName = ST_ptrSsdDualCfgInstance->ssdPinEPortName,
        .ssdPinFPortName = ST_ptrSsdDualCfgInstance->ssdPinFPortName,
        .ssdPinGPortName = ST_ptrSsdDualCfgInstance->ssdPinGPortName,
        .ssdPinComPortName = currentCommonPort,
        .ssdPinComPinNumber = currentCommonPin};
    1f66:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f68:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f6a:	92 81       	ldd	r25, Z+2	; 0x02
    1f6c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f6e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f70:	23 81       	ldd	r18, Z+3	; 0x03
    1f72:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f74:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f76:	34 81       	ldd	r19, Z+4	; 0x04
    1f78:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f7a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f7c:	45 81       	ldd	r20, Z+5	; 0x05
    1f7e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f80:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f82:	56 81       	ldd	r21, Z+6	; 0x06
    1f84:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f86:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f88:	67 81       	ldd	r22, Z+7	; 0x07
    1f8a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f8c:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f8e:	70 85       	ldd	r23, Z+8	; 0x08
    1f90:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f92:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f94:	a1 85       	ldd	r26, Z+9	; 0x09
    1f96:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f98:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f9a:	b2 85       	ldd	r27, Z+10	; 0x0a
    1f9c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f9e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fa0:	13 85       	ldd	r17, Z+11	; 0x0b
    1fa2:	e8 8d       	ldd	r30, Y+24	; 0x18
    1fa4:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fa6:	04 85       	ldd	r16, Z+12	; 0x0c
    1fa8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1faa:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fac:	f5 84       	ldd	r15, Z+13	; 0x0d
    1fae:	e8 8d       	ldd	r30, Y+24	; 0x18
    1fb0:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fb2:	e6 84       	ldd	r14, Z+14	; 0x0e
    1fb4:	e8 8d       	ldd	r30, Y+24	; 0x18
    1fb6:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fb8:	d7 84       	ldd	r13, Z+15	; 0x0f
    1fba:	83 e1       	ldi	r24, 0x13	; 19
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	35 96       	adiw	r30, 0x05	; 5
    1fc0:	fc 8f       	std	Y+28, r31	; 0x1c
    1fc2:	eb 8f       	std	Y+27, r30	; 0x1b
    1fc4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1fc6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1fc8:	c8 2e       	mov	r12, r24
    1fca:	11 92       	st	Z+, r1
    1fcc:	ca 94       	dec	r12
    1fce:	e9 f7       	brne	.-6      	; 0x1fca <SSD_dualSetNumberOnSsd+0xde>
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	2f 83       	std	Y+7, r18	; 0x07
    1fd8:	38 87       	std	Y+8, r19	; 0x08
    1fda:	49 87       	std	Y+9, r20	; 0x09
    1fdc:	5a 87       	std	Y+10, r21	; 0x0a
    1fde:	6b 87       	std	Y+11, r22	; 0x0b
    1fe0:	7c 87       	std	Y+12, r23	; 0x0c
    1fe2:	ad 87       	std	Y+13, r26	; 0x0d
    1fe4:	be 87       	std	Y+14, r27	; 0x0e
    1fe6:	1f 87       	std	Y+15, r17	; 0x0f
    1fe8:	08 8b       	std	Y+16, r16	; 0x10
    1fea:	f9 8a       	std	Y+17, r15	; 0x11
    1fec:	ea 8a       	std	Y+18, r14	; 0x12
    1fee:	db 8a       	std	Y+19, r13	; 0x13
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	8c 8b       	std	Y+20, r24	; 0x14
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	8d 8b       	std	Y+21, r24	; 0x15

    ssdRet = SSD_setNumberOnSsd(&curruntSsdPins, valueOfNumber);
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	05 96       	adiw	r24, 0x05	; 5
    1ffc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ffe:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    2002:	8c 83       	std	Y+4, r24	; 0x04
    2004:	02 c0       	rjmp	.+4      	; 0x200a <SSD_dualSetNumberOnSsd+0x11e>
  } else {
    ssdRet = SSD_NOK;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	8c 83       	std	Y+4, r24	; 0x04
  }
  return ssdRet;
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	6c 96       	adiw	r28, 0x1c	; 28
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	cf 90       	pop	r12
    2028:	08 95       	ret

0000202a <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	28 97       	sbiw	r28, 0x08	; 8
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	98 87       	std	Y+8, r25	; 0x08
    2040:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    204a:	8f 81       	ldd	r24, Y+7	; 0x07
    204c:	98 85       	ldd	r25, Y+8	; 0x08
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	d9 f0       	breq	.+54     	; 0x2088 <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    2052:	ef 81       	ldd	r30, Y+7	; 0x07
    2054:	f8 85       	ldd	r31, Y+8	; 0x08
    2056:	81 81       	ldd	r24, Z+1	; 0x01
    2058:	ef 81       	ldd	r30, Y+7	; 0x07
    205a:	f8 85       	ldd	r31, Y+8	; 0x08
    205c:	92 81       	ldd	r25, Z+2	; 0x02
    205e:	ef 81       	ldd	r30, Y+7	; 0x07
    2060:	f8 85       	ldd	r31, Y+8	; 0x08
    2062:	20 81       	ld	r18, Z
    2064:	8b 83       	std	Y+3, r24	; 0x03
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    206e:	ce 01       	movw	r24, r28
    2070:	03 96       	adiw	r24, 0x03	; 3
    2072:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_initPin>
    2076:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 23       	and	r24, r24
    207c:	11 f4       	brne	.+4      	; 0x2082 <LED_init+0x58>
      ledRet = LED_OK;
    207e:	1a 82       	std	Y+2, r1	; 0x02
    2080:	05 c0       	rjmp	.+10     	; 0x208c <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	02 c0       	rjmp	.+4      	; 0x208c <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    208e:	28 96       	adiw	r28, 0x08	; 8
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	28 97       	sbiw	r28, 0x08	; 8
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	98 87       	std	Y+8, r25	; 0x08
    20b6:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    20c0:	8f 81       	ldd	r24, Y+7	; 0x07
    20c2:	98 85       	ldd	r25, Y+8	; 0x08
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	e1 f0       	breq	.+56     	; 0x2100 <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    20c8:	ef 81       	ldd	r30, Y+7	; 0x07
    20ca:	f8 85       	ldd	r31, Y+8	; 0x08
    20cc:	81 81       	ldd	r24, Z+1	; 0x01
    20ce:	ef 81       	ldd	r30, Y+7	; 0x07
    20d0:	f8 85       	ldd	r31, Y+8	; 0x08
    20d2:	92 81       	ldd	r25, Z+2	; 0x02
    20d4:	ef 81       	ldd	r30, Y+7	; 0x07
    20d6:	f8 85       	ldd	r31, Y+8	; 0x08
    20d8:	20 81       	ld	r18, Z
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    20e4:	ce 01       	movw	r24, r28
    20e6:	03 96       	adiw	r24, 0x03	; 3
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    20ee:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	88 23       	and	r24, r24
    20f4:	11 f4       	brne	.+4      	; 0x20fa <LED_turnOn+0x5a>
      ledRet = LED_OK;
    20f6:	1a 82       	std	Y+2, r1	; 0x02
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2106:	28 96       	adiw	r28, 0x08	; 8
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	28 97       	sbiw	r28, 0x08	; 8
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    2138:	8f 81       	ldd	r24, Y+7	; 0x07
    213a:	98 85       	ldd	r25, Y+8	; 0x08
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	e1 f0       	breq	.+56     	; 0x2178 <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    2140:	ef 81       	ldd	r30, Y+7	; 0x07
    2142:	f8 85       	ldd	r31, Y+8	; 0x08
    2144:	81 81       	ldd	r24, Z+1	; 0x01
    2146:	ef 81       	ldd	r30, Y+7	; 0x07
    2148:	f8 85       	ldd	r31, Y+8	; 0x08
    214a:	92 81       	ldd	r25, Z+2	; 0x02
    214c:	ef 81       	ldd	r30, Y+7	; 0x07
    214e:	f8 85       	ldd	r31, Y+8	; 0x08
    2150:	20 81       	ld	r18, Z
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    215c:	ce 01       	movw	r24, r28
    215e:	03 96       	adiw	r24, 0x03	; 3
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_writePinLogic>
    2166:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	88 23       	and	r24, r24
    216c:	11 f4       	brne	.+4      	; 0x2172 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    216e:	1a 82       	std	Y+2, r1	; 0x02
    2170:	05 c0       	rjmp	.+10     	; 0x217c <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	8a 83       	std	Y+2, r24	; 0x02
    2176:	02 c0       	rjmp	.+4      	; 0x217c <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    217e:	28 96       	adiw	r28, 0x08	; 8
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	28 97       	sbiw	r28, 0x08	; 8
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    21b0:	8f 81       	ldd	r24, Y+7	; 0x07
    21b2:	98 85       	ldd	r25, Y+8	; 0x08
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	d9 f0       	breq	.+54     	; 0x21ee <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    21b8:	ef 81       	ldd	r30, Y+7	; 0x07
    21ba:	f8 85       	ldd	r31, Y+8	; 0x08
    21bc:	81 81       	ldd	r24, Z+1	; 0x01
    21be:	ef 81       	ldd	r30, Y+7	; 0x07
    21c0:	f8 85       	ldd	r31, Y+8	; 0x08
    21c2:	92 81       	ldd	r25, Z+2	; 0x02
    21c4:	ef 81       	ldd	r30, Y+7	; 0x07
    21c6:	f8 85       	ldd	r31, Y+8	; 0x08
    21c8:	20 81       	ld	r18, Z
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    21d4:	ce 01       	movw	r24, r28
    21d6:	03 96       	adiw	r24, 0x03	; 3
    21d8:	0e 94 18 07 	call	0xe30	; 0xe30 <GPIO_togglePinLogic>
    21dc:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	88 23       	and	r24, r24
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <LED_toggle+0x58>
      ledRet = LED_OK;
    21e4:	1a 82       	std	Y+2, r1	; 0x02
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	28 96       	adiw	r28, 0x08	; 8
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <appInit>:
extern ST_SSD_cfg_t ssdOne;
extern ST_SSD_cfg_t ssdTwo;


void appInit(void)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	LED_init(&greenLed);
    220e:	88 e3       	ldi	r24, 0x38	; 56
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 15 10 	call	0x202a	; 0x202a <LED_init>
	LED_init(&yellowLed);
    2216:	8c e0       	ldi	r24, 0x0C	; 12
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 15 10 	call	0x202a	; 0x202a <LED_init>
	LED_init(&redLed);
    221e:	8f e0       	ldi	r24, 0x0F	; 15
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	0e 94 15 10 	call	0x202a	; 0x202a <LED_init>
	SSD_int(&ssdOne);
    2226:	82 e1       	ldi	r24, 0x12	; 18
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	0e 94 9e 08 	call	0x113c	; 0x113c <SSD_int>
	SSD_int(&ssdTwo);
    222e:	85 e2       	ldi	r24, 0x25	; 37
    2230:	91 e0       	ldi	r25, 0x01	; 1
    2232:	0e 94 9e 08 	call	0x113c	; 0x113c <SSD_int>
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <appMain>:

void appMain(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	ab 97       	sbiw	r28, 0x2b	; 43
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;

	for(i=1 ; i<=10 ; i++)
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	8b a7       	std	Y+43, r24	; 0x2b
    2254:	99 c0       	rjmp	.+306    	; 0x2388 <appMain+0x14c>
	{
		LED_turnOn(&greenLed);
    2256:	88 e3       	ldi	r24, 0x38	; 56
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LED_turnOn>
		LED_turnOff(&yellowLed);
    225e:	8c e0       	ldi	r24, 0x0C	; 12
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>
		LED_turnOff(&redLed);
    2266:	8f e0       	ldi	r24, 0x0F	; 15
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>

		if(i == 10)
    226e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2270:	8a 30       	cpi	r24, 0x0A	; 10
    2272:	59 f4       	brne	.+22     	; 0x228a <appMain+0x4e>
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ONE);
    2274:	82 e1       	ldi	r24, 0x12	; 18
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,SSD_ZERO);
    227e:	85 e2       	ldi	r24, 0x25	; 37
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    2288:	0a c0       	rjmp	.+20     	; 0x229e <appMain+0x62>
		}
		else
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ZERO);
    228a:	82 e1       	ldi	r24, 0x12	; 18
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,i);
    2294:	85 e2       	ldi	r24, 0x25	; 37
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	6b a5       	ldd	r22, Y+43	; 0x2b
    229a:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	aa e7       	ldi	r26, 0x7A	; 122
    22a4:	b4 e4       	ldi	r27, 0x44	; 68
    22a6:	8f a3       	std	Y+39, r24	; 0x27
    22a8:	98 a7       	std	Y+40, r25	; 0x28
    22aa:	a9 a7       	std	Y+41, r26	; 0x29
    22ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	6f a1       	ldd	r22, Y+39	; 0x27
    22b0:	78 a5       	ldd	r23, Y+40	; 0x28
    22b2:	89 a5       	ldd	r24, Y+41	; 0x29
    22b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a ef       	ldi	r20, 0xFA	; 250
    22bc:	54 e4       	ldi	r21, 0x44	; 68
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	8b a3       	std	Y+35, r24	; 0x23
    22c8:	9c a3       	std	Y+36, r25	; 0x24
    22ca:	ad a3       	std	Y+37, r26	; 0x25
    22cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ce:	6b a1       	ldd	r22, Y+35	; 0x23
    22d0:	7c a1       	ldd	r23, Y+36	; 0x24
    22d2:	8d a1       	ldd	r24, Y+37	; 0x25
    22d4:	9e a1       	ldd	r25, Y+38	; 0x26
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <appMain+0xb4>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9a a3       	std	Y+34, r25	; 0x22
    22ec:	89 a3       	std	Y+33, r24	; 0x21
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <appMain+0x132>
	else if (__tmp > 65535)
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	4c f5       	brge	.+82     	; 0x235a <appMain+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	6f a1       	ldd	r22, Y+39	; 0x27
    230a:	78 a5       	ldd	r23, Y+40	; 0x28
    230c:	89 a5       	ldd	r24, Y+41	; 0x29
    230e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9a a3       	std	Y+34, r25	; 0x22
    232e:	89 a3       	std	Y+33, r24	; 0x21
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <appMain+0x114>
    2332:	88 ec       	ldi	r24, 0xC8	; 200
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	98 a3       	std	Y+32, r25	; 0x20
    2338:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    233a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    233c:	98 a1       	ldd	r25, Y+32	; 0x20
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <appMain+0x102>
    2342:	98 a3       	std	Y+32, r25	; 0x20
    2344:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2346:	89 a1       	ldd	r24, Y+33	; 0x21
    2348:	9a a1       	ldd	r25, Y+34	; 0x22
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	9a a1       	ldd	r25, Y+34	; 0x22
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	69 f7       	brne	.-38     	; 0x2332 <appMain+0xf6>
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <appMain+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	6b a1       	ldd	r22, Y+35	; 0x23
    235c:	7c a1       	ldd	r23, Y+36	; 0x24
    235e:	8d a1       	ldd	r24, Y+37	; 0x25
    2360:	9e a1       	ldd	r25, Y+38	; 0x26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	9e 8f       	std	Y+30, r25	; 0x1e
    2374:	8d 8f       	std	Y+29, r24	; 0x1d
    2376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <appMain+0x13e>
    237e:	9e 8f       	std	Y+30, r25	; 0x1e
    2380:	8d 8f       	std	Y+29, r24	; 0x1d

void appMain(void)
{
	uint8_t i;

	for(i=1 ; i<=10 ; i++)
    2382:	8b a5       	ldd	r24, Y+43	; 0x2b
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	8b a7       	std	Y+43, r24	; 0x2b
    2388:	8b a5       	ldd	r24, Y+43	; 0x2b
    238a:	8b 30       	cpi	r24, 0x0B	; 11
    238c:	08 f4       	brcc	.+2      	; 0x2390 <appMain+0x154>
    238e:	63 cf       	rjmp	.-314    	; 0x2256 <appMain+0x1a>
			SSD_setNumberOnSsd(&ssdTwo,i);
		}
		_delay_ms(1000);
	}

	for(i=1 ; i<=3 ; i++)
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	8b a7       	std	Y+43, r24	; 0x2b
    2394:	99 c0       	rjmp	.+306    	; 0x24c8 <appMain+0x28c>
	{
		LED_turnOn(&yellowLed);
    2396:	8c e0       	ldi	r24, 0x0C	; 12
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LED_turnOn>
		LED_turnOff(&greenLed);
    239e:	88 e3       	ldi	r24, 0x38	; 56
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>
		LED_turnOff(&redLed);
    23a6:	8f e0       	ldi	r24, 0x0F	; 15
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>

		if(i == 10)
    23ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b0:	8a 30       	cpi	r24, 0x0A	; 10
    23b2:	59 f4       	brne	.+22     	; 0x23ca <appMain+0x18e>
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ONE);
    23b4:	82 e1       	ldi	r24, 0x12	; 18
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,SSD_ZERO);
    23be:	85 e2       	ldi	r24, 0x25	; 37
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <appMain+0x1a2>
		}
		else
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ZERO);
    23ca:	82 e1       	ldi	r24, 0x12	; 18
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,i);
    23d4:	85 e2       	ldi	r24, 0x25	; 37
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	6b a5       	ldd	r22, Y+43	; 0x2b
    23da:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	aa e7       	ldi	r26, 0x7A	; 122
    23e4:	b4 e4       	ldi	r27, 0x44	; 68
    23e6:	89 8f       	std	Y+25, r24	; 0x19
    23e8:	9a 8f       	std	Y+26, r25	; 0x1a
    23ea:	ab 8f       	std	Y+27, r26	; 0x1b
    23ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	69 8d       	ldd	r22, Y+25	; 0x19
    23f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8d 8b       	std	Y+21, r24	; 0x15
    2408:	9e 8b       	std	Y+22, r25	; 0x16
    240a:	af 8b       	std	Y+23, r26	; 0x17
    240c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    240e:	6d 89       	ldd	r22, Y+21	; 0x15
    2410:	7e 89       	ldd	r23, Y+22	; 0x16
    2412:	8f 89       	ldd	r24, Y+23	; 0x17
    2414:	98 8d       	ldd	r25, Y+24	; 0x18
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <appMain+0x1f4>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9c 8b       	std	Y+20, r25	; 0x14
    242c:	8b 8b       	std	Y+19, r24	; 0x13
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <appMain+0x272>
	else if (__tmp > 65535)
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <appMain+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	69 8d       	ldd	r22, Y+25	; 0x19
    244a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    244e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9c 8b       	std	Y+20, r25	; 0x14
    246e:	8b 8b       	std	Y+19, r24	; 0x13
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <appMain+0x254>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9a 8b       	std	Y+18, r25	; 0x12
    2478:	89 8b       	std	Y+17, r24	; 0x11
    247a:	89 89       	ldd	r24, Y+17	; 0x11
    247c:	9a 89       	ldd	r25, Y+18	; 0x12
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <appMain+0x242>
    2482:	9a 8b       	std	Y+18, r25	; 0x12
    2484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <appMain+0x236>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <appMain+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6d 89       	ldd	r22, Y+21	; 0x15
    249c:	7e 89       	ldd	r23, Y+22	; 0x16
    249e:	8f 89       	ldd	r24, Y+23	; 0x17
    24a0:	98 8d       	ldd	r25, Y+24	; 0x18
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	8b 89       	ldd	r24, Y+19	; 0x13
    24b0:	9c 89       	ldd	r25, Y+20	; 0x14
    24b2:	98 8b       	std	Y+16, r25	; 0x10
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
    24b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b8:	98 89       	ldd	r25, Y+16	; 0x10
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <appMain+0x27e>
    24be:	98 8b       	std	Y+16, r25	; 0x10
    24c0:	8f 87       	std	Y+15, r24	; 0x0f
			SSD_setNumberOnSsd(&ssdTwo,i);
		}
		_delay_ms(1000);
	}

	for(i=1 ; i<=3 ; i++)
    24c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	8b a7       	std	Y+43, r24	; 0x2b
    24c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ca:	84 30       	cpi	r24, 0x04	; 4
    24cc:	08 f4       	brcc	.+2      	; 0x24d0 <appMain+0x294>
    24ce:	63 cf       	rjmp	.-314    	; 0x2396 <appMain+0x15a>
			SSD_setNumberOnSsd(&ssdTwo,i);
		}
		_delay_ms(1000);
	}

	for(i=1 ; i<=10 ; i++)
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
    24d4:	99 c0       	rjmp	.+306    	; 0x2608 <appMain+0x3cc>
	{
		LED_turnOn(&redLed);
    24d6:	8f e0       	ldi	r24, 0x0F	; 15
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LED_turnOn>
		LED_turnOff(&greenLed);
    24de:	88 e3       	ldi	r24, 0x38	; 56
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>
		LED_turnOff(&yellowLed);
    24e6:	8c e0       	ldi	r24, 0x0C	; 12
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	0e 94 8c 10 	call	0x2118	; 0x2118 <LED_turnOff>

		if(i == 10)
    24ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f0:	8a 30       	cpi	r24, 0x0A	; 10
    24f2:	59 f4       	brne	.+22     	; 0x250a <appMain+0x2ce>
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ONE);
    24f4:	82 e1       	ldi	r24, 0x12	; 18
    24f6:	91 e0       	ldi	r25, 0x01	; 1
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,SSD_ZERO);
    24fe:	85 e2       	ldi	r24, 0x25	; 37
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    2508:	0a c0       	rjmp	.+20     	; 0x251e <appMain+0x2e2>
		}
		else
		{
			SSD_setNumberOnSsd(&ssdOne,SSD_ZERO);
    250a:	82 e1       	ldi	r24, 0x12	; 18
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
			SSD_setNumberOnSsd(&ssdTwo,i);
    2514:	85 e2       	ldi	r24, 0x25	; 37
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	6b a5       	ldd	r22, Y+43	; 0x2b
    251a:	0e 94 99 0a 	call	0x1532	; 0x1532 <SSD_setNumberOnSsd>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	aa e7       	ldi	r26, 0x7A	; 122
    2524:	b4 e4       	ldi	r27, 0x44	; 68
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <appMain+0x334>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <appMain+0x3b2>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <appMain+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <appMain+0x394>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <appMain+0x382>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <appMain+0x376>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <appMain+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <appMain+0x3be>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
			SSD_setNumberOnSsd(&ssdTwo,i);
		}
		_delay_ms(1000);
	}

	for(i=1 ; i<=10 ; i++)
    2602:	8b a5       	ldd	r24, Y+43	; 0x2b
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	8b a7       	std	Y+43, r24	; 0x2b
    2608:	8b a5       	ldd	r24, Y+43	; 0x2b
    260a:	8b 30       	cpi	r24, 0x0B	; 11
    260c:	08 f4       	brcc	.+2      	; 0x2610 <appMain+0x3d4>
    260e:	63 cf       	rjmp	.-314    	; 0x24d6 <appMain+0x29a>
			SSD_setNumberOnSsd(&ssdOne,SSD_ZERO);
			SSD_setNumberOnSsd(&ssdTwo,i);
		}
		_delay_ms(1000);
	}
}
    2610:	ab 96       	adiw	r28, 0x2b	; 43
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <main>:

#include "APPLICATION/app.h"


void main(void)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
	appInit();
    262a:	0e 94 03 11 	call	0x2206	; 0x2206 <appInit>
	while(1)
	{
		appMain();
    262e:	0e 94 1e 11 	call	0x223c	; 0x223c <appMain>
    2632:	fd cf       	rjmp	.-6      	; 0x262e <main+0xc>

00002634 <__prologue_saves__>:
    2634:	2f 92       	push	r2
    2636:	3f 92       	push	r3
    2638:	4f 92       	push	r4
    263a:	5f 92       	push	r5
    263c:	6f 92       	push	r6
    263e:	7f 92       	push	r7
    2640:	8f 92       	push	r8
    2642:	9f 92       	push	r9
    2644:	af 92       	push	r10
    2646:	bf 92       	push	r11
    2648:	cf 92       	push	r12
    264a:	df 92       	push	r13
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	ca 1b       	sub	r28, r26
    265e:	db 0b       	sbc	r29, r27
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	09 94       	ijmp

0000266c <__epilogue_restores__>:
    266c:	2a 88       	ldd	r2, Y+18	; 0x12
    266e:	39 88       	ldd	r3, Y+17	; 0x11
    2670:	48 88       	ldd	r4, Y+16	; 0x10
    2672:	5f 84       	ldd	r5, Y+15	; 0x0f
    2674:	6e 84       	ldd	r6, Y+14	; 0x0e
    2676:	7d 84       	ldd	r7, Y+13	; 0x0d
    2678:	8c 84       	ldd	r8, Y+12	; 0x0c
    267a:	9b 84       	ldd	r9, Y+11	; 0x0b
    267c:	aa 84       	ldd	r10, Y+10	; 0x0a
    267e:	b9 84       	ldd	r11, Y+9	; 0x09
    2680:	c8 84       	ldd	r12, Y+8	; 0x08
    2682:	df 80       	ldd	r13, Y+7	; 0x07
    2684:	ee 80       	ldd	r14, Y+6	; 0x06
    2686:	fd 80       	ldd	r15, Y+5	; 0x05
    2688:	0c 81       	ldd	r16, Y+4	; 0x04
    268a:	1b 81       	ldd	r17, Y+3	; 0x03
    268c:	aa 81       	ldd	r26, Y+2	; 0x02
    268e:	b9 81       	ldd	r27, Y+1	; 0x01
    2690:	ce 0f       	add	r28, r30
    2692:	d1 1d       	adc	r29, r1
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	ed 01       	movw	r28, r26
    26a0:	08 95       	ret

000026a2 <_exit>:
    26a2:	f8 94       	cli

000026a4 <__stop_program>:
    26a4:	ff cf       	rjmp	.-2      	; 0x26a4 <__stop_program>
