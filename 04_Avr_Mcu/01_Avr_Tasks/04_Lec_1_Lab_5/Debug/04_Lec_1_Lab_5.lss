
04_Lec_1_Lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  000029ac  00002a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002c28  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002275  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000797d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 94 14 	call	0x2928	; 0x2928 <main>
      7a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
                                             &PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
                                            &PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_initPin+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	9b 83       	std	Y+3, r25	; 0x03
     b44:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	b1 f0       	breq	.+44     	; 0xb7e <GPIO_initPin+0x48>
    ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
     b52:	ea 81       	ldd	r30, Y+2	; 0x02
     b54:	fb 81       	ldd	r31, Y+3	; 0x03
     b56:	22 81       	ldd	r18, Z+2	; 0x02
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	62 2f       	mov	r22, r18
     b5e:	0e 94 c8 05 	call	0xb90	; 0xb90 <GPIO_changePinDir>
     b62:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == ret) {
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 23       	and	r24, r24
     b68:	61 f4       	brne	.+24     	; 0xb82 <GPIO_initPin+0x4c>
      ret =
     b6a:	ea 81       	ldd	r30, Y+2	; 0x02
     b6c:	fb 81       	ldd	r31, Y+3	; 0x03
     b6e:	23 81       	ldd	r18, Z+3	; 0x03
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	9b 81       	ldd	r25, Y+3	; 0x03
     b74:	62 2f       	mov	r22, r18
     b76:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <GPIO_initPin+0x4c>
          GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
    } else {
      /*Do Nothin*/
    }
  } else {
    ret = GPIO_NULL_PTR;
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                        EN_GPIO_pinDir_t copyNewPinDir) {
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <GPIO_changePinDir+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <GPIO_changePinDir+0x8>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <GPIO_changePinDir+0xa>
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	09 f4       	brne	.+2      	; 0xbb2 <GPIO_changePinDir+0x22>
     bb0:	68 c0       	rjmp	.+208    	; 0xc82 <GPIO_changePinDir+0xf2>
    switch (copyNewPinDir) {
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3e 83       	std	Y+6, r19	; 0x06
     bba:	2d 83       	std	Y+5, r18	; 0x05
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <GPIO_changePinDir+0x40>
     bc4:	2d 81       	ldd	r18, Y+5	; 0x05
     bc6:	3e 81       	ldd	r19, Y+6	; 0x06
     bc8:	21 30       	cpi	r18, 0x01	; 1
     bca:	31 05       	cpc	r19, r1
     bcc:	71 f1       	breq	.+92     	; 0xc2a <GPIO_changePinDir+0x9a>
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <GPIO_changePinDir+0xf6>
    case GPIO_INPUT: {
      CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     bd0:	ea 81       	ldd	r30, Y+2	; 0x02
     bd2:	fb 81       	ldd	r31, Y+3	; 0x03
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	fc 01       	movw	r30, r24
     be0:	e8 59       	subi	r30, 0x98	; 152
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	a0 81       	ld	r26, Z
     be6:	b1 81       	ldd	r27, Z+1	; 0x01
     be8:	ea 81       	ldd	r30, Y+2	; 0x02
     bea:	fb 81       	ldd	r31, Y+3	; 0x03
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	fc 01       	movw	r30, r24
     bf8:	e8 59       	subi	r30, 0x98	; 152
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	ea 81       	ldd	r30, Y+2	; 0x02
     c08:	fb 81       	ldd	r31, Y+3	; 0x03
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <GPIO_changePinDir+0x8c>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <GPIO_changePinDir+0x88>
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c26:	19 82       	std	Y+1, r1	; 0x01
     c28:	2e c0       	rjmp	.+92     	; 0xc86 <GPIO_changePinDir+0xf6>
      break;
    }
    case GPIO_OUTPUT: {
      SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
     c2a:	ea 81       	ldd	r30, Y+2	; 0x02
     c2c:	fb 81       	ldd	r31, Y+3	; 0x03
     c2e:	80 81       	ld	r24, Z
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	fc 01       	movw	r30, r24
     c3a:	e8 59       	subi	r30, 0x98	; 152
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	a0 81       	ld	r26, Z
     c40:	b1 81       	ldd	r27, Z+1	; 0x01
     c42:	ea 81       	ldd	r30, Y+2	; 0x02
     c44:	fb 81       	ldd	r31, Y+3	; 0x03
     c46:	80 81       	ld	r24, Z
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	fc 01       	movw	r30, r24
     c52:	e8 59       	subi	r30, 0x98	; 152
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	01 90       	ld	r0, Z+
     c58:	f0 81       	ld	r31, Z
     c5a:	e0 2d       	mov	r30, r0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <GPIO_changePinDir+0xe6>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <GPIO_changePinDir+0xe2>
     c7a:	84 2b       	or	r24, r20
     c7c:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     c7e:	19 82       	std	Y+1, r1	; 0x01
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_changePinDir+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
}
     c88:	26 96       	adiw	r28, 0x06	; 6
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                                         EN_GPIO_pinLogic_t copyNewPinLogic) {
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <GPIO_writePinLogic+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <GPIO_writePinLogic+0x8>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_writePinLogic+0xa>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <GPIO_writePinLogic+0x22>
     cba:	68 c0       	rjmp	.+208    	; 0xd8c <GPIO_writePinLogic+0xf2>
    switch (copyNewPinLogic) {
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	3e 83       	std	Y+6, r19	; 0x06
     cc4:	2d 83       	std	Y+5, r18	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	31 f0       	breq	.+12     	; 0xcda <GPIO_writePinLogic+0x40>
     cce:	2d 81       	ldd	r18, Y+5	; 0x05
     cd0:	3e 81       	ldd	r19, Y+6	; 0x06
     cd2:	21 30       	cpi	r18, 0x01	; 1
     cd4:	31 05       	cpc	r19, r1
     cd6:	71 f1       	breq	.+92     	; 0xd34 <GPIO_writePinLogic+0x9a>
     cd8:	5b c0       	rjmp	.+182    	; 0xd90 <GPIO_writePinLogic+0xf6>
    case GPIO_LOW: {
      CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
     cda:	ea 81       	ldd	r30, Y+2	; 0x02
     cdc:	fb 81       	ldd	r31, Y+3	; 0x03
     cde:	80 81       	ld	r24, Z
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	fc 01       	movw	r30, r24
     cea:	e0 59       	subi	r30, 0x90	; 144
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	a0 81       	ld	r26, Z
     cf0:	b1 81       	ldd	r27, Z+1	; 0x01
     cf2:	ea 81       	ldd	r30, Y+2	; 0x02
     cf4:	fb 81       	ldd	r31, Y+3	; 0x03
     cf6:	80 81       	ld	r24, Z
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	fc 01       	movw	r30, r24
     d02:	e0 59       	subi	r30, 0x90	; 144
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	01 90       	ld	r0, Z+
     d08:	f0 81       	ld	r31, Z
     d0a:	e0 2d       	mov	r30, r0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	81 81       	ldd	r24, Z+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <GPIO_writePinLogic+0x8c>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <GPIO_writePinLogic+0x88>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d30:	19 82       	std	Y+1, r1	; 0x01
     d32:	2e c0       	rjmp	.+92     	; 0xd90 <GPIO_writePinLogic+0xf6>
      break;
    }
    case GPIO_HIGH: {
      SET_BIT(*port_registers[ST_ptrPinInstance->portName],
     d34:	ea 81       	ldd	r30, Y+2	; 0x02
     d36:	fb 81       	ldd	r31, Y+3	; 0x03
     d38:	80 81       	ld	r24, Z
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	fc 01       	movw	r30, r24
     d44:	e0 59       	subi	r30, 0x90	; 144
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	a0 81       	ld	r26, Z
     d4a:	b1 81       	ldd	r27, Z+1	; 0x01
     d4c:	ea 81       	ldd	r30, Y+2	; 0x02
     d4e:	fb 81       	ldd	r31, Y+3	; 0x03
     d50:	80 81       	ld	r24, Z
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	fc 01       	movw	r30, r24
     d5c:	e0 59       	subi	r30, 0x90	; 144
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	01 90       	ld	r0, Z+
     d62:	f0 81       	ld	r31, Z
     d64:	e0 2d       	mov	r30, r0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	81 81       	ldd	r24, Z+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <GPIO_writePinLogic+0xe6>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <GPIO_writePinLogic+0xe2>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
              ST_ptrPinInstance->pinNumber);
      ret = GPIO_OK;
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_writePinLogic+0xf6>
      break;
    }
    }
  } else {
    ret = GPIO_NULL_PTR;
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
}
     d92:	26 96       	adiw	r28, 0x06	; 6
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
                  EN_GPIO_pinLogic_t *retCurrentPinLogic) {
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <GPIO_readPinLogic+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <GPIO_readPinLogic+0x8>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	7d 83       	std	Y+5, r23	; 0x05
     db8:	6c 83       	std	Y+4, r22	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	11 f1       	breq	.+68     	; 0xe0a <GPIO_readPinLogic+0x66>
    *retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	80 81       	ld	r24, Z
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	fc 01       	movw	r30, r24
     dd6:	e8 58       	subi	r30, 0x88	; 136
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	01 90       	ld	r0, Z+
     ddc:	f0 81       	ld	r31, Z
     dde:	e0 2d       	mov	r30, r0
     de0:	80 81       	ld	r24, Z
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	ea 81       	ldd	r30, Y+2	; 0x02
     de8:	fb 81       	ldd	r31, Y+3	; 0x03
     dea:	81 81       	ldd	r24, Z+1	; 0x01
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_readPinLogic+0x54>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_readPinLogic+0x50>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	ec 81       	ldd	r30, Y+4	; 0x04
     e02:	fd 81       	ldd	r31, Y+5	; 0x05
     e04:	80 83       	st	Z, r24
                                  ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_readPinLogic+0x6a>
  } else {
    ret = GPIO_NULL_PTR;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	89 83       	std	Y+1, r24	; 0x01
  }
  return ret;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <GPIO_togglePinLogic+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrPinInstance) {
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	61 f1       	breq	.+88     	; 0xe94 <GPIO_togglePinLogic+0x74>
    TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
     e3c:	ea 81       	ldd	r30, Y+2	; 0x02
     e3e:	fb 81       	ldd	r31, Y+3	; 0x03
     e40:	80 81       	ld	r24, Z
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	fc 01       	movw	r30, r24
     e4c:	e0 59       	subi	r30, 0x90	; 144
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	a0 81       	ld	r26, Z
     e52:	b1 81       	ldd	r27, Z+1	; 0x01
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	80 81       	ld	r24, Z
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	fc 01       	movw	r30, r24
     e64:	e0 59       	subi	r30, 0x90	; 144
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	01 90       	ld	r0, Z+
     e6a:	f0 81       	ld	r31, Z
     e6c:	e0 2d       	mov	r30, r0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	ea 81       	ldd	r30, Y+2	; 0x02
     e74:	fb 81       	ldd	r31, Y+3	; 0x03
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <GPIO_togglePinLogic+0x68>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <GPIO_togglePinLogic+0x64>
     e8c:	84 27       	eor	r24, r20
     e8e:	8c 93       	st	X, r24
            ST_ptrPinInstance->pinNumber);
    ret = GPIO_OK;
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_togglePinLogic+0x78>
  } else {
    ret = GPIO_NULL_PTR;
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	89 83       	std	Y+1, r24	; 0x01
  }

  return ret;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
                                    EN_GPIO_pinDir_t copyPortDir,
                                    EN_GPIO_pinLogic_t copyPortLogic) {
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	28 97       	sbiw	r28, 0x08	; 8
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	8a 83       	std	Y+2, r24	; 0x02
     ebc:	6b 83       	std	Y+3, r22	; 0x03
     ebe:	4c 83       	std	Y+4, r20	; 0x04
  EN_GPIO_systemState_t ret = GPIO_NOK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01

  switch (copyPortDir) {
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	38 87       	std	Y+8, r19	; 0x08
     ecc:	2f 83       	std	Y+7, r18	; 0x07
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
     ed0:	98 85       	ldd	r25, Y+8	; 0x08
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	31 f0       	breq	.+12     	; 0xee2 <GPIO_initPort+0x3c>
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	21 30       	cpi	r18, 0x01	; 1
     edc:	31 05       	cpc	r19, r1
     ede:	79 f0       	breq	.+30     	; 0xefe <GPIO_initPort+0x58>
     ee0:	1c c0       	rjmp	.+56     	; 0xf1a <GPIO_initPort+0x74>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	fc 01       	movw	r30, r24
     eee:	e8 59       	subi	r30, 0x98	; 152
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	01 90       	ld	r0, Z+
     ef4:	f0 81       	ld	r31, Z
     ef6:	e0 2d       	mov	r30, r0
     ef8:	10 82       	st	Z, r1
    ret = GPIO_OK;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <GPIO_initPort+0x74>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	fc 01       	movw	r30, r24
     f0a:	e8 59       	subi	r30, 0x98	; 152
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	01 90       	ld	r0, Z+
     f10:	f0 81       	ld	r31, Z
     f12:	e0 2d       	mov	r30, r0
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f18:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  switch (copyPortLogic) {
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3e 83       	std	Y+6, r19	; 0x06
     f22:	2d 83       	std	Y+5, r18	; 0x05
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	31 f0       	breq	.+12     	; 0xf38 <GPIO_initPort+0x92>
     f2c:	2d 81       	ldd	r18, Y+5	; 0x05
     f2e:	3e 81       	ldd	r19, Y+6	; 0x06
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	79 f0       	breq	.+30     	; 0xf54 <GPIO_initPort+0xae>
     f36:	1c c0       	rjmp	.+56     	; 0xf70 <GPIO_initPort+0xca>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	fc 01       	movw	r30, r24
     f44:	e0 59       	subi	r30, 0x90	; 144
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	01 90       	ld	r0, Z+
     f4a:	f0 81       	ld	r31, Z
     f4c:	e0 2d       	mov	r30, r0
     f4e:	10 82       	st	Z, r1
    ret = GPIO_OK;
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <GPIO_initPort+0xca>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	fc 01       	movw	r30, r24
     f60:	e0 59       	subi	r30, 0x90	; 144
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	01 90       	ld	r0, Z+
     f66:	f0 81       	ld	r31, Z
     f68:	e0 2d       	mov	r30, r0
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
    ret = GPIO_OK;
     f6e:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
}
     f72:	28 96       	adiw	r28, 0x08	; 8
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
                                         EN_GPIO_pinDir_t copyNewPortDir) {
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <GPIO_changePortDir+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <GPIO_changePortDir+0x8>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01

  switch (copyNewPortDir) {
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3d 83       	std	Y+5, r19	; 0x05
     fa2:	2c 83       	std	Y+4, r18	; 0x04
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	31 f0       	breq	.+12     	; 0xfb8 <GPIO_changePortDir+0x34>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <GPIO_changePortDir+0x50>
     fb6:	1c c0       	rjmp	.+56     	; 0xff0 <GPIO_changePortDir+0x6c>
  case GPIO_INPUT: {
    *ddr_registers[copyPortName] = 0x00;
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	fc 01       	movw	r30, r24
     fc4:	e8 59       	subi	r30, 0x98	; 152
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	01 90       	ld	r0, Z+
     fca:	f0 81       	ld	r31, Z
     fcc:	e0 2d       	mov	r30, r0
     fce:	10 82       	st	Z, r1
    ret = GPIO_OK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <GPIO_changePortDir+0x6c>
    break;
  }
  case GPIO_OUTPUT: {
    *ddr_registers[copyPortName] = 0xFF;
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	fc 01       	movw	r30, r24
     fe0:	e8 59       	subi	r30, 0x98	; 152
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	01 90       	ld	r0, Z+
     fe6:	f0 81       	ld	r31, Z
     fe8:	e0 2d       	mov	r30, r0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
    ret = GPIO_OK;
     fee:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
                                          EN_GPIO_pinLogic_t copyNewPortLogic) {
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_writePortLogic+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_writePortLogic+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01
  switch (copyNewPortLogic) {
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	31 f0       	breq	.+12     	; 0x1036 <GPIO_writePortLogic+0x34>
    102a:	2c 81       	ldd	r18, Y+4	; 0x04
    102c:	3d 81       	ldd	r19, Y+5	; 0x05
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	79 f0       	breq	.+30     	; 0x1052 <GPIO_writePortLogic+0x50>
    1034:	1c c0       	rjmp	.+56     	; 0x106e <GPIO_writePortLogic+0x6c>
  case GPIO_LOW: {
    *port_registers[copyPortName] = 0x00;
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	fc 01       	movw	r30, r24
    1042:	e0 59       	subi	r30, 0x90	; 144
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	01 90       	ld	r0, Z+
    1048:	f0 81       	ld	r31, Z
    104a:	e0 2d       	mov	r30, r0
    104c:	10 82       	st	Z, r1
    ret = GPIO_OK;
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	0e c0       	rjmp	.+28     	; 0x106e <GPIO_writePortLogic+0x6c>
    break;
  }
  case GPIO_HIGH: {
    *port_registers[copyPortName] = 0xFF;
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	e0 59       	subi	r30, 0x90	; 144
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	01 90       	ld	r0, Z+
    1064:	f0 81       	ld	r31, Z
    1066:	e0 2d       	mov	r30, r0
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	80 83       	st	Z, r24
    ret = GPIO_OK;
    106c:	19 82       	std	Y+1, r1	; 0x01
    break;
  }
  }
  return ret;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
                   EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_readPortLogic+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_readPortLogic+0x8>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	7c 83       	std	Y+4, r23	; 0x04
    1090:	6b 83       	std	Y+3, r22	; 0x03
  EN_GPIO_systemState_t ret = GPIO_NOK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

  *retCurrentPortLogic = *pin_registers[copyPortName];
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e8 58       	subi	r30, 0x88	; 136
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	01 90       	ld	r0, Z+
    10a8:	f0 81       	ld	r31, Z
    10aa:	e0 2d       	mov	r30, r0
    10ac:	80 81       	ld	r24, Z
    10ae:	eb 81       	ldd	r30, Y+3	; 0x03
    10b0:	fc 81       	ldd	r31, Y+4	; 0x04
    10b2:	80 83       	st	Z, r24
  ret = GPIO_OK;
    10b4:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <GPIO_togglePortLogic+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t ret = GPIO_NOK;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
  *ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	fc 01       	movw	r30, r24
    10e2:	e8 59       	subi	r30, 0x98	; 152
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	a0 81       	ld	r26, Z
    10e8:	b1 81       	ldd	r27, Z+1	; 0x01
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	fc 01       	movw	r30, r24
    10f6:	e8 59       	subi	r30, 0x98	; 152
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	20 81       	ld	r18, Z
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	fc 01       	movw	r30, r24
    110e:	e8 59       	subi	r30, 0x98	; 152
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	01 90       	ld	r0, Z+
    1114:	f0 81       	ld	r31, Z
    1116:	e0 2d       	mov	r30, r0
    1118:	80 81       	ld	r24, Z
    111a:	82 27       	eor	r24, r18
    111c:	8c 93       	st	X, r24
  ret = GPIO_OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
  return ret;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <SSD_int>:
    {GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW}};

EN_SSD_systemState_t SSD_int(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	c4 54       	subi	r28, 0x44	; 68
    1136:	d0 40       	sbci	r29, 0x00	; 0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	fe 01       	movw	r30, r28
    1144:	ed 5b       	subi	r30, 0xBD	; 189
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1154:	fe 01       	movw	r30, r28
    1156:	ed 5b       	subi	r30, 0xBD	; 189
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	09 f4       	brne	.+2      	; 0x1164 <SSD_int+0x38>
    1162:	d2 c1       	rjmp	.+932    	; 0x1508 <SSD_int+0x3dc>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    1164:	fe 01       	movw	r30, r28
    1166:	ed 5b       	subi	r30, 0xBD	; 189
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	01 90       	ld	r0, Z+
    116c:	f0 81       	ld	r31, Z
    116e:	e0 2d       	mov	r30, r0
    1170:	80 81       	ld	r24, Z
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	09 f0       	breq	.+2      	; 0x1178 <SSD_int+0x4c>
    1176:	df c0       	rjmp	.+446    	; 0x1336 <SSD_int+0x20a>

      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    1178:	fe 01       	movw	r30, r28
    117a:	ed 5b       	subi	r30, 0xBD	; 189
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	97 85       	ldd	r25, Z+15	; 0x0f
    1186:	fe 01       	movw	r30, r28
    1188:	ed 5b       	subi	r30, 0xBD	; 189
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	01 90       	ld	r0, Z+
    118e:	f0 81       	ld	r31, Z
    1190:	e0 2d       	mov	r30, r0
    1192:	80 89       	ldd	r24, Z+16	; 0x10
    1194:	9b 83       	std	Y+3, r25	; 0x03
    1196:	8c 83       	std	Y+4, r24	; 0x04
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    11a0:	fe 01       	movw	r30, r28
    11a2:	ed 5b       	subi	r30, 0xBD	; 189
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	01 90       	ld	r0, Z+
    11a8:	f0 81       	ld	r31, Z
    11aa:	e0 2d       	mov	r30, r0
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	fe 01       	movw	r30, r28
    11b0:	ed 5b       	subi	r30, 0xBD	; 189
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	9f 83       	std	Y+7, r25	; 0x07
    11be:	88 87       	std	Y+8, r24	; 0x08
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 87       	std	Y+9, r24	; 0x09
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    11c8:	fe 01       	movw	r30, r28
    11ca:	ed 5b       	subi	r30, 0xBD	; 189
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	01 90       	ld	r0, Z+
    11d0:	f0 81       	ld	r31, Z
    11d2:	e0 2d       	mov	r30, r0
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	fe 01       	movw	r30, r28
    11d8:	ed 5b       	subi	r30, 0xBD	; 189
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	84 81       	ldd	r24, Z+4	; 0x04
    11e4:	9b 87       	std	Y+11, r25	; 0x0b
    11e6:	8c 87       	std	Y+12, r24	; 0x0c
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	8d 87       	std	Y+13, r24	; 0x0d
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    11f0:	fe 01       	movw	r30, r28
    11f2:	ed 5b       	subi	r30, 0xBD	; 189
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	01 90       	ld	r0, Z+
    11f8:	f0 81       	ld	r31, Z
    11fa:	e0 2d       	mov	r30, r0
    11fc:	95 81       	ldd	r25, Z+5	; 0x05
    11fe:	fe 01       	movw	r30, r28
    1200:	ed 5b       	subi	r30, 0xBD	; 189
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	01 90       	ld	r0, Z+
    1206:	f0 81       	ld	r31, Z
    1208:	e0 2d       	mov	r30, r0
    120a:	86 81       	ldd	r24, Z+6	; 0x06
    120c:	9f 87       	std	Y+15, r25	; 0x0f
    120e:	88 8b       	std	Y+16, r24	; 0x10
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 8b       	std	Y+17, r24	; 0x11
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    1218:	fe 01       	movw	r30, r28
    121a:	ed 5b       	subi	r30, 0xBD	; 189
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	01 90       	ld	r0, Z+
    1220:	f0 81       	ld	r31, Z
    1222:	e0 2d       	mov	r30, r0
    1224:	97 81       	ldd	r25, Z+7	; 0x07
    1226:	fe 01       	movw	r30, r28
    1228:	ed 5b       	subi	r30, 0xBD	; 189
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	01 90       	ld	r0, Z+
    122e:	f0 81       	ld	r31, Z
    1230:	e0 2d       	mov	r30, r0
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	9b 8b       	std	Y+19, r25	; 0x13
    1236:	8c 8b       	std	Y+20, r24	; 0x14
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8d 8b       	std	Y+21, r24	; 0x15
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1240:	fe 01       	movw	r30, r28
    1242:	ed 5b       	subi	r30, 0xBD	; 189
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	01 90       	ld	r0, Z+
    1248:	f0 81       	ld	r31, Z
    124a:	e0 2d       	mov	r30, r0
    124c:	91 85       	ldd	r25, Z+9	; 0x09
    124e:	fe 01       	movw	r30, r28
    1250:	ed 5b       	subi	r30, 0xBD	; 189
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	01 90       	ld	r0, Z+
    1256:	f0 81       	ld	r31, Z
    1258:	e0 2d       	mov	r30, r0
    125a:	82 85       	ldd	r24, Z+10	; 0x0a
    125c:	9f 8b       	std	Y+23, r25	; 0x17
    125e:	88 8f       	std	Y+24, r24	; 0x18
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 8f       	std	Y+25, r24	; 0x19
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    1268:	fe 01       	movw	r30, r28
    126a:	ed 5b       	subi	r30, 0xBD	; 189
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	01 90       	ld	r0, Z+
    1270:	f0 81       	ld	r31, Z
    1272:	e0 2d       	mov	r30, r0
    1274:	93 85       	ldd	r25, Z+11	; 0x0b
    1276:	fe 01       	movw	r30, r28
    1278:	ed 5b       	subi	r30, 0xBD	; 189
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	01 90       	ld	r0, Z+
    127e:	f0 81       	ld	r31, Z
    1280:	e0 2d       	mov	r30, r0
    1282:	84 85       	ldd	r24, Z+12	; 0x0c
    1284:	9b 8f       	std	Y+27, r25	; 0x1b
    1286:	8c 8f       	std	Y+28, r24	; 0x1c
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8d 8f       	std	Y+29, r24	; 0x1d
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	8e 8f       	std	Y+30, r24	; 0x1e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1290:	fe 01       	movw	r30, r28
    1292:	ed 5b       	subi	r30, 0xBD	; 189
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	01 90       	ld	r0, Z+
    1298:	f0 81       	ld	r31, Z
    129a:	e0 2d       	mov	r30, r0
    129c:	95 85       	ldd	r25, Z+13	; 0x0d
    129e:	fe 01       	movw	r30, r28
    12a0:	ed 5b       	subi	r30, 0xBD	; 189
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	01 90       	ld	r0, Z+
    12a6:	f0 81       	ld	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	86 85       	ldd	r24, Z+14	; 0x0e
    12ac:	9f 8f       	std	Y+31, r25	; 0x1f
    12ae:	88 a3       	std	Y+32, r24	; 0x20
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	8a a3       	std	Y+34, r24	; 0x22

      gpioRet = GPIO_initPin(&pinCom);
    12b8:	ce 01       	movw	r24, r28
    12ba:	03 96       	adiw	r24, 0x03	; 3
    12bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    12c0:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	88 23       	and	r24, r24
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <SSD_int+0x1a6>
        gpioRet = GPIO_initPin(&pinA);
    12c8:	ce 01       	movw	r24, r28
    12ca:	07 96       	adiw	r24, 0x07	; 7
    12cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    12d0:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 23       	and	r24, r24
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <SSD_int+0x1b4>
        GPIO_initPin(&pinB);
    12d8:	ce 01       	movw	r24, r28
    12da:	0b 96       	adiw	r24, 0x0b	; 11
    12dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	21 f4       	brne	.+8      	; 0x12ee <SSD_int+0x1c2>
        GPIO_initPin(&pinC);
    12e6:	ce 01       	movw	r24, r28
    12e8:	0f 96       	adiw	r24, 0x0f	; 15
    12ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	88 23       	and	r24, r24
    12f2:	21 f4       	brne	.+8      	; 0x12fc <SSD_int+0x1d0>
        GPIO_initPin(&pinD);
    12f4:	ce 01       	movw	r24, r28
    12f6:	43 96       	adiw	r24, 0x13	; 19
    12f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	88 23       	and	r24, r24
    1300:	21 f4       	brne	.+8      	; 0x130a <SSD_int+0x1de>
        GPIO_initPin(&pinE);
    1302:	ce 01       	movw	r24, r28
    1304:	47 96       	adiw	r24, 0x17	; 23
    1306:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	88 23       	and	r24, r24
    130e:	21 f4       	brne	.+8      	; 0x1318 <SSD_int+0x1ec>
        GPIO_initPin(&pinF);
    1310:	ce 01       	movw	r24, r28
    1312:	4b 96       	adiw	r24, 0x1b	; 27
    1314:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	88 23       	and	r24, r24
    131c:	21 f4       	brne	.+8      	; 0x1326 <SSD_int+0x1fa>
        GPIO_initPin(&pinG);
    131e:	ce 01       	movw	r24, r28
    1320:	4f 96       	adiw	r24, 0x1f	; 31
    1322:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	88 23       	and	r24, r24
    132a:	11 f4       	brne	.+4      	; 0x1330 <SSD_int+0x204>
        ssdRet = SSD_OK;
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	ee c0       	rjmp	.+476    	; 0x150c <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8a 83       	std	Y+2, r24	; 0x02
    1334:	eb c0       	rjmp	.+470    	; 0x150c <SSD_int+0x3e0>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1336:	fe 01       	movw	r30, r28
    1338:	ed 5b       	subi	r30, 0xBD	; 189
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	01 90       	ld	r0, Z+
    133e:	f0 81       	ld	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	80 81       	ld	r24, Z
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <SSD_int+0x21e>
    1348:	e1 c0       	rjmp	.+450    	; 0x150c <SSD_int+0x3e0>
      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    134a:	fe 01       	movw	r30, r28
    134c:	ed 5b       	subi	r30, 0xBD	; 189
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	01 90       	ld	r0, Z+
    1352:	f0 81       	ld	r31, Z
    1354:	e0 2d       	mov	r30, r0
    1356:	97 85       	ldd	r25, Z+15	; 0x0f
    1358:	fe 01       	movw	r30, r28
    135a:	ed 5b       	subi	r30, 0xBD	; 189
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	01 90       	ld	r0, Z+
    1360:	f0 81       	ld	r31, Z
    1362:	e0 2d       	mov	r30, r0
    1364:	80 89       	ldd	r24, Z+16	; 0x10
    1366:	9b a3       	std	Y+35, r25	; 0x23
    1368:	8c a3       	std	Y+36, r24	; 0x24
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8d a3       	std	Y+37, r24	; 0x25
    136e:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1370:	fe 01       	movw	r30, r28
    1372:	ed 5b       	subi	r30, 0xBD	; 189
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	01 90       	ld	r0, Z+
    1378:	f0 81       	ld	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	fe 01       	movw	r30, r28
    1380:	ed 5b       	subi	r30, 0xBD	; 189
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	9f a3       	std	Y+39, r25	; 0x27
    138e:	88 a7       	std	Y+40, r24	; 0x28
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 a7       	std	Y+41, r24	; 0x29
    1394:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1396:	fe 01       	movw	r30, r28
    1398:	ed 5b       	subi	r30, 0xBD	; 189
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	01 90       	ld	r0, Z+
    139e:	f0 81       	ld	r31, Z
    13a0:	e0 2d       	mov	r30, r0
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	fe 01       	movw	r30, r28
    13a6:	ed 5b       	subi	r30, 0xBD	; 189
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	9b a7       	std	Y+43, r25	; 0x2b
    13b4:	8c a7       	std	Y+44, r24	; 0x2c
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	8d a7       	std	Y+45, r24	; 0x2d
    13ba:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    13bc:	fe 01       	movw	r30, r28
    13be:	ed 5b       	subi	r30, 0xBD	; 189
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	01 90       	ld	r0, Z+
    13c4:	f0 81       	ld	r31, Z
    13c6:	e0 2d       	mov	r30, r0
    13c8:	95 81       	ldd	r25, Z+5	; 0x05
    13ca:	fe 01       	movw	r30, r28
    13cc:	ed 5b       	subi	r30, 0xBD	; 189
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	01 90       	ld	r0, Z+
    13d2:	f0 81       	ld	r31, Z
    13d4:	e0 2d       	mov	r30, r0
    13d6:	86 81       	ldd	r24, Z+6	; 0x06
    13d8:	9f a7       	std	Y+47, r25	; 0x2f
    13da:	88 ab       	std	Y+48, r24	; 0x30
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	89 ab       	std	Y+49, r24	; 0x31
    13e0:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    13e2:	fe 01       	movw	r30, r28
    13e4:	ed 5b       	subi	r30, 0xBD	; 189
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	01 90       	ld	r0, Z+
    13ea:	f0 81       	ld	r31, Z
    13ec:	e0 2d       	mov	r30, r0
    13ee:	97 81       	ldd	r25, Z+7	; 0x07
    13f0:	fe 01       	movw	r30, r28
    13f2:	ed 5b       	subi	r30, 0xBD	; 189
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	01 90       	ld	r0, Z+
    13f8:	f0 81       	ld	r31, Z
    13fa:	e0 2d       	mov	r30, r0
    13fc:	80 85       	ldd	r24, Z+8	; 0x08
    13fe:	9b ab       	std	Y+51, r25	; 0x33
    1400:	8c ab       	std	Y+52, r24	; 0x34
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	8d ab       	std	Y+53, r24	; 0x35
    1406:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    1408:	fe 01       	movw	r30, r28
    140a:	ed 5b       	subi	r30, 0xBD	; 189
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	01 90       	ld	r0, Z+
    1410:	f0 81       	ld	r31, Z
    1412:	e0 2d       	mov	r30, r0
    1414:	91 85       	ldd	r25, Z+9	; 0x09
    1416:	fe 01       	movw	r30, r28
    1418:	ed 5b       	subi	r30, 0xBD	; 189
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	01 90       	ld	r0, Z+
    141e:	f0 81       	ld	r31, Z
    1420:	e0 2d       	mov	r30, r0
    1422:	82 85       	ldd	r24, Z+10	; 0x0a
    1424:	9f ab       	std	Y+55, r25	; 0x37
    1426:	88 af       	std	Y+56, r24	; 0x38
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 af       	std	Y+57, r24	; 0x39
    142c:	1a ae       	std	Y+58, r1	; 0x3a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    142e:	fe 01       	movw	r30, r28
    1430:	ed 5b       	subi	r30, 0xBD	; 189
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	01 90       	ld	r0, Z+
    1436:	f0 81       	ld	r31, Z
    1438:	e0 2d       	mov	r30, r0
    143a:	93 85       	ldd	r25, Z+11	; 0x0b
    143c:	fe 01       	movw	r30, r28
    143e:	ed 5b       	subi	r30, 0xBD	; 189
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	01 90       	ld	r0, Z+
    1444:	f0 81       	ld	r31, Z
    1446:	e0 2d       	mov	r30, r0
    1448:	84 85       	ldd	r24, Z+12	; 0x0c
    144a:	9b af       	std	Y+59, r25	; 0x3b
    144c:	8c af       	std	Y+60, r24	; 0x3c
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	8d af       	std	Y+61, r24	; 0x3d
    1452:	1e ae       	std	Y+62, r1	; 0x3e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    1454:	fe 01       	movw	r30, r28
    1456:	ed 5b       	subi	r30, 0xBD	; 189
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	01 90       	ld	r0, Z+
    145c:	f0 81       	ld	r31, Z
    145e:	e0 2d       	mov	r30, r0
    1460:	85 85       	ldd	r24, Z+13	; 0x0d
    1462:	fe 01       	movw	r30, r28
    1464:	ed 5b       	subi	r30, 0xBD	; 189
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	01 90       	ld	r0, Z+
    146a:	f0 81       	ld	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	96 85       	ldd	r25, Z+14	; 0x0e
    1470:	fe 01       	movw	r30, r28
    1472:	ff 96       	adiw	r30, 0x3f	; 63
    1474:	80 83       	st	Z, r24
    1476:	fe 01       	movw	r30, r28
    1478:	ff 96       	adiw	r30, 0x3f	; 63
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	fe 01       	movw	r30, r28
    147e:	ff 96       	adiw	r30, 0x3f	; 63
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	82 83       	std	Z+2, r24	; 0x02
    1484:	fe 01       	movw	r30, r28
    1486:	ff 96       	adiw	r30, 0x3f	; 63
    1488:	13 82       	std	Z+3, r1	; 0x03

      gpioRet = GPIO_initPin(&pinCom);
    148a:	ce 01       	movw	r24, r28
    148c:	83 96       	adiw	r24, 0x23	; 35
    148e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1492:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 23       	and	r24, r24
    1498:	29 f4       	brne	.+10     	; 0x14a4 <SSD_int+0x378>
        gpioRet = GPIO_initPin(&pinA);
    149a:	ce 01       	movw	r24, r28
    149c:	87 96       	adiw	r24, 0x27	; 39
    149e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    14a2:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	88 23       	and	r24, r24
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <SSD_int+0x386>
        GPIO_initPin(&pinB);
    14aa:	ce 01       	movw	r24, r28
    14ac:	8b 96       	adiw	r24, 0x2b	; 43
    14ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 23       	and	r24, r24
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <SSD_int+0x394>
        GPIO_initPin(&pinC);
    14b8:	ce 01       	movw	r24, r28
    14ba:	8f 96       	adiw	r24, 0x2f	; 47
    14bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 23       	and	r24, r24
    14c4:	21 f4       	brne	.+8      	; 0x14ce <SSD_int+0x3a2>
        GPIO_initPin(&pinD);
    14c6:	ce 01       	movw	r24, r28
    14c8:	c3 96       	adiw	r24, 0x33	; 51
    14ca:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	88 23       	and	r24, r24
    14d2:	21 f4       	brne	.+8      	; 0x14dc <SSD_int+0x3b0>
        GPIO_initPin(&pinE);
    14d4:	ce 01       	movw	r24, r28
    14d6:	c7 96       	adiw	r24, 0x37	; 55
    14d8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	88 23       	and	r24, r24
    14e0:	21 f4       	brne	.+8      	; 0x14ea <SSD_int+0x3be>
        GPIO_initPin(&pinF);
    14e2:	ce 01       	movw	r24, r28
    14e4:	cb 96       	adiw	r24, 0x3b	; 59
    14e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	88 23       	and	r24, r24
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <SSD_int+0x3cc>
        GPIO_initPin(&pinG);
    14f0:	ce 01       	movw	r24, r28
    14f2:	cf 96       	adiw	r24, 0x3f	; 63
    14f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	88 23       	and	r24, r24
    14fc:	11 f4       	brne	.+4      	; 0x1502 <SSD_int+0x3d6>
        ssdRet = SSD_OK;
    14fe:	1a 82       	std	Y+2, r1	; 0x02
    1500:	05 c0       	rjmp	.+10     	; 0x150c <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	02 c0       	rjmp	.+4      	; 0x150c <SSD_int+0x3e0>
      }
    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    150e:	cc 5b       	subi	r28, 0xBC	; 188
    1510:	df 4f       	sbci	r29, 0xFF	; 255
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <SSD_setNumberOnSsd>:

EN_SSD_systemState_t
SSD_setNumberOnSsd(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce,
                   EN_SSD_numbers_t valueOfNumber) {
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	ed 97       	sbiw	r28, 0x3d	; 61
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	9c af       	std	Y+60, r25	; 0x3c
    1538:	8b af       	std	Y+59, r24	; 0x3b
    153a:	6d af       	std	Y+61, r22	; 0x3d
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1544:	8b ad       	ldd	r24, Y+59	; 0x3b
    1546:	9c ad       	ldd	r25, Y+60	; 0x3c
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	09 f4       	brne	.+2      	; 0x154e <SSD_setNumberOnSsd+0x2c>
    154c:	15 c2       	rjmp	.+1066   	; 0x1978 <SSD_setNumberOnSsd+0x456>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    154e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1550:	fc ad       	ldd	r31, Y+60	; 0x3c
    1552:	80 81       	ld	r24, Z
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	09 f0       	breq	.+2      	; 0x155a <SSD_setNumberOnSsd+0x38>
    1558:	08 c1       	rjmp	.+528    	; 0x176a <SSD_setNumberOnSsd+0x248>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    155a:	eb ad       	ldd	r30, Y+59	; 0x3b
    155c:	fc ad       	ldd	r31, Y+60	; 0x3c
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	eb ad       	ldd	r30, Y+59	; 0x3b
    1562:	fc ad       	ldd	r31, Y+60	; 0x3c
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	9b 83       	std	Y+3, r25	; 0x03
    1568:	8c 83       	std	Y+4, r24	; 0x04
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    1572:	eb ad       	ldd	r30, Y+59	; 0x3b
    1574:	fc ad       	ldd	r31, Y+60	; 0x3c
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	eb ad       	ldd	r30, Y+59	; 0x3b
    157a:	fc ad       	ldd	r31, Y+60	; 0x3c
    157c:	84 81       	ldd	r24, Z+4	; 0x04
    157e:	9f 83       	std	Y+7, r25	; 0x07
    1580:	88 87       	std	Y+8, r24	; 0x08
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 87       	std	Y+9, r24	; 0x09
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    158a:	eb ad       	ldd	r30, Y+59	; 0x3b
    158c:	fc ad       	ldd	r31, Y+60	; 0x3c
    158e:	95 81       	ldd	r25, Z+5	; 0x05
    1590:	eb ad       	ldd	r30, Y+59	; 0x3b
    1592:	fc ad       	ldd	r31, Y+60	; 0x3c
    1594:	86 81       	ldd	r24, Z+6	; 0x06
    1596:	9b 87       	std	Y+11, r25	; 0x0b
    1598:	8c 87       	std	Y+12, r24	; 0x0c
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	8d 87       	std	Y+13, r24	; 0x0d
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    15a2:	eb ad       	ldd	r30, Y+59	; 0x3b
    15a4:	fc ad       	ldd	r31, Y+60	; 0x3c
    15a6:	97 81       	ldd	r25, Z+7	; 0x07
    15a8:	eb ad       	ldd	r30, Y+59	; 0x3b
    15aa:	fc ad       	ldd	r31, Y+60	; 0x3c
    15ac:	80 85       	ldd	r24, Z+8	; 0x08
    15ae:	9f 87       	std	Y+15, r25	; 0x0f
    15b0:	88 8b       	std	Y+16, r24	; 0x10
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 8b       	std	Y+17, r24	; 0x11
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    15ba:	eb ad       	ldd	r30, Y+59	; 0x3b
    15bc:	fc ad       	ldd	r31, Y+60	; 0x3c
    15be:	91 85       	ldd	r25, Z+9	; 0x09
    15c0:	eb ad       	ldd	r30, Y+59	; 0x3b
    15c2:	fc ad       	ldd	r31, Y+60	; 0x3c
    15c4:	82 85       	ldd	r24, Z+10	; 0x0a
    15c6:	9b 8b       	std	Y+19, r25	; 0x13
    15c8:	8c 8b       	std	Y+20, r24	; 0x14
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	8d 8b       	std	Y+21, r24	; 0x15
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    15d2:	eb ad       	ldd	r30, Y+59	; 0x3b
    15d4:	fc ad       	ldd	r31, Y+60	; 0x3c
    15d6:	93 85       	ldd	r25, Z+11	; 0x0b
    15d8:	eb ad       	ldd	r30, Y+59	; 0x3b
    15da:	fc ad       	ldd	r31, Y+60	; 0x3c
    15dc:	84 85       	ldd	r24, Z+12	; 0x0c
    15de:	9f 8b       	std	Y+23, r25	; 0x17
    15e0:	88 8f       	std	Y+24, r24	; 0x18
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 8f       	std	Y+25, r24	; 0x19
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    15ea:	eb ad       	ldd	r30, Y+59	; 0x3b
    15ec:	fc ad       	ldd	r31, Y+60	; 0x3c
    15ee:	95 85       	ldd	r25, Z+13	; 0x0d
    15f0:	eb ad       	ldd	r30, Y+59	; 0x3b
    15f2:	fc ad       	ldd	r31, Y+60	; 0x3c
    15f4:	86 85       	ldd	r24, Z+14	; 0x0e
    15f6:	9b 8f       	std	Y+27, r25	; 0x1b
    15f8:	8c 8f       	std	Y+28, r24	; 0x1c
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	8d 8f       	std	Y+29, r24	; 0x1d
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8e 8f       	std	Y+30, r24	; 0x1e

      gpioRet =
    1602:	8d ad       	ldd	r24, Y+61	; 0x3d
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	c9 01       	movw	r24, r18
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	82 1b       	sub	r24, r18
    1618:	93 0b       	sbc	r25, r19
    161a:	fc 01       	movw	r30, r24
    161c:	ea 53       	subi	r30, 0x3A	; 58
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	20 81       	ld	r18, Z
    1622:	ce 01       	movw	r24, r28
    1624:	03 96       	adiw	r24, 0x03	; 3
    1626:	62 2f       	mov	r22, r18
    1628:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    162c:	89 83       	std	Y+1, r24	; 0x01
          GPIO_writePinLogic(&pinA, arrOfNumbersForAnodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 23       	and	r24, r24
    1632:	b1 f4       	brne	.+44     	; 0x1660 <SSD_setNumberOnSsd+0x13e>
        gpioRet = GPIO_writePinLogic(&pinB,
    1634:	8d ad       	ldd	r24, Y+61	; 0x3d
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	c9 01       	movw	r24, r18
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	82 1b       	sub	r24, r18
    164a:	93 0b       	sbc	r25, r19
    164c:	fc 01       	movw	r30, r24
    164e:	e9 53       	subi	r30, 0x39	; 57
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	20 81       	ld	r18, Z
    1654:	ce 01       	movw	r24, r28
    1656:	07 96       	adiw	r24, 0x07	; 7
    1658:	62 2f       	mov	r22, r18
    165a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    165e:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 23       	and	r24, r24
    1664:	b1 f4       	brne	.+44     	; 0x1692 <SSD_setNumberOnSsd+0x170>
        gpioRet = GPIO_writePinLogic(&pinC,
    1666:	8d ad       	ldd	r24, Y+61	; 0x3d
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	c9 01       	movw	r24, r18
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	82 1b       	sub	r24, r18
    167c:	93 0b       	sbc	r25, r19
    167e:	fc 01       	movw	r30, r24
    1680:	e8 53       	subi	r30, 0x38	; 56
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	20 81       	ld	r18, Z
    1686:	ce 01       	movw	r24, r28
    1688:	0b 96       	adiw	r24, 0x0b	; 11
    168a:	62 2f       	mov	r22, r18
    168c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1690:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 23       	and	r24, r24
    1696:	b1 f4       	brne	.+44     	; 0x16c4 <SSD_setNumberOnSsd+0x1a2>
        gpioRet = GPIO_writePinLogic(&pinD,
    1698:	8d ad       	ldd	r24, Y+61	; 0x3d
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	c9 01       	movw	r24, r18
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	82 1b       	sub	r24, r18
    16ae:	93 0b       	sbc	r25, r19
    16b0:	fc 01       	movw	r30, r24
    16b2:	e7 53       	subi	r30, 0x37	; 55
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	20 81       	ld	r18, Z
    16b8:	ce 01       	movw	r24, r28
    16ba:	0f 96       	adiw	r24, 0x0f	; 15
    16bc:	62 2f       	mov	r22, r18
    16be:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    16c2:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	88 23       	and	r24, r24
    16c8:	b1 f4       	brne	.+44     	; 0x16f6 <SSD_setNumberOnSsd+0x1d4>
        gpioRet = GPIO_writePinLogic(&pinE,
    16ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	c9 01       	movw	r24, r18
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 1b       	sub	r24, r18
    16e0:	93 0b       	sbc	r25, r19
    16e2:	fc 01       	movw	r30, r24
    16e4:	e6 53       	subi	r30, 0x36	; 54
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	20 81       	ld	r18, Z
    16ea:	ce 01       	movw	r24, r28
    16ec:	43 96       	adiw	r24, 0x13	; 19
    16ee:	62 2f       	mov	r22, r18
    16f0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    16f4:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	88 23       	and	r24, r24
    16fa:	b1 f4       	brne	.+44     	; 0x1728 <SSD_setNumberOnSsd+0x206>
        gpioRet = GPIO_writePinLogic(&pinF,
    16fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	c9 01       	movw	r24, r18
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	82 1b       	sub	r24, r18
    1712:	93 0b       	sbc	r25, r19
    1714:	fc 01       	movw	r30, r24
    1716:	e5 53       	subi	r30, 0x35	; 53
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	20 81       	ld	r18, Z
    171c:	ce 01       	movw	r24, r28
    171e:	47 96       	adiw	r24, 0x17	; 23
    1720:	62 2f       	mov	r22, r18
    1722:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1726:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	88 23       	and	r24, r24
    172c:	b1 f4       	brne	.+44     	; 0x175a <SSD_setNumberOnSsd+0x238>
        gpioRet = GPIO_writePinLogic(&pinG,
    172e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	c9 01       	movw	r24, r18
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	82 1b       	sub	r24, r18
    1744:	93 0b       	sbc	r25, r19
    1746:	fc 01       	movw	r30, r24
    1748:	e4 53       	subi	r30, 0x34	; 52
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	20 81       	ld	r18, Z
    174e:	ce 01       	movw	r24, r28
    1750:	4b 96       	adiw	r24, 0x1b	; 27
    1752:	62 2f       	mov	r22, r18
    1754:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1758:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 23       	and	r24, r24
    175e:	11 f4       	brne	.+4      	; 0x1764 <SSD_setNumberOnSsd+0x242>
        ssdRet = SSD_OK;
    1760:	1a 82       	std	Y+2, r1	; 0x02
    1762:	0c c1       	rjmp	.+536    	; 0x197c <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	8a 83       	std	Y+2, r24	; 0x02
    1768:	09 c1       	rjmp	.+530    	; 0x197c <SSD_setNumberOnSsd+0x45a>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    176a:	eb ad       	ldd	r30, Y+59	; 0x3b
    176c:	fc ad       	ldd	r31, Y+60	; 0x3c
    176e:	80 81       	ld	r24, Z
    1770:	88 23       	and	r24, r24
    1772:	09 f0       	breq	.+2      	; 0x1776 <SSD_setNumberOnSsd+0x254>
    1774:	03 c1       	rjmp	.+518    	; 0x197c <SSD_setNumberOnSsd+0x45a>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    1776:	eb ad       	ldd	r30, Y+59	; 0x3b
    1778:	fc ad       	ldd	r31, Y+60	; 0x3c
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	eb ad       	ldd	r30, Y+59	; 0x3b
    177e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	9f 8f       	std	Y+31, r25	; 0x1f
    1784:	88 a3       	std	Y+32, r24	; 0x20
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 a3       	std	Y+33, r24	; 0x21
    178a:	1a a2       	std	Y+34, r1	; 0x22

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    178c:	eb ad       	ldd	r30, Y+59	; 0x3b
    178e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	eb ad       	ldd	r30, Y+59	; 0x3b
    1794:	fc ad       	ldd	r31, Y+60	; 0x3c
    1796:	84 81       	ldd	r24, Z+4	; 0x04
    1798:	9b a3       	std	Y+35, r25	; 0x23
    179a:	8c a3       	std	Y+36, r24	; 0x24
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	8d a3       	std	Y+37, r24	; 0x25
    17a0:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    17a2:	eb ad       	ldd	r30, Y+59	; 0x3b
    17a4:	fc ad       	ldd	r31, Y+60	; 0x3c
    17a6:	95 81       	ldd	r25, Z+5	; 0x05
    17a8:	eb ad       	ldd	r30, Y+59	; 0x3b
    17aa:	fc ad       	ldd	r31, Y+60	; 0x3c
    17ac:	86 81       	ldd	r24, Z+6	; 0x06
    17ae:	9f a3       	std	Y+39, r25	; 0x27
    17b0:	88 a7       	std	Y+40, r24	; 0x28
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 a7       	std	Y+41, r24	; 0x29
    17b6:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    17b8:	eb ad       	ldd	r30, Y+59	; 0x3b
    17ba:	fc ad       	ldd	r31, Y+60	; 0x3c
    17bc:	97 81       	ldd	r25, Z+7	; 0x07
    17be:	eb ad       	ldd	r30, Y+59	; 0x3b
    17c0:	fc ad       	ldd	r31, Y+60	; 0x3c
    17c2:	80 85       	ldd	r24, Z+8	; 0x08
    17c4:	9b a7       	std	Y+43, r25	; 0x2b
    17c6:	8c a7       	std	Y+44, r24	; 0x2c
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	8d a7       	std	Y+45, r24	; 0x2d
    17cc:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    17ce:	eb ad       	ldd	r30, Y+59	; 0x3b
    17d0:	fc ad       	ldd	r31, Y+60	; 0x3c
    17d2:	91 85       	ldd	r25, Z+9	; 0x09
    17d4:	eb ad       	ldd	r30, Y+59	; 0x3b
    17d6:	fc ad       	ldd	r31, Y+60	; 0x3c
    17d8:	82 85       	ldd	r24, Z+10	; 0x0a
    17da:	9f a7       	std	Y+47, r25	; 0x2f
    17dc:	88 ab       	std	Y+48, r24	; 0x30
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	89 ab       	std	Y+49, r24	; 0x31
    17e2:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    17e4:	eb ad       	ldd	r30, Y+59	; 0x3b
    17e6:	fc ad       	ldd	r31, Y+60	; 0x3c
    17e8:	93 85       	ldd	r25, Z+11	; 0x0b
    17ea:	eb ad       	ldd	r30, Y+59	; 0x3b
    17ec:	fc ad       	ldd	r31, Y+60	; 0x3c
    17ee:	84 85       	ldd	r24, Z+12	; 0x0c
    17f0:	9b ab       	std	Y+51, r25	; 0x33
    17f2:	8c ab       	std	Y+52, r24	; 0x34
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8d ab       	std	Y+53, r24	; 0x35
    17f8:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    17fa:	eb ad       	ldd	r30, Y+59	; 0x3b
    17fc:	fc ad       	ldd	r31, Y+60	; 0x3c
    17fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1800:	eb ad       	ldd	r30, Y+59	; 0x3b
    1802:	fc ad       	ldd	r31, Y+60	; 0x3c
    1804:	86 85       	ldd	r24, Z+14	; 0x0e
    1806:	9f ab       	std	Y+55, r25	; 0x37
    1808:	88 af       	std	Y+56, r24	; 0x38
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 af       	std	Y+57, r24	; 0x39
    180e:	1a ae       	std	Y+58, r1	; 0x3a

      gpioRet = GPIO_writePinLogic(&pinA,
    1810:	8d ad       	ldd	r24, Y+61	; 0x3d
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	c9 01       	movw	r24, r18
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	82 1b       	sub	r24, r18
    1826:	93 0b       	sbc	r25, r19
    1828:	fc 01       	movw	r30, r24
    182a:	e0 58       	subi	r30, 0x80	; 128
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	20 81       	ld	r18, Z
    1830:	ce 01       	movw	r24, r28
    1832:	4f 96       	adiw	r24, 0x1f	; 31
    1834:	62 2f       	mov	r22, r18
    1836:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    183a:	89 83       	std	Y+1, r24	; 0x01
                                   arrOfNumbersForCathodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 23       	and	r24, r24
    1840:	b1 f4       	brne	.+44     	; 0x186e <SSD_setNumberOnSsd+0x34c>
        gpioRet = GPIO_writePinLogic(
    1842:	8d ad       	ldd	r24, Y+61	; 0x3d
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	c9 01       	movw	r24, r18
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	82 1b       	sub	r24, r18
    1858:	93 0b       	sbc	r25, r19
    185a:	fc 01       	movw	r30, r24
    185c:	ef 57       	subi	r30, 0x7F	; 127
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	20 81       	ld	r18, Z
    1862:	ce 01       	movw	r24, r28
    1864:	83 96       	adiw	r24, 0x23	; 35
    1866:	62 2f       	mov	r22, r18
    1868:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    186c:	89 83       	std	Y+1, r24	; 0x01
            &pinB, arrOfNumbersForCathodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	88 23       	and	r24, r24
    1872:	b1 f4       	brne	.+44     	; 0x18a0 <SSD_setNumberOnSsd+0x37e>
        gpioRet = GPIO_writePinLogic(
    1874:	8d ad       	ldd	r24, Y+61	; 0x3d
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	c9 01       	movw	r24, r18
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 1b       	sub	r24, r18
    188a:	93 0b       	sbc	r25, r19
    188c:	fc 01       	movw	r30, r24
    188e:	ee 57       	subi	r30, 0x7E	; 126
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	20 81       	ld	r18, Z
    1894:	ce 01       	movw	r24, r28
    1896:	87 96       	adiw	r24, 0x27	; 39
    1898:	62 2f       	mov	r22, r18
    189a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    189e:	89 83       	std	Y+1, r24	; 0x01
            &pinC, arrOfNumbersForCathodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	88 23       	and	r24, r24
    18a4:	b1 f4       	brne	.+44     	; 0x18d2 <SSD_setNumberOnSsd+0x3b0>
        gpioRet = GPIO_writePinLogic(
    18a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	c9 01       	movw	r24, r18
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	82 1b       	sub	r24, r18
    18bc:	93 0b       	sbc	r25, r19
    18be:	fc 01       	movw	r30, r24
    18c0:	ed 57       	subi	r30, 0x7D	; 125
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	20 81       	ld	r18, Z
    18c6:	ce 01       	movw	r24, r28
    18c8:	8b 96       	adiw	r24, 0x2b	; 43
    18ca:	62 2f       	mov	r22, r18
    18cc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    18d0:	89 83       	std	Y+1, r24	; 0x01
            &pinD, arrOfNumbersForCathodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	88 23       	and	r24, r24
    18d6:	b1 f4       	brne	.+44     	; 0x1904 <SSD_setNumberOnSsd+0x3e2>
        gpioRet = GPIO_writePinLogic(
    18d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	c9 01       	movw	r24, r18
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	82 1b       	sub	r24, r18
    18ee:	93 0b       	sbc	r25, r19
    18f0:	fc 01       	movw	r30, r24
    18f2:	ec 57       	subi	r30, 0x7C	; 124
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	20 81       	ld	r18, Z
    18f8:	ce 01       	movw	r24, r28
    18fa:	8f 96       	adiw	r24, 0x2f	; 47
    18fc:	62 2f       	mov	r22, r18
    18fe:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1902:	89 83       	std	Y+1, r24	; 0x01
            &pinE, arrOfNumbersForCathodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	88 23       	and	r24, r24
    1908:	b1 f4       	brne	.+44     	; 0x1936 <SSD_setNumberOnSsd+0x414>
        gpioRet = GPIO_writePinLogic(
    190a:	8d ad       	ldd	r24, Y+61	; 0x3d
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	c9 01       	movw	r24, r18
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	82 1b       	sub	r24, r18
    1920:	93 0b       	sbc	r25, r19
    1922:	fc 01       	movw	r30, r24
    1924:	eb 57       	subi	r30, 0x7B	; 123
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	20 81       	ld	r18, Z
    192a:	ce 01       	movw	r24, r28
    192c:	c3 96       	adiw	r24, 0x33	; 51
    192e:	62 2f       	mov	r22, r18
    1930:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1934:	89 83       	std	Y+1, r24	; 0x01
            &pinF, arrOfNumbersForCathodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	88 23       	and	r24, r24
    193a:	b1 f4       	brne	.+44     	; 0x1968 <SSD_setNumberOnSsd+0x446>
        gpioRet = GPIO_writePinLogic(
    193c:	8d ad       	ldd	r24, Y+61	; 0x3d
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	c9 01       	movw	r24, r18
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	82 1b       	sub	r24, r18
    1952:	93 0b       	sbc	r25, r19
    1954:	fc 01       	movw	r30, r24
    1956:	ea 57       	subi	r30, 0x7A	; 122
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	20 81       	ld	r18, Z
    195c:	ce 01       	movw	r24, r28
    195e:	c7 96       	adiw	r24, 0x37	; 55
    1960:	62 2f       	mov	r22, r18
    1962:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1966:	89 83       	std	Y+1, r24	; 0x01
            &pinG, arrOfNumbersForCathodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	88 23       	and	r24, r24
    196c:	11 f4       	brne	.+4      	; 0x1972 <SSD_setNumberOnSsd+0x450>
        ssdRet = SSD_OK;
    196e:	1a 82       	std	Y+2, r1	; 0x02
    1970:	05 c0       	rjmp	.+10     	; 0x197c <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	02 c0       	rjmp	.+4      	; 0x197c <SSD_setNumberOnSsd+0x45a>

    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	8a 83       	std	Y+2, r24	; 0x02
  }

  return ssdRet;
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    197e:	ed 96       	adiw	r28, 0x3d	; 61
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <SSD_enableDot>:

EN_SSD_systemState_t SSD_enableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	2c 97       	sbiw	r28, 0x0c	; 12
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	8b 87       	std	Y+11, r24	; 0x0b

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    19b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	d9 f1       	breq	.+118    	; 0x1a2e <SSD_enableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    19b8:	eb 85       	ldd	r30, Y+11	; 0x0b
    19ba:	fc 85       	ldd	r31, Y+12	; 0x0c
    19bc:	80 81       	ld	r24, Z
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	c9 f4       	brne	.+50     	; 0x19f4 <SSD_enableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    19c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    19c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    19c6:	91 89       	ldd	r25, Z+17	; 0x11
    19c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    19ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    19cc:	82 89       	ldd	r24, Z+18	; 0x12
    19ce:	9b 83       	std	Y+3, r25	; 0x03
    19d0:	8c 83       	std	Y+4, r24	; 0x04
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	8e 83       	std	Y+6, r24	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    19da:	ce 01       	movw	r24, r28
    19dc:	03 96       	adiw	r24, 0x03	; 3
    19de:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    19e2:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	88 23       	and	r24, r24
    19e8:	11 f4       	brne	.+4      	; 0x19ee <SSD_enableDot+0x5e>
        ssdRet = SSD_OK;
    19ea:	1a 82       	std	Y+2, r1	; 0x02
    19ec:	22 c0       	rjmp	.+68     	; 0x1a32 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	1f c0       	rjmp	.+62     	; 0x1a32 <SSD_enableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    19f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    19f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    19f8:	80 81       	ld	r24, Z
    19fa:	88 23       	and	r24, r24
    19fc:	d1 f4       	brne	.+52     	; 0x1a32 <SSD_enableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    19fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a00:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a02:	91 89       	ldd	r25, Z+17	; 0x11
    1a04:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a06:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a08:	82 89       	ldd	r24, Z+18	; 0x12
    1a0a:	9f 83       	std	Y+7, r25	; 0x07
    1a0c:	88 87       	std	Y+8, r24	; 0x08
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 87       	std	Y+9, r24	; 0x09
    1a12:	1a 86       	std	Y+10, r1	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    1a14:	ce 01       	movw	r24, r28
    1a16:	07 96       	adiw	r24, 0x07	; 7
    1a18:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1a1c:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	88 23       	and	r24, r24
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <SSD_enableDot+0x98>
        ssdRet = SSD_OK;
    1a24:	1a 82       	std	Y+2, r1	; 0x02
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <SSD_enableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a34:	2c 96       	adiw	r28, 0x0c	; 12
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <SSD_disableDot>:

EN_SSD_systemState_t SSD_disableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2c 97       	sbiw	r28, 0x0c	; 12
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	9c 87       	std	Y+12, r25	; 0x0c
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    1a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <SSD_disableDot+0x2a>
    1a6e:	40 c0       	rjmp	.+128    	; 0x1af0 <SSD_disableDot+0xaa>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    1a70:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a72:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a74:	80 81       	ld	r24, Z
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	c1 f4       	brne	.+48     	; 0x1aaa <SSD_disableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    1a7a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a7c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a7e:	91 89       	ldd	r25, Z+17	; 0x11
    1a80:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a82:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a84:	82 89       	ldd	r24, Z+18	; 0x12
    1a86:	9b 83       	std	Y+3, r25	; 0x03
    1a88:	8c 83       	std	Y+4, r24	; 0x04
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	1e 82       	std	Y+6, r1	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    1a90:	ce 01       	movw	r24, r28
    1a92:	03 96       	adiw	r24, 0x03	; 3
    1a94:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1a98:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	88 23       	and	r24, r24
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <SSD_disableDot+0x5e>
        ssdRet = SSD_OK;
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
    1aa2:	28 c0       	rjmp	.+80     	; 0x1af4 <SSD_disableDot+0xae>
      } else {
        ssdRet = SSD_NOK;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
    1aa8:	25 c0       	rjmp	.+74     	; 0x1af4 <SSD_disableDot+0xae>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    1aaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 23       	and	r24, r24
    1ab2:	01 f5       	brne	.+64     	; 0x1af4 <SSD_disableDot+0xae>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    1ab4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ab6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ab8:	91 89       	ldd	r25, Z+17	; 0x11
    1aba:	eb 85       	ldd	r30, Y+11	; 0x0b
    1abc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1abe:	82 89       	ldd	r24, Z+18	; 0x12
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	88 87       	std	Y+8, r24	; 0x08
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 87       	std	Y+9, r24	; 0x09
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	8a 87       	std	Y+10, r24	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    1acc:	ce 01       	movw	r24, r28
    1ace:	07 96       	adiw	r24, 0x07	; 7
    1ad0:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1ad4:	89 83       	std	Y+1, r24	; 0x01
      gpioRet = GPIO_initPin(&pinDot);
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	07 96       	adiw	r24, 0x07	; 7
    1ada:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1ade:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	88 23       	and	r24, r24
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <SSD_disableDot+0xa4>
        ssdRet = SSD_OK;
    1ae6:	1a 82       	std	Y+2, r1	; 0x02
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <SSD_disableDot+0xae>
      } else {
        ssdRet = SSD_NOK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <SSD_disableDot+0xae>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	2c 96       	adiw	r28, 0x0c	; 12
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	28 97       	sbiw	r28, 0x08	; 8
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	98 87       	std	Y+8, r25	; 0x08
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	d9 f0       	breq	.+54     	; 0x1b66 <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1b30:	ef 81       	ldd	r30, Y+7	; 0x07
    1b32:	f8 85       	ldd	r31, Y+8	; 0x08
    1b34:	81 81       	ldd	r24, Z+1	; 0x01
    1b36:	ef 81       	ldd	r30, Y+7	; 0x07
    1b38:	f8 85       	ldd	r31, Y+8	; 0x08
    1b3a:	92 81       	ldd	r25, Z+2	; 0x02
    1b3c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b3e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b40:	20 81       	ld	r18, Z
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	03 96       	adiw	r24, 0x03	; 3
    1b50:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_initPin>
    1b54:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	88 23       	and	r24, r24
    1b5a:	11 f4       	brne	.+4      	; 0x1b60 <LED_init+0x58>
      ledRet = LED_OK;
    1b5c:	1a 82       	std	Y+2, r1	; 0x02
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b6c:	28 96       	adiw	r28, 0x08	; 8
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	28 97       	sbiw	r28, 0x08	; 8
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	98 87       	std	Y+8, r25	; 0x08
    1b94:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	98 85       	ldd	r25, Y+8	; 0x08
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	e1 f0       	breq	.+56     	; 0x1bde <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1ba6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ba8:	f8 85       	ldd	r31, Y+8	; 0x08
    1baa:	81 81       	ldd	r24, Z+1	; 0x01
    1bac:	ef 81       	ldd	r30, Y+7	; 0x07
    1bae:	f8 85       	ldd	r31, Y+8	; 0x08
    1bb0:	92 81       	ldd	r25, Z+2	; 0x02
    1bb2:	ef 81       	ldd	r30, Y+7	; 0x07
    1bb4:	f8 85       	ldd	r31, Y+8	; 0x08
    1bb6:	20 81       	ld	r18, Z
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	03 96       	adiw	r24, 0x03	; 3
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	88 23       	and	r24, r24
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <LED_turnOn+0x5a>
      ledRet = LED_OK;
    1bd4:	1a 82       	std	Y+2, r1	; 0x02
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1be4:	28 96       	adiw	r28, 0x08	; 8
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	28 97       	sbiw	r28, 0x08	; 8
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1c16:	8f 81       	ldd	r24, Y+7	; 0x07
    1c18:	98 85       	ldd	r25, Y+8	; 0x08
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	e1 f0       	breq	.+56     	; 0x1c56 <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1c1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c20:	f8 85       	ldd	r31, Y+8	; 0x08
    1c22:	81 81       	ldd	r24, Z+1	; 0x01
    1c24:	ef 81       	ldd	r30, Y+7	; 0x07
    1c26:	f8 85       	ldd	r31, Y+8	; 0x08
    1c28:	92 81       	ldd	r25, Z+2	; 0x02
    1c2a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c2c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c2e:	20 81       	ld	r18, Z
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	9c 83       	std	Y+4, r25	; 0x04
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	03 96       	adiw	r24, 0x03	; 3
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GPIO_writePinLogic>
    1c44:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	88 23       	and	r24, r24
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <LED_turnOff+0x5a>
      ledRet = LED_OK;
    1c4c:	1a 82       	std	Y+2, r1	; 0x02
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	8a 83       	std	Y+2, r24	; 0x02
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c5c:	28 96       	adiw	r28, 0x08	; 8
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	28 97       	sbiw	r28, 0x08	; 8
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	98 87       	std	Y+8, r25	; 0x08
    1c84:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	d9 f0       	breq	.+54     	; 0x1ccc <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    1c96:	ef 81       	ldd	r30, Y+7	; 0x07
    1c98:	f8 85       	ldd	r31, Y+8	; 0x08
    1c9a:	81 81       	ldd	r24, Z+1	; 0x01
    1c9c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c9e:	f8 85       	ldd	r31, Y+8	; 0x08
    1ca0:	92 81       	ldd	r25, Z+2	; 0x02
    1ca2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ca4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ca6:	20 81       	ld	r18, Z
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	03 96       	adiw	r24, 0x03	; 3
    1cb6:	0e 94 10 07 	call	0xe20	; 0xe20 <GPIO_togglePinLogic>
    1cba:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	88 23       	and	r24, r24
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <LED_toggle+0x58>
      ledRet = LED_OK;
    1cc2:	1a 82       	std	Y+2, r1	; 0x02
    1cc4:	05 c0       	rjmp	.+10     	; 0x1cd0 <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 96       	adiw	r28, 0x08	; 8
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <vInitApp>:
                         .ssdPinDotPinNumber = GPIO_PIN6

};


void vInitApp(void) { SSD_int(&ssdAnode); }
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	8c e0       	ldi	r24, 0x0C	; 12
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 96 08 	call	0x112c	; 0x112c <SSD_int>
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <vMainApp>:

void vMainApp(void) {
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	cc 58       	subi	r28, 0x8C	; 140
    1d08:	d0 40       	sbci	r29, 0x00	; 0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
  SSD_setNumberOnSsd(&ssdAnode, SSD_ZERO);
    1d14:	8c e0       	ldi	r24, 0x0C	; 12
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 57       	subi	r30, 0x77	; 119
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	aa e7       	ldi	r26, 0x7A	; 122
    1d2a:	b4 e4       	ldi	r27, 0x44	; 68
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	a2 83       	std	Z+2, r26	; 0x02
    1d32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	8e 01       	movw	r16, r28
    1d36:	0b 57       	subi	r16, 0x7B	; 123
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e7 57       	subi	r30, 0x77	; 119
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a ef       	ldi	r20, 0xFA	; 250
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	f8 01       	movw	r30, r16
    1d5a:	80 83       	st	Z, r24
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	a2 83       	std	Z+2, r26	; 0x02
    1d60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d62:	fe 01       	movw	r30, r28
    1d64:	eb 57       	subi	r30, 0x7B	; 123
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	60 81       	ld	r22, Z
    1d6a:	71 81       	ldd	r23, Z+1	; 0x01
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	44 f4       	brge	.+16     	; 0x1d90 <vMainApp+0x96>
		__ticks = 1;
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 57       	subi	r30, 0x7D	; 125
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	64 c0       	rjmp	.+200    	; 0x1e58 <vMainApp+0x15e>
	else if (__tmp > 65535)
    1d90:	fe 01       	movw	r30, r28
    1d92:	eb 57       	subi	r30, 0x7B	; 123
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	0c f0       	brlt	.+2      	; 0x1db0 <vMainApp+0xb6>
    1dae:	43 c0       	rjmp	.+134    	; 0x1e36 <vMainApp+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 57       	subi	r30, 0x77	; 119
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	8e 01       	movw	r16, r28
    1dd0:	0d 57       	subi	r16, 0x7D	; 125
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	f8 01       	movw	r30, r16
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	80 83       	st	Z, r24
    1de6:	1f c0       	rjmp	.+62     	; 0x1e26 <vMainApp+0x12c>
    1de8:	fe 01       	movw	r30, r28
    1dea:	ef 57       	subi	r30, 0x7F	; 127
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df6:	fe 01       	movw	r30, r28
    1df8:	ef 57       	subi	r30, 0x7F	; 127
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <vMainApp+0x106>
    1e04:	fe 01       	movw	r30, r28
    1e06:	ef 57       	subi	r30, 0x7F	; 127
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	de 01       	movw	r26, r28
    1e10:	ad 57       	subi	r26, 0x7D	; 125
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	ed 57       	subi	r30, 0x7D	; 125
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	11 96       	adiw	r26, 0x01	; 1
    1e22:	9c 93       	st	X, r25
    1e24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	fe 01       	movw	r30, r28
    1e28:	ed 57       	subi	r30, 0x7D	; 125
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	d1 f6       	brne	.-76     	; 0x1de8 <vMainApp+0xee>
    1e34:	27 c0       	rjmp	.+78     	; 0x1e84 <vMainApp+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	8e 01       	movw	r16, r28
    1e38:	0d 57       	subi	r16, 0x7D	; 125
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	eb 57       	subi	r30, 0x7B	; 123
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	f8 01       	movw	r30, r16
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	de 01       	movw	r26, r28
    1e5a:	a1 58       	subi	r26, 0x81	; 129
    1e5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ed 57       	subi	r30, 0x7D	; 125
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	8d 93       	st	X+, r24
    1e6a:	9c 93       	st	X, r25
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e1 58       	subi	r30, 0x81	; 129
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <vMainApp+0x17c>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e1 58       	subi	r30, 0x81	; 129
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_ONE);
    1e84:	8c e0       	ldi	r24, 0x0C	; 12
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e5 58       	subi	r30, 0x85	; 133
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	aa e7       	ldi	r26, 0x7A	; 122
    1e9a:	b4 e4       	ldi	r27, 0x44	; 68
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	8e 01       	movw	r16, r28
    1ea6:	09 58       	subi	r16, 0x89	; 137
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e5 58       	subi	r30, 0x85	; 133
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 83       	st	Z, r24
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	a2 83       	std	Z+2, r26	; 0x02
    1ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e9 58       	subi	r30, 0x89	; 137
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	44 f4       	brge	.+16     	; 0x1f00 <vMainApp+0x206>
		__ticks = 1;
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	eb 58       	subi	r30, 0x8B	; 139
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    1efe:	64 c0       	rjmp	.+200    	; 0x1fc8 <vMainApp+0x2ce>
	else if (__tmp > 65535)
    1f00:	fe 01       	movw	r30, r28
    1f02:	e9 58       	subi	r30, 0x89	; 137
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <vMainApp+0x226>
    1f1e:	43 c0       	rjmp	.+134    	; 0x1fa6 <vMainApp+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	fe 01       	movw	r30, r28
    1f22:	e5 58       	subi	r30, 0x85	; 133
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8e 01       	movw	r16, r28
    1f40:	0b 58       	subi	r16, 0x8B	; 139
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
    1f56:	1f c0       	rjmp	.+62     	; 0x1f96 <vMainApp+0x29c>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ed 58       	subi	r30, 0x8D	; 141
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	88 ec       	ldi	r24, 0xC8	; 200
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	fe 01       	movw	r30, r28
    1f68:	ed 58       	subi	r30, 0x8D	; 141
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <vMainApp+0x276>
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 58       	subi	r30, 0x8D	; 141
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7e:	de 01       	movw	r26, r28
    1f80:	ab 58       	subi	r26, 0x8B	; 139
    1f82:	bf 4f       	sbci	r27, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	eb 58       	subi	r30, 0x8B	; 139
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	fe 01       	movw	r30, r28
    1f98:	eb 58       	subi	r30, 0x8B	; 139
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	d1 f6       	brne	.-76     	; 0x1f58 <vMainApp+0x25e>
    1fa4:	27 c0       	rjmp	.+78     	; 0x1ff4 <vMainApp+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0b 58       	subi	r16, 0x8B	; 139
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	e9 58       	subi	r30, 0x89	; 137
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	de 01       	movw	r26, r28
    1fca:	af 58       	subi	r26, 0x8F	; 143
    1fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	eb 58       	subi	r30, 0x8B	; 139
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	8d 93       	st	X+, r24
    1fda:	9c 93       	st	X, r25
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ef 58       	subi	r30, 0x8F	; 143
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <vMainApp+0x2ec>
    1fea:	fe 01       	movw	r30, r28
    1fec:	ef 58       	subi	r30, 0x8F	; 143
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_TWO);
    1ff4:	8c e0       	ldi	r24, 0x0C	; 12
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	62 e0       	ldi	r22, 0x02	; 2
    1ffa:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e3 59       	subi	r30, 0x93	; 147
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	aa e7       	ldi	r26, 0x7A	; 122
    200a:	b4 e4       	ldi	r27, 0x44	; 68
    200c:	80 83       	st	Z, r24
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	a2 83       	std	Z+2, r26	; 0x02
    2012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	8e 01       	movw	r16, r28
    2016:	07 59       	subi	r16, 0x97	; 151
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	fe 01       	movw	r30, r28
    201c:	e3 59       	subi	r30, 0x93	; 147
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	80 83       	st	Z, r24
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	a2 83       	std	Z+2, r26	; 0x02
    2040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2042:	fe 01       	movw	r30, r28
    2044:	e7 59       	subi	r30, 0x97	; 151
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	44 f4       	brge	.+16     	; 0x2070 <vMainApp+0x376>
		__ticks = 1;
    2060:	fe 01       	movw	r30, r28
    2062:	e9 59       	subi	r30, 0x99	; 153
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
    206e:	64 c0       	rjmp	.+200    	; 0x2138 <vMainApp+0x43e>
	else if (__tmp > 65535)
    2070:	fe 01       	movw	r30, r28
    2072:	e7 59       	subi	r30, 0x97	; 151
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	0c f0       	brlt	.+2      	; 0x2090 <vMainApp+0x396>
    208e:	43 c0       	rjmp	.+134    	; 0x2116 <vMainApp+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	fe 01       	movw	r30, r28
    2092:	e3 59       	subi	r30, 0x93	; 147
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8e 01       	movw	r16, r28
    20b0:	09 59       	subi	r16, 0x99	; 153
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	1f c0       	rjmp	.+62     	; 0x2106 <vMainApp+0x40c>
    20c8:	fe 01       	movw	r30, r28
    20ca:	eb 59       	subi	r30, 0x9B	; 155
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
    20d6:	fe 01       	movw	r30, r28
    20d8:	eb 59       	subi	r30, 0x9B	; 155
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <vMainApp+0x3e6>
    20e4:	fe 01       	movw	r30, r28
    20e6:	eb 59       	subi	r30, 0x9B	; 155
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	de 01       	movw	r26, r28
    20f0:	a9 59       	subi	r26, 0x99	; 153
    20f2:	bf 4f       	sbci	r27, 0xFF	; 255
    20f4:	fe 01       	movw	r30, r28
    20f6:	e9 59       	subi	r30, 0x99	; 153
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	9c 93       	st	X, r25
    2104:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	fe 01       	movw	r30, r28
    2108:	e9 59       	subi	r30, 0x99	; 153
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	d1 f6       	brne	.-76     	; 0x20c8 <vMainApp+0x3ce>
    2114:	27 c0       	rjmp	.+78     	; 0x2164 <vMainApp+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	8e 01       	movw	r16, r28
    2118:	09 59       	subi	r16, 0x99	; 153
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	e7 59       	subi	r30, 0x97	; 151
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	f8 01       	movw	r30, r16
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	de 01       	movw	r26, r28
    213a:	ad 59       	subi	r26, 0x9D	; 157
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e9 59       	subi	r30, 0x99	; 153
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	8d 93       	st	X+, r24
    214a:	9c 93       	st	X, r25
    214c:	fe 01       	movw	r30, r28
    214e:	ed 59       	subi	r30, 0x9D	; 157
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <vMainApp+0x45c>
    215a:	fe 01       	movw	r30, r28
    215c:	ed 59       	subi	r30, 0x9D	; 157
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_THREE);
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	63 e0       	ldi	r22, 0x03	; 3
    216a:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    216e:	fe 01       	movw	r30, r28
    2170:	e1 5a       	subi	r30, 0xA1	; 161
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	aa e7       	ldi	r26, 0x7A	; 122
    217a:	b4 e4       	ldi	r27, 0x44	; 68
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	a2 83       	std	Z+2, r26	; 0x02
    2182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	8e 01       	movw	r16, r28
    2186:	05 5a       	subi	r16, 0xA5	; 165
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	fe 01       	movw	r30, r28
    218c:	e1 5a       	subi	r30, 0xA1	; 161
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b2:	fe 01       	movw	r30, r28
    21b4:	e5 5a       	subi	r30, 0xA5	; 165
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	44 f4       	brge	.+16     	; 0x21e0 <vMainApp+0x4e6>
		__ticks = 1;
    21d0:	fe 01       	movw	r30, r28
    21d2:	e7 5a       	subi	r30, 0xA7	; 167
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	64 c0       	rjmp	.+200    	; 0x22a8 <vMainApp+0x5ae>
	else if (__tmp > 65535)
    21e0:	fe 01       	movw	r30, r28
    21e2:	e5 5a       	subi	r30, 0xA5	; 165
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <vMainApp+0x506>
    21fe:	43 c0       	rjmp	.+134    	; 0x2286 <vMainApp+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	fe 01       	movw	r30, r28
    2202:	e1 5a       	subi	r30, 0xA1	; 161
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8e 01       	movw	r16, r28
    2220:	07 5a       	subi	r16, 0xA7	; 167
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	1f c0       	rjmp	.+62     	; 0x2276 <vMainApp+0x57c>
    2238:	fe 01       	movw	r30, r28
    223a:	e9 5a       	subi	r30, 0xA9	; 169
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	88 ec       	ldi	r24, 0xC8	; 200
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	fe 01       	movw	r30, r28
    2248:	e9 5a       	subi	r30, 0xA9	; 169
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <vMainApp+0x556>
    2254:	fe 01       	movw	r30, r28
    2256:	e9 5a       	subi	r30, 0xA9	; 169
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	de 01       	movw	r26, r28
    2260:	a7 5a       	subi	r26, 0xA7	; 167
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e7 5a       	subi	r30, 0xA7	; 167
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	9c 93       	st	X, r25
    2274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	fe 01       	movw	r30, r28
    2278:	e7 5a       	subi	r30, 0xA7	; 167
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	d1 f6       	brne	.-76     	; 0x2238 <vMainApp+0x53e>
    2284:	27 c0       	rjmp	.+78     	; 0x22d4 <vMainApp+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	8e 01       	movw	r16, r28
    2288:	07 5a       	subi	r16, 0xA7	; 167
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5a       	subi	r30, 0xA5	; 165
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	de 01       	movw	r26, r28
    22aa:	ab 5a       	subi	r26, 0xAB	; 171
    22ac:	bf 4f       	sbci	r27, 0xFF	; 255
    22ae:	fe 01       	movw	r30, r28
    22b0:	e7 5a       	subi	r30, 0xA7	; 167
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	8d 93       	st	X+, r24
    22ba:	9c 93       	st	X, r25
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 5a       	subi	r30, 0xAB	; 171
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <vMainApp+0x5cc>
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 5a       	subi	r30, 0xAB	; 171
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_FOUR);
    22d4:	8c e0       	ldi	r24, 0x0C	; 12
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	64 e0       	ldi	r22, 0x04	; 4
    22da:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    22de:	fe 01       	movw	r30, r28
    22e0:	ef 5a       	subi	r30, 0xAF	; 175
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	aa e7       	ldi	r26, 0x7A	; 122
    22ea:	b4 e4       	ldi	r27, 0x44	; 68
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	8e 01       	movw	r16, r28
    22f6:	03 5b       	subi	r16, 0xB3	; 179
    22f8:	1f 4f       	sbci	r17, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	ef 5a       	subi	r30, 0xAF	; 175
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	93 81       	ldd	r25, Z+3	; 0x03
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a ef       	ldi	r20, 0xFA	; 250
    230e:	54 e4       	ldi	r21, 0x44	; 68
    2310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	80 83       	st	Z, r24
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	a2 83       	std	Z+2, r26	; 0x02
    2320:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2322:	fe 01       	movw	r30, r28
    2324:	e3 5b       	subi	r30, 0xB3	; 179
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	44 f4       	brge	.+16     	; 0x2350 <vMainApp+0x656>
		__ticks = 1;
    2340:	fe 01       	movw	r30, r28
    2342:	e5 5b       	subi	r30, 0xB5	; 181
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	64 c0       	rjmp	.+200    	; 0x2418 <vMainApp+0x71e>
	else if (__tmp > 65535)
    2350:	fe 01       	movw	r30, r28
    2352:	e3 5b       	subi	r30, 0xB3	; 179
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	0c f0       	brlt	.+2      	; 0x2370 <vMainApp+0x676>
    236e:	43 c0       	rjmp	.+134    	; 0x23f6 <vMainApp+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	fe 01       	movw	r30, r28
    2372:	ef 5a       	subi	r30, 0xAF	; 175
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8e 01       	movw	r16, r28
    2390:	05 5b       	subi	r16, 0xB5	; 181
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	f8 01       	movw	r30, r16
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	80 83       	st	Z, r24
    23a6:	1f c0       	rjmp	.+62     	; 0x23e6 <vMainApp+0x6ec>
    23a8:	fe 01       	movw	r30, r28
    23aa:	e7 5b       	subi	r30, 0xB7	; 183
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	88 ec       	ldi	r24, 0xC8	; 200
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	fe 01       	movw	r30, r28
    23b8:	e7 5b       	subi	r30, 0xB7	; 183
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <vMainApp+0x6c6>
    23c4:	fe 01       	movw	r30, r28
    23c6:	e7 5b       	subi	r30, 0xB7	; 183
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	de 01       	movw	r26, r28
    23d0:	a5 5b       	subi	r26, 0xB5	; 181
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	fe 01       	movw	r30, r28
    23d6:	e5 5b       	subi	r30, 0xB5	; 181
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	11 96       	adiw	r26, 0x01	; 1
    23e2:	9c 93       	st	X, r25
    23e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	fe 01       	movw	r30, r28
    23e8:	e5 5b       	subi	r30, 0xB5	; 181
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	d1 f6       	brne	.-76     	; 0x23a8 <vMainApp+0x6ae>
    23f4:	27 c0       	rjmp	.+78     	; 0x2444 <vMainApp+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	8e 01       	movw	r16, r28
    23f8:	05 5b       	subi	r16, 0xB5	; 181
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	fe 01       	movw	r30, r28
    23fe:	e3 5b       	subi	r30, 0xB3	; 179
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	f8 01       	movw	r30, r16
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	de 01       	movw	r26, r28
    241a:	a9 5b       	subi	r26, 0xB9	; 185
    241c:	bf 4f       	sbci	r27, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	e5 5b       	subi	r30, 0xB5	; 181
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	8d 93       	st	X+, r24
    242a:	9c 93       	st	X, r25
    242c:	fe 01       	movw	r30, r28
    242e:	e9 5b       	subi	r30, 0xB9	; 185
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <vMainApp+0x73c>
    243a:	fe 01       	movw	r30, r28
    243c:	e9 5b       	subi	r30, 0xB9	; 185
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_FIVE);
    2444:	8c e0       	ldi	r24, 0x0C	; 12
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    244e:	fe 01       	movw	r30, r28
    2450:	ed 5b       	subi	r30, 0xBD	; 189
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	aa e7       	ldi	r26, 0x7A	; 122
    245a:	b4 e4       	ldi	r27, 0x44	; 68
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	8e 01       	movw	r16, r28
    2466:	01 5c       	subi	r16, 0xC1	; 193
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	ed 5b       	subi	r30, 0xBD	; 189
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2492:	fe 01       	movw	r30, r28
    2494:	ff 96       	adiw	r30, 0x3f	; 63
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <vMainApp+0x7be>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	46 c0       	rjmp	.+140    	; 0x2544 <vMainApp+0x84a>
	else if (__tmp > 65535)
    24b8:	fe 01       	movw	r30, r28
    24ba:	ff 96       	adiw	r30, 0x3f	; 63
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	64 f5       	brge	.+88     	; 0x252c <vMainApp+0x832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	fe 01       	movw	r30, r28
    24d6:	ed 5b       	subi	r30, 0xBD	; 189
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e af       	std	Y+62, r25	; 0x3e
    2500:	8d af       	std	Y+61, r24	; 0x3d
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <vMainApp+0x828>
    2504:	88 ec       	ldi	r24, 0xC8	; 200
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c af       	std	Y+60, r25	; 0x3c
    250a:	8b af       	std	Y+59, r24	; 0x3b
    250c:	8b ad       	ldd	r24, Y+59	; 0x3b
    250e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <vMainApp+0x816>
    2514:	9c af       	std	Y+60, r25	; 0x3c
    2516:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8d ad       	ldd	r24, Y+61	; 0x3d
    251a:	9e ad       	ldd	r25, Y+62	; 0x3e
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9e af       	std	Y+62, r25	; 0x3e
    2520:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8d ad       	ldd	r24, Y+61	; 0x3d
    2524:	9e ad       	ldd	r25, Y+62	; 0x3e
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <vMainApp+0x80a>
    252a:	16 c0       	rjmp	.+44     	; 0x2558 <vMainApp+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	fe 01       	movw	r30, r28
    252e:	ff 96       	adiw	r30, 0x3f	; 63
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e af       	std	Y+62, r25	; 0x3e
    2542:	8d af       	std	Y+61, r24	; 0x3d
    2544:	8d ad       	ldd	r24, Y+61	; 0x3d
    2546:	9e ad       	ldd	r25, Y+62	; 0x3e
    2548:	9a af       	std	Y+58, r25	; 0x3a
    254a:	89 af       	std	Y+57, r24	; 0x39
    254c:	89 ad       	ldd	r24, Y+57	; 0x39
    254e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <vMainApp+0x856>
    2554:	9a af       	std	Y+58, r25	; 0x3a
    2556:	89 af       	std	Y+57, r24	; 0x39
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_SIX);
    2558:	8c e0       	ldi	r24, 0x0C	; 12
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	66 e0       	ldi	r22, 0x06	; 6
    255e:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	aa e7       	ldi	r26, 0x7A	; 122
    2568:	b4 e4       	ldi	r27, 0x44	; 68
    256a:	8d ab       	std	Y+53, r24	; 0x35
    256c:	9e ab       	std	Y+54, r25	; 0x36
    256e:	af ab       	std	Y+55, r26	; 0x37
    2570:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6d a9       	ldd	r22, Y+53	; 0x35
    2574:	7e a9       	ldd	r23, Y+54	; 0x36
    2576:	8f a9       	ldd	r24, Y+55	; 0x37
    2578:	98 ad       	ldd	r25, Y+56	; 0x38
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	89 ab       	std	Y+49, r24	; 0x31
    258c:	9a ab       	std	Y+50, r25	; 0x32
    258e:	ab ab       	std	Y+51, r26	; 0x33
    2590:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2592:	69 a9       	ldd	r22, Y+49	; 0x31
    2594:	7a a9       	ldd	r23, Y+50	; 0x32
    2596:	8b a9       	ldd	r24, Y+51	; 0x33
    2598:	9c a9       	ldd	r25, Y+52	; 0x34
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <vMainApp+0x8ba>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	98 ab       	std	Y+48, r25	; 0x30
    25b0:	8f a7       	std	Y+47, r24	; 0x2f
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <vMainApp+0x938>
	else if (__tmp > 65535)
    25b4:	69 a9       	ldd	r22, Y+49	; 0x31
    25b6:	7a a9       	ldd	r23, Y+50	; 0x32
    25b8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ba:	9c a9       	ldd	r25, Y+52	; 0x34
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <vMainApp+0x924>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6d a9       	ldd	r22, Y+53	; 0x35
    25ce:	7e a9       	ldd	r23, Y+54	; 0x36
    25d0:	8f a9       	ldd	r24, Y+55	; 0x37
    25d2:	98 ad       	ldd	r25, Y+56	; 0x38
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	98 ab       	std	Y+48, r25	; 0x30
    25f2:	8f a7       	std	Y+47, r24	; 0x2f
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <vMainApp+0x91a>
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9e a7       	std	Y+46, r25	; 0x2e
    25fc:	8d a7       	std	Y+45, r24	; 0x2d
    25fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2600:	9e a5       	ldd	r25, Y+46	; 0x2e
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <vMainApp+0x908>
    2606:	9e a7       	std	Y+46, r25	; 0x2e
    2608:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	98 ab       	std	Y+48, r25	; 0x30
    2612:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8f a5       	ldd	r24, Y+47	; 0x2f
    2616:	98 a9       	ldd	r25, Y+48	; 0x30
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <vMainApp+0x8fc>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <vMainApp+0x94c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	69 a9       	ldd	r22, Y+49	; 0x31
    2620:	7a a9       	ldd	r23, Y+50	; 0x32
    2622:	8b a9       	ldd	r24, Y+51	; 0x33
    2624:	9c a9       	ldd	r25, Y+52	; 0x34
    2626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	98 ab       	std	Y+48, r25	; 0x30
    2630:	8f a7       	std	Y+47, r24	; 0x2f
    2632:	8f a5       	ldd	r24, Y+47	; 0x2f
    2634:	98 a9       	ldd	r25, Y+48	; 0x30
    2636:	9c a7       	std	Y+44, r25	; 0x2c
    2638:	8b a7       	std	Y+43, r24	; 0x2b
    263a:	8b a5       	ldd	r24, Y+43	; 0x2b
    263c:	9c a5       	ldd	r25, Y+44	; 0x2c
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <vMainApp+0x944>
    2642:	9c a7       	std	Y+44, r25	; 0x2c
    2644:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_SEVEN);
    2646:	8c e0       	ldi	r24, 0x0C	; 12
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	67 e0       	ldi	r22, 0x07	; 7
    264c:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	aa e7       	ldi	r26, 0x7A	; 122
    2656:	b4 e4       	ldi	r27, 0x44	; 68
    2658:	8f a3       	std	Y+39, r24	; 0x27
    265a:	98 a7       	std	Y+40, r25	; 0x28
    265c:	a9 a7       	std	Y+41, r26	; 0x29
    265e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6f a1       	ldd	r22, Y+39	; 0x27
    2662:	78 a5       	ldd	r23, Y+40	; 0x28
    2664:	89 a5       	ldd	r24, Y+41	; 0x29
    2666:	9a a5       	ldd	r25, Y+42	; 0x2a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8b a3       	std	Y+35, r24	; 0x23
    267a:	9c a3       	std	Y+36, r25	; 0x24
    267c:	ad a3       	std	Y+37, r26	; 0x25
    267e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2680:	6b a1       	ldd	r22, Y+35	; 0x23
    2682:	7c a1       	ldd	r23, Y+36	; 0x24
    2684:	8d a1       	ldd	r24, Y+37	; 0x25
    2686:	9e a1       	ldd	r25, Y+38	; 0x26
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <vMainApp+0x9a8>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9a a3       	std	Y+34, r25	; 0x22
    269e:	89 a3       	std	Y+33, r24	; 0x21
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <vMainApp+0xa26>
	else if (__tmp > 65535)
    26a2:	6b a1       	ldd	r22, Y+35	; 0x23
    26a4:	7c a1       	ldd	r23, Y+36	; 0x24
    26a6:	8d a1       	ldd	r24, Y+37	; 0x25
    26a8:	9e a1       	ldd	r25, Y+38	; 0x26
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <vMainApp+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6f a1       	ldd	r22, Y+39	; 0x27
    26bc:	78 a5       	ldd	r23, Y+40	; 0x28
    26be:	89 a5       	ldd	r24, Y+41	; 0x29
    26c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9a a3       	std	Y+34, r25	; 0x22
    26e0:	89 a3       	std	Y+33, r24	; 0x21
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <vMainApp+0xa08>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	98 a3       	std	Y+32, r25	; 0x20
    26ea:	8f 8f       	std	Y+31, r24	; 0x1f
    26ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ee:	98 a1       	ldd	r25, Y+32	; 0x20
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <vMainApp+0x9f6>
    26f4:	98 a3       	std	Y+32, r25	; 0x20
    26f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	89 a1       	ldd	r24, Y+33	; 0x21
    26fa:	9a a1       	ldd	r25, Y+34	; 0x22
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	89 a1       	ldd	r24, Y+33	; 0x21
    2704:	9a a1       	ldd	r25, Y+34	; 0x22
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <vMainApp+0x9ea>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <vMainApp+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6b a1       	ldd	r22, Y+35	; 0x23
    270e:	7c a1       	ldd	r23, Y+36	; 0x24
    2710:	8d a1       	ldd	r24, Y+37	; 0x25
    2712:	9e a1       	ldd	r25, Y+38	; 0x26
    2714:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9a a3       	std	Y+34, r25	; 0x22
    271e:	89 a3       	std	Y+33, r24	; 0x21
    2720:	89 a1       	ldd	r24, Y+33	; 0x21
    2722:	9a a1       	ldd	r25, Y+34	; 0x22
    2724:	9e 8f       	std	Y+30, r25	; 0x1e
    2726:	8d 8f       	std	Y+29, r24	; 0x1d
    2728:	8d 8d       	ldd	r24, Y+29	; 0x1d
    272a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <vMainApp+0xa32>
    2730:	9e 8f       	std	Y+30, r25	; 0x1e
    2732:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_EGIHT);
    2734:	8c e0       	ldi	r24, 0x0C	; 12
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	68 e0       	ldi	r22, 0x08	; 8
    273a:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	aa e7       	ldi	r26, 0x7A	; 122
    2744:	b4 e4       	ldi	r27, 0x44	; 68
    2746:	89 8f       	std	Y+25, r24	; 0x19
    2748:	9a 8f       	std	Y+26, r25	; 0x1a
    274a:	ab 8f       	std	Y+27, r26	; 0x1b
    274c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	69 8d       	ldd	r22, Y+25	; 0x19
    2750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8d 8b       	std	Y+21, r24	; 0x15
    2768:	9e 8b       	std	Y+22, r25	; 0x16
    276a:	af 8b       	std	Y+23, r26	; 0x17
    276c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    276e:	6d 89       	ldd	r22, Y+21	; 0x15
    2770:	7e 89       	ldd	r23, Y+22	; 0x16
    2772:	8f 89       	ldd	r24, Y+23	; 0x17
    2774:	98 8d       	ldd	r25, Y+24	; 0x18
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	2c f4       	brge	.+10     	; 0x2790 <vMainApp+0xa96>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9c 8b       	std	Y+20, r25	; 0x14
    278c:	8b 8b       	std	Y+19, r24	; 0x13
    278e:	3f c0       	rjmp	.+126    	; 0x280e <vMainApp+0xb14>
	else if (__tmp > 65535)
    2790:	6d 89       	ldd	r22, Y+21	; 0x15
    2792:	7e 89       	ldd	r23, Y+22	; 0x16
    2794:	8f 89       	ldd	r24, Y+23	; 0x17
    2796:	98 8d       	ldd	r25, Y+24	; 0x18
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	4c f5       	brge	.+82     	; 0x27fa <vMainApp+0xb00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	69 8d       	ldd	r22, Y+25	; 0x19
    27aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9c 8b       	std	Y+20, r25	; 0x14
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <vMainApp+0xaf6>
    27d2:	88 ec       	ldi	r24, 0xC8	; 200
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9a 8b       	std	Y+18, r25	; 0x12
    27d8:	89 8b       	std	Y+17, r24	; 0x11
    27da:	89 89       	ldd	r24, Y+17	; 0x11
    27dc:	9a 89       	ldd	r25, Y+18	; 0x12
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <vMainApp+0xae4>
    27e2:	9a 8b       	std	Y+18, r25	; 0x12
    27e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e6:	8b 89       	ldd	r24, Y+19	; 0x13
    27e8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	69 f7       	brne	.-38     	; 0x27d2 <vMainApp+0xad8>
    27f8:	14 c0       	rjmp	.+40     	; 0x2822 <vMainApp+0xb28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	98 8b       	std	Y+16, r25	; 0x10
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    2816:	8f 85       	ldd	r24, Y+15	; 0x0f
    2818:	98 89       	ldd	r25, Y+16	; 0x10
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <vMainApp+0xb20>
    281e:	98 8b       	std	Y+16, r25	; 0x10
    2820:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1000);
  SSD_setNumberOnSsd(&ssdAnode, SSD_NINE);
    2822:	8c e0       	ldi	r24, 0x0C	; 12
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	69 e0       	ldi	r22, 0x09	; 9
    2828:	0e 94 91 0a 	call	0x1522	; 0x1522 <SSD_setNumberOnSsd>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	aa e7       	ldi	r26, 0x7A	; 122
    2832:	b4 e4       	ldi	r27, 0x44	; 68
    2834:	8b 87       	std	Y+11, r24	; 0x0b
    2836:	9c 87       	std	Y+12, r25	; 0x0c
    2838:	ad 87       	std	Y+13, r26	; 0x0d
    283a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8f 83       	std	Y+7, r24	; 0x07
    2856:	98 87       	std	Y+8, r25	; 0x08
    2858:	a9 87       	std	Y+9, r26	; 0x09
    285a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285c:	6f 81       	ldd	r22, Y+7	; 0x07
    285e:	78 85       	ldd	r23, Y+8	; 0x08
    2860:	89 85       	ldd	r24, Y+9	; 0x09
    2862:	9a 85       	ldd	r25, Y+10	; 0x0a
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <vMainApp+0xb84>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <vMainApp+0xc02>
	else if (__tmp > 65535)
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <vMainApp+0xbee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6b 85       	ldd	r22, Y+11	; 0x0b
    2898:	7c 85       	ldd	r23, Y+12	; 0x0c
    289a:	8d 85       	ldd	r24, Y+13	; 0x0d
    289c:	9e 85       	ldd	r25, Y+14	; 0x0e
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
    28be:	0f c0       	rjmp	.+30     	; 0x28de <vMainApp+0xbe4>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c 83       	std	Y+4, r25	; 0x04
    28c6:	8b 83       	std	Y+3, r24	; 0x03
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <vMainApp+0xbd2>
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <vMainApp+0xbc6>
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <vMainApp+0xc16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ea:	78 85       	ldd	r23, Y+8	; 0x08
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <vMainApp+0xc0e>
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1000);
}
    2910:	c4 57       	subi	r28, 0x74	; 116
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <main>:
// Date          : 9 Aug 2023
// GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "APPLICATION/app.h"
void main(void) {
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62

  vInitApp();
    2930:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <vInitApp>
  while (1) {
    vInitApp();
    2934:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <vInitApp>
    2938:	fd cf       	rjmp	.-6      	; 0x2934 <main+0xc>

0000293a <__prologue_saves__>:
    293a:	2f 92       	push	r2
    293c:	3f 92       	push	r3
    293e:	4f 92       	push	r4
    2940:	5f 92       	push	r5
    2942:	6f 92       	push	r6
    2944:	7f 92       	push	r7
    2946:	8f 92       	push	r8
    2948:	9f 92       	push	r9
    294a:	af 92       	push	r10
    294c:	bf 92       	push	r11
    294e:	cf 92       	push	r12
    2950:	df 92       	push	r13
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	ca 1b       	sub	r28, r26
    2964:	db 0b       	sbc	r29, r27
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	09 94       	ijmp

00002972 <__epilogue_restores__>:
    2972:	2a 88       	ldd	r2, Y+18	; 0x12
    2974:	39 88       	ldd	r3, Y+17	; 0x11
    2976:	48 88       	ldd	r4, Y+16	; 0x10
    2978:	5f 84       	ldd	r5, Y+15	; 0x0f
    297a:	6e 84       	ldd	r6, Y+14	; 0x0e
    297c:	7d 84       	ldd	r7, Y+13	; 0x0d
    297e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2980:	9b 84       	ldd	r9, Y+11	; 0x0b
    2982:	aa 84       	ldd	r10, Y+10	; 0x0a
    2984:	b9 84       	ldd	r11, Y+9	; 0x09
    2986:	c8 84       	ldd	r12, Y+8	; 0x08
    2988:	df 80       	ldd	r13, Y+7	; 0x07
    298a:	ee 80       	ldd	r14, Y+6	; 0x06
    298c:	fd 80       	ldd	r15, Y+5	; 0x05
    298e:	0c 81       	ldd	r16, Y+4	; 0x04
    2990:	1b 81       	ldd	r17, Y+3	; 0x03
    2992:	aa 81       	ldd	r26, Y+2	; 0x02
    2994:	b9 81       	ldd	r27, Y+1	; 0x01
    2996:	ce 0f       	add	r28, r30
    2998:	d1 1d       	adc	r29, r1
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	ed 01       	movw	r28, r26
    29a6:	08 95       	ret

000029a8 <_exit>:
    29a8:	f8 94       	cli

000029aa <__stop_program>:
    29aa:	ff cf       	rjmp	.-2      	; 0x29aa <__stop_program>
